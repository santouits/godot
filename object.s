	.file	"object.cpp"
# GNU C++14 (GCC) version 9.1.0 (x86_64-linux-gnu)
#	compiled by GNU C version 9.1.0, GMP version 6.1.0, MPFR version 3.1.4, MPC version 1.0.3, isl version isl-0.18-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I . -I main -I platform/x11
# -imultiarch x86_64-linux-gnu -D_GNU_SOURCE core/object.cpp -mtune=generic
# -march=x86-64 -fverbose-asm
# options enabled:  -faggressive-loop-optimizations -fassume-phsa
# -fasynchronous-unwind-tables -fauto-inc-dec -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -fexceptions -ffp-int-builtin-inexact
# -ffunction-cse -fgcse-lm -fgnu-runtime -fgnu-unique -fident
# -finline-atomics -fipa-stack-alignment -fira-hoist-pressure
# -fira-share-save-slots -fira-share-spill-slots -fivopts
# -fkeep-static-consts -fleading-underscore -flifetime-dse
# -flto-odr-type-merging -fmath-errno -fmerge-debug-strings -fpeephole
# -fplt -fprefetch-loop-arrays -freg-struct-return
# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
# -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
# -fshow-column -fshrink-wrap-separate -fsigned-zeros
# -fsplit-ivs-in-unroller -fssa-backprop -fstdarg-opt
# -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math -ftree-cselim
# -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
# -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
# -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -funwind-tables
# -fverbose-asm -fzero-initialized-in-bss -m128bit-long-double -m64 -m80387
# -malign-stringops -mavx256-split-unaligned-load
# -mavx256-split-unaligned-store -mfancy-math-387 -mfp-ret-in-387 -mfxsr
# -mglibc -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone
# -msse -msse2 -mstv -mtls-direct-seg-refs -mvzeroupper

	.text
	.section	.text._ZN11_GlobalLockC2Ev,"axG",@progbits,_ZN11_GlobalLockC5Ev,comdat
	.align 2
	.weak	_ZN11_GlobalLockC2Ev
	.type	_ZN11_GlobalLockC2Ev, @function
_ZN11_GlobalLockC2Ev:
.LFB10:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/typedefs.h:298: 	_GlobalLock() { _global_lock(); }
	call	_Z12_global_lockv	#
# ./core/typedefs.h:298: 	_GlobalLock() { _global_lock(); }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE10:
	.size	_ZN11_GlobalLockC2Ev, .-_ZN11_GlobalLockC2Ev
	.weak	_ZN11_GlobalLockC1Ev
	.set	_ZN11_GlobalLockC1Ev,_ZN11_GlobalLockC2Ev
	.section	.text._ZN11_GlobalLockD2Ev,"axG",@progbits,_ZN11_GlobalLockD5Ev,comdat
	.align 2
	.weak	_ZN11_GlobalLockD2Ev
	.type	_ZN11_GlobalLockD2Ev, @function
_ZN11_GlobalLockD2Ev:
.LFB13:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA13
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/typedefs.h:299: 	~_GlobalLock() { _global_unlock(); }
	call	_Z14_global_unlockv	#
# ./core/typedefs.h:299: 	~_GlobalLock() { _global_unlock(); }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE13:
	.globl	__gxx_personality_v0
	.section	.gcc_except_table._ZN11_GlobalLockD2Ev,"aG",@progbits,_ZN11_GlobalLockD5Ev,comdat
.LLSDA13:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE13-.LLSDACSB13
.LLSDACSB13:
.LLSDACSE13:
	.section	.text._ZN11_GlobalLockD2Ev,"axG",@progbits,_ZN11_GlobalLockD5Ev,comdat
	.size	_ZN11_GlobalLockD2Ev, .-_ZN11_GlobalLockD2Ev
	.weak	_ZN11_GlobalLockD1Ev
	.set	_ZN11_GlobalLockD1Ev,_ZN11_GlobalLockD2Ev
	.section	.text._ZN16DefaultAllocator5allocEm,"axG",@progbits,_ZN16DefaultAllocator5allocEm,comdat
	.weak	_ZN16DefaultAllocator5allocEm
	.type	_ZN16DefaultAllocator5allocEm, @function
_ZN16DefaultAllocator5allocEm:
.LFB364:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_memory, p_memory
# ./core/os/memory.h:68: 	_FORCE_INLINE_ static void *alloc(size_t p_memory) { return Memory::alloc_static(p_memory, false); }
	movq	-8(%rbp), %rax	# p_memory, tmp84
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp84,
	call	_ZN6Memory12alloc_staticEmb	#
# ./core/os/memory.h:68: 	_FORCE_INLINE_ static void *alloc(size_t p_memory) { return Memory::alloc_static(p_memory, false); }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE364:
	.size	_ZN16DefaultAllocator5allocEm, .-_ZN16DefaultAllocator5allocEm
	.section	.text._ZN10CharStringD2Ev,"axG",@progbits,_ZN10CharStringD5Ev,comdat
	.align 2
	.weak	_ZN10CharStringD2Ev
	.type	_ZN10CharStringD2Ev, @function
_ZN10CharStringD2Ev:
.LFB468:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA468
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/ustring.h:77: class CharString {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, -8(%rbp)	# _1, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-8(%rbp), %rax	# this, tmp84
	movq	(%rax), %rdx	# this_5->_ptr, _6
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# tmp85,
	call	_ZN7CowDataIcE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/ustring.h:77: class CharString {
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE468:
	.section	.gcc_except_table._ZN10CharStringD2Ev,"aG",@progbits,_ZN10CharStringD5Ev,comdat
.LLSDA468:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE468-.LLSDACSB468
.LLSDACSB468:
.LLSDACSE468:
	.section	.text._ZN10CharStringD2Ev,"axG",@progbits,_ZN10CharStringD5Ev,comdat
	.size	_ZN10CharStringD2Ev, .-_ZN10CharStringD2Ev
	.weak	_ZN10CharStringD1Ev
	.set	_ZN10CharStringD1Ev,_ZN10CharStringD2Ev
	.section	.text._ZN6StringD2Ev,"axG",@progbits,_ZN6StringD5Ev,comdat
	.align 2
	.weak	_ZN6StringD2Ev
	.type	_ZN6StringD2Ev, @function
_ZN6StringD2Ev:
.LFB498:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA498
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/ustring.h:130: class String {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, -8(%rbp)	# _1, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-8(%rbp), %rax	# this, tmp84
	movq	(%rax), %rdx	# this_5->_ptr, _6
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# tmp85,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/ustring.h:130: class String {
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE498:
	.section	.gcc_except_table._ZN6StringD2Ev,"aG",@progbits,_ZN6StringD5Ev,comdat
.LLSDA498:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE498-.LLSDACSB498
.LLSDACSB498:
.LLSDACSE498:
	.section	.text._ZN6StringD2Ev,"axG",@progbits,_ZN6StringD5Ev,comdat
	.size	_ZN6StringD2Ev, .-_ZN6StringD2Ev
	.weak	_ZN6StringD1Ev
	.set	_ZN6StringD1Ev,_ZN6StringD2Ev
	.section	.text._ZN6StringaSERKS_,"axG",@progbits,_ZN6StringaSERKS_,comdat
	.align 2
	.weak	_ZN6StringaSERKS_
	.type	_ZN6StringaSERKS_, @function
_ZN6StringaSERKS_:
.LFB496:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA496
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -64(%rbp)	# this, this
	movq	%rdx, -72(%rbp)	# p_str, p_str
# ./core/ustring.h:360: 		_cowdata._ref(p_str._cowdata);
	movq	-64(%rbp), %rax	# this, _1
# ./core/ustring.h:360: 		_cowdata._ref(p_str._cowdata);
	movq	-72(%rbp), %rdx	# p_str, _2
# ./core/ustring.h:360: 		_cowdata._ref(p_str._cowdata);
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# _1,
.LEHB0:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE0:
	movq	-56(%rbp), %rax	# <retval>, tmp90
	movq	%rax, -24(%rbp)	# tmp90, this
	movq	-64(%rbp), %rax	# this, tmp91
	movq	%rax, -32(%rbp)	# tmp91, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _10
	movq	%rax, -40(%rbp)	# _10, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp92
	movq	$0, (%rax)	#, this_11->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _12
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _13
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _13,
	movq	%rax, %rdi	# _12,
.LEHB1:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L12	#
.L11:
	movq	%rax, %rbx	#, tmp95
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _14
	movq	%rax, -48(%rbp)	# _14, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp93
	movq	(%rax), %rdx	# this_15->_ptr, _16
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp94
	movq	%rdx, %rsi	# _16,
	movq	%rax, %rdi	# tmp94,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp95, D.61724
	movq	%rax, %rdi	# D.61724,
.LEHB2:
	call	_Unwind_Resume	#
.LEHE2:
.L12:
# ./core/ustring.h:361: 		return *this;
	nop	
# ./core/ustring.h:362: 	}
	movq	-56(%rbp), %rax	# <retval>,
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE496:
	.section	.gcc_except_table._ZN6StringaSERKS_,"aG",@progbits,_ZN6StringaSERKS_,comdat
.LLSDA496:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE496-.LLSDACSB496
.LLSDACSB496:
	.uleb128 .LEHB0-.LFB496
	.uleb128 .LEHE0-.LEHB0
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1-.LFB496
	.uleb128 .LEHE1-.LEHB1
	.uleb128 .L11-.LFB496
	.uleb128 0
	.uleb128 .LEHB2-.LFB496
	.uleb128 .LEHE2-.LEHB2
	.uleb128 0
	.uleb128 0
.LLSDACSE496:
	.section	.text._ZN6StringaSERKS_,"axG",@progbits,_ZN6StringaSERKS_,comdat
	.size	_ZN6StringaSERKS_, .-_ZN6StringaSERKS_
	.section	.text._ZNK10StringNamecvPKvEv,"axG",@progbits,_ZNK10StringNamecvPKvEv,comdat
	.align 2
	.weak	_ZNK10StringNamecvPKvEv
	.type	_ZNK10StringNamecvPKvEv, @function
_ZNK10StringNamecvPKvEv:
.LFB510:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -72(%rbp)	# this, this
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	movq	-72(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_13(D)->_data, _1
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	testq	%rax, %rax	# _1
	je	.L14	#,
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	movq	-72(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_13(D)->_data, _2
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	movq	8(%rax), %rax	# _2->cname, _3
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	testq	%rax, %rax	# _3
	jne	.L15	#,
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	movq	-72(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_13(D)->_data, _4
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	addq	$16, %rax	#, _5
	movq	%rax, -8(%rbp)	# _5, this
	movq	-8(%rbp), %rax	# this, tmp101
	movq	%rax, -16(%rbp)	# tmp101, this
	movq	-16(%rbp), %rax	# this, tmp102
	movq	%rax, -24(%rbp)	# tmp102, this
# ./core/ustring.h:157: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-24(%rbp), %rax	# this, _21
	movq	%rax, -32(%rbp)	# _21, this
	movq	-32(%rbp), %rax	# this, tmp103
	movq	%rax, -40(%rbp)	# tmp103, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-40(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_23->_ptr, _24
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _24
	jne	.L16	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _25
	jmp	.L17	#
.L16:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-40(%rbp), %rax	# this, tmp105
	movq	(%rax), %rax	# this_23->_ptr, _26
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _25
.L17:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -48(%rbp)	# _25, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -48(%rbp)	#, size
	je	.L18	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-48(%rbp), %rax	# size, tmp106
	movl	(%rax), %eax	# *size_30, _31
	jmp	.L19	#
.L18:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _32
.L19:
# ./core/ustring.h:157: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/ustring.h:200: 		int s = size();
	movl	%eax, -52(%rbp)	# _32, s
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	cmpl	$0, -52(%rbp)	#, s
	je	.L21	#,
	movl	-52(%rbp), %eax	# s, tmp107
	subl	$1, %eax	#, iftmp.201_41
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	jmp	.L27	#
.L21:
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	movl	$0, %eax	#, iftmp.201_41
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	nop	
.L27:
# ./core/ustring.h:318: 	_FORCE_INLINE_ bool empty() const { return length() == 0; }
	testl	%eax, %eax	# iftmp.201_41
	sete	%al	#, D.55315
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	xorl	$1, %eax	#, _7
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	testb	%al, %al	# _7
	je	.L14	#,
.L15:
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	movl	$1, %eax	#, iftmp.436_8
	jmp	.L25	#
.L14:
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	movl	$0, %eax	#, iftmp.436_8
.L25:
# ./core/string_name.h:96: 	operator const void *() const { return (_data && (_data->cname || !_data->name.empty())) ? (void *)1 : 0; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE510:
	.size	_ZNK10StringNamecvPKvEv, .-_ZNK10StringNamecvPKvEv
	.text
	.type	_ZL15hash_one_uint64m, @function
_ZL15hash_one_uint64m:
.LFB522:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# p_int, p_int
# ./core/hashfuncs.h:78: 	uint64_t v = p_int;
	movq	-24(%rbp), %rax	# p_int, tmp90
	movq	%rax, -8(%rbp)	# tmp90, v
# ./core/hashfuncs.h:79: 	v = (~v) + (v << 18); // v = (v << 18) - v - 1;
	movq	-8(%rbp), %rax	# v, tmp91
	salq	$18, %rax	#, _1
# ./core/hashfuncs.h:79: 	v = (~v) + (v << 18); // v = (v << 18) - v - 1;
	subq	-8(%rbp), %rax	# v, _2
# ./core/hashfuncs.h:79: 	v = (~v) + (v << 18); // v = (v << 18) - v - 1;
	subq	$1, %rax	#, tmp92
	movq	%rax, -8(%rbp)	# tmp92, v
# ./core/hashfuncs.h:80: 	v = v ^ (v >> 31);
	movq	-8(%rbp), %rax	# v, tmp93
	shrq	$31, %rax	#, _3
# ./core/hashfuncs.h:80: 	v = v ^ (v >> 31);
	xorq	%rax, -8(%rbp)	# _3, v
# ./core/hashfuncs.h:81: 	v = v * 21; // v = (v + (v << 2)) + (v << 4);
	movq	-8(%rbp), %rdx	# v, tmp94
	movq	%rdx, %rax	# tmp94, tmp95
	salq	$2, %rax	#, tmp95
	addq	%rdx, %rax	# tmp94, tmp95
	salq	$2, %rax	#, tmp95
	addq	%rdx, %rax	# tmp94, tmp96
	movq	%rax, -8(%rbp)	# tmp96, v
# ./core/hashfuncs.h:82: 	v = v ^ (v >> 11);
	movq	-8(%rbp), %rax	# v, tmp97
	shrq	$11, %rax	#, _4
# ./core/hashfuncs.h:82: 	v = v ^ (v >> 11);
	xorq	%rax, -8(%rbp)	# _4, v
# ./core/hashfuncs.h:83: 	v = v + (v << 6);
	movq	-8(%rbp), %rax	# v, tmp98
	salq	$6, %rax	#, _5
# ./core/hashfuncs.h:83: 	v = v + (v << 6);
	addq	%rax, -8(%rbp)	# _5, v
# ./core/hashfuncs.h:84: 	v = v ^ (v >> 22);
	movq	-8(%rbp), %rax	# v, tmp99
	shrq	$22, %rax	#, _6
# ./core/hashfuncs.h:84: 	v = v ^ (v >> 22);
	xorq	%rax, -8(%rbp)	# _6, v
# ./core/hashfuncs.h:85: 	return (int)v;
	movq	-8(%rbp), %rax	# v, tmp100
# ./core/hashfuncs.h:86: }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE522:
	.size	_ZL15hash_one_uint64m, .-_ZL15hash_one_uint64m
	.section	.text._ZN12PropertyInfoC2ERKS_,"axG",@progbits,_ZN12PropertyInfoC5ERKS_,comdat
	.align 2
	.weak	_ZN12PropertyInfoC2ERKS_
	.type	_ZN12PropertyInfoC2ERKS_, @function
_ZN12PropertyInfoC2ERKS_:
.LFB1221:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1221
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# D.20218, D.20218
# core/object.h:138: struct PropertyInfo {
	movq	-96(%rbp), %rax	# D.20218, tmp106
	movl	(%rax), %edx	# _17(D)->type, _1
	movq	-88(%rbp), %rax	# this, tmp107
	movl	%edx, (%rax)	# _1, this_15(D)->type
	movq	-88(%rbp), %rax	# this, tmp108
	leaq	8(%rax), %rdx	#, _2
	movq	-96(%rbp), %rax	# D.20218, tmp109
	addq	$8, %rax	#, _3
	movq	%rdx, -24(%rbp)	# _2, this
	movq	%rax, -32(%rbp)	# _3, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _26
	movq	%rax, -40(%rbp)	# _26, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp110
	movq	$0, (%rax)	#, this_27->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _28
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _29
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _29,
	movq	%rax, %rdi	# _28,
.LEHB3:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE3:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L39	#
.L37:
	movq	%rax, %rbx	#, tmp113
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _30
	movq	%rax, -48(%rbp)	# _30, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp111
	movq	(%rax), %rdx	# this_31->_ptr, _32
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp112
	movq	%rdx, %rsi	# _32,
	movq	%rax, %rdi	# tmp112,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp113, D.61726
	movq	%rax, %rdi	# D.61726,
.LEHB4:
	call	_Unwind_Resume	#
.LEHE4:
.L39:
# core/object.h:138: struct PropertyInfo {
	movq	-88(%rbp), %rax	# this, tmp114
	addq	$16, %rax	#, _4
	movq	-96(%rbp), %rdx	# D.20218, tmp115
	addq	$16, %rdx	#, _5
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# _4,
.LEHB5:
	call	_ZN10StringNameC1ERKS_	#
.LEHE5:
# core/object.h:138: struct PropertyInfo {
	movq	-96(%rbp), %rax	# D.20218, tmp116
	movl	24(%rax), %edx	# _17(D)->hint, _6
	movq	-88(%rbp), %rax	# this, tmp117
	movl	%edx, 24(%rax)	# _6, this_15(D)->hint
	movq	-88(%rbp), %rax	# this, tmp118
	leaq	32(%rax), %rdx	#, _7
	movq	-96(%rbp), %rax	# D.20218, tmp119
	addq	$32, %rax	#, _8
	movq	%rdx, -56(%rbp)	# _7, this
	movq	%rax, -64(%rbp)	# _8, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-56(%rbp), %rax	# this, _35
	movq	%rax, -72(%rbp)	# _35, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp120
	movq	$0, (%rax)	#, this_36->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-56(%rbp), %rax	# this, _37
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-64(%rbp), %rdx	# p_str, _38
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _38,
	movq	%rax, %rdi	# _37,
.LEHB6:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE6:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L40	#
.L38:
	movq	%rax, %rbx	#, tmp124
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-56(%rbp), %rax	# this, _39
	movq	%rax, -80(%rbp)	# _39, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp121
	movq	(%rax), %rdx	# this_40->_ptr, _41
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp122
	movq	%rdx, %rsi	# _41,
	movq	%rax, %rdi	# tmp122,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# core/object.h:138: struct PropertyInfo {
	movq	-88(%rbp), %rax	# this, tmp127
	addq	$16, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN10StringNameD1Ev	#
	jmp	.L35	#
.L40:
# core/object.h:138: struct PropertyInfo {
	movq	-96(%rbp), %rax	# D.20218, tmp130
	movl	40(%rax), %edx	# _17(D)->usage, _9
	movq	-88(%rbp), %rax	# this, tmp131
	movl	%edx, 40(%rax)	# _9, this_15(D)->usage
	jmp	.L41	#
.L36:
	movq	%rax, %rbx	#, tmp128
.L35:
# core/object.h:138: struct PropertyInfo {
	movq	-88(%rbp), %rax	# this, tmp132
	addq	$8, %rax	#, _12
	movq	%rax, %rdi	# _12,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp128, D.61727
	movq	%rax, %rdi	# D.61727,
.LEHB7:
	call	_Unwind_Resume	#
.LEHE7:
.L41:
# core/object.h:138: struct PropertyInfo {
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1221:
	.section	.gcc_except_table._ZN12PropertyInfoC2ERKS_,"aG",@progbits,_ZN12PropertyInfoC5ERKS_,comdat
.LLSDA1221:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1221-.LLSDACSB1221
.LLSDACSB1221:
	.uleb128 .LEHB3-.LFB1221
	.uleb128 .LEHE3-.LEHB3
	.uleb128 .L37-.LFB1221
	.uleb128 0
	.uleb128 .LEHB4-.LFB1221
	.uleb128 .LEHE4-.LEHB4
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB5-.LFB1221
	.uleb128 .LEHE5-.LEHB5
	.uleb128 .L36-.LFB1221
	.uleb128 0
	.uleb128 .LEHB6-.LFB1221
	.uleb128 .LEHE6-.LEHB6
	.uleb128 .L38-.LFB1221
	.uleb128 0
	.uleb128 .LEHB7-.LFB1221
	.uleb128 .LEHE7-.LEHB7
	.uleb128 0
	.uleb128 0
.LLSDACSE1221:
	.section	.text._ZN12PropertyInfoC2ERKS_,"axG",@progbits,_ZN12PropertyInfoC5ERKS_,comdat
	.size	_ZN12PropertyInfoC2ERKS_, .-_ZN12PropertyInfoC2ERKS_
	.weak	_ZN12PropertyInfoC1ERKS_
	.set	_ZN12PropertyInfoC1ERKS_,_ZN12PropertyInfoC2ERKS_
	.section	.text._ZN12PropertyInfoD2Ev,"axG",@progbits,_ZN12PropertyInfoD5Ev,comdat
	.align 2
	.weak	_ZN12PropertyInfoD2Ev
	.type	_ZN12PropertyInfoD2Ev, @function
_ZN12PropertyInfoD2Ev:
.LFB1224:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:138: struct PropertyInfo {
	movq	-8(%rbp), %rax	# this, tmp85
	addq	$32, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN6StringD1Ev	#
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$16, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, tmp87
	addq	$8, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN6StringD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1224:
	.size	_ZN12PropertyInfoD2Ev, .-_ZN12PropertyInfoD2Ev
	.weak	_ZN12PropertyInfoD1Ev
	.set	_ZN12PropertyInfoD1Ev,_ZN12PropertyInfoD2Ev
	.section	.text._ZN12PropertyInfoC2Ev,"axG",@progbits,_ZN12PropertyInfoC5Ev,comdat
	.align 2
	.weak	_ZN12PropertyInfoC2Ev
	.type	_ZN12PropertyInfoC2Ev, @function
_ZN12PropertyInfoC2Ev:
.LFB1230:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1230
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
# core/object.h:160: 			usage(PROPERTY_USAGE_DEFAULT) {
	movq	-56(%rbp), %rax	# this, tmp90
	movl	$0, (%rax)	#, this_8(D)->type
	movq	-56(%rbp), %rax	# this, tmp91
	addq	$8, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-24(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp92
	movq	$0, (%rax)	#, this_17->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.h:160: 			usage(PROPERTY_USAGE_DEFAULT) {
	movq	-56(%rbp), %rax	# this, tmp93
	addq	$16, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB8:
	call	_ZN10StringNameC1Ev	#
.LEHE8:
# core/object.h:160: 			usage(PROPERTY_USAGE_DEFAULT) {
	movq	-56(%rbp), %rax	# this, tmp94
	movl	$0, 24(%rax)	#, this_8(D)->hint
	movq	-56(%rbp), %rax	# this, tmp95
	addq	$32, %rax	#, _3
	movq	%rax, -40(%rbp)	# _3, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-40(%rbp), %rax	# this, _19
	movq	%rax, -48(%rbp)	# _19, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp96
	movq	$0, (%rax)	#, this_20->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.h:160: 			usage(PROPERTY_USAGE_DEFAULT) {
	movq	-56(%rbp), %rax	# this, tmp97
	movl	$7, 40(%rax)	#, this_8(D)->usage
# core/object.h:161: 	}
	jmp	.L46	#
.L45:
	movq	%rax, %rbx	#, tmp99
# core/object.h:160: 			usage(PROPERTY_USAGE_DEFAULT) {
	movq	-56(%rbp), %rax	# this, tmp98
	addq	$8, %rax	#, _5
	movq	%rax, %rdi	# _5,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp99, D.61728
	movq	%rax, %rdi	# D.61728,
.LEHB9:
	call	_Unwind_Resume	#
.LEHE9:
.L46:
# core/object.h:161: 	}
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1230:
	.section	.gcc_except_table._ZN12PropertyInfoC2Ev,"aG",@progbits,_ZN12PropertyInfoC5Ev,comdat
.LLSDA1230:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1230-.LLSDACSB1230
.LLSDACSB1230:
	.uleb128 .LEHB8-.LFB1230
	.uleb128 .LEHE8-.LEHB8
	.uleb128 .L45-.LFB1230
	.uleb128 0
	.uleb128 .LEHB9-.LFB1230
	.uleb128 .LEHE9-.LEHB9
	.uleb128 0
	.uleb128 0
.LLSDACSE1230:
	.section	.text._ZN12PropertyInfoC2Ev,"axG",@progbits,_ZN12PropertyInfoC5Ev,comdat
	.size	_ZN12PropertyInfoC2Ev, .-_ZN12PropertyInfoC2Ev
	.weak	_ZN12PropertyInfoC1Ev
	.set	_ZN12PropertyInfoC1Ev,_ZN12PropertyInfoC2Ev
	.section	.text._ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName,"axG",@progbits,_ZN12PropertyInfoC5EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName,comdat
	.align 2
	.weak	_ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName
	.type	_ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName, @function
_ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName:
.LFB1233:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1233
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# this, this
	movl	%esi, -108(%rbp)	# p_type, p_type
	movq	%rdx, -120(%rbp)	# p_name, p_name
	movl	%ecx, -112(%rbp)	# p_hint, p_hint
	movq	%r8, -128(%rbp)	# p_hint_string, p_hint_string
	movl	%r9d, -132(%rbp)	# p_usage, p_usage
# core/object.h:168: 			usage(p_usage) {
	movq	-104(%rbp), %rax	# this, tmp104
	movl	-108(%rbp), %edx	# p_type, tmp105
	movl	%edx, (%rax)	# tmp105, this_16(D)->type
	movq	-104(%rbp), %rax	# this, tmp106
	addq	$8, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-120(%rbp), %rax	# p_name, tmp107
	movq	%rax, -32(%rbp)	# tmp107, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _40
	movq	%rax, -40(%rbp)	# _40, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp108
	movq	$0, (%rax)	#, this_41->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _42
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _43
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _43,
	movq	%rax, %rdi	# _42,
.LEHB10:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE10:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L63	#
.L61:
	movq	%rax, %rbx	#, tmp111
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _44
	movq	%rax, -48(%rbp)	# _44, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp109
	movq	(%rax), %rdx	# this_45->_ptr, _46
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp110
	movq	%rdx, %rsi	# _46,
	movq	%rax, %rdi	# tmp110,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp111, D.61729
	movq	%rax, %rdi	# D.61729,
.LEHB11:
	call	_Unwind_Resume	#
.LEHE11:
.L63:
# core/object.h:168: 			usage(p_usage) {
	movq	-104(%rbp), %rax	# this, tmp112
	addq	$16, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB12:
	call	_ZN10StringNameC1Ev	#
.LEHE12:
# core/object.h:168: 			usage(p_usage) {
	movq	-104(%rbp), %rax	# this, tmp113
	movl	-112(%rbp), %edx	# p_hint, tmp114
	movl	%edx, 24(%rax)	# tmp114, this_16(D)->hint
	movq	-104(%rbp), %rax	# this, tmp115
	addq	$32, %rax	#, _3
	movq	%rax, -56(%rbp)	# _3, this
	movq	-128(%rbp), %rax	# p_hint_string, tmp116
	movq	%rax, -64(%rbp)	# tmp116, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-56(%rbp), %rax	# this, _49
	movq	%rax, -72(%rbp)	# _49, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp117
	movq	$0, (%rax)	#, this_50->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-56(%rbp), %rax	# this, _51
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-64(%rbp), %rdx	# p_str, _52
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _52,
	movq	%rax, %rdi	# _51,
.LEHB13:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE13:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L64	#
.L62:
	movq	%rax, %rbx	#, tmp121
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-56(%rbp), %rax	# this, _53
	movq	%rax, -80(%rbp)	# _53, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp118
	movq	(%rax), %rdx	# this_54->_ptr, _55
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp119
	movq	%rdx, %rsi	# _55,
	movq	%rax, %rdi	# tmp119,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	jmp	.L52	#
.L64:
# core/object.h:168: 			usage(p_usage) {
	movq	-104(%rbp), %rax	# this, tmp124
	movl	-132(%rbp), %edx	# p_usage, tmp125
	movl	%edx, 40(%rax)	# tmp125, this_16(D)->usage
# core/object.h:170: 		if (hint == PROPERTY_HINT_RESOURCE_TYPE) {
	movq	-104(%rbp), %rax	# this, tmp126
	movl	24(%rax), %eax	# this_16(D)->hint, _4
# core/object.h:170: 		if (hint == PROPERTY_HINT_RESOURCE_TYPE) {
	cmpl	$17, %eax	#, _4
	jne	.L53	#,
# core/object.h:171: 			class_name = hint_string;
	movq	-104(%rbp), %rax	# this, tmp127
	leaq	32(%rax), %rdx	#, _5
# core/object.h:171: 			class_name = hint_string;
	leaq	-88(%rbp), %rax	#, tmp128
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp128,
.LEHB14:
	call	_ZN10StringNameC1ERK6String	#
.LEHE14:
# core/object.h:171: 			class_name = hint_string;
	movq	-104(%rbp), %rax	# this, tmp129
	leaq	16(%rax), %rdx	#, _6
	leaq	-88(%rbp), %rax	#, tmp130
	movq	%rax, %rsi	# tmp130,
	movq	%rdx, %rdi	# _6,
.LEHB15:
	call	_ZN10StringNameaSERKS_	#
.LEHE15:
# core/object.h:171: 			class_name = hint_string;
	leaq	-88(%rbp), %rax	#, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN10StringNameD1Ev	#
# core/object.h:175: 	}
	jmp	.L47	#
.L53:
# core/object.h:173: 			class_name = p_class_name;
	movq	-104(%rbp), %rax	# this, tmp132
	addq	$16, %rax	#, _7
	movq	16(%rbp), %rsi	# p_class_name,
	movq	%rax, %rdi	# _7,
.LEHB16:
	call	_ZN10StringNameaSERKS_	#
.LEHE16:
# core/object.h:175: 	}
	jmp	.L47	#
.L60:
	movq	%rax, %rbx	#, tmp135
# core/object.h:171: 			class_name = hint_string;
	leaq	-88(%rbp), %rax	#, tmp133
	movq	%rax, %rdi	# tmp133,
	call	_ZN10StringNameD1Ev	#
	jmp	.L56	#
.L59:
	movq	%rax, %rbx	#, tmp134
.L56:
# core/object.h:168: 			usage(p_usage) {
	movq	-104(%rbp), %rax	# this, tmp138
	addq	$32, %rax	#, _8
	movq	%rax, %rdi	# _8,
	call	_ZN6StringD1Ev	#
.L52:
# core/object.h:168: 			usage(p_usage) {
	movq	-104(%rbp), %rax	# this, tmp139
	addq	$16, %rax	#, _9
	movq	%rax, %rdi	# _9,
	call	_ZN10StringNameD1Ev	#
	jmp	.L57	#
.L58:
	movq	%rax, %rbx	#, tmp140
.L57:
# core/object.h:168: 			usage(p_usage) {
	movq	-104(%rbp), %rax	# this, tmp142
	addq	$8, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp140, D.61730
	movq	%rax, %rdi	# D.61730,
.LEHB17:
	call	_Unwind_Resume	#
.LEHE17:
.L47:
# core/object.h:175: 	}
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1233:
	.section	.gcc_except_table._ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName,"aG",@progbits,_ZN12PropertyInfoC5EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName,comdat
.LLSDA1233:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1233-.LLSDACSB1233
.LLSDACSB1233:
	.uleb128 .LEHB10-.LFB1233
	.uleb128 .LEHE10-.LEHB10
	.uleb128 .L61-.LFB1233
	.uleb128 0
	.uleb128 .LEHB11-.LFB1233
	.uleb128 .LEHE11-.LEHB11
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB12-.LFB1233
	.uleb128 .LEHE12-.LEHB12
	.uleb128 .L58-.LFB1233
	.uleb128 0
	.uleb128 .LEHB13-.LFB1233
	.uleb128 .LEHE13-.LEHB13
	.uleb128 .L62-.LFB1233
	.uleb128 0
	.uleb128 .LEHB14-.LFB1233
	.uleb128 .LEHE14-.LEHB14
	.uleb128 .L59-.LFB1233
	.uleb128 0
	.uleb128 .LEHB15-.LFB1233
	.uleb128 .LEHE15-.LEHB15
	.uleb128 .L60-.LFB1233
	.uleb128 0
	.uleb128 .LEHB16-.LFB1233
	.uleb128 .LEHE16-.LEHB16
	.uleb128 .L59-.LFB1233
	.uleb128 0
	.uleb128 .LEHB17-.LFB1233
	.uleb128 .LEHE17-.LEHB17
	.uleb128 0
	.uleb128 0
.LLSDACSE1233:
	.section	.text._ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName,"axG",@progbits,_ZN12PropertyInfoC5EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName,comdat
	.size	_ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName, .-_ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName
	.weak	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName
	.set	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName,_ZN12PropertyInfoC2EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName
	.section	.text._ZN6Object10ConnectionC2Ev,"axG",@progbits,_ZN6Object10ConnectionC5Ev,comdat
	.align 2
	.weak	_ZN6Object10ConnectionC2Ev
	.type	_ZN6Object10ConnectionC2Ev, @function
_ZN6Object10ConnectionC2Ev:
.LFB1243:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1243
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# this, this
# core/object.h:423: 		Connection() {
	movq	-40(%rbp), %rax	# this, tmp89
	addq	$8, %rax	#, _1
	movq	%rax, %rdi	# _1,
.LEHB18:
	call	_ZN10StringNameC1Ev	#
.LEHE18:
	movq	-40(%rbp), %rax	# this, tmp90
	addq	$24, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB19:
	call	_ZN10StringNameC1Ev	#
.LEHE19:
# core/object.h:423: 		Connection() {
	movq	-40(%rbp), %rax	# this, tmp91
	addq	$40, %rax	#, _3
	movq	%rax, -24(%rbp)	# _3, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$8, %rax	#, _17
	movq	%rax, -32(%rbp)	# _17, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp93
	movq	$0, (%rax)	#, this_18->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.h:424: 			source = NULL;
	movq	-40(%rbp), %rax	# this, tmp94
	movq	$0, (%rax)	#, this_8(D)->source
# core/object.h:425: 			target = NULL;
	movq	-40(%rbp), %rax	# this, tmp95
	movq	$0, 16(%rax)	#, this_8(D)->target
# core/object.h:426: 			flags = 0;
	movq	-40(%rbp), %rax	# this, tmp96
	movl	$0, 32(%rax)	#, this_8(D)->flags
# core/object.h:427: 		}
	jmp	.L68	#
.L67:
	movq	%rax, %rbx	#, tmp98
# core/object.h:423: 		Connection() {
	movq	-40(%rbp), %rax	# this, tmp97
	addq	$8, %rax	#, _5
	movq	%rax, %rdi	# _5,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp98, D.61731
	movq	%rax, %rdi	# D.61731,
.LEHB20:
	call	_Unwind_Resume	#
.LEHE20:
.L68:
# core/object.h:427: 		}
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1243:
	.section	.gcc_except_table._ZN6Object10ConnectionC2Ev,"aG",@progbits,_ZN6Object10ConnectionC5Ev,comdat
.LLSDA1243:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1243-.LLSDACSB1243
.LLSDACSB1243:
	.uleb128 .LEHB18-.LFB1243
	.uleb128 .LEHE18-.LEHB18
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB19-.LFB1243
	.uleb128 .LEHE19-.LEHB19
	.uleb128 .L67-.LFB1243
	.uleb128 0
	.uleb128 .LEHB20-.LFB1243
	.uleb128 .LEHE20-.LEHB20
	.uleb128 0
	.uleb128 0
.LLSDACSE1243:
	.section	.text._ZN6Object10ConnectionC2Ev,"axG",@progbits,_ZN6Object10ConnectionC5Ev,comdat
	.size	_ZN6Object10ConnectionC2Ev, .-_ZN6Object10ConnectionC2Ev
	.weak	_ZN6Object10ConnectionC1Ev
	.set	_ZN6Object10ConnectionC1Ev,_ZN6Object10ConnectionC2Ev
	.section	.text._ZN6Object6Signal6TargetC2ERKmRK10StringName,"axG",@progbits,_ZN6Object6Signal6TargetC5ERKmRK10StringName,comdat
	.align 2
	.weak	_ZN6Object6Signal6TargetC2ERKmRK10StringName
	.type	_ZN6Object6Signal6TargetC2ERKmRK10StringName, @function
_ZN6Object6Signal6TargetC2ERKmRK10StringName:
.LFB1247:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_id, p_id
	movq	%rdx, -24(%rbp)	# p_method, p_method
# core/object.h:452: 					_id(p_id),
	movq	-16(%rbp), %rax	# p_id, tmp85
	movq	(%rax), %rdx	# *p_id_7(D), _1
# core/object.h:453: 					method(p_method) {
	movq	-8(%rbp), %rax	# this, tmp86
	movq	%rdx, (%rax)	# _1, this_5(D)->_id
	movq	-8(%rbp), %rax	# this, tmp87
	leaq	8(%rax), %rdx	#, _2
	movq	-24(%rbp), %rax	# p_method, tmp88
	movq	%rax, %rsi	# tmp88,
	movq	%rdx, %rdi	# _2,
	call	_ZN10StringNameC1ERKS_	#
# core/object.h:454: 			}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1247:
	.size	_ZN6Object6Signal6TargetC2ERKmRK10StringName, .-_ZN6Object6Signal6TargetC2ERKmRK10StringName
	.weak	_ZN6Object6Signal6TargetC1ERKmRK10StringName
	.set	_ZN6Object6Signal6TargetC1ERKmRK10StringName,_ZN6Object6Signal6TargetC2ERKmRK10StringName
	.section	.text._ZN6Object6Signal6TargetC2Ev,"axG",@progbits,_ZN6Object6Signal6TargetC5Ev,comdat
	.align 2
	.weak	_ZN6Object6Signal6TargetC2Ev
	.type	_ZN6Object6Signal6TargetC2Ev, @function
_ZN6Object6Signal6TargetC2Ev:
.LFB1250:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:455: 			Target() { _id = 0; }
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$8, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10StringNameC1Ev	#
# core/object.h:455: 			Target() { _id = 0; }
	movq	-8(%rbp), %rax	# this, tmp85
	movq	$0, (%rax)	#, this_4(D)->_id
# core/object.h:455: 			Target() { _id = 0; }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1250:
	.size	_ZN6Object6Signal6TargetC2Ev, .-_ZN6Object6Signal6TargetC2Ev
	.weak	_ZN6Object6Signal6TargetC1Ev
	.set	_ZN6Object6Signal6TargetC1Ev,_ZN6Object6Signal6TargetC2Ev
	.section	.text._ZN6Object10ConnectionD2Ev,"axG",@progbits,_ZN6Object10ConnectionD5Ev,comdat
	.align 2
	.weak	_ZN6Object10ConnectionD2Ev
	.type	_ZN6Object10ConnectionD2Ev, @function
_ZN6Object10ConnectionD2Ev:
.LFB1254:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1254
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# core/object.h:412: 	struct Connection {
	movq	-24(%rbp), %rax	# this, tmp87
	addq	$40, %rax	#, _1
	movq	%rax, -8(%rbp)	# _1, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-8(%rbp), %rax	# this, tmp88
	addq	$8, %rax	#, _10
	movq	%rax, -16(%rbp)	# _10, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-16(%rbp), %rax	# this, tmp89
	movq	(%rax), %rdx	# this_11->_ptr, _12
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-16(%rbp), %rax	# this, tmp90
	movq	%rdx, %rsi	# _12,
	movq	%rax, %rdi	# tmp90,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.h:412: 	struct Connection {
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$24, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$8, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10StringNameD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1254:
	.section	.gcc_except_table._ZN6Object10ConnectionD2Ev,"aG",@progbits,_ZN6Object10ConnectionD5Ev,comdat
.LLSDA1254:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1254-.LLSDACSB1254
.LLSDACSB1254:
.LLSDACSE1254:
	.section	.text._ZN6Object10ConnectionD2Ev,"axG",@progbits,_ZN6Object10ConnectionD5Ev,comdat
	.size	_ZN6Object10ConnectionD2Ev, .-_ZN6Object10ConnectionD2Ev
	.weak	_ZN6Object10ConnectionD1Ev
	.set	_ZN6Object10ConnectionD1Ev,_ZN6Object10ConnectionD2Ev
	.section	.text._ZN6Object6Signal4SlotC2Ev,"axG",@progbits,_ZN6Object6Signal4SlotC5Ev,comdat
	.align 2
	.weak	_ZN6Object6Signal4SlotC2Ev
	.type	_ZN6Object6Signal4SlotC2Ev, @function
_ZN6Object6Signal4SlotC2Ev:
.LFB1256:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:463: 			Slot() { reference_count = 0; }
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$8, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN6Object10ConnectionC1Ev	#
# core/object.h:463: 			Slot() { reference_count = 0; }
	movq	-8(%rbp), %rax	# this, tmp85
	movl	$0, (%rax)	#, this_4(D)->reference_count
# core/object.h:463: 			Slot() { reference_count = 0; }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1256:
	.size	_ZN6Object6Signal4SlotC2Ev, .-_ZN6Object6Signal4SlotC2Ev
	.weak	_ZN6Object6Signal4SlotC1Ev
	.set	_ZN6Object6Signal4SlotC1Ev,_ZN6Object6Signal4SlotC2Ev
	.section	.text._ZN10MethodInfoD2Ev,"axG",@progbits,_ZN10MethodInfoD5Ev,comdat
	.align 2
	.weak	_ZN10MethodInfoD2Ev
	.type	_ZN10MethodInfoD2Ev, @function
_ZN10MethodInfoD2Ev:
.LFB1260:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1260
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# core/object.h:200: struct MethodInfo {
	movq	-24(%rbp), %rax	# this, tmp88
	addq	$72, %rax	#, _1
	movq	%rax, -8(%rbp)	# _1, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-8(%rbp), %rax	# this, tmp89
	addq	$8, %rax	#, _12
	movq	%rax, -16(%rbp)	# _12, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-16(%rbp), %rax	# this, tmp90
	movq	(%rax), %rdx	# this_13->_ptr, _14
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-16(%rbp), %rax	# this, tmp91
	movq	%rdx, %rsi	# _14,
	movq	%rax, %rdi	# tmp91,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.h:200: struct MethodInfo {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$64, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-24(%rbp), %rax	# this, tmp93
	addq	$8, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN12PropertyInfoD1Ev	#
	movq	-24(%rbp), %rax	# this, _4
	movq	%rax, %rdi	# _4,
	call	_ZN6StringD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1260:
	.section	.gcc_except_table._ZN10MethodInfoD2Ev,"aG",@progbits,_ZN10MethodInfoD5Ev,comdat
.LLSDA1260:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1260-.LLSDACSB1260
.LLSDACSB1260:
.LLSDACSE1260:
	.section	.text._ZN10MethodInfoD2Ev,"axG",@progbits,_ZN10MethodInfoD5Ev,comdat
	.size	_ZN10MethodInfoD2Ev, .-_ZN10MethodInfoD2Ev
	.weak	_ZN10MethodInfoD1Ev
	.set	_ZN10MethodInfoD1Ev,_ZN10MethodInfoD2Ev
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED5Ev,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev:
.LFB1263:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1263
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/vmap.h:38: class VMap {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, -8(%rbp)	# _1, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-8(%rbp), %rax	# this, tmp84
	movq	(%rax), %rdx	# this_5->_ptr, _6
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# tmp85,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vmap.h:38: class VMap {
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1263:
	.section	.gcc_except_table._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev,"aG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED5Ev,comdat
.LLSDA1263:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1263-.LLSDACSB1263
.LLSDACSB1263:
.LLSDACSE1263:
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED5Ev,comdat
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED1Ev
	.set	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED1Ev,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED2Ev
	.section	.text._ZN6Object6SignalC2Ev,"axG",@progbits,_ZN6Object6SignalC5Ev,comdat
	.align 2
	.weak	_ZN6Object6SignalC2Ev
	.type	_ZN6Object6SignalC2Ev, @function
_ZN6Object6SignalC2Ev:
.LFB1265:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# core/object.h:469: 		Signal() { lock = 0; }
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10MethodInfoC1Ev	#
	movq	-24(%rbp), %rax	# this, tmp86
	addq	$88, %rax	#, _2
	movq	%rax, -8(%rbp)	# _2, this
# ./core/vmap.h:206: 	_FORCE_INLINE_ VMap(){};
	movq	-8(%rbp), %rax	# this, _10
	movq	%rax, -16(%rbp)	# _10, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-16(%rbp), %rax	# this, tmp87
	movq	$0, (%rax)	#, this_11->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vmap.h:206: 	_FORCE_INLINE_ VMap(){};
	nop	
# core/object.h:469: 		Signal() { lock = 0; }
	movq	-24(%rbp), %rax	# this, tmp88
	movl	$0, 96(%rax)	#, this_5(D)->lock
# core/object.h:469: 		Signal() { lock = 0; }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1265:
	.size	_ZN6Object6SignalC2Ev, .-_ZN6Object6SignalC2Ev
	.weak	_ZN6Object6SignalC1Ev
	.set	_ZN6Object6SignalC1Ev,_ZN6Object6SignalC2Ev
	.section	.text._ZN6Object18_initialize_classvEv,"axG",@progbits,_ZN6Object18_initialize_classvEv,comdat
	.align 2
	.weak	_ZN6Object18_initialize_classvEv
	.type	_ZN6Object18_initialize_classvEv, @function
_ZN6Object18_initialize_classvEv:
.LFB1267:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:513: 	virtual void _initialize_classv() { initialize_class(); }
	call	_ZN6Object16initialize_classEv	#
# core/object.h:513: 	virtual void _initialize_classv() { initialize_class(); }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1267:
	.size	_ZN6Object18_initialize_classvEv, .-_ZN6Object18_initialize_classvEv
	.section	.text._ZN6Object5_setvERK10StringNameRK7Variant,"axG",@progbits,_ZN6Object5_setvERK10StringNameRK7Variant,comdat
	.align 2
	.weak	_ZN6Object5_setvERK10StringNameRK7Variant
	.type	_ZN6Object5_setvERK10StringNameRK7Variant, @function
_ZN6Object5_setvERK10StringNameRK7Variant:
.LFB1268:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_name, p_name
	movq	%rdx, -24(%rbp)	# p_property, p_property
# core/object.h:514: 	virtual bool _setv(const StringName &p_name, const Variant &p_property) { return false; };
	movl	$0, %eax	#, _1
# core/object.h:514: 	virtual bool _setv(const StringName &p_name, const Variant &p_property) { return false; };
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1268:
	.size	_ZN6Object5_setvERK10StringNameRK7Variant, .-_ZN6Object5_setvERK10StringNameRK7Variant
	.section	.text._ZNK6Object5_getvERK10StringNameR7Variant,"axG",@progbits,_ZNK6Object5_getvERK10StringNameR7Variant,comdat
	.align 2
	.weak	_ZNK6Object5_getvERK10StringNameR7Variant
	.type	_ZNK6Object5_getvERK10StringNameR7Variant, @function
_ZNK6Object5_getvERK10StringNameR7Variant:
.LFB1269:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_name, p_name
	movq	%rdx, -24(%rbp)	# r_property, r_property
# core/object.h:515: 	virtual bool _getv(const StringName &p_name, Variant &r_property) const { return false; };
	movl	$0, %eax	#, _1
# core/object.h:515: 	virtual bool _getv(const StringName &p_name, Variant &r_property) const { return false; };
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1269:
	.size	_ZNK6Object5_getvERK10StringNameR7Variant, .-_ZNK6Object5_getvERK10StringNameR7Variant
	.section	.text._ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb,"axG",@progbits,_ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb,comdat
	.align 2
	.weak	_ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb
	.type	_ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb, @function
_ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb:
.LFB1270:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_list, p_list
	movl	%edx, %eax	# p_reversed, tmp82
	movb	%al, -20(%rbp)	# tmp83, p_reversed
# core/object.h:516: 	virtual void _get_property_listv(List<PropertyInfo> *p_list, bool p_reversed) const {};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1270:
	.size	_ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb, .-_ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb
	.section	.text._ZN6Object14_notificationvEib,"axG",@progbits,_ZN6Object14_notificationvEib,comdat
	.align 2
	.weak	_ZN6Object14_notificationvEib
	.type	_ZN6Object14_notificationvEib, @function
_ZN6Object14_notificationvEib:
.LFB1271:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_notification, p_notification
	movl	%edx, %eax	# p_reversed, tmp82
	movb	%al, -16(%rbp)	# tmp83, p_reversed
# core/object.h:517: 	virtual void _notificationv(int p_notification, bool p_reversed){};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1271:
	.size	_ZN6Object14_notificationvEib, .-_ZN6Object14_notificationvEib
	.section	.text._ZNK6Object16_get_class_namevEv,"axG",@progbits,_ZNK6Object16_get_class_namevEv,comdat
	.align 2
	.weak	_ZNK6Object16_get_class_namevEv
	.type	_ZNK6Object16_get_class_namevEv, @function
_ZNK6Object16_get_class_namevEv:
.LFB1282:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1282
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# this, this
# core/object.h:555: 		if (!_class_name)
	movq	-40(%rbp), %rax	# this, tmp89
	addq	$104, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZNK10StringNamecvPKvEv	#
# core/object.h:555: 		if (!_class_name)
	testq	%rax, %rax	# _2
	sete	%al	#, retval.435_10
# core/object.h:555: 		if (!_class_name)
	testb	%al, %al	# retval.435_10
	je	.L84	#,
# core/object.h:556: 			_class_name = get_class_static();
	leaq	-24(%rbp), %rax	#, tmp90
	movq	%rax, %rdi	# tmp90,
.LEHB21:
	call	_ZN6Object16get_class_staticEv	#
.LEHE21:
# core/object.h:556: 			_class_name = get_class_static();
	leaq	-24(%rbp), %rdx	#, tmp91
	leaq	-32(%rbp), %rax	#, tmp92
	movq	%rdx, %rsi	# tmp91,
	movq	%rax, %rdi	# tmp92,
.LEHB22:
	call	_ZN10StringNameC1ERK6String	#
.LEHE22:
# core/object.h:556: 			_class_name = get_class_static();
	movq	-40(%rbp), %rax	# this, tmp93
	leaq	104(%rax), %rdx	#, _3
	leaq	-32(%rbp), %rax	#, tmp94
	movq	%rax, %rsi	# tmp94,
	movq	%rdx, %rdi	# _3,
.LEHB23:
	call	_ZN10StringNameaSERKS_	#
.LEHE23:
# core/object.h:556: 			_class_name = get_class_static();
	leaq	-32(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN10StringNameD1Ev	#
# core/object.h:556: 			_class_name = get_class_static();
	leaq	-24(%rbp), %rax	#, tmp96
	movq	%rax, %rdi	# tmp96,
	call	_ZN6StringD1Ev	#
.L84:
# core/object.h:557: 		return &_class_name;
	movq	-40(%rbp), %rax	# this, tmp97
	addq	$104, %rax	#, _22
	jmp	.L90	#
.L89:
	movq	%rax, %rbx	#, tmp101
# core/object.h:556: 			_class_name = get_class_static();
	leaq	-32(%rbp), %rax	#, tmp99
	movq	%rax, %rdi	# tmp99,
	call	_ZN10StringNameD1Ev	#
	jmp	.L87	#
.L88:
	movq	%rax, %rbx	#, tmp100
.L87:
# core/object.h:556: 			_class_name = get_class_static();
	leaq	-24(%rbp), %rax	#, tmp104
	movq	%rax, %rdi	# tmp104,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp100, D.61732
	movq	%rax, %rdi	# D.61732,
.LEHB24:
	call	_Unwind_Resume	#
.LEHE24:
.L90:
# core/object.h:558: 	}
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1282:
	.section	.gcc_except_table._ZNK6Object16_get_class_namevEv,"aG",@progbits,_ZNK6Object16_get_class_namevEv,comdat
.LLSDA1282:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1282-.LLSDACSB1282
.LLSDACSB1282:
	.uleb128 .LEHB21-.LFB1282
	.uleb128 .LEHE21-.LEHB21
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB22-.LFB1282
	.uleb128 .LEHE22-.LEHB22
	.uleb128 .L88-.LFB1282
	.uleb128 0
	.uleb128 .LEHB23-.LFB1282
	.uleb128 .LEHE23-.LEHB23
	.uleb128 .L89-.LFB1282
	.uleb128 0
	.uleb128 .LEHB24-.LFB1282
	.uleb128 .LEHE24-.LEHB24
	.uleb128 0
	.uleb128 0
.LLSDACSE1282:
	.section	.text._ZNK6Object16_get_class_namevEv,"axG",@progbits,_ZNK6Object16_get_class_namevEv,comdat
	.size	_ZNK6Object16_get_class_namevEv, .-_ZNK6Object16_get_class_namevEv
	.weak	_ZZN6Object20get_class_ptr_staticEvE3ptr
	.section	.bss._ZZN6Object20get_class_ptr_staticEvE3ptr,"awG",@nobits,_ZZN6Object20get_class_ptr_staticEvE3ptr,comdat
	.align 4
	.type	_ZZN6Object20get_class_ptr_staticEvE3ptr, @gnu_unique_object
	.size	_ZZN6Object20get_class_ptr_staticEvE3ptr, 4
_ZZN6Object20get_class_ptr_staticEvE3ptr:
	.zero	4
	.section	.text._ZN6Object20get_class_ptr_staticEv,"axG",@progbits,_ZN6Object20get_class_ptr_staticEv,comdat
	.weak	_ZN6Object20get_class_ptr_staticEv
	.type	_ZN6Object20get_class_ptr_staticEv, @function
_ZN6Object20get_class_ptr_staticEv:
.LFB1285:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
# core/object.h:587: 		return &ptr;
	movl	$_ZZN6Object20get_class_ptr_staticEvE3ptr, %eax	#, _1
# core/object.h:588: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1285:
	.size	_ZN6Object20get_class_ptr_staticEv, .-_ZN6Object20get_class_ptr_staticEv
	.section	.text._ZNK6Object15get_instance_idEv,"axG",@progbits,_ZNK6Object15get_instance_idEv,comdat
	.align 2
	.weak	_ZNK6Object15get_instance_idEv
	.type	_ZNK6Object15get_instance_idEv, @function
_ZNK6Object15get_instance_idEv:
.LFB1287:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-8(%rbp), %rax	# this, tmp84
	movq	64(%rax), %rax	# this_2(D)->_instance_id, _3
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1287:
	.size	_ZNK6Object15get_instance_idEv, .-_ZNK6Object15get_instance_idEv
	.section	.rodata
.LC0:
	.string	"Object"
	.section	.text._ZN6Object16get_class_staticEv,"axG",@progbits,_ZN6Object16get_class_staticEv,comdat
	.weak	_ZN6Object16get_class_staticEv
	.type	_ZN6Object16get_class_staticEv, @function
_ZN6Object16get_class_staticEv:
.LFB1291:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# .result_ptr, .result_ptr
# core/object.h:635: 	static String get_class_static() { return "Object"; }
	movq	-8(%rbp), %rax	# <retval>, tmp82
	movl	$.LC0, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	_ZN6StringC1EPKc	#
# core/object.h:635: 	static String get_class_static() { return "Object"; }
	movq	-8(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1291:
	.size	_ZN6Object16get_class_staticEv, .-_ZN6Object16get_class_staticEv
	.section	.text._ZN6Object23get_parent_class_staticEv,"axG",@progbits,_ZN6Object23get_parent_class_staticEv,comdat
	.weak	_ZN6Object23get_parent_class_staticEv
	.type	_ZN6Object23get_parent_class_staticEv, @function
_ZN6Object23get_parent_class_staticEv:
.LFB1292:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# .result_ptr, .result_ptr
	movq	-24(%rbp), %rax	# <retval>, tmp83
	movq	%rax, -8(%rbp)	# tmp83, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-8(%rbp), %rax	# this, _4
	movq	%rax, -16(%rbp)	# _4, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-16(%rbp), %rax	# this, tmp84
	movq	$0, (%rax)	#, this_5->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.h:636: 	static String get_parent_class_static() { return String(); }
	nop	
# core/object.h:636: 	static String get_parent_class_static() { return String(); }
	movq	-24(%rbp), %rax	# <retval>,
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1292:
	.size	_ZN6Object23get_parent_class_staticEv, .-_ZN6Object23get_parent_class_staticEv
	.section	.text._ZNK6Object9get_classEv,"axG",@progbits,_ZNK6Object9get_classEv,comdat
	.align 2
	.weak	_ZNK6Object9get_classEv
	.type	_ZNK6Object9get_classEv, @function
_ZNK6Object9get_classEv:
.LFB1294:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -16(%rbp)	# this, this
# core/object.h:639: 	virtual String get_class() const { return "Object"; }
	movq	-8(%rbp), %rax	# <retval>, tmp82
	movl	$.LC0, %esi	#,
	movq	%rax, %rdi	# tmp82,
	call	_ZN6StringC1EPKc	#
# core/object.h:639: 	virtual String get_class() const { return "Object"; }
	movq	-8(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1294:
	.size	_ZNK6Object9get_classEv, .-_ZNK6Object9get_classEv
	.section	.text._ZNK6Object14get_save_classEv,"axG",@progbits,_ZNK6Object14get_save_classEv,comdat
	.align 2
	.weak	_ZNK6Object14get_save_classEv
	.type	_ZNK6Object14get_save_classEv, @function
_ZNK6Object14get_save_classEv:
.LFB1295:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -16(%rbp)	# this, this
# core/object.h:640: 	virtual String get_save_class() const { return get_class(); } //class stored when saving
	movq	-16(%rbp), %rax	# this, tmp85
	movq	(%rax), %rax	# this_5(D)->_vptr.Object, _1
	addq	$64, %rax	#, _2
	movq	(%rax), %rcx	# *_2, _3
	movq	-8(%rbp), %rax	# <retval>, tmp86
	movq	-16(%rbp), %rdx	# this, tmp87
	movq	%rdx, %rsi	# tmp87,
	movq	%rax, %rdi	# tmp86,
	call	*%rcx	# _3
# core/object.h:640: 	virtual String get_save_class() const { return get_class(); } //class stored when saving
	movq	-8(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1295:
	.size	_ZNK6Object14get_save_classEv, .-_ZNK6Object14get_save_classEv
	.section	.text._ZNK6Object8is_classERK6String,"axG",@progbits,_ZNK6Object8is_classERK6String,comdat
	.align 2
	.weak	_ZNK6Object8is_classERK6String
	.type	_ZNK6Object8is_classERK6String, @function
_ZNK6Object8is_classERK6String:
.LFB1296:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_class, p_class
# core/object.h:642: 	virtual bool is_class(const String &p_class) const { return (p_class == "Object"); }
	movq	-16(%rbp), %rax	# p_class, tmp84
	movl	$.LC0, %esi	#,
	movq	%rax, %rdi	# tmp84,
	call	_ZNK6StringeqEPKc	#
# core/object.h:642: 	virtual bool is_class(const String &p_class) const { return (p_class == "Object"); }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1296:
	.size	_ZNK6Object8is_classERK6String, .-_ZNK6Object8is_classERK6String
	.section	.text._ZNK6Object12is_class_ptrEPv,"axG",@progbits,_ZNK6Object12is_class_ptrEPv,comdat
	.align 2
	.weak	_ZNK6Object12is_class_ptrEPv
	.type	_ZNK6Object12is_class_ptrEPv, @function
_ZNK6Object12is_class_ptrEPv:
.LFB1297:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_ptr, p_ptr
# core/object.h:643: 	virtual bool is_class_ptr(void *p_ptr) const { return get_class_ptr_static() == p_ptr; }
	call	_ZN6Object20get_class_ptr_staticEv	#
# core/object.h:643: 	virtual bool is_class_ptr(void *p_ptr) const { return get_class_ptr_static() == p_ptr; }
	cmpq	%rax, -16(%rbp)	# _1, p_ptr
	sete	%al	#, _5
# core/object.h:643: 	virtual bool is_class_ptr(void *p_ptr) const { return get_class_ptr_static() == p_ptr; }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1297:
	.size	_ZNK6Object12is_class_ptrEPv, .-_ZNK6Object12is_class_ptrEPv
	.section	.text._ZN6Object23set_message_translationEb,"axG",@progbits,_ZN6Object23set_message_translationEb,comdat
	.align 2
	.weak	_ZN6Object23set_message_translationEb
	.type	_ZN6Object23set_message_translationEb, @function
_ZN6Object23set_message_translationEb:
.LFB1300:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, %eax	# p_enable, tmp82
	movb	%al, -12(%rbp)	# tmp83, p_enable
# core/object.h:735: 	_FORCE_INLINE_ void set_message_translation(bool p_enable) { _can_translate = p_enable; }
	movq	-8(%rbp), %rax	# this, tmp84
	movzbl	-12(%rbp), %edx	# p_enable, tmp85
	movb	%dl, 72(%rax)	# tmp85, this_2(D)->_can_translate
# core/object.h:735: 	_FORCE_INLINE_ void set_message_translation(bool p_enable) { _can_translate = p_enable; }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1300:
	.size	_ZN6Object23set_message_translationEb, .-_ZN6Object23set_message_translationEb
	.section	.text._ZNK6Object22can_translate_messagesEv,"axG",@progbits,_ZNK6Object22can_translate_messagesEv,comdat
	.align 2
	.weak	_ZNK6Object22can_translate_messagesEv
	.type	_ZNK6Object22can_translate_messagesEv, @function
_ZNK6Object22can_translate_messagesEv:
.LFB1301:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:736: 	_FORCE_INLINE_ bool can_translate_messages() const { return _can_translate; }
	movq	-8(%rbp), %rax	# this, tmp84
	movzbl	72(%rax), %eax	# this_2(D)->_can_translate, _3
# core/object.h:736: 	_FORCE_INLINE_ bool can_translate_messages() const { return _can_translate; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1301:
	.size	_ZNK6Object22can_translate_messagesEv, .-_ZNK6Object22can_translate_messagesEv
	.section	.text._ZN10MethodBind18set_argument_countEi,"axG",@progbits,_ZN10MethodBind18set_argument_countEi,comdat
	.align 2
	.weak	_ZN10MethodBind18set_argument_countEi
	.type	_ZN10MethodBind18set_argument_countEi, @function
_ZN10MethodBind18set_argument_countEi:
.LFB1324:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_count, p_count
# ./core/method_bind.h:236: 	void set_argument_count(int p_count) { argument_count = p_count; }
	movq	-8(%rbp), %rax	# this, tmp82
	movl	-12(%rbp), %edx	# p_count, tmp83
	movl	%edx, 44(%rax)	# tmp83, this_2(D)->argument_count
# ./core/method_bind.h:236: 	void set_argument_count(int p_count) { argument_count = p_count; }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1324:
	.size	_ZN10MethodBind18set_argument_countEi, .-_ZN10MethodBind18set_argument_countEi
	.section	.text._ZNK10MethodBind9is_varargEv,"axG",@progbits,_ZNK10MethodBind9is_varargEv,comdat
	.align 2
	.weak	_ZNK10MethodBind9is_varargEv
	.type	_ZNK10MethodBind9is_varargEv, @function
_ZNK10MethodBind9is_varargEv:
.LFB1335:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.h:296: 	virtual bool is_vararg() const { return false; }
	movl	$0, %eax	#, _1
# ./core/method_bind.h:296: 	virtual bool is_vararg() const { return false; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1335:
	.size	_ZNK10MethodBind9is_varargEv, .-_ZNK10MethodBind9is_varargEv
	.section	.text._ZNK11MethodBind018get_instance_classEv,"axG",@progbits,_ZNK11MethodBind018get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind018get_instance_classEv
	.type	_ZNK11MethodBind018get_instance_classEv, @function
_ZNK11MethodBind018get_instance_classEv:
.LFB1345:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1345
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:33: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L114	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L115	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB25:
	call	_ZN6StringC1EPKc	#
.LEHE25:
	jmp	.L116	#
.L115:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB26:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE26:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L121	#
.L120:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.61740
	movq	%rax, %rdi	# D.61740,
.LEHB27:
	call	_Unwind_Resume	#
.LEHE27:
.L121:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L116	#
.L114:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L116:
# ./core/method_bind.gen.inc:33: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:34: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1345:
	.section	.gcc_except_table._ZNK11MethodBind018get_instance_classEv,"aG",@progbits,_ZNK11MethodBind018get_instance_classEv,comdat
.LLSDA1345:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1345-.LLSDACSB1345
.LLSDACSB1345:
	.uleb128 .LEHB25-.LFB1345
	.uleb128 .LEHE25-.LEHB25
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB26-.LFB1345
	.uleb128 .LEHE26-.LEHB26
	.uleb128 .L120-.LFB1345
	.uleb128 0
	.uleb128 .LEHB27-.LFB1345
	.uleb128 .LEHE27-.LEHB27
	.uleb128 0
	.uleb128 0
.LLSDACSE1345:
	.section	.text._ZNK11MethodBind018get_instance_classEv,"axG",@progbits,_ZNK11MethodBind018get_instance_classEv,comdat
	.size	_ZNK11MethodBind018get_instance_classEv, .-_ZNK11MethodBind018get_instance_classEv
	.section	.text._ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE,"axG",@progbits,_ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE
	.type	_ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE, @function
_ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE:
.LFB1346:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -24(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -32(%rbp)	# this, this
	movq	%rdx, -40(%rbp)	# p_object, p_object
	movq	%rcx, -48(%rbp)	# p_args, p_args
	movl	%r8d, -52(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -64(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:38: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-40(%rbp), %rax	# p_object, tmp98
	movq	%rax, -8(%rbp)	# tmp98, instance
# ./core/method_bind.gen.inc:40: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-64(%rbp), %rax	# r_error, tmp99
	movl	$0, (%rax)	#, r_error_20(D)->error
# ./core/method_bind.gen.inc:59: 		(instance->*method)();
	movq	-32(%rbp), %rax	# this, tmp100
	movq	72(%rax), %rax	# this_22(D)->method.__delta, _1
# ./core/method_bind.gen.inc:59: 		(instance->*method)();
	movq	%rax, %rdx	# _1, _2
	movq	-8(%rbp), %rax	# instance, tmp101
	addq	%rax, %rdx	# tmp101, _3
# ./core/method_bind.gen.inc:59: 		(instance->*method)();
	movq	-32(%rbp), %rax	# this, tmp102
	movq	64(%rax), %rax	# this_22(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L123	#,
# ./core/method_bind.gen.inc:59: 		(instance->*method)();
	movq	-32(%rbp), %rax	# this, tmp103
	movq	72(%rax), %rax	# this_22(D)->method.__delta, _7
	movq	%rax, %rcx	# _7, _8
	movq	-8(%rbp), %rax	# instance, tmp104
	addq	%rcx, %rax	# _8, _9
	movq	(%rax), %rcx	# MEM[(int (*) () * *)_9], _10
	movq	-32(%rbp), %rax	# this, tmp105
	movq	64(%rax), %rax	# this_22(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rcx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.356_16
	jmp	.L124	#
.L123:
# ./core/method_bind.gen.inc:59: 		(instance->*method)();
	movq	-32(%rbp), %rax	# this, tmp106
	movq	64(%rax), %rax	# this_22(D)->method.__pfn, iftmp.356_16
.L124:
# ./core/method_bind.gen.inc:59: 		(instance->*method)();
	movq	%rdx, %rdi	# _3,
	call	*%rax	# iftmp.356_16
	movq	-24(%rbp), %rax	# <retval>, tmp107
	movq	%rax, -16(%rbp)	# tmp107, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-16(%rbp), %rax	# this, tmp108
	movl	$0, (%rax)	#, this_27->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:61: 		return Variant();
	nop	
# ./core/method_bind.gen.inc:62: 	}
	movq	-24(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1346:
	.size	_ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE, .-_ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE
	.section	.text._ZN11MethodBind0C2Ev,"axG",@progbits,_ZN11MethodBind0C5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind0C2Ev
	.type	_ZN11MethodBind0C2Ev, @function
_ZN11MethodBind0C2Ev:
.LFB1348:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1348
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:69: 	MethodBind0 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB28:
	call	_ZN10MethodBindC2Ev	#
.LEHE28:
	movl	$_ZTV11MethodBind0+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.23117._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB29:
	call	_ZN10StringNameC1Ev	#
.LEHE29:
# ./core/method_bind.gen.inc:74: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:79: 	};
	jmp	.L129	#
.L128:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:69: 	MethodBind0 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.61743
	movq	%rax, %rdi	# D.61743,
.LEHB30:
	call	_Unwind_Resume	#
.LEHE30:
.L129:
# ./core/method_bind.gen.inc:79: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1348:
	.section	.gcc_except_table._ZN11MethodBind0C2Ev,"aG",@progbits,_ZN11MethodBind0C5Ev,comdat
.LLSDA1348:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1348-.LLSDACSB1348
.LLSDACSB1348:
	.uleb128 .LEHB28-.LFB1348
	.uleb128 .LEHE28-.LEHB28
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB29-.LFB1348
	.uleb128 .LEHE29-.LEHB29
	.uleb128 .L128-.LFB1348
	.uleb128 0
	.uleb128 .LEHB30-.LFB1348
	.uleb128 .LEHE30-.LEHB30
	.uleb128 0
	.uleb128 0
.LLSDACSE1348:
	.section	.text._ZN11MethodBind0C2Ev,"axG",@progbits,_ZN11MethodBind0C5Ev,comdat
	.size	_ZN11MethodBind0C2Ev, .-_ZN11MethodBind0C2Ev
	.weak	_ZN11MethodBind0C1Ev
	.set	_ZN11MethodBind0C1Ev,_ZN11MethodBind0C2Ev
	.section	.text._ZN12ScriptServer22are_languages_finishedEv,"axG",@progbits,_ZN12ScriptServer22are_languages_finishedEv,comdat
	.weak	_ZN12ScriptServer22are_languages_finishedEv
	.type	_ZN12ScriptServer22are_languages_finishedEv, @function
_ZN12ScriptServer22are_languages_finishedEv:
.LFB2117:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
# ./core/script_language.h:97: 	static bool are_languages_finished() { return languages_finished; }
	movzbl	_ZN12ScriptServer18languages_finishedE(%rip), %eax	# languages_finished, _2
# ./core/script_language.h:97: 	static bool are_languages_finished() { return languages_finished; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2117:
	.size	_ZN12ScriptServer22are_languages_finishedEv, .-_ZN12ScriptServer22are_languages_finishedEv
	.section	.rodata
.LC1:
	.string	"name"
.LC2:
	.string	"class_name"
.LC3:
	.string	"type"
.LC4:
	.string	"hint"
.LC5:
	.string	"hint_string"
.LC6:
	.string	"usage"
	.text
	.align 2
	.globl	_ZNK12PropertyInfocv10DictionaryEv
	.type	_ZNK12PropertyInfocv10DictionaryEv, @function
_ZNK12PropertyInfocv10DictionaryEv:
.LFB2424:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2424
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$408, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -408(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -416(%rbp)	# this, this
# core/object.cpp:67: 	Dictionary d;
	movq	-408(%rbp), %rax	# <retval>, tmp121
	movq	%rax, %rdi	# tmp121,
.LEHB31:
	call	_ZN10DictionaryC1Ev	#
.LEHE31:
# core/object.cpp:68: 	d["name"] = name;
	movq	-416(%rbp), %rax	# this, tmp122
	leaq	8(%rax), %rdx	#, _1
# core/object.cpp:68: 	d["name"] = name;
	leaq	-400(%rbp), %rax	#, tmp123
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# tmp123,
.LEHB32:
	call	_ZN7VariantC1ERK6String	#
.LEHE32:
# core/object.cpp:68: 	d["name"] = name;
	leaq	-368(%rbp), %rax	#, tmp124
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp124,
.LEHB33:
	call	_ZN7VariantC1EPKc	#
.LEHE33:
# core/object.cpp:68: 	d["name"] = name;
	leaq	-368(%rbp), %rdx	#, tmp125
	movq	-408(%rbp), %rax	# <retval>, tmp126
	movq	%rdx, %rsi	# tmp125,
	movq	%rax, %rdi	# tmp126,
.LEHB34:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _2
# core/object.cpp:68: 	d["name"] = name;
	leaq	-400(%rbp), %rax	#, tmp127
	movq	%rax, %rsi	# tmp127,
	movq	%rdx, %rdi	# _2,
	call	_ZN7VariantaSERKS_	#
.LEHE34:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.38682.type, _88
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _88
	je	.L209	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp128
	movq	%rax, %rdi	# tmp128,
	call	_ZN7Variant5clearEv	#
.L209:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.38683.type, _87
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _87
	je	.L210	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp129
	movq	%rax, %rdi	# tmp129,
	call	_ZN7Variant5clearEv	#
.L210:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:69: 	d["class_name"] = class_name;
	movq	-416(%rbp), %rax	# this, tmp130
	leaq	16(%rax), %rdx	#, _3
# core/object.cpp:69: 	d["class_name"] = class_name;
	leaq	-336(%rbp), %rax	#, tmp131
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp131,
.LEHB35:
	call	_ZN7VariantC1ERK10StringName	#
.LEHE35:
# core/object.cpp:69: 	d["class_name"] = class_name;
	leaq	-304(%rbp), %rax	#, tmp132
	movl	$.LC2, %esi	#,
	movq	%rax, %rdi	# tmp132,
.LEHB36:
	call	_ZN7VariantC1EPKc	#
.LEHE36:
# core/object.cpp:69: 	d["class_name"] = class_name;
	leaq	-304(%rbp), %rdx	#, tmp133
	movq	-408(%rbp), %rax	# <retval>, tmp134
	movq	%rdx, %rsi	# tmp133,
	movq	%rax, %rdi	# tmp134,
.LEHB37:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _4
# core/object.cpp:69: 	d["class_name"] = class_name;
	leaq	-336(%rbp), %rax	#, tmp135
	movq	%rax, %rsi	# tmp135,
	movq	%rdx, %rdi	# _4,
	call	_ZN7VariantaSERKS_	#
.LEHE37:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.38684.type, _90
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _90
	je	.L211	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp136
	movq	%rax, %rdi	# tmp136,
	call	_ZN7Variant5clearEv	#
.L211:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.38685.type, _89
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _89
	je	.L212	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp137
	movq	%rax, %rdi	# tmp137,
	call	_ZN7Variant5clearEv	#
.L212:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:70: 	d["type"] = type;
	movq	-416(%rbp), %rax	# this, tmp138
	movl	(%rax), %eax	# this_31(D)->type, _5
# core/object.cpp:70: 	d["type"] = type;
	movl	%eax, %edx	# _5, _6
	leaq	-272(%rbp), %rax	#, tmp139
	movl	%edx, %esi	# _6,
	movq	%rax, %rdi	# tmp139,
.LEHB38:
	call	_ZN7VariantC1Ei	#
.LEHE38:
# core/object.cpp:70: 	d["type"] = type;
	leaq	-240(%rbp), %rax	#, tmp140
	movl	$.LC3, %esi	#,
	movq	%rax, %rdi	# tmp140,
.LEHB39:
	call	_ZN7VariantC1EPKc	#
.LEHE39:
# core/object.cpp:70: 	d["type"] = type;
	leaq	-240(%rbp), %rdx	#, tmp141
	movq	-408(%rbp), %rax	# <retval>, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
.LEHB40:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _7
# core/object.cpp:70: 	d["type"] = type;
	leaq	-272(%rbp), %rax	#, tmp143
	movq	%rax, %rsi	# tmp143,
	movq	%rdx, %rdi	# _7,
	call	_ZN7VariantaSERKS_	#
.LEHE40:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.38686.type, _92
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _92
	je	.L213	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp144
	movq	%rax, %rdi	# tmp144,
	call	_ZN7Variant5clearEv	#
.L213:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.38687.type, _91
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _91
	je	.L214	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp145
	movq	%rax, %rdi	# tmp145,
	call	_ZN7Variant5clearEv	#
.L214:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:71: 	d["hint"] = hint;
	movq	-416(%rbp), %rax	# this, tmp146
	movl	24(%rax), %eax	# this_31(D)->hint, _8
# core/object.cpp:71: 	d["hint"] = hint;
	movl	%eax, %edx	# _8, _9
	leaq	-208(%rbp), %rax	#, tmp147
	movl	%edx, %esi	# _9,
	movq	%rax, %rdi	# tmp147,
.LEHB41:
	call	_ZN7VariantC1Ei	#
.LEHE41:
# core/object.cpp:71: 	d["hint"] = hint;
	leaq	-176(%rbp), %rax	#, tmp148
	movl	$.LC4, %esi	#,
	movq	%rax, %rdi	# tmp148,
.LEHB42:
	call	_ZN7VariantC1EPKc	#
.LEHE42:
# core/object.cpp:71: 	d["hint"] = hint;
	leaq	-176(%rbp), %rdx	#, tmp149
	movq	-408(%rbp), %rax	# <retval>, tmp150
	movq	%rdx, %rsi	# tmp149,
	movq	%rax, %rdi	# tmp150,
.LEHB43:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _10
# core/object.cpp:71: 	d["hint"] = hint;
	leaq	-208(%rbp), %rax	#, tmp151
	movq	%rax, %rsi	# tmp151,
	movq	%rdx, %rdi	# _10,
	call	_ZN7VariantaSERKS_	#
.LEHE43:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.38688.type, _94
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _94
	je	.L215	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp152
	movq	%rax, %rdi	# tmp152,
	call	_ZN7Variant5clearEv	#
.L215:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.38689.type, _93
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _93
	je	.L216	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp153
	movq	%rax, %rdi	# tmp153,
	call	_ZN7Variant5clearEv	#
.L216:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:72: 	d["hint_string"] = hint_string;
	movq	-416(%rbp), %rax	# this, tmp154
	leaq	32(%rax), %rdx	#, _11
# core/object.cpp:72: 	d["hint_string"] = hint_string;
	leaq	-144(%rbp), %rax	#, tmp155
	movq	%rdx, %rsi	# _11,
	movq	%rax, %rdi	# tmp155,
.LEHB44:
	call	_ZN7VariantC1ERK6String	#
.LEHE44:
# core/object.cpp:72: 	d["hint_string"] = hint_string;
	leaq	-112(%rbp), %rax	#, tmp156
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# tmp156,
.LEHB45:
	call	_ZN7VariantC1EPKc	#
.LEHE45:
# core/object.cpp:72: 	d["hint_string"] = hint_string;
	leaq	-112(%rbp), %rdx	#, tmp157
	movq	-408(%rbp), %rax	# <retval>, tmp158
	movq	%rdx, %rsi	# tmp157,
	movq	%rax, %rdi	# tmp158,
.LEHB46:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _12
# core/object.cpp:72: 	d["hint_string"] = hint_string;
	leaq	-144(%rbp), %rax	#, tmp159
	movq	%rax, %rsi	# tmp159,
	movq	%rdx, %rdi	# _12,
	call	_ZN7VariantaSERKS_	#
.LEHE46:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.38690.type, _96
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _96
	je	.L217	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp160
	movq	%rax, %rdi	# tmp160,
	call	_ZN7Variant5clearEv	#
.L217:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.38691.type, _95
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _95
	je	.L218	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp161
	movq	%rax, %rdi	# tmp161,
	call	_ZN7Variant5clearEv	#
.L218:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:73: 	d["usage"] = usage;
	movq	-416(%rbp), %rax	# this, tmp162
	movl	40(%rax), %edx	# this_31(D)->usage, _13
# core/object.cpp:73: 	d["usage"] = usage;
	leaq	-80(%rbp), %rax	#, tmp163
	movl	%edx, %esi	# _13,
	movq	%rax, %rdi	# tmp163,
.LEHB47:
	call	_ZN7VariantC1Ej	#
.LEHE47:
# core/object.cpp:73: 	d["usage"] = usage;
	leaq	-48(%rbp), %rax	#, tmp164
	movl	$.LC6, %esi	#,
	movq	%rax, %rdi	# tmp164,
.LEHB48:
	call	_ZN7VariantC1EPKc	#
.LEHE48:
# core/object.cpp:73: 	d["usage"] = usage;
	leaq	-48(%rbp), %rdx	#, tmp165
	movq	-408(%rbp), %rax	# <retval>, tmp166
	movq	%rdx, %rsi	# tmp165,
	movq	%rax, %rdi	# tmp166,
.LEHB49:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _14
# core/object.cpp:73: 	d["usage"] = usage;
	leaq	-80(%rbp), %rax	#, tmp167
	movq	%rax, %rsi	# tmp167,
	movq	%rdx, %rdi	# _14,
	call	_ZN7VariantaSERKS_	#
.LEHE49:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.38692.type, _98
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _98
	je	.L219	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp168
	movq	%rax, %rdi	# tmp168,
	call	_ZN7Variant5clearEv	#
.L219:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38693.type, _97
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _97
	je	.L220	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp169
	movq	%rax, %rdi	# tmp169,
	call	_ZN7Variant5clearEv	#
.L220:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:74: 	return d;
	jmp	.L208	#
.L173:
	movq	%rax, %rbx	#, tmp172
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.38682.type, _99
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _99
	je	.L221	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp170
	movq	%rax, %rdi	# tmp170,
	call	_ZN7Variant5clearEv	#
.L221:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L148	#
.L172:
	movq	%rax, %rbx	#, tmp171
.L148:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.38683.type, _100
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _100
	je	.L222	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp175
	movq	%rax, %rdi	# tmp175,
	call	_ZN7Variant5clearEv	#
.L222:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L150	#
.L175:
	movq	%rax, %rbx	#, tmp180
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.38684.type, _101
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _101
	je	.L223	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp178
	movq	%rax, %rdi	# tmp178,
	call	_ZN7Variant5clearEv	#
.L223:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L153	#
.L174:
	movq	%rax, %rbx	#, tmp179
.L153:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.38685.type, _102
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _102
	je	.L224	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp183
	movq	%rax, %rdi	# tmp183,
	call	_ZN7Variant5clearEv	#
.L224:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L150	#
.L177:
	movq	%rax, %rbx	#, tmp186
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.38686.type, _103
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _103
	je	.L225	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp184
	movq	%rax, %rdi	# tmp184,
	call	_ZN7Variant5clearEv	#
.L225:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L157	#
.L176:
	movq	%rax, %rbx	#, tmp185
.L157:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.38687.type, _104
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _104
	je	.L226	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN7Variant5clearEv	#
.L226:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L150	#
.L179:
	movq	%rax, %rbx	#, tmp192
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.38688.type, _105
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _105
	je	.L227	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN7Variant5clearEv	#
.L227:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L161	#
.L178:
	movq	%rax, %rbx	#, tmp191
.L161:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.38689.type, _106
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _106
	je	.L228	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN7Variant5clearEv	#
.L228:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L150	#
.L181:
	movq	%rax, %rbx	#, tmp198
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.38690.type, _107
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _107
	je	.L229	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN7Variant5clearEv	#
.L229:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L165	#
.L180:
	movq	%rax, %rbx	#, tmp197
.L165:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.38691.type, _108
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _108
	je	.L230	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp201
	movq	%rax, %rdi	# tmp201,
	call	_ZN7Variant5clearEv	#
.L230:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L150	#
.L183:
	movq	%rax, %rbx	#, tmp204
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.38692.type, _109
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _109
	je	.L231	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp202
	movq	%rax, %rdi	# tmp202,
	call	_ZN7Variant5clearEv	#
.L231:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L169	#
.L182:
	movq	%rax, %rbx	#, tmp203
.L169:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38693.type, _110
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _110
	je	.L232	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp207
	movq	%rax, %rdi	# tmp207,
	call	_ZN7Variant5clearEv	#
.L232:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L150	#
.L171:
	movq	%rax, %rbx	#, tmp176
.L150:
	movq	-408(%rbp), %rax	# <retval>, tmp208
	movq	%rax, %rdi	# tmp208,
	call	_ZN10DictionaryD1Ev	#
	movq	%rbx, %rax	# tmp176, D.61744
	movq	%rax, %rdi	# D.61744,
.LEHB50:
	call	_Unwind_Resume	#
.LEHE50:
.L208:
# core/object.cpp:75: }
	movq	-408(%rbp), %rax	# <retval>,
	addq	$408, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2424:
	.section	.gcc_except_table,"a",@progbits
.LLSDA2424:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2424-.LLSDACSB2424
.LLSDACSB2424:
	.uleb128 .LEHB31-.LFB2424
	.uleb128 .LEHE31-.LEHB31
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB32-.LFB2424
	.uleb128 .LEHE32-.LEHB32
	.uleb128 .L171-.LFB2424
	.uleb128 0
	.uleb128 .LEHB33-.LFB2424
	.uleb128 .LEHE33-.LEHB33
	.uleb128 .L172-.LFB2424
	.uleb128 0
	.uleb128 .LEHB34-.LFB2424
	.uleb128 .LEHE34-.LEHB34
	.uleb128 .L173-.LFB2424
	.uleb128 0
	.uleb128 .LEHB35-.LFB2424
	.uleb128 .LEHE35-.LEHB35
	.uleb128 .L171-.LFB2424
	.uleb128 0
	.uleb128 .LEHB36-.LFB2424
	.uleb128 .LEHE36-.LEHB36
	.uleb128 .L174-.LFB2424
	.uleb128 0
	.uleb128 .LEHB37-.LFB2424
	.uleb128 .LEHE37-.LEHB37
	.uleb128 .L175-.LFB2424
	.uleb128 0
	.uleb128 .LEHB38-.LFB2424
	.uleb128 .LEHE38-.LEHB38
	.uleb128 .L171-.LFB2424
	.uleb128 0
	.uleb128 .LEHB39-.LFB2424
	.uleb128 .LEHE39-.LEHB39
	.uleb128 .L176-.LFB2424
	.uleb128 0
	.uleb128 .LEHB40-.LFB2424
	.uleb128 .LEHE40-.LEHB40
	.uleb128 .L177-.LFB2424
	.uleb128 0
	.uleb128 .LEHB41-.LFB2424
	.uleb128 .LEHE41-.LEHB41
	.uleb128 .L171-.LFB2424
	.uleb128 0
	.uleb128 .LEHB42-.LFB2424
	.uleb128 .LEHE42-.LEHB42
	.uleb128 .L178-.LFB2424
	.uleb128 0
	.uleb128 .LEHB43-.LFB2424
	.uleb128 .LEHE43-.LEHB43
	.uleb128 .L179-.LFB2424
	.uleb128 0
	.uleb128 .LEHB44-.LFB2424
	.uleb128 .LEHE44-.LEHB44
	.uleb128 .L171-.LFB2424
	.uleb128 0
	.uleb128 .LEHB45-.LFB2424
	.uleb128 .LEHE45-.LEHB45
	.uleb128 .L180-.LFB2424
	.uleb128 0
	.uleb128 .LEHB46-.LFB2424
	.uleb128 .LEHE46-.LEHB46
	.uleb128 .L181-.LFB2424
	.uleb128 0
	.uleb128 .LEHB47-.LFB2424
	.uleb128 .LEHE47-.LEHB47
	.uleb128 .L171-.LFB2424
	.uleb128 0
	.uleb128 .LEHB48-.LFB2424
	.uleb128 .LEHE48-.LEHB48
	.uleb128 .L182-.LFB2424
	.uleb128 0
	.uleb128 .LEHB49-.LFB2424
	.uleb128 .LEHE49-.LEHB49
	.uleb128 .L183-.LFB2424
	.uleb128 0
	.uleb128 .LEHB50-.LFB2424
	.uleb128 .LEHE50-.LEHB50
	.uleb128 0
	.uleb128 0
.LLSDACSE2424:
	.text
	.size	_ZNK12PropertyInfocv10DictionaryEv, .-_ZNK12PropertyInfocv10DictionaryEv
	.align 2
	.globl	_ZN12PropertyInfo9from_dictERK10Dictionary
	.type	_ZN12PropertyInfo9from_dictERK10Dictionary, @function
_ZN12PropertyInfo9from_dictERK10Dictionary:
.LFB2425:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2425
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$440, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -440(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -448(%rbp)	# p_dict, p_dict
# core/object.cpp:79: 	PropertyInfo pi;
	movq	-440(%rbp), %rax	# <retval>, tmp127
	movq	%rax, %rdi	# tmp127,
.LEHB51:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE51:
# core/object.cpp:81: 	if (p_dict.has("type"))
	leaq	-432(%rbp), %rax	#, tmp128
	movl	$.LC3, %esi	#,
	movq	%rax, %rdi	# tmp128,
.LEHB52:
	call	_ZN7VariantC1EPKc	#
.LEHE52:
# core/object.cpp:81: 	if (p_dict.has("type"))
	leaq	-432(%rbp), %rdx	#, tmp129
	movq	-448(%rbp), %rax	# p_dict, tmp130
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp130,
.LEHB53:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE53:
	movl	%eax, %ebx	#, _34
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.38700.type, _130
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _130
	je	.L315	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN7Variant5clearEv	#
.L315:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:81: 	if (p_dict.has("type"))
	testb	%bl, %bl	# _34
	je	.L235	#,
# core/object.cpp:82: 		pi.type = Variant::Type(int(p_dict["type"]));
	leaq	-400(%rbp), %rax	#, tmp132
	movl	$.LC3, %esi	#,
	movq	%rax, %rdi	# tmp132,
.LEHB54:
	call	_ZN7VariantC1EPKc	#
.LEHE54:
# core/object.cpp:82: 		pi.type = Variant::Type(int(p_dict["type"]));
	leaq	-400(%rbp), %rdx	#, tmp133
	movq	-448(%rbp), %rax	# p_dict, tmp134
	movq	%rdx, %rsi	# tmp133,
	movq	%rax, %rdi	# tmp134,
.LEHB55:
	call	_ZNK10DictionaryixERK7Variant	#
# core/object.cpp:82: 		pi.type = Variant::Type(int(p_dict["type"]));
	movq	%rax, %rdi	# _1,
	call	_ZNK7VariantcviEv	#
.LEHE55:
# core/object.cpp:82: 		pi.type = Variant::Type(int(p_dict["type"]));
	movl	%eax, %edx	# _2, _3
# core/object.cpp:82: 		pi.type = Variant::Type(int(p_dict["type"]));
	movq	-440(%rbp), %rax	# <retval>, tmp135
	movl	%edx, (%rax)	# _3, pi_29(D)->type
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.38701.type, _131
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _131
	je	.L316	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp136
	movq	%rax, %rdi	# tmp136,
	call	_ZN7Variant5clearEv	#
.L316:
# ./core/variant.h:423: 	}
	nop	
.L235:
# core/object.cpp:84: 	if (p_dict.has("name"))
	leaq	-368(%rbp), %rax	#, tmp137
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp137,
.LEHB56:
	call	_ZN7VariantC1EPKc	#
.LEHE56:
# core/object.cpp:84: 	if (p_dict.has("name"))
	leaq	-368(%rbp), %rdx	#, tmp138
	movq	-448(%rbp), %rax	# p_dict, tmp139
	movq	%rdx, %rsi	# tmp138,
	movq	%rax, %rdi	# tmp139,
.LEHB57:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE57:
	movl	%eax, %ebx	#, _47
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.38702.type, _132
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _132
	je	.L317	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp140
	movq	%rax, %rdi	# tmp140,
	call	_ZN7Variant5clearEv	#
.L317:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:84: 	if (p_dict.has("name"))
	testb	%bl, %bl	# _47
	je	.L238	#,
# core/object.cpp:85: 		pi.name = p_dict["name"];
	leaq	-320(%rbp), %rax	#, tmp141
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp141,
.LEHB58:
	call	_ZN7VariantC1EPKc	#
.LEHE58:
# core/object.cpp:85: 		pi.name = p_dict["name"];
	leaq	-320(%rbp), %rdx	#, tmp142
	movq	-448(%rbp), %rax	# p_dict, tmp143
	movq	%rdx, %rsi	# tmp142,
	movq	%rax, %rdi	# tmp143,
.LEHB59:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _4
# core/object.cpp:85: 		pi.name = p_dict["name"];
	leaq	-328(%rbp), %rax	#, tmp144
	movq	%rdx, %rsi	# _4,
	movq	%rax, %rdi	# tmp144,
	call	_ZNK7Variantcv6StringEv	#
.LEHE59:
# core/object.cpp:85: 		pi.name = p_dict["name"];
	movq	-440(%rbp), %rax	# <retval>, tmp145
	leaq	8(%rax), %rcx	#, _5
	leaq	-336(%rbp), %rax	#, tmp146
	leaq	-328(%rbp), %rdx	#, tmp147
	movq	%rcx, %rsi	# _5,
	movq	%rax, %rdi	# tmp146,
.LEHB60:
	call	_ZN6StringaSERKS_	#
.LEHE60:
# core/object.cpp:85: 		pi.name = p_dict["name"];
	leaq	-336(%rbp), %rax	#, tmp148
	movq	%rax, %rdi	# tmp148,
	call	_ZN6StringD1Ev	#
	leaq	-328(%rbp), %rax	#, tmp149
	movq	%rax, %rdi	# tmp149,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-320(%rbp), %eax	# D.38703.type, _133
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _133
	je	.L318	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-320(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN7Variant5clearEv	#
.L318:
# ./core/variant.h:423: 	}
	nop	
.L238:
# core/object.cpp:87: 	if (p_dict.has("class_name"))
	leaq	-288(%rbp), %rax	#, tmp151
	movl	$.LC2, %esi	#,
	movq	%rax, %rdi	# tmp151,
.LEHB61:
	call	_ZN7VariantC1EPKc	#
.LEHE61:
# core/object.cpp:87: 	if (p_dict.has("class_name"))
	leaq	-288(%rbp), %rdx	#, tmp152
	movq	-448(%rbp), %rax	# p_dict, tmp153
	movq	%rdx, %rsi	# tmp152,
	movq	%rax, %rdi	# tmp153,
.LEHB62:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE62:
	movl	%eax, %ebx	#, _65
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.38706.type, _134
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _134
	je	.L319	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp154
	movq	%rax, %rdi	# tmp154,
	call	_ZN7Variant5clearEv	#
.L319:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:87: 	if (p_dict.has("class_name"))
	testb	%bl, %bl	# _65
	je	.L241	#,
# core/object.cpp:88: 		pi.class_name = p_dict["class_name"];
	leaq	-256(%rbp), %rax	#, tmp155
	movl	$.LC2, %esi	#,
	movq	%rax, %rdi	# tmp155,
.LEHB63:
	call	_ZN7VariantC1EPKc	#
.LEHE63:
# core/object.cpp:88: 		pi.class_name = p_dict["class_name"];
	leaq	-256(%rbp), %rdx	#, tmp156
	movq	-448(%rbp), %rax	# p_dict, tmp157
	movq	%rdx, %rsi	# tmp156,
	movq	%rax, %rdi	# tmp157,
.LEHB64:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _6
# core/object.cpp:88: 		pi.class_name = p_dict["class_name"];
	leaq	-264(%rbp), %rax	#, tmp158
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# tmp158,
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE64:
# core/object.cpp:88: 		pi.class_name = p_dict["class_name"];
	movq	-440(%rbp), %rax	# <retval>, tmp159
	leaq	16(%rax), %rdx	#, _7
	leaq	-264(%rbp), %rax	#, tmp160
	movq	%rax, %rsi	# tmp160,
	movq	%rdx, %rdi	# _7,
.LEHB65:
	call	_ZN10StringNameaSERKS_	#
.LEHE65:
# core/object.cpp:88: 		pi.class_name = p_dict["class_name"];
	leaq	-264(%rbp), %rax	#, tmp161
	movq	%rax, %rdi	# tmp161,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-256(%rbp), %eax	# D.38707.type, _135
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _135
	je	.L320	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-256(%rbp), %rax	#, tmp162
	movq	%rax, %rdi	# tmp162,
	call	_ZN7Variant5clearEv	#
.L320:
# ./core/variant.h:423: 	}
	nop	
.L241:
# core/object.cpp:90: 	if (p_dict.has("hint"))
	leaq	-224(%rbp), %rax	#, tmp163
	movl	$.LC4, %esi	#,
	movq	%rax, %rdi	# tmp163,
.LEHB66:
	call	_ZN7VariantC1EPKc	#
.LEHE66:
# core/object.cpp:90: 	if (p_dict.has("hint"))
	leaq	-224(%rbp), %rdx	#, tmp164
	movq	-448(%rbp), %rax	# p_dict, tmp165
	movq	%rdx, %rsi	# tmp164,
	movq	%rax, %rdi	# tmp165,
.LEHB67:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE67:
	movl	%eax, %ebx	#, _81
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# D.38709.type, _136
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _136
	je	.L321	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp166
	movq	%rax, %rdi	# tmp166,
	call	_ZN7Variant5clearEv	#
.L321:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:90: 	if (p_dict.has("hint"))
	testb	%bl, %bl	# _81
	je	.L244	#,
# core/object.cpp:91: 		pi.hint = PropertyHint(int(p_dict["hint"]));
	leaq	-192(%rbp), %rax	#, tmp167
	movl	$.LC4, %esi	#,
	movq	%rax, %rdi	# tmp167,
.LEHB68:
	call	_ZN7VariantC1EPKc	#
.LEHE68:
# core/object.cpp:91: 		pi.hint = PropertyHint(int(p_dict["hint"]));
	leaq	-192(%rbp), %rdx	#, tmp168
	movq	-448(%rbp), %rax	# p_dict, tmp169
	movq	%rdx, %rsi	# tmp168,
	movq	%rax, %rdi	# tmp169,
.LEHB69:
	call	_ZNK10DictionaryixERK7Variant	#
# core/object.cpp:91: 		pi.hint = PropertyHint(int(p_dict["hint"]));
	movq	%rax, %rdi	# _8,
	call	_ZNK7VariantcviEv	#
.LEHE69:
# core/object.cpp:91: 		pi.hint = PropertyHint(int(p_dict["hint"]));
	movl	%eax, %edx	# _9, _10
# core/object.cpp:91: 		pi.hint = PropertyHint(int(p_dict["hint"]));
	movq	-440(%rbp), %rax	# <retval>, tmp170
	movl	%edx, 24(%rax)	# _10, pi_29(D)->hint
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.38710.type, _137
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _137
	je	.L322	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp171
	movq	%rax, %rdi	# tmp171,
	call	_ZN7Variant5clearEv	#
.L322:
# ./core/variant.h:423: 	}
	nop	
.L244:
# core/object.cpp:93: 	if (p_dict.has("hint_string"))
	leaq	-160(%rbp), %rax	#, tmp172
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# tmp172,
.LEHB70:
	call	_ZN7VariantC1EPKc	#
.LEHE70:
# core/object.cpp:93: 	if (p_dict.has("hint_string"))
	leaq	-160(%rbp), %rdx	#, tmp173
	movq	-448(%rbp), %rax	# p_dict, tmp174
	movq	%rdx, %rsi	# tmp173,
	movq	%rax, %rdi	# tmp174,
.LEHB71:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE71:
	movl	%eax, %ebx	#, _94
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.38711.type, _138
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _138
	je	.L323	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp175
	movq	%rax, %rdi	# tmp175,
	call	_ZN7Variant5clearEv	#
.L323:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:93: 	if (p_dict.has("hint_string"))
	testb	%bl, %bl	# _94
	je	.L247	#,
# core/object.cpp:95: 		pi.hint_string = p_dict["hint_string"];
	leaq	-112(%rbp), %rax	#, tmp176
	movl	$.LC5, %esi	#,
	movq	%rax, %rdi	# tmp176,
.LEHB72:
	call	_ZN7VariantC1EPKc	#
.LEHE72:
# core/object.cpp:95: 		pi.hint_string = p_dict["hint_string"];
	leaq	-112(%rbp), %rdx	#, tmp177
	movq	-448(%rbp), %rax	# p_dict, tmp178
	movq	%rdx, %rsi	# tmp177,
	movq	%rax, %rdi	# tmp178,
.LEHB73:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _11
# core/object.cpp:95: 		pi.hint_string = p_dict["hint_string"];
	leaq	-120(%rbp), %rax	#, tmp179
	movq	%rdx, %rsi	# _11,
	movq	%rax, %rdi	# tmp179,
	call	_ZNK7Variantcv6StringEv	#
.LEHE73:
# core/object.cpp:95: 		pi.hint_string = p_dict["hint_string"];
	movq	-440(%rbp), %rax	# <retval>, tmp180
	leaq	32(%rax), %rcx	#, _12
	leaq	-128(%rbp), %rax	#, tmp181
	leaq	-120(%rbp), %rdx	#, tmp182
	movq	%rcx, %rsi	# _12,
	movq	%rax, %rdi	# tmp181,
.LEHB74:
	call	_ZN6StringaSERKS_	#
.LEHE74:
# core/object.cpp:95: 		pi.hint_string = p_dict["hint_string"];
	leaq	-128(%rbp), %rax	#, tmp183
	movq	%rax, %rdi	# tmp183,
	call	_ZN6StringD1Ev	#
	leaq	-120(%rbp), %rax	#, tmp184
	movq	%rax, %rdi	# tmp184,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.38712.type, _139
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _139
	je	.L324	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp185
	movq	%rax, %rdi	# tmp185,
	call	_ZN7Variant5clearEv	#
.L324:
# ./core/variant.h:423: 	}
	nop	
.L247:
# core/object.cpp:97: 	if (p_dict.has("usage"))
	leaq	-80(%rbp), %rax	#, tmp186
	movl	$.LC6, %esi	#,
	movq	%rax, %rdi	# tmp186,
.LEHB75:
	call	_ZN7VariantC1EPKc	#
.LEHE75:
# core/object.cpp:97: 	if (p_dict.has("usage"))
	leaq	-80(%rbp), %rdx	#, tmp187
	movq	-448(%rbp), %rax	# p_dict, tmp188
	movq	%rdx, %rsi	# tmp187,
	movq	%rax, %rdi	# tmp188,
.LEHB76:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE76:
	movl	%eax, %ebx	#, _112
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38715.type, _140
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _140
	je	.L325	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN7Variant5clearEv	#
.L325:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:97: 	if (p_dict.has("usage"))
	testb	%bl, %bl	# _112
	je	.L326	#,
# core/object.cpp:98: 		pi.usage = p_dict["usage"];
	leaq	-48(%rbp), %rax	#, tmp190
	movl	$.LC6, %esi	#,
	movq	%rax, %rdi	# tmp190,
.LEHB77:
	call	_ZN7VariantC1EPKc	#
.LEHE77:
# core/object.cpp:98: 		pi.usage = p_dict["usage"];
	leaq	-48(%rbp), %rdx	#, tmp191
	movq	-448(%rbp), %rax	# p_dict, tmp192
	movq	%rdx, %rsi	# tmp191,
	movq	%rax, %rdi	# tmp192,
.LEHB78:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdi	# _13,
	call	_ZNK7VariantcvjEv	#
.LEHE78:
# core/object.cpp:98: 		pi.usage = p_dict["usage"];
	movq	-440(%rbp), %rdx	# <retval>, tmp193
	movl	%eax, 40(%rdx)	# _14, pi_29(D)->usage
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.38716.type, _141
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _141
	je	.L327	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp194
	movq	%rax, %rdi	# tmp194,
	call	_ZN7Variant5clearEv	#
.L327:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:100: 	return pi;
	jmp	.L326	#
.L282:
	movq	%rax, %rbx	#, tmp197
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.38700.type, _142
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _142
	je	.L328	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN7Variant5clearEv	#
.L328:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L283:
	movq	%rax, %rbx	#, tmp201
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.38701.type, _143
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _143
	je	.L329	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp200
	movq	%rax, %rdi	# tmp200,
	call	_ZN7Variant5clearEv	#
.L329:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L284:
	movq	%rax, %rbx	#, tmp204
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.38702.type, _144
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _144
	je	.L330	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp203
	movq	%rax, %rdi	# tmp203,
	call	_ZN7Variant5clearEv	#
.L330:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L286:
	movq	%rax, %rbx	#, tmp208
# core/object.cpp:85: 		pi.name = p_dict["name"];
	leaq	-328(%rbp), %rax	#, tmp206
	movq	%rax, %rdi	# tmp206,
	call	_ZN6StringD1Ev	#
	jmp	.L261	#
.L285:
	movq	%rax, %rbx	#, tmp207
.L261:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-320(%rbp), %eax	# D.38703.type, _145
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _145
	je	.L331	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-320(%rbp), %rax	#, tmp211
	movq	%rax, %rdi	# tmp211,
	call	_ZN7Variant5clearEv	#
.L331:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L287:
	movq	%rax, %rbx	#, tmp213
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.38706.type, _146
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _146
	je	.L332	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp212
	movq	%rax, %rdi	# tmp212,
	call	_ZN7Variant5clearEv	#
.L332:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L289:
	movq	%rax, %rbx	#, tmp217
# core/object.cpp:88: 		pi.class_name = p_dict["class_name"];
	leaq	-264(%rbp), %rax	#, tmp215
	movq	%rax, %rdi	# tmp215,
	call	_ZN10StringNameD1Ev	#
	jmp	.L266	#
.L288:
	movq	%rax, %rbx	#, tmp216
.L266:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-256(%rbp), %eax	# D.38707.type, _147
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _147
	je	.L333	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-256(%rbp), %rax	#, tmp220
	movq	%rax, %rdi	# tmp220,
	call	_ZN7Variant5clearEv	#
.L333:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L290:
	movq	%rax, %rbx	#, tmp222
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# D.38709.type, _148
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _148
	je	.L334	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp221
	movq	%rax, %rdi	# tmp221,
	call	_ZN7Variant5clearEv	#
.L334:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L291:
	movq	%rax, %rbx	#, tmp225
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.38710.type, _149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _149
	je	.L335	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp224
	movq	%rax, %rdi	# tmp224,
	call	_ZN7Variant5clearEv	#
.L335:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L292:
	movq	%rax, %rbx	#, tmp228
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.38711.type, _150
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _150
	je	.L336	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp227
	movq	%rax, %rdi	# tmp227,
	call	_ZN7Variant5clearEv	#
.L336:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L294:
	movq	%rax, %rbx	#, tmp232
# core/object.cpp:95: 		pi.hint_string = p_dict["hint_string"];
	leaq	-120(%rbp), %rax	#, tmp230
	movq	%rax, %rdi	# tmp230,
	call	_ZN6StringD1Ev	#
	jmp	.L275	#
.L293:
	movq	%rax, %rbx	#, tmp231
.L275:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.38712.type, _151
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _151
	je	.L337	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp235
	movq	%rax, %rdi	# tmp235,
	call	_ZN7Variant5clearEv	#
.L337:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L295:
	movq	%rax, %rbx	#, tmp237
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38715.type, _152
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _152
	je	.L338	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp236
	movq	%rax, %rdi	# tmp236,
	call	_ZN7Variant5clearEv	#
.L338:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L296:
	movq	%rax, %rbx	#, tmp240
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.38716.type, _153
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _153
	je	.L339	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp239
	movq	%rax, %rdi	# tmp239,
	call	_ZN7Variant5clearEv	#
.L339:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L255	#
.L281:
	movq	%rax, %rbx	#, tmp196
.L255:
	movq	-440(%rbp), %rax	# <retval>, tmp242
	movq	%rax, %rdi	# tmp242,
	call	_ZN12PropertyInfoD1Ev	#
	movq	%rbx, %rax	# tmp196, D.61752
	movq	%rax, %rdi	# D.61752,
.LEHB79:
	call	_Unwind_Resume	#
.LEHE79:
.L326:
# core/object.cpp:100: 	return pi;
	nop	
# core/object.cpp:101: }
	movq	-440(%rbp), %rax	# <retval>,
	addq	$440, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2425:
	.section	.gcc_except_table
.LLSDA2425:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2425-.LLSDACSB2425
.LLSDACSB2425:
	.uleb128 .LEHB51-.LFB2425
	.uleb128 .LEHE51-.LEHB51
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB52-.LFB2425
	.uleb128 .LEHE52-.LEHB52
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB53-.LFB2425
	.uleb128 .LEHE53-.LEHB53
	.uleb128 .L282-.LFB2425
	.uleb128 0
	.uleb128 .LEHB54-.LFB2425
	.uleb128 .LEHE54-.LEHB54
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB55-.LFB2425
	.uleb128 .LEHE55-.LEHB55
	.uleb128 .L283-.LFB2425
	.uleb128 0
	.uleb128 .LEHB56-.LFB2425
	.uleb128 .LEHE56-.LEHB56
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB57-.LFB2425
	.uleb128 .LEHE57-.LEHB57
	.uleb128 .L284-.LFB2425
	.uleb128 0
	.uleb128 .LEHB58-.LFB2425
	.uleb128 .LEHE58-.LEHB58
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB59-.LFB2425
	.uleb128 .LEHE59-.LEHB59
	.uleb128 .L285-.LFB2425
	.uleb128 0
	.uleb128 .LEHB60-.LFB2425
	.uleb128 .LEHE60-.LEHB60
	.uleb128 .L286-.LFB2425
	.uleb128 0
	.uleb128 .LEHB61-.LFB2425
	.uleb128 .LEHE61-.LEHB61
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB62-.LFB2425
	.uleb128 .LEHE62-.LEHB62
	.uleb128 .L287-.LFB2425
	.uleb128 0
	.uleb128 .LEHB63-.LFB2425
	.uleb128 .LEHE63-.LEHB63
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB64-.LFB2425
	.uleb128 .LEHE64-.LEHB64
	.uleb128 .L288-.LFB2425
	.uleb128 0
	.uleb128 .LEHB65-.LFB2425
	.uleb128 .LEHE65-.LEHB65
	.uleb128 .L289-.LFB2425
	.uleb128 0
	.uleb128 .LEHB66-.LFB2425
	.uleb128 .LEHE66-.LEHB66
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB67-.LFB2425
	.uleb128 .LEHE67-.LEHB67
	.uleb128 .L290-.LFB2425
	.uleb128 0
	.uleb128 .LEHB68-.LFB2425
	.uleb128 .LEHE68-.LEHB68
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB69-.LFB2425
	.uleb128 .LEHE69-.LEHB69
	.uleb128 .L291-.LFB2425
	.uleb128 0
	.uleb128 .LEHB70-.LFB2425
	.uleb128 .LEHE70-.LEHB70
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB71-.LFB2425
	.uleb128 .LEHE71-.LEHB71
	.uleb128 .L292-.LFB2425
	.uleb128 0
	.uleb128 .LEHB72-.LFB2425
	.uleb128 .LEHE72-.LEHB72
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB73-.LFB2425
	.uleb128 .LEHE73-.LEHB73
	.uleb128 .L293-.LFB2425
	.uleb128 0
	.uleb128 .LEHB74-.LFB2425
	.uleb128 .LEHE74-.LEHB74
	.uleb128 .L294-.LFB2425
	.uleb128 0
	.uleb128 .LEHB75-.LFB2425
	.uleb128 .LEHE75-.LEHB75
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB76-.LFB2425
	.uleb128 .LEHE76-.LEHB76
	.uleb128 .L295-.LFB2425
	.uleb128 0
	.uleb128 .LEHB77-.LFB2425
	.uleb128 .LEHE77-.LEHB77
	.uleb128 .L281-.LFB2425
	.uleb128 0
	.uleb128 .LEHB78-.LFB2425
	.uleb128 .LEHE78-.LEHB78
	.uleb128 .L296-.LFB2425
	.uleb128 0
	.uleb128 .LEHB79-.LFB2425
	.uleb128 .LEHE79-.LEHB79
	.uleb128 0
	.uleb128 0
.LLSDACSE2425:
	.text
	.size	_ZN12PropertyInfo9from_dictERK10Dictionary, .-_ZN12PropertyInfo9from_dictERK10Dictionary
	.globl	_Z21convert_property_listPK4ListI12PropertyInfo16DefaultAllocatorE
	.type	_Z21convert_property_listPK4ListI12PropertyInfo16DefaultAllocatorE, @function
_Z21convert_property_listPK4ListI12PropertyInfo16DefaultAllocatorE:
.LFB2426:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2426
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# p_list, p_list
# core/object.cpp:105: 	Array va;
	movq	-88(%rbp), %rax	# <retval>, tmp90
	movq	%rax, %rdi	# tmp90,
.LEHB80:
	call	_ZN5ArrayC1Ev	#
.LEHE80:
	movq	-96(%rbp), %rax	# p_list, tmp91
	movq	%rax, -32(%rbp)	# tmp91, this
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-32(%rbp), %rax	# this, tmp92
	movq	(%rax), %rax	# this_22->_data, _23
# ./core/list.h:188: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _23
	je	.L341	#,
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-32(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_22->_data, _24
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _24->first, D.55149
# ./core/list.h:188: 		return _data ? _data->first : 0;
	jmp	.L357	#
.L341:
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.55149
# ./core/list.h:188: 		return _data ? _data->first : 0;
	nop	
.L357:
# core/object.cpp:106: 	for (const List<PropertyInfo>::Element *E = p_list->front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.55149, E
.L348:
# core/object.cpp:106: 	for (const List<PropertyInfo>::Element *E = p_list->front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L360	#,
	movq	-24(%rbp), %rax	# E, tmp94
	movq	%rax, -40(%rbp)	# tmp94, this
# ./core/list.h:127: 			return value;
	movq	-40(%rbp), %rdx	# this, D.55154
# core/object.cpp:108: 		va.push_back(Dictionary(E->get()));
	leaq	-56(%rbp), %rax	#, tmp95
	movq	%rdx, %rsi	# D.55154,
	movq	%rax, %rdi	# tmp95,
.LEHB81:
	call	_ZNK12PropertyInfocv10DictionaryEv	#
.LEHE81:
# core/object.cpp:108: 		va.push_back(Dictionary(E->get()));
	leaq	-56(%rbp), %rdx	#, tmp96
	leaq	-80(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB82:
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE82:
# core/object.cpp:108: 		va.push_back(Dictionary(E->get()));
	leaq	-80(%rbp), %rdx	#, tmp98
	movq	-88(%rbp), %rax	# <retval>, tmp99
	movq	%rdx, %rsi	# tmp98,
	movq	%rax, %rdi	# tmp99,
.LEHB83:
	call	_ZN5Array9push_backERK7Variant	#
.LEHE83:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38764.type, _33
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _33
	je	.L361	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN7Variant5clearEv	#
.L361:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:108: 		va.push_back(Dictionary(E->get()));
	leaq	-56(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN10DictionaryD1Ev	#
	movq	-24(%rbp), %rax	# E, tmp102
	movq	%rax, -48(%rbp)	# tmp102, this
# ./core/list.h:66: 			return next_ptr;
	movq	-48(%rbp), %rax	# this, tmp103
	movq	48(%rax), %rax	# this_31->next_ptr, D.55158
# core/object.cpp:106: 	for (const List<PropertyInfo>::Element *E = p_list->front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.55158, E
# core/object.cpp:106: 	for (const List<PropertyInfo>::Element *E = p_list->front(); E; E = E->next()) {
	jmp	.L348	#
.L356:
	movq	%rax, %rbx	#, tmp106
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38764.type, _34
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _34
	je	.L362	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp104
	movq	%rax, %rdi	# tmp104,
	call	_ZN7Variant5clearEv	#
.L362:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L352	#
.L355:
	movq	%rax, %rbx	#, tmp105
.L352:
# core/object.cpp:108: 		va.push_back(Dictionary(E->get()));
	leaq	-56(%rbp), %rax	#, tmp109
	movq	%rax, %rdi	# tmp109,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L353	#
.L354:
	movq	%rax, %rbx	#, tmp110
.L353:
	movq	-88(%rbp), %rax	# <retval>, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_ZN5ArrayD1Ev	#
	movq	%rbx, %rax	# tmp110, D.61759
	movq	%rax, %rdi	# D.61759,
.LEHB84:
	call	_Unwind_Resume	#
.LEHE84:
.L360:
# core/object.cpp:111: 	return va;
	nop	
# core/object.cpp:112: }
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2426:
	.section	.gcc_except_table
.LLSDA2426:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2426-.LLSDACSB2426
.LLSDACSB2426:
	.uleb128 .LEHB80-.LFB2426
	.uleb128 .LEHE80-.LEHB80
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB81-.LFB2426
	.uleb128 .LEHE81-.LEHB81
	.uleb128 .L354-.LFB2426
	.uleb128 0
	.uleb128 .LEHB82-.LFB2426
	.uleb128 .LEHE82-.LEHB82
	.uleb128 .L355-.LFB2426
	.uleb128 0
	.uleb128 .LEHB83-.LFB2426
	.uleb128 .LEHE83-.LEHB83
	.uleb128 .L356-.LFB2426
	.uleb128 0
	.uleb128 .LEHB84-.LFB2426
	.uleb128 .LEHE84-.LEHB84
	.uleb128 0
	.uleb128 0
.LLSDACSE2426:
	.text
	.size	_Z21convert_property_listPK4ListI12PropertyInfo16DefaultAllocatorE, .-_Z21convert_property_listPK4ListI12PropertyInfo16DefaultAllocatorE
	.section	.rodata
.LC7:
	.string	"args"
.LC8:
	.string	"p_index"
.LC9:
	.string	"./core/cowdata.h"
.LC10:
	.string	"get"
.LC11:
	.string	"size()"
.LC12:
	.string	"default_args"
.LC13:
	.string	"flags"
.LC14:
	.string	"id"
.LC15:
	.string	"return"
	.text
	.align 2
	.globl	_ZNK10MethodInfocv10DictionaryEv
	.type	_ZNK10MethodInfocv10DictionaryEv, @function
_ZNK10MethodInfocv10DictionaryEv:
.LFB2427:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2427
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$552, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -552(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -560(%rbp)	# this, this
# core/object.cpp:116: 	Dictionary d;
	movq	-552(%rbp), %rax	# <retval>, tmp154
	movq	%rax, %rdi	# tmp154,
.LEHB85:
	call	_ZN10DictionaryC1Ev	#
.LEHE85:
# core/object.cpp:117: 	d["name"] = name;
	movq	-560(%rbp), %rdx	# this, _1
# core/object.cpp:117: 	d["name"] = name;
	leaq	-528(%rbp), %rax	#, tmp155
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# tmp155,
.LEHB86:
	call	_ZN7VariantC1ERK6String	#
.LEHE86:
# core/object.cpp:117: 	d["name"] = name;
	leaq	-496(%rbp), %rax	#, tmp156
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp156,
.LEHB87:
	call	_ZN7VariantC1EPKc	#
.LEHE87:
# core/object.cpp:117: 	d["name"] = name;
	leaq	-496(%rbp), %rdx	#, tmp157
	movq	-552(%rbp), %rax	# <retval>, tmp158
	movq	%rdx, %rsi	# tmp157,
	movq	%rax, %rdi	# tmp158,
.LEHB88:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _2
# core/object.cpp:117: 	d["name"] = name;
	leaq	-528(%rbp), %rax	#, tmp159
	movq	%rax, %rsi	# tmp159,
	movq	%rdx, %rdi	# _2,
	call	_ZN7VariantaSERKS_	#
.LEHE88:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-496(%rbp), %eax	# D.38772.type, _116
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _116
	je	.L469	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-496(%rbp), %rax	#, tmp160
	movq	%rax, %rdi	# tmp160,
	call	_ZN7Variant5clearEv	#
.L469:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-528(%rbp), %eax	# D.38773.type, _115
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _115
	je	.L470	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-528(%rbp), %rax	#, tmp161
	movq	%rax, %rdi	# tmp161,
	call	_ZN7Variant5clearEv	#
.L470:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:118: 	d["args"] = convert_property_list(&arguments);
	movq	-560(%rbp), %rax	# this, tmp162
	leaq	64(%rax), %rdx	#, _3
	leaq	-440(%rbp), %rax	#, tmp163
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp163,
.LEHB89:
	call	_Z21convert_property_listPK4ListI12PropertyInfo16DefaultAllocatorE	#
.LEHE89:
# core/object.cpp:118: 	d["args"] = convert_property_list(&arguments);
	leaq	-440(%rbp), %rdx	#, tmp164
	leaq	-464(%rbp), %rax	#, tmp165
	movq	%rdx, %rsi	# tmp164,
	movq	%rax, %rdi	# tmp165,
.LEHB90:
	call	_ZN7VariantC1ERK5Array	#
.LEHE90:
# core/object.cpp:118: 	d["args"] = convert_property_list(&arguments);
	leaq	-432(%rbp), %rax	#, tmp166
	movl	$.LC7, %esi	#,
	movq	%rax, %rdi	# tmp166,
.LEHB91:
	call	_ZN7VariantC1EPKc	#
.LEHE91:
# core/object.cpp:118: 	d["args"] = convert_property_list(&arguments);
	leaq	-432(%rbp), %rdx	#, tmp167
	movq	-552(%rbp), %rax	# <retval>, tmp168
	movq	%rdx, %rsi	# tmp167,
	movq	%rax, %rdi	# tmp168,
.LEHB92:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _4
# core/object.cpp:118: 	d["args"] = convert_property_list(&arguments);
	leaq	-464(%rbp), %rax	#, tmp169
	movq	%rax, %rsi	# tmp169,
	movq	%rdx, %rdi	# _4,
	call	_ZN7VariantaSERKS_	#
.LEHE92:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.38774.type, _118
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _118
	je	.L471	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp170
	movq	%rax, %rdi	# tmp170,
	call	_ZN7Variant5clearEv	#
.L471:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.38776.type, _117
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _117
	je	.L472	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp171
	movq	%rax, %rdi	# tmp171,
	call	_ZN7Variant5clearEv	#
.L472:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:118: 	d["args"] = convert_property_list(&arguments);
	leaq	-440(%rbp), %rax	#, tmp172
	movq	%rax, %rdi	# tmp172,
	call	_ZN5ArrayD1Ev	#
# core/object.cpp:119: 	Array da;
	leaq	-536(%rbp), %rax	#, tmp173
	movq	%rax, %rdi	# tmp173,
.LEHB93:
	call	_ZN5ArrayC1Ev	#
.LEHE93:
# core/object.cpp:120: 	for (int i = 0; i < default_arguments.size(); i++)
	movl	$0, -20(%rbp)	#, i
.L390:
# core/object.cpp:120: 	for (int i = 0; i < default_arguments.size(); i++)
	movq	-560(%rbp), %rax	# this, tmp174
	addq	$72, %rax	#, _5
	movq	%rax, -32(%rbp)	# _5, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-32(%rbp), %rax	# this, tmp175
	addq	$8, %rax	#, _120
	movq	%rax, -40(%rbp)	# _120, this
	movq	-40(%rbp), %rax	# this, tmp176
	movq	%rax, -48(%rbp)	# tmp176, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp177
	movq	(%rax), %rax	# this_122->_ptr, _123
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _123
	jne	.L368	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _124
	jmp	.L369	#
.L368:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-48(%rbp), %rax	# this, tmp178
	movq	(%rax), %rax	# this_122->_ptr, _125
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _124
.L369:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -56(%rbp)	# _124, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -56(%rbp)	#, size
	je	.L370	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-56(%rbp), %rax	# size, tmp179
	movl	(%rax), %eax	# *size_129, _130
	jmp	.L371	#
.L370:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.56192
.L371:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:120: 	for (int i = 0; i < default_arguments.size(); i++)
	cmpl	%eax, -20(%rbp)	# D.56192, i
	setl	%al	#, retval.10_59
	testb	%al, %al	# retval.10_59
	je	.L373	#,
# core/object.cpp:121: 		da.push_back(default_arguments[i]);
	movq	-560(%rbp), %rax	# this, tmp180
	addq	$72, %rax	#, _7
	movq	%rax, -64(%rbp)	# _7, this
	movl	-20(%rbp), %eax	# i, tmp181
	movl	%eax, -68(%rbp)	# tmp181, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-64(%rbp), %rax	# this, tmp182
	addq	$8, %rax	#, _139
	movq	%rax, -80(%rbp)	# _139, this
	movl	-68(%rbp), %eax	# p_index, tmp183
	movl	%eax, -84(%rbp)	# tmp183, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-84(%rbp), %eax	# p_index, tmp185
	shrl	$31, %eax	#, tmp184
	movzbl	%al, %eax	# _142, _143
	testq	%rax, %rax	# _144
	jne	.L374	#,
	movq	-80(%rbp), %rax	# this, tmp186
	movq	%rax, -96(%rbp)	# tmp186, this
	movq	-96(%rbp), %rax	# this, tmp187
	movq	%rax, -104(%rbp)	# tmp187, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-104(%rbp), %rax	# this, tmp188
	movq	(%rax), %rax	# this_146->_ptr, _147
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _147
	jne	.L375	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _148
	jmp	.L376	#
.L375:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-104(%rbp), %rax	# this, tmp189
	movq	(%rax), %rax	# this_146->_ptr, _149
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _148
.L376:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -112(%rbp)	# _148, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -112(%rbp)	#, size
	je	.L377	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-112(%rbp), %rax	# size, tmp190
	movl	(%rax), %eax	# *size_153, _154
	jmp	.L378	#
.L377:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _155
.L378:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -84(%rbp)	# _155, p_index
	setge	%al	#, _161
	movzbl	%al, %eax	# _161, _162
	testq	%rax, %rax	# _163
	je	.L379	#,
.L374:
	movl	$1, %eax	#, iftmp.12_164
	jmp	.L380	#
.L379:
	movl	$0, %eax	#, iftmp.12_164
.L380:
	movzbl	%al, %eax	# iftmp.12_164, _167
	testq	%rax, %rax	# _167
	setne	%al	#, retval.11_168
	testb	%al, %al	# retval.11_168
	je	.L381	#,
	movq	-80(%rbp), %rax	# this, tmp191
	movq	%rax, -120(%rbp)	# tmp191, this
	movq	-120(%rbp), %rax	# this, tmp192
	movq	%rax, -128(%rbp)	# tmp192, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp193
	movq	(%rax), %rax	# this_170->_ptr, _171
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _171
	jne	.L382	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _172
	jmp	.L383	#
.L382:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp194
	movq	(%rax), %rax	# this_170->_ptr, _173
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _172
.L383:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _172, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L384	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp195
	movl	(%rax), %eax	# *size_177, _178
	jmp	.L385	#
.L384:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _179
.L385:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _179, _185
	movl	-84(%rbp), %eax	# p_index, tmp196
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _185,
	movq	%rax, %rcx	# _186,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB94:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L381:
	movq	-80(%rbp), %rax	# this, tmp197
	movq	%rax, -144(%rbp)	# tmp197, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp198
	movq	(%rax), %rax	# this_187->_ptr, _188
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _188
	jne	.L386	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _189
	jmp	.L387	#
.L386:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-144(%rbp), %rax	# this, tmp199
	movq	(%rax), %rcx	# this_187->_ptr, _189
.L387:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-84(%rbp), %eax	# p_index, tmp200
	movslq	%eax, %rdx	# tmp200, _194
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _194, tmp201
	addq	%rax, %rax	# tmp201
	addq	%rdx, %rax	# _194, tmp201
	salq	$3, %rax	#, tmp202
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, D.56217
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:121: 		da.push_back(default_arguments[i]);
	leaq	-536(%rbp), %rax	#, tmp203
	movq	%rdx, %rsi	# D.56217,
	movq	%rax, %rdi	# tmp203,
	.cfi_escape 0x2e,0
	call	_ZN5Array9push_backERK7Variant	#
# core/object.cpp:120: 	for (int i = 0; i < default_arguments.size(); i++)
	addl	$1, -20(%rbp)	#, i
	jmp	.L390	#
.L373:
# core/object.cpp:122: 	d["default_args"] = da;
	leaq	-536(%rbp), %rdx	#, tmp204
	leaq	-400(%rbp), %rax	#, tmp205
	movq	%rdx, %rsi	# tmp204,
	movq	%rax, %rdi	# tmp205,
	call	_ZN7VariantC1ERK5Array	#
.LEHE94:
# core/object.cpp:122: 	d["default_args"] = da;
	leaq	-368(%rbp), %rax	#, tmp206
	movl	$.LC12, %esi	#,
	movq	%rax, %rdi	# tmp206,
.LEHB95:
	call	_ZN7VariantC1EPKc	#
.LEHE95:
# core/object.cpp:122: 	d["default_args"] = da;
	leaq	-368(%rbp), %rdx	#, tmp207
	movq	-552(%rbp), %rax	# <retval>, tmp208
	movq	%rdx, %rsi	# tmp207,
	movq	%rax, %rdi	# tmp208,
.LEHB96:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _9
# core/object.cpp:122: 	d["default_args"] = da;
	leaq	-400(%rbp), %rax	#, tmp209
	movq	%rax, %rsi	# tmp209,
	movq	%rdx, %rdi	# _9,
	call	_ZN7VariantaSERKS_	#
.LEHE96:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.38779.type, _201
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _201
	je	.L473	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp210
	movq	%rax, %rdi	# tmp210,
	call	_ZN7Variant5clearEv	#
.L473:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.38780.type, _200
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _200
	je	.L474	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp211
	movq	%rax, %rdi	# tmp211,
	call	_ZN7Variant5clearEv	#
.L474:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:123: 	d["flags"] = flags;
	movq	-560(%rbp), %rax	# this, tmp212
	movl	56(%rax), %edx	# this_38(D)->flags, _10
# core/object.cpp:123: 	d["flags"] = flags;
	leaq	-336(%rbp), %rax	#, tmp213
	movl	%edx, %esi	# _10,
	movq	%rax, %rdi	# tmp213,
.LEHB97:
	call	_ZN7VariantC1Ej	#
.LEHE97:
# core/object.cpp:123: 	d["flags"] = flags;
	leaq	-304(%rbp), %rax	#, tmp214
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp214,
.LEHB98:
	call	_ZN7VariantC1EPKc	#
.LEHE98:
# core/object.cpp:123: 	d["flags"] = flags;
	leaq	-304(%rbp), %rdx	#, tmp215
	movq	-552(%rbp), %rax	# <retval>, tmp216
	movq	%rdx, %rsi	# tmp215,
	movq	%rax, %rdi	# tmp216,
.LEHB99:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _11
# core/object.cpp:123: 	d["flags"] = flags;
	leaq	-336(%rbp), %rax	#, tmp217
	movq	%rax, %rsi	# tmp217,
	movq	%rdx, %rdi	# _11,
	call	_ZN7VariantaSERKS_	#
.LEHE99:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.38781.type, _203
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _203
	je	.L475	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp218
	movq	%rax, %rdi	# tmp218,
	call	_ZN7Variant5clearEv	#
.L475:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.38782.type, _202
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _202
	je	.L476	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp219
	movq	%rax, %rdi	# tmp219,
	call	_ZN7Variant5clearEv	#
.L476:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:124: 	d["id"] = id;
	movq	-560(%rbp), %rax	# this, tmp220
	movl	60(%rax), %edx	# this_38(D)->id, _12
# core/object.cpp:124: 	d["id"] = id;
	leaq	-272(%rbp), %rax	#, tmp221
	movl	%edx, %esi	# _12,
	movq	%rax, %rdi	# tmp221,
.LEHB100:
	call	_ZN7VariantC1Ei	#
.LEHE100:
# core/object.cpp:124: 	d["id"] = id;
	leaq	-240(%rbp), %rax	#, tmp222
	movl	$.LC14, %esi	#,
	movq	%rax, %rdi	# tmp222,
.LEHB101:
	call	_ZN7VariantC1EPKc	#
.LEHE101:
# core/object.cpp:124: 	d["id"] = id;
	leaq	-240(%rbp), %rdx	#, tmp223
	movq	-552(%rbp), %rax	# <retval>, tmp224
	movq	%rdx, %rsi	# tmp223,
	movq	%rax, %rdi	# tmp224,
.LEHB102:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _13
# core/object.cpp:124: 	d["id"] = id;
	leaq	-272(%rbp), %rax	#, tmp225
	movq	%rax, %rsi	# tmp225,
	movq	%rdx, %rdi	# _13,
	call	_ZN7VariantaSERKS_	#
.LEHE102:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.38783.type, _205
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _205
	je	.L477	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp226
	movq	%rax, %rdi	# tmp226,
	call	_ZN7Variant5clearEv	#
.L477:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.38784.type, _204
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _204
	je	.L478	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp227
	movq	%rax, %rdi	# tmp227,
	call	_ZN7Variant5clearEv	#
.L478:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:125: 	Dictionary r = return_val;
	movq	-560(%rbp), %rax	# this, tmp228
	leaq	8(%rax), %rdx	#, _14
	leaq	-544(%rbp), %rax	#, tmp229
	movq	%rdx, %rsi	# _14,
	movq	%rax, %rdi	# tmp229,
.LEHB103:
	call	_ZNK12PropertyInfocv10DictionaryEv	#
.LEHE103:
# core/object.cpp:126: 	d["return"] = r;
	leaq	-544(%rbp), %rdx	#, tmp230
	leaq	-208(%rbp), %rax	#, tmp231
	movq	%rdx, %rsi	# tmp230,
	movq	%rax, %rdi	# tmp231,
.LEHB104:
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE104:
# core/object.cpp:126: 	d["return"] = r;
	leaq	-176(%rbp), %rax	#, tmp232
	movl	$.LC15, %esi	#,
	movq	%rax, %rdi	# tmp232,
.LEHB105:
	call	_ZN7VariantC1EPKc	#
.LEHE105:
# core/object.cpp:126: 	d["return"] = r;
	leaq	-176(%rbp), %rdx	#, tmp233
	movq	-552(%rbp), %rax	# <retval>, tmp234
	movq	%rdx, %rsi	# tmp233,
	movq	%rax, %rdi	# tmp234,
.LEHB106:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _15
# core/object.cpp:126: 	d["return"] = r;
	leaq	-208(%rbp), %rax	#, tmp235
	movq	%rax, %rsi	# tmp235,
	movq	%rdx, %rdi	# _15,
	call	_ZN7VariantaSERKS_	#
.LEHE106:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.38787.type, _207
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _207
	je	.L479	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp236
	movq	%rax, %rdi	# tmp236,
	call	_ZN7Variant5clearEv	#
.L479:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.38788.type, _206
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _206
	je	.L480	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp237
	movq	%rax, %rdi	# tmp237,
	call	_ZN7Variant5clearEv	#
.L480:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:127: 	return d;
	nop	
# core/object.cpp:125: 	Dictionary r = return_val;
	leaq	-544(%rbp), %rax	#, tmp238
	movq	%rax, %rdi	# tmp238,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:119: 	Array da;
	leaq	-536(%rbp), %rax	#, tmp239
	movq	%rax, %rdi	# tmp239,
	call	_ZN5ArrayD1Ev	#
# core/object.cpp:127: 	return d;
	jmp	.L468	#
.L430:
	movq	%rax, %rbx	#, tmp242
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-496(%rbp), %eax	# D.38772.type, _208
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _208
	je	.L481	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-496(%rbp), %rax	#, tmp240
	movq	%rax, %rdi	# tmp240,
	call	_ZN7Variant5clearEv	#
.L481:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L402	#
.L429:
	movq	%rax, %rbx	#, tmp241
.L402:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-528(%rbp), %eax	# D.38773.type, _209
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _209
	je	.L482	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-528(%rbp), %rax	#, tmp245
	movq	%rax, %rdi	# tmp245,
	call	_ZN7Variant5clearEv	#
.L482:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L404	#
.L433:
	movq	%rax, %rbx	#, tmp250
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.38774.type, _210
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _210
	je	.L483	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp248
	movq	%rax, %rdi	# tmp248,
	call	_ZN7Variant5clearEv	#
.L483:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L407	#
.L432:
	movq	%rax, %rbx	#, tmp249
.L407:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.38776.type, _211
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _211
	je	.L484	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp253
	movq	%rax, %rdi	# tmp253,
	call	_ZN7Variant5clearEv	#
.L484:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L409	#
.L431:
	movq	%rax, %rbx	#, tmp254
.L409:
# core/object.cpp:118: 	d["args"] = convert_property_list(&arguments);
	leaq	-440(%rbp), %rax	#, tmp256
	movq	%rax, %rdi	# tmp256,
	call	_ZN5ArrayD1Ev	#
	jmp	.L404	#
.L436:
	movq	%rax, %rbx	#, tmp259
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.38779.type, _212
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _212
	je	.L485	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp257
	movq	%rax, %rdi	# tmp257,
	call	_ZN7Variant5clearEv	#
.L485:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L412	#
.L435:
	movq	%rax, %rbx	#, tmp258
.L412:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.38780.type, _213
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _213
	je	.L486	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp262
	movq	%rax, %rdi	# tmp262,
	call	_ZN7Variant5clearEv	#
.L486:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L414	#
.L438:
	movq	%rax, %rbx	#, tmp267
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.38781.type, _214
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _214
	je	.L487	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp265
	movq	%rax, %rdi	# tmp265,
	call	_ZN7Variant5clearEv	#
.L487:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L417	#
.L437:
	movq	%rax, %rbx	#, tmp266
.L417:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.38782.type, _215
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _215
	je	.L488	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp270
	movq	%rax, %rdi	# tmp270,
	call	_ZN7Variant5clearEv	#
.L488:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L414	#
.L440:
	movq	%rax, %rbx	#, tmp273
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.38783.type, _216
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _216
	je	.L489	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp271
	movq	%rax, %rdi	# tmp271,
	call	_ZN7Variant5clearEv	#
.L489:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L421	#
.L439:
	movq	%rax, %rbx	#, tmp272
.L421:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.38784.type, _217
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _217
	je	.L490	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp276
	movq	%rax, %rdi	# tmp276,
	call	_ZN7Variant5clearEv	#
.L490:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L414	#
.L443:
	movq	%rax, %rbx	#, tmp279
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.38787.type, _218
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _218
	je	.L491	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp277
	movq	%rax, %rdi	# tmp277,
	call	_ZN7Variant5clearEv	#
.L491:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L425	#
.L442:
	movq	%rax, %rbx	#, tmp278
.L425:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.38788.type, _219
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _219
	je	.L492	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp282
	movq	%rax, %rdi	# tmp282,
	call	_ZN7Variant5clearEv	#
.L492:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L427	#
.L441:
	movq	%rax, %rbx	#, tmp283
.L427:
# core/object.cpp:125: 	Dictionary r = return_val;
	leaq	-544(%rbp), %rax	#, tmp285
	movq	%rax, %rdi	# tmp285,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L414	#
.L434:
	movq	%rax, %rbx	#, tmp263
.L414:
# core/object.cpp:119: 	Array da;
	leaq	-536(%rbp), %rax	#, tmp286
	movq	%rax, %rdi	# tmp286,
	call	_ZN5ArrayD1Ev	#
	jmp	.L404	#
.L428:
	movq	%rax, %rbx	#, tmp246
.L404:
	movq	-552(%rbp), %rax	# <retval>, tmp287
	movq	%rax, %rdi	# tmp287,
	call	_ZN10DictionaryD1Ev	#
	movq	%rbx, %rax	# tmp246, D.61762
	movq	%rax, %rdi	# D.61762,
.LEHB107:
	call	_Unwind_Resume	#
.LEHE107:
.L468:
# core/object.cpp:128: }
	movq	-552(%rbp), %rax	# <retval>,
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2427:
	.section	.gcc_except_table
.LLSDA2427:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2427-.LLSDACSB2427
.LLSDACSB2427:
	.uleb128 .LEHB85-.LFB2427
	.uleb128 .LEHE85-.LEHB85
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB86-.LFB2427
	.uleb128 .LEHE86-.LEHB86
	.uleb128 .L428-.LFB2427
	.uleb128 0
	.uleb128 .LEHB87-.LFB2427
	.uleb128 .LEHE87-.LEHB87
	.uleb128 .L429-.LFB2427
	.uleb128 0
	.uleb128 .LEHB88-.LFB2427
	.uleb128 .LEHE88-.LEHB88
	.uleb128 .L430-.LFB2427
	.uleb128 0
	.uleb128 .LEHB89-.LFB2427
	.uleb128 .LEHE89-.LEHB89
	.uleb128 .L428-.LFB2427
	.uleb128 0
	.uleb128 .LEHB90-.LFB2427
	.uleb128 .LEHE90-.LEHB90
	.uleb128 .L431-.LFB2427
	.uleb128 0
	.uleb128 .LEHB91-.LFB2427
	.uleb128 .LEHE91-.LEHB91
	.uleb128 .L432-.LFB2427
	.uleb128 0
	.uleb128 .LEHB92-.LFB2427
	.uleb128 .LEHE92-.LEHB92
	.uleb128 .L433-.LFB2427
	.uleb128 0
	.uleb128 .LEHB93-.LFB2427
	.uleb128 .LEHE93-.LEHB93
	.uleb128 .L428-.LFB2427
	.uleb128 0
	.uleb128 .LEHB94-.LFB2427
	.uleb128 .LEHE94-.LEHB94
	.uleb128 .L434-.LFB2427
	.uleb128 0
	.uleb128 .LEHB95-.LFB2427
	.uleb128 .LEHE95-.LEHB95
	.uleb128 .L435-.LFB2427
	.uleb128 0
	.uleb128 .LEHB96-.LFB2427
	.uleb128 .LEHE96-.LEHB96
	.uleb128 .L436-.LFB2427
	.uleb128 0
	.uleb128 .LEHB97-.LFB2427
	.uleb128 .LEHE97-.LEHB97
	.uleb128 .L434-.LFB2427
	.uleb128 0
	.uleb128 .LEHB98-.LFB2427
	.uleb128 .LEHE98-.LEHB98
	.uleb128 .L437-.LFB2427
	.uleb128 0
	.uleb128 .LEHB99-.LFB2427
	.uleb128 .LEHE99-.LEHB99
	.uleb128 .L438-.LFB2427
	.uleb128 0
	.uleb128 .LEHB100-.LFB2427
	.uleb128 .LEHE100-.LEHB100
	.uleb128 .L434-.LFB2427
	.uleb128 0
	.uleb128 .LEHB101-.LFB2427
	.uleb128 .LEHE101-.LEHB101
	.uleb128 .L439-.LFB2427
	.uleb128 0
	.uleb128 .LEHB102-.LFB2427
	.uleb128 .LEHE102-.LEHB102
	.uleb128 .L440-.LFB2427
	.uleb128 0
	.uleb128 .LEHB103-.LFB2427
	.uleb128 .LEHE103-.LEHB103
	.uleb128 .L434-.LFB2427
	.uleb128 0
	.uleb128 .LEHB104-.LFB2427
	.uleb128 .LEHE104-.LEHB104
	.uleb128 .L441-.LFB2427
	.uleb128 0
	.uleb128 .LEHB105-.LFB2427
	.uleb128 .LEHE105-.LEHB105
	.uleb128 .L442-.LFB2427
	.uleb128 0
	.uleb128 .LEHB106-.LFB2427
	.uleb128 .LEHE106-.LEHB106
	.uleb128 .L443-.LFB2427
	.uleb128 0
	.uleb128 .LEHB107-.LFB2427
	.uleb128 .LEHE107-.LEHB107
	.uleb128 0
	.uleb128 0
.LLSDACSE2427:
	.text
	.size	_ZNK10MethodInfocv10DictionaryEv, .-_ZNK10MethodInfocv10DictionaryEv
	.align 2
	.globl	_ZN10MethodInfoC2Ev
	.type	_ZN10MethodInfoC2Ev, @function
_ZN10MethodInfoC2Ev:
.LFB2429:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2429
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
# core/object.cpp:132: 		id(0) {
	movq	-56(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-24(%rbp), %rax	# this, _17
	movq	%rax, -32(%rbp)	# _17, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp91
	movq	$0, (%rax)	#, this_18->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.cpp:132: 		id(0) {
	movq	-56(%rbp), %rax	# this, tmp92
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB108:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE108:
# core/object.cpp:132: 		id(0) {
	movq	-56(%rbp), %rax	# this, tmp93
	movl	$1, 56(%rax)	#, this_9(D)->flags
	movq	-56(%rbp), %rax	# this, tmp94
	movl	$0, 60(%rax)	#, this_9(D)->id
	movq	-56(%rbp), %rax	# this, tmp95
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-56(%rbp), %rax	# this, tmp96
	addq	$72, %rax	#, _4
	movq	%rax, -40(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-40(%rbp), %rax	# this, tmp97
	addq	$8, %rax	#, _20
	movq	%rax, -48(%rbp)	# _20, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp98
	movq	$0, (%rax)	#, this_21->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:133: }
	jmp	.L496	#
.L495:
	movq	%rax, %rbx	#, tmp99
# core/object.cpp:132: 		id(0) {
	movq	-56(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp99, D.61775
	movq	%rax, %rdi	# D.61775,
.LEHB109:
	call	_Unwind_Resume	#
.LEHE109:
.L496:
# core/object.cpp:133: }
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2429:
	.section	.gcc_except_table
.LLSDA2429:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2429-.LLSDACSB2429
.LLSDACSB2429:
	.uleb128 .LEHB108-.LFB2429
	.uleb128 .LEHE108-.LEHB108
	.uleb128 .L495-.LFB2429
	.uleb128 0
	.uleb128 .LEHB109-.LFB2429
	.uleb128 .LEHE109-.LEHB109
	.uleb128 0
	.uleb128 0
.LLSDACSE2429:
	.text
	.size	_ZN10MethodInfoC2Ev, .-_ZN10MethodInfoC2Ev
	.globl	_ZN10MethodInfoC1Ev
	.set	_ZN10MethodInfoC1Ev,_ZN10MethodInfoC2Ev
	.section	.text._ZN12PropertyInfoaSEOS_,"axG",@progbits,_ZN12PropertyInfoaSEOS_,comdat
	.align 2
	.weak	_ZN12PropertyInfoaSEOS_
	.type	_ZN12PropertyInfoaSEOS_, @function
_ZN12PropertyInfoaSEOS_:
.LFB2432:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# D.38827, D.38827
# core/object.h:138: struct PropertyInfo {
	movq	-32(%rbp), %rax	# D.38827, tmp93
	movl	(%rax), %edx	# _11(D)->type, _1
	movq	-24(%rbp), %rax	# this, tmp94
	movl	%edx, (%rax)	# _1, this_12(D)->type
	movq	-32(%rbp), %rax	# D.38827, tmp95
	leaq	8(%rax), %rdx	#, _2
	movq	-24(%rbp), %rax	# this, tmp96
	leaq	8(%rax), %rcx	#, _3
	leaq	-16(%rbp), %rax	#, tmp97
	movq	%rcx, %rsi	# _3,
	movq	%rax, %rdi	# tmp97,
	call	_ZN6StringaSERKS_	#
	leaq	-16(%rbp), %rax	#, tmp98
	movq	%rax, %rdi	# tmp98,
	call	_ZN6StringD1Ev	#
	movq	-32(%rbp), %rax	# D.38827, tmp99
	leaq	16(%rax), %rdx	#, _4
	movq	-24(%rbp), %rax	# this, tmp100
	addq	$16, %rax	#, _5
	movq	%rdx, %rsi	# _4,
	movq	%rax, %rdi	# _5,
	call	_ZN10StringNameaSERKS_	#
	movq	-32(%rbp), %rax	# D.38827, tmp101
	movl	24(%rax), %edx	# _11(D)->hint, _6
	movq	-24(%rbp), %rax	# this, tmp102
	movl	%edx, 24(%rax)	# _6, this_12(D)->hint
	movq	-32(%rbp), %rax	# D.38827, tmp103
	leaq	32(%rax), %rdx	#, _7
	movq	-24(%rbp), %rax	# this, tmp104
	leaq	32(%rax), %rcx	#, _8
	leaq	-8(%rbp), %rax	#, tmp105
	movq	%rcx, %rsi	# _8,
	movq	%rax, %rdi	# tmp105,
	call	_ZN6StringaSERKS_	#
	leaq	-8(%rbp), %rax	#, tmp106
	movq	%rax, %rdi	# tmp106,
	call	_ZN6StringD1Ev	#
	movq	-32(%rbp), %rax	# D.38827, tmp107
	movl	40(%rax), %edx	# _11(D)->usage, _9
	movq	-24(%rbp), %rax	# this, tmp108
	movl	%edx, 40(%rax)	# _9, this_12(D)->usage
	movq	-24(%rbp), %rax	# this, _23
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2432:
	.size	_ZN12PropertyInfoaSEOS_, .-_ZN12PropertyInfoaSEOS_
	.text
	.align 2
	.globl	_ZN10MethodInfo9from_dictERK10Dictionary
	.type	_ZN10MethodInfo9from_dictERK10Dictionary, @function
_ZN10MethodInfo9from_dictERK10Dictionary:
.LFB2431:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2431
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$504, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -504(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -512(%rbp)	# p_dict, p_dict
# core/object.cpp:137: 	MethodInfo mi;
	movq	-504(%rbp), %rax	# <retval>, tmp124
	movq	%rax, %rdi	# tmp124,
.LEHB110:
	call	_ZN10MethodInfoC1Ev	#
.LEHE110:
# core/object.cpp:139: 	if (p_dict.has("name"))
	leaq	-464(%rbp), %rax	#, tmp125
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp125,
.LEHB111:
	call	_ZN7VariantC1EPKc	#
.LEHE111:
# core/object.cpp:139: 	if (p_dict.has("name"))
	leaq	-464(%rbp), %rdx	#, tmp126
	movq	-512(%rbp), %rax	# p_dict, tmp127
	movq	%rdx, %rsi	# tmp126,
	movq	%rax, %rdi	# tmp127,
.LEHB112:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE112:
	movl	%eax, %ebx	#, _42
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.38802.type, _166
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _166
	je	.L587	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp128
	movq	%rax, %rdi	# tmp128,
	call	_ZN7Variant5clearEv	#
.L587:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:139: 	if (p_dict.has("name"))
	testb	%bl, %bl	# _42
	je	.L501	#,
# core/object.cpp:140: 		mi.name = p_dict["name"];
	leaq	-416(%rbp), %rax	#, tmp129
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp129,
.LEHB113:
	call	_ZN7VariantC1EPKc	#
.LEHE113:
# core/object.cpp:140: 		mi.name = p_dict["name"];
	leaq	-416(%rbp), %rdx	#, tmp130
	movq	-512(%rbp), %rax	# p_dict, tmp131
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# tmp131,
.LEHB114:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _1
# core/object.cpp:140: 		mi.name = p_dict["name"];
	leaq	-424(%rbp), %rax	#, tmp132
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# tmp132,
	call	_ZNK7Variantcv6StringEv	#
.LEHE114:
# core/object.cpp:140: 		mi.name = p_dict["name"];
	movq	-504(%rbp), %rcx	# <retval>, _2
	leaq	-432(%rbp), %rax	#, tmp133
	leaq	-424(%rbp), %rdx	#, tmp134
	movq	%rcx, %rsi	# _2,
	movq	%rax, %rdi	# tmp133,
.LEHB115:
	call	_ZN6StringaSERKS_	#
.LEHE115:
# core/object.cpp:140: 		mi.name = p_dict["name"];
	leaq	-432(%rbp), %rax	#, tmp135
	movq	%rax, %rdi	# tmp135,
	call	_ZN6StringD1Ev	#
	leaq	-424(%rbp), %rax	#, tmp136
	movq	%rax, %rdi	# tmp136,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.38803.type, _167
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _167
	je	.L588	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp137
	movq	%rax, %rdi	# tmp137,
	call	_ZN7Variant5clearEv	#
.L588:
# ./core/variant.h:423: 	}
	nop	
.L501:
# core/object.cpp:141: 	Array args;
	leaq	-472(%rbp), %rax	#, tmp138
	movq	%rax, %rdi	# tmp138,
.LEHB116:
	call	_ZN5ArrayC1Ev	#
.LEHE116:
# core/object.cpp:142: 	if (p_dict.has("args")) {
	leaq	-384(%rbp), %rax	#, tmp139
	movl	$.LC7, %esi	#,
	movq	%rax, %rdi	# tmp139,
.LEHB117:
	call	_ZN7VariantC1EPKc	#
.LEHE117:
# core/object.cpp:142: 	if (p_dict.has("args")) {
	leaq	-384(%rbp), %rdx	#, tmp140
	movq	-512(%rbp), %rax	# p_dict, tmp141
	movq	%rdx, %rsi	# tmp140,
	movq	%rax, %rdi	# tmp141,
.LEHB118:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE118:
	movl	%eax, %ebx	#, _61
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.38807.type, _168
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _168
	je	.L589	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp142
	movq	%rax, %rdi	# tmp142,
	call	_ZN7Variant5clearEv	#
.L589:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:142: 	if (p_dict.has("args")) {
	testb	%bl, %bl	# _61
	je	.L504	#,
# core/object.cpp:143: 		args = p_dict["args"];
	leaq	-352(%rbp), %rax	#, tmp143
	movl	$.LC7, %esi	#,
	movq	%rax, %rdi	# tmp143,
.LEHB119:
	call	_ZN7VariantC1EPKc	#
.LEHE119:
# core/object.cpp:143: 		args = p_dict["args"];
	leaq	-352(%rbp), %rdx	#, tmp144
	movq	-512(%rbp), %rax	# p_dict, tmp145
	movq	%rdx, %rsi	# tmp144,
	movq	%rax, %rdi	# tmp145,
.LEHB120:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _3
# core/object.cpp:143: 		args = p_dict["args"];
	leaq	-360(%rbp), %rax	#, tmp146
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp146,
	call	_ZNK7Variantcv5ArrayEv	#
.LEHE120:
# core/object.cpp:143: 		args = p_dict["args"];
	leaq	-360(%rbp), %rdx	#, tmp147
	leaq	-472(%rbp), %rax	#, tmp148
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# tmp148,
.LEHB121:
	call	_ZN5ArrayaSERKS_	#
.LEHE121:
# core/object.cpp:143: 		args = p_dict["args"];
	leaq	-360(%rbp), %rax	#, tmp149
	movq	%rax, %rdi	# tmp149,
	call	_ZN5ArrayD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.38808.type, _169
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _169
	je	.L590	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN7Variant5clearEv	#
.L590:
# ./core/variant.h:423: 	}
	nop	
.L504:
# core/object.cpp:146: 	for (int i = 0; i < args.size(); i++) {
	movl	$0, -20(%rbp)	#, i
.L507:
# core/object.cpp:146: 	for (int i = 0; i < args.size(); i++) {
	leaq	-472(%rbp), %rax	#, tmp151
	movq	%rax, %rdi	# tmp151,
.LEHB122:
	call	_ZNK5Array4sizeEv	#
# core/object.cpp:146: 	for (int i = 0; i < args.size(); i++) {
	cmpl	%eax, -20(%rbp)	# _4, i
	setl	%al	#, retval.19_78
	testb	%al, %al	# retval.19_78
	je	.L506	#,
# core/object.cpp:147: 		Dictionary d = args[i];
	movl	-20(%rbp), %edx	# i, tmp152
	leaq	-472(%rbp), %rax	#, tmp153
	movl	%edx, %esi	# tmp152,
	movq	%rax, %rdi	# tmp153,
	call	_ZN5ArrayixEi	#
	movq	%rax, %rdx	#, _5
	leaq	-488(%rbp), %rax	#, tmp154
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp154,
	call	_ZNK7Variantcv10DictionaryEv	#
.LEHE122:
# core/object.cpp:148: 		mi.arguments.push_back(PropertyInfo::from_dict(d));
	movq	-504(%rbp), %rax	# <retval>, tmp155
	leaq	64(%rax), %rbx	#, _6
# core/object.cpp:148: 		mi.arguments.push_back(PropertyInfo::from_dict(d));
	leaq	-320(%rbp), %rax	#, tmp156
	leaq	-488(%rbp), %rdx	#, tmp157
	movq	%rdx, %rsi	# tmp157,
	movq	%rax, %rdi	# tmp156,
.LEHB123:
	call	_ZN12PropertyInfo9from_dictERK10Dictionary	#
.LEHE123:
# core/object.cpp:148: 		mi.arguments.push_back(PropertyInfo::from_dict(d));
	leaq	-320(%rbp), %rax	#, tmp158
	movq	%rax, %rsi	# tmp158,
	movq	%rbx, %rdi	# _6,
.LEHB124:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE124:
# core/object.cpp:148: 		mi.arguments.push_back(PropertyInfo::from_dict(d));
	leaq	-320(%rbp), %rax	#, tmp159
	movq	%rax, %rdi	# tmp159,
	call	_ZN12PropertyInfoD1Ev	#
# core/object.cpp:147: 		Dictionary d = args[i];
	leaq	-488(%rbp), %rax	#, tmp160
	movq	%rax, %rdi	# tmp160,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:146: 	for (int i = 0; i < args.size(); i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L507	#
.L506:
# core/object.cpp:150: 	Array defargs;
	leaq	-480(%rbp), %rax	#, tmp161
	movq	%rax, %rdi	# tmp161,
.LEHB125:
	call	_ZN5ArrayC1Ev	#
.LEHE125:
# core/object.cpp:151: 	if (p_dict.has("default_args")) {
	leaq	-272(%rbp), %rax	#, tmp162
	movl	$.LC12, %esi	#,
	movq	%rax, %rdi	# tmp162,
.LEHB126:
	call	_ZN7VariantC1EPKc	#
.LEHE126:
# core/object.cpp:151: 	if (p_dict.has("default_args")) {
	leaq	-272(%rbp), %rdx	#, tmp163
	movq	-512(%rbp), %rax	# p_dict, tmp164
	movq	%rdx, %rsi	# tmp163,
	movq	%rax, %rdi	# tmp164,
.LEHB127:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE127:
	movl	%eax, %ebx	#, _82
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.38815.type, _170
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _170
	je	.L591	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp165
	movq	%rax, %rdi	# tmp165,
	call	_ZN7Variant5clearEv	#
.L591:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:151: 	if (p_dict.has("default_args")) {
	testb	%bl, %bl	# _82
	je	.L509	#,
# core/object.cpp:152: 		defargs = p_dict["default_args"];
	leaq	-240(%rbp), %rax	#, tmp166
	movl	$.LC12, %esi	#,
	movq	%rax, %rdi	# tmp166,
.LEHB128:
	call	_ZN7VariantC1EPKc	#
.LEHE128:
# core/object.cpp:152: 		defargs = p_dict["default_args"];
	leaq	-240(%rbp), %rdx	#, tmp167
	movq	-512(%rbp), %rax	# p_dict, tmp168
	movq	%rdx, %rsi	# tmp167,
	movq	%rax, %rdi	# tmp168,
.LEHB129:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _7
# core/object.cpp:152: 		defargs = p_dict["default_args"];
	leaq	-248(%rbp), %rax	#, tmp169
	movq	%rdx, %rsi	# _7,
	movq	%rax, %rdi	# tmp169,
	call	_ZNK7Variantcv5ArrayEv	#
.LEHE129:
# core/object.cpp:152: 		defargs = p_dict["default_args"];
	leaq	-248(%rbp), %rdx	#, tmp170
	leaq	-480(%rbp), %rax	#, tmp171
	movq	%rdx, %rsi	# tmp170,
	movq	%rax, %rdi	# tmp171,
.LEHB130:
	call	_ZN5ArrayaSERKS_	#
.LEHE130:
# core/object.cpp:152: 		defargs = p_dict["default_args"];
	leaq	-248(%rbp), %rax	#, tmp172
	movq	%rax, %rdi	# tmp172,
	call	_ZN5ArrayD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.38816.type, _171
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _171
	je	.L592	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp173
	movq	%rax, %rdi	# tmp173,
	call	_ZN7Variant5clearEv	#
.L592:
# ./core/variant.h:423: 	}
	nop	
.L509:
# core/object.cpp:154: 	for (int i = 0; i < defargs.size(); i++) {
	movl	$0, -24(%rbp)	#, i
.L512:
# core/object.cpp:154: 	for (int i = 0; i < defargs.size(); i++) {
	leaq	-480(%rbp), %rax	#, tmp174
	movq	%rax, %rdi	# tmp174,
.LEHB131:
	call	_ZNK5Array4sizeEv	#
# core/object.cpp:154: 	for (int i = 0; i < defargs.size(); i++) {
	cmpl	%eax, -24(%rbp)	# _8, i
	setl	%al	#, retval.21_99
	testb	%al, %al	# retval.21_99
	je	.L511	#,
# core/object.cpp:155: 		mi.default_arguments.push_back(defargs[i]);
	movq	-504(%rbp), %rax	# <retval>, tmp175
	leaq	72(%rax), %rbx	#, _9
# core/object.cpp:155: 		mi.default_arguments.push_back(defargs[i]);
	movl	-24(%rbp), %edx	# i, tmp176
	leaq	-480(%rbp), %rax	#, tmp177
	movl	%edx, %esi	# tmp176,
	movq	%rax, %rdi	# tmp177,
	call	_ZN5ArrayixEi	#
# core/object.cpp:155: 		mi.default_arguments.push_back(defargs[i]);
	movq	%rax, %rsi	# _10,
	movq	%rbx, %rdi	# _9,
	call	_ZN6VectorI7VariantE9push_backERKS0_	#
# core/object.cpp:154: 	for (int i = 0; i < defargs.size(); i++) {
	addl	$1, -24(%rbp)	#, i
	jmp	.L512	#
.L511:
# core/object.cpp:158: 	if (p_dict.has("return")) {
	leaq	-208(%rbp), %rax	#, tmp178
	movl	$.LC15, %esi	#,
	movq	%rax, %rdi	# tmp178,
	call	_ZN7VariantC1EPKc	#
.LEHE131:
# core/object.cpp:158: 	if (p_dict.has("return")) {
	leaq	-208(%rbp), %rdx	#, tmp179
	movq	-512(%rbp), %rax	# p_dict, tmp180
	movq	%rdx, %rsi	# tmp179,
	movq	%rax, %rdi	# tmp180,
.LEHB132:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE132:
	movl	%eax, %ebx	#, _102
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.38819.type, _172
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _172
	je	.L593	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp181
	movq	%rax, %rdi	# tmp181,
	call	_ZN7Variant5clearEv	#
.L593:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:158: 	if (p_dict.has("return")) {
	testb	%bl, %bl	# _102
	je	.L514	#,
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	leaq	-112(%rbp), %rax	#, tmp182
	movl	$.LC15, %esi	#,
	movq	%rax, %rdi	# tmp182,
.LEHB133:
	call	_ZN7VariantC1EPKc	#
.LEHE133:
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	leaq	-112(%rbp), %rdx	#, tmp183
	movq	-512(%rbp), %rax	# p_dict, tmp184
	movq	%rdx, %rsi	# tmp183,
	movq	%rax, %rdi	# tmp184,
.LEHB134:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _11
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	leaq	-120(%rbp), %rax	#, tmp185
	movq	%rdx, %rsi	# _11,
	movq	%rax, %rdi	# tmp185,
	call	_ZNK7Variantcv10DictionaryEv	#
.LEHE134:
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	leaq	-176(%rbp), %rax	#, tmp186
	leaq	-120(%rbp), %rdx	#, tmp187
	movq	%rdx, %rsi	# tmp187,
	movq	%rax, %rdi	# tmp186,
.LEHB135:
	call	_ZN12PropertyInfo9from_dictERK10Dictionary	#
.LEHE135:
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	movq	-504(%rbp), %rax	# <retval>, tmp188
	leaq	8(%rax), %rdx	#, _12
	leaq	-176(%rbp), %rax	#, tmp189
	movq	%rax, %rsi	# tmp189,
	movq	%rdx, %rdi	# _12,
.LEHB136:
	call	_ZN12PropertyInfoaSEOS_	#
.LEHE136:
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	leaq	-176(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-120(%rbp), %rax	#, tmp191
	movq	%rax, %rdi	# tmp191,
	call	_ZN10DictionaryD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.38820.type, _173
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _173
	je	.L594	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp192
	movq	%rax, %rdi	# tmp192,
	call	_ZN7Variant5clearEv	#
.L594:
# ./core/variant.h:423: 	}
	nop	
.L514:
# core/object.cpp:162: 	if (p_dict.has("flags"))
	leaq	-80(%rbp), %rax	#, tmp193
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp193,
.LEHB137:
	call	_ZN7VariantC1EPKc	#
.LEHE137:
# core/object.cpp:162: 	if (p_dict.has("flags"))
	leaq	-80(%rbp), %rdx	#, tmp194
	movq	-512(%rbp), %rax	# p_dict, tmp195
	movq	%rdx, %rsi	# tmp194,
	movq	%rax, %rdi	# tmp195,
.LEHB138:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE138:
	movl	%eax, %ebx	#, _123
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38832.type, _174
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _174
	je	.L595	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN7Variant5clearEv	#
.L595:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:162: 	if (p_dict.has("flags"))
	testb	%bl, %bl	# _123
	je	.L596	#,
# core/object.cpp:163: 		mi.flags = p_dict["flags"];
	leaq	-48(%rbp), %rax	#, tmp197
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp197,
.LEHB139:
	call	_ZN7VariantC1EPKc	#
.LEHE139:
# core/object.cpp:163: 		mi.flags = p_dict["flags"];
	leaq	-48(%rbp), %rdx	#, tmp198
	movq	-512(%rbp), %rax	# p_dict, tmp199
	movq	%rdx, %rsi	# tmp198,
	movq	%rax, %rdi	# tmp199,
.LEHB140:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdi	# _13,
	call	_ZNK7VariantcvjEv	#
.LEHE140:
# core/object.cpp:163: 		mi.flags = p_dict["flags"];
	movq	-504(%rbp), %rdx	# <retval>, tmp200
	movl	%eax, 56(%rdx)	# _14, mi_37(D)->flags
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.38833.type, _175
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _175
	je	.L597	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp201
	movq	%rax, %rdi	# tmp201,
	call	_ZN7Variant5clearEv	#
.L597:
# ./core/variant.h:423: 	}
	nop	
.L596:
# core/object.cpp:165: 	return mi;
	nop	
# core/object.cpp:150: 	Array defargs;
	leaq	-480(%rbp), %rax	#, tmp202
	movq	%rax, %rdi	# tmp202,
	call	_ZN5ArrayD1Ev	#
# core/object.cpp:141: 	Array args;
	leaq	-472(%rbp), %rax	#, tmp203
	movq	%rax, %rdi	# tmp203,
	call	_ZN5ArrayD1Ev	#
# core/object.cpp:165: 	return mi;
	jmp	.L586	#
.L551:
	movq	%rax, %rbx	#, tmp206
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.38802.type, _176
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _176
	je	.L598	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp204
	movq	%rax, %rdi	# tmp204,
	call	_ZN7Variant5clearEv	#
.L598:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L522	#
.L553:
	movq	%rax, %rbx	#, tmp211
# core/object.cpp:140: 		mi.name = p_dict["name"];
	leaq	-424(%rbp), %rax	#, tmp209
	movq	%rax, %rdi	# tmp209,
	call	_ZN6StringD1Ev	#
	jmp	.L524	#
.L552:
	movq	%rax, %rbx	#, tmp210
.L524:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.38803.type, _177
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _177
	je	.L599	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp214
	movq	%rax, %rdi	# tmp214,
	call	_ZN7Variant5clearEv	#
.L599:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L522	#
.L555:
	movq	%rax, %rbx	#, tmp217
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.38807.type, _178
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _178
	je	.L600	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp215
	movq	%rax, %rdi	# tmp215,
	call	_ZN7Variant5clearEv	#
.L600:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L528	#
.L557:
	movq	%rax, %rbx	#, tmp222
# core/object.cpp:143: 		args = p_dict["args"];
	leaq	-360(%rbp), %rax	#, tmp220
	movq	%rax, %rdi	# tmp220,
	call	_ZN5ArrayD1Ev	#
	jmp	.L530	#
.L556:
	movq	%rax, %rbx	#, tmp221
.L530:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.38808.type, _179
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _179
	je	.L601	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp225
	movq	%rax, %rdi	# tmp225,
	call	_ZN7Variant5clearEv	#
.L601:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L528	#
.L559:
	movq	%rax, %rbx	#, tmp228
# core/object.cpp:148: 		mi.arguments.push_back(PropertyInfo::from_dict(d));
	leaq	-320(%rbp), %rax	#, tmp226
	movq	%rax, %rdi	# tmp226,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L533	#
.L558:
	movq	%rax, %rbx	#, tmp227
.L533:
# core/object.cpp:147: 		Dictionary d = args[i];
	leaq	-488(%rbp), %rax	#, tmp231
	movq	%rax, %rdi	# tmp231,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L528	#
.L561:
	movq	%rax, %rbx	#, tmp234
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.38815.type, _180
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _180
	je	.L602	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp232
	movq	%rax, %rdi	# tmp232,
	call	_ZN7Variant5clearEv	#
.L602:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L536	#
.L563:
	movq	%rax, %rbx	#, tmp239
# core/object.cpp:152: 		defargs = p_dict["default_args"];
	leaq	-248(%rbp), %rax	#, tmp237
	movq	%rax, %rdi	# tmp237,
	call	_ZN5ArrayD1Ev	#
	jmp	.L538	#
.L562:
	movq	%rax, %rbx	#, tmp238
.L538:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.38816.type, _181
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _181
	je	.L603	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp242
	movq	%rax, %rdi	# tmp242,
	call	_ZN7Variant5clearEv	#
.L603:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L536	#
.L564:
	movq	%rax, %rbx	#, tmp244
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.38819.type, _182
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _182
	je	.L604	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp243
	movq	%rax, %rdi	# tmp243,
	call	_ZN7Variant5clearEv	#
.L604:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L536	#
.L567:
	movq	%rax, %rbx	#, tmp248
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	leaq	-176(%rbp), %rax	#, tmp246
	movq	%rax, %rdi	# tmp246,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L543	#
.L566:
	movq	%rax, %rbx	#, tmp247
.L543:
# core/object.cpp:159: 		mi.return_val = PropertyInfo::from_dict(p_dict["return"]);
	leaq	-120(%rbp), %rax	#, tmp251
	movq	%rax, %rdi	# tmp251,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L544	#
.L565:
	movq	%rax, %rbx	#, tmp252
.L544:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.38820.type, _183
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _183
	je	.L605	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp254
	movq	%rax, %rdi	# tmp254,
	call	_ZN7Variant5clearEv	#
.L605:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L536	#
.L568:
	movq	%rax, %rbx	#, tmp256
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.38832.type, _184
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _184
	je	.L606	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp255
	movq	%rax, %rdi	# tmp255,
	call	_ZN7Variant5clearEv	#
.L606:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L536	#
.L569:
	movq	%rax, %rbx	#, tmp259
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.38833.type, _185
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _185
	je	.L607	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp258
	movq	%rax, %rdi	# tmp258,
	call	_ZN7Variant5clearEv	#
.L607:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L536	#
.L560:
	movq	%rax, %rbx	#, tmp233
.L536:
# core/object.cpp:150: 	Array defargs;
	leaq	-480(%rbp), %rax	#, tmp261
	movq	%rax, %rdi	# tmp261,
	call	_ZN5ArrayD1Ev	#
	jmp	.L528	#
.L554:
	movq	%rax, %rbx	#, tmp216
.L528:
# core/object.cpp:141: 	Array args;
	leaq	-472(%rbp), %rax	#, tmp262
	movq	%rax, %rdi	# tmp262,
	call	_ZN5ArrayD1Ev	#
	jmp	.L522	#
.L550:
	movq	%rax, %rbx	#, tmp205
.L522:
	movq	-504(%rbp), %rax	# <retval>, tmp263
	movq	%rax, %rdi	# tmp263,
	call	_ZN10MethodInfoD1Ev	#
	movq	%rbx, %rax	# tmp205, D.61778
	movq	%rax, %rdi	# D.61778,
.LEHB141:
	call	_Unwind_Resume	#
.LEHE141:
.L586:
# core/object.cpp:166: }
	movq	-504(%rbp), %rax	# <retval>,
	addq	$504, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2431:
	.section	.gcc_except_table
.LLSDA2431:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2431-.LLSDACSB2431
.LLSDACSB2431:
	.uleb128 .LEHB110-.LFB2431
	.uleb128 .LEHE110-.LEHB110
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB111-.LFB2431
	.uleb128 .LEHE111-.LEHB111
	.uleb128 .L550-.LFB2431
	.uleb128 0
	.uleb128 .LEHB112-.LFB2431
	.uleb128 .LEHE112-.LEHB112
	.uleb128 .L551-.LFB2431
	.uleb128 0
	.uleb128 .LEHB113-.LFB2431
	.uleb128 .LEHE113-.LEHB113
	.uleb128 .L550-.LFB2431
	.uleb128 0
	.uleb128 .LEHB114-.LFB2431
	.uleb128 .LEHE114-.LEHB114
	.uleb128 .L552-.LFB2431
	.uleb128 0
	.uleb128 .LEHB115-.LFB2431
	.uleb128 .LEHE115-.LEHB115
	.uleb128 .L553-.LFB2431
	.uleb128 0
	.uleb128 .LEHB116-.LFB2431
	.uleb128 .LEHE116-.LEHB116
	.uleb128 .L550-.LFB2431
	.uleb128 0
	.uleb128 .LEHB117-.LFB2431
	.uleb128 .LEHE117-.LEHB117
	.uleb128 .L554-.LFB2431
	.uleb128 0
	.uleb128 .LEHB118-.LFB2431
	.uleb128 .LEHE118-.LEHB118
	.uleb128 .L555-.LFB2431
	.uleb128 0
	.uleb128 .LEHB119-.LFB2431
	.uleb128 .LEHE119-.LEHB119
	.uleb128 .L554-.LFB2431
	.uleb128 0
	.uleb128 .LEHB120-.LFB2431
	.uleb128 .LEHE120-.LEHB120
	.uleb128 .L556-.LFB2431
	.uleb128 0
	.uleb128 .LEHB121-.LFB2431
	.uleb128 .LEHE121-.LEHB121
	.uleb128 .L557-.LFB2431
	.uleb128 0
	.uleb128 .LEHB122-.LFB2431
	.uleb128 .LEHE122-.LEHB122
	.uleb128 .L554-.LFB2431
	.uleb128 0
	.uleb128 .LEHB123-.LFB2431
	.uleb128 .LEHE123-.LEHB123
	.uleb128 .L558-.LFB2431
	.uleb128 0
	.uleb128 .LEHB124-.LFB2431
	.uleb128 .LEHE124-.LEHB124
	.uleb128 .L559-.LFB2431
	.uleb128 0
	.uleb128 .LEHB125-.LFB2431
	.uleb128 .LEHE125-.LEHB125
	.uleb128 .L554-.LFB2431
	.uleb128 0
	.uleb128 .LEHB126-.LFB2431
	.uleb128 .LEHE126-.LEHB126
	.uleb128 .L560-.LFB2431
	.uleb128 0
	.uleb128 .LEHB127-.LFB2431
	.uleb128 .LEHE127-.LEHB127
	.uleb128 .L561-.LFB2431
	.uleb128 0
	.uleb128 .LEHB128-.LFB2431
	.uleb128 .LEHE128-.LEHB128
	.uleb128 .L560-.LFB2431
	.uleb128 0
	.uleb128 .LEHB129-.LFB2431
	.uleb128 .LEHE129-.LEHB129
	.uleb128 .L562-.LFB2431
	.uleb128 0
	.uleb128 .LEHB130-.LFB2431
	.uleb128 .LEHE130-.LEHB130
	.uleb128 .L563-.LFB2431
	.uleb128 0
	.uleb128 .LEHB131-.LFB2431
	.uleb128 .LEHE131-.LEHB131
	.uleb128 .L560-.LFB2431
	.uleb128 0
	.uleb128 .LEHB132-.LFB2431
	.uleb128 .LEHE132-.LEHB132
	.uleb128 .L564-.LFB2431
	.uleb128 0
	.uleb128 .LEHB133-.LFB2431
	.uleb128 .LEHE133-.LEHB133
	.uleb128 .L560-.LFB2431
	.uleb128 0
	.uleb128 .LEHB134-.LFB2431
	.uleb128 .LEHE134-.LEHB134
	.uleb128 .L565-.LFB2431
	.uleb128 0
	.uleb128 .LEHB135-.LFB2431
	.uleb128 .LEHE135-.LEHB135
	.uleb128 .L566-.LFB2431
	.uleb128 0
	.uleb128 .LEHB136-.LFB2431
	.uleb128 .LEHE136-.LEHB136
	.uleb128 .L567-.LFB2431
	.uleb128 0
	.uleb128 .LEHB137-.LFB2431
	.uleb128 .LEHE137-.LEHB137
	.uleb128 .L560-.LFB2431
	.uleb128 0
	.uleb128 .LEHB138-.LFB2431
	.uleb128 .LEHE138-.LEHB138
	.uleb128 .L568-.LFB2431
	.uleb128 0
	.uleb128 .LEHB139-.LFB2431
	.uleb128 .LEHE139-.LEHB139
	.uleb128 .L560-.LFB2431
	.uleb128 0
	.uleb128 .LEHB140-.LFB2431
	.uleb128 .LEHE140-.LEHB140
	.uleb128 .L569-.LFB2431
	.uleb128 0
	.uleb128 .LEHB141-.LFB2431
	.uleb128 .LEHE141-.LEHB141
	.uleb128 0
	.uleb128 0
.LLSDACSE2431:
	.text
	.size	_ZN10MethodInfo9from_dictERK10Dictionary, .-_ZN10MethodInfo9from_dictERK10Dictionary
	.align 2
	.globl	_ZN10MethodInfoC2ERK6String
	.type	_ZN10MethodInfoC2ERK6String, @function
_ZN10MethodInfoC2ERK6String:
.LFB2437:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2437
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_name, p_name
# core/object.cpp:171: 		id(0) {
	movq	-72(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-80(%rbp), %rax	# p_name, tmp96
	movq	%rax, -32(%rbp)	# tmp96, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _19
	movq	%rax, -40(%rbp)	# _19, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp97
	movq	$0, (%rax)	#, this_20->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _21
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _22
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _22,
	movq	%rax, %rdi	# _21,
.LEHB142:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE142:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L614	#
.L613:
	movq	%rax, %rbx	#, tmp100
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _23
	movq	%rax, -48(%rbp)	# _23, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp98
	movq	(%rax), %rdx	# this_24->_ptr, _25
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp99
	movq	%rdx, %rsi	# _25,
	movq	%rax, %rdi	# tmp99,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp100, D.61788
	movq	%rax, %rdi	# D.61788,
.LEHB143:
	call	_Unwind_Resume	#
.LEHE143:
.L614:
# core/object.cpp:171: 		id(0) {
	movq	-72(%rbp), %rax	# this, tmp101
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB144:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE144:
# core/object.cpp:171: 		id(0) {
	movq	-72(%rbp), %rax	# this, tmp102
	movl	$1, 56(%rax)	#, this_9(D)->flags
	movq	-72(%rbp), %rax	# this, tmp103
	movl	$0, 60(%rax)	#, this_9(D)->id
	movq	-72(%rbp), %rax	# this, tmp104
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-72(%rbp), %rax	# this, tmp105
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp106
	addq	$8, %rax	#, _27
	movq	%rax, -64(%rbp)	# _27, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp107
	movq	$0, (%rax)	#, this_28->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:172: }
	jmp	.L615	#
.L612:
	movq	%rax, %rbx	#, tmp108
# core/object.cpp:171: 		id(0) {
	movq	-72(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp108, D.61789
	movq	%rax, %rdi	# D.61789,
.LEHB145:
	call	_Unwind_Resume	#
.LEHE145:
.L615:
# core/object.cpp:172: }
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2437:
	.section	.gcc_except_table
.LLSDA2437:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2437-.LLSDACSB2437
.LLSDACSB2437:
	.uleb128 .LEHB142-.LFB2437
	.uleb128 .LEHE142-.LEHB142
	.uleb128 .L613-.LFB2437
	.uleb128 0
	.uleb128 .LEHB143-.LFB2437
	.uleb128 .LEHE143-.LEHB143
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB144-.LFB2437
	.uleb128 .LEHE144-.LEHB144
	.uleb128 .L612-.LFB2437
	.uleb128 0
	.uleb128 .LEHB145-.LFB2437
	.uleb128 .LEHE145-.LEHB145
	.uleb128 0
	.uleb128 0
.LLSDACSE2437:
	.text
	.size	_ZN10MethodInfoC2ERK6String, .-_ZN10MethodInfoC2ERK6String
	.globl	_ZN10MethodInfoC1ERK6String
	.set	_ZN10MethodInfoC1ERK6String,_ZN10MethodInfoC2ERK6String
	.align 2
	.globl	_ZN10MethodInfoC2ERK6StringRK12PropertyInfo
	.type	_ZN10MethodInfoC2ERK6StringRK12PropertyInfo, @function
_ZN10MethodInfoC2ERK6StringRK12PropertyInfo:
.LFB2440:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2440
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_name, p_name
	movq	%rdx, -104(%rbp)	# p_param1, p_param1
# core/object.cpp:176: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-96(%rbp), %rax	# p_name, tmp101
	movq	%rax, -32(%rbp)	# tmp101, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _27
	movq	%rax, -40(%rbp)	# _27, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp102
	movq	$0, (%rax)	#, this_28->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _29
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _30
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _30,
	movq	%rax, %rdi	# _29,
.LEHB146:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE146:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L624	#
.L623:
	movq	%rax, %rbx	#, tmp105
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _31
	movq	%rax, -48(%rbp)	# _31, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp103
	movq	(%rax), %rdx	# this_32->_ptr, _33
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp104
	movq	%rdx, %rsi	# _33,
	movq	%rax, %rdi	# tmp104,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp105, D.61790
	movq	%rax, %rdi	# D.61790,
.LEHB147:
	call	_Unwind_Resume	#
.LEHE147:
.L624:
# core/object.cpp:176: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp106
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB148:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE148:
# core/object.cpp:176: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp107
	movl	$1, 56(%rax)	#, this_13(D)->flags
	movq	-88(%rbp), %rax	# this, tmp108
	movl	$0, 60(%rax)	#, this_13(D)->id
	movq	-88(%rbp), %rax	# this, tmp109
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp110
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp111
	addq	$8, %rax	#, _35
	movq	%rax, -64(%rbp)	# _35, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp112
	movq	$0, (%rax)	#, this_36->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:177: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp113
	leaq	64(%rax), %rdx	#, _5
	movq	-104(%rbp), %rax	# p_param1, tmp114
	movq	%rax, %rsi	# tmp114,
	movq	%rdx, %rdi	# _5,
.LEHB149:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE149:
# core/object.cpp:178: }
	jmp	.L625	#
.L622:
	movq	%rax, %rbx	#, tmp120
# core/object.cpp:176: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp115
	addq	$72, %rax	#, _6
	movq	%rax, -72(%rbp)	# _6, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp116
	addq	$8, %rax	#, _38
	movq	%rax, -80(%rbp)	# _38, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp117
	movq	(%rax), %rdx	# this_39->_ptr, _40
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp118
	movq	%rdx, %rsi	# _40,
	movq	%rax, %rdi	# tmp118,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:176: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp123
	addq	$64, %rax	#, _7
	movq	%rax, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp126
	addq	$8, %rax	#, _8
	movq	%rax, %rdi	# _8,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L620	#
.L621:
	movq	%rax, %rbx	#, tmp127
.L620:
# core/object.cpp:176: 		id(0) {
	movq	-88(%rbp), %rax	# this, _9
	movq	%rax, %rdi	# _9,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp127, D.61791
	movq	%rax, %rdi	# D.61791,
.LEHB150:
	call	_Unwind_Resume	#
.LEHE150:
.L625:
# core/object.cpp:178: }
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2440:
	.section	.gcc_except_table
.LLSDA2440:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2440-.LLSDACSB2440
.LLSDACSB2440:
	.uleb128 .LEHB146-.LFB2440
	.uleb128 .LEHE146-.LEHB146
	.uleb128 .L623-.LFB2440
	.uleb128 0
	.uleb128 .LEHB147-.LFB2440
	.uleb128 .LEHE147-.LEHB147
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB148-.LFB2440
	.uleb128 .LEHE148-.LEHB148
	.uleb128 .L621-.LFB2440
	.uleb128 0
	.uleb128 .LEHB149-.LFB2440
	.uleb128 .LEHE149-.LEHB149
	.uleb128 .L622-.LFB2440
	.uleb128 0
	.uleb128 .LEHB150-.LFB2440
	.uleb128 .LEHE150-.LEHB150
	.uleb128 0
	.uleb128 0
.LLSDACSE2440:
	.text
	.size	_ZN10MethodInfoC2ERK6StringRK12PropertyInfo, .-_ZN10MethodInfoC2ERK6StringRK12PropertyInfo
	.globl	_ZN10MethodInfoC1ERK6StringRK12PropertyInfo
	.set	_ZN10MethodInfoC1ERK6StringRK12PropertyInfo,_ZN10MethodInfoC2ERK6StringRK12PropertyInfo
	.align 2
	.globl	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_
	.type	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_, @function
_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_:
.LFB2443:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2443
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_name, p_name
	movq	%rdx, -104(%rbp)	# p_param1, p_param1
	movq	%rcx, -112(%rbp)	# p_param2, p_param2
# core/object.cpp:182: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-96(%rbp), %rax	# p_name, tmp102
	movq	%rax, -32(%rbp)	# tmp102, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _31
	movq	%rax, -40(%rbp)	# _31, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp103
	movq	$0, (%rax)	#, this_32->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _33
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _34
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _34,
	movq	%rax, %rdi	# _33,
.LEHB151:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE151:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L634	#
.L633:
	movq	%rax, %rbx	#, tmp106
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _35
	movq	%rax, -48(%rbp)	# _35, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp104
	movq	(%rax), %rdx	# this_36->_ptr, _37
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp105
	movq	%rdx, %rsi	# _37,
	movq	%rax, %rdi	# tmp105,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp106, D.61792
	movq	%rax, %rdi	# D.61792,
.LEHB152:
	call	_Unwind_Resume	#
.LEHE152:
.L634:
# core/object.cpp:182: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp107
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB153:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE153:
# core/object.cpp:182: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp108
	movl	$1, 56(%rax)	#, this_15(D)->flags
	movq	-88(%rbp), %rax	# this, tmp109
	movl	$0, 60(%rax)	#, this_15(D)->id
	movq	-88(%rbp), %rax	# this, tmp110
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp111
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp112
	addq	$8, %rax	#, _39
	movq	%rax, -64(%rbp)	# _39, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp113
	movq	$0, (%rax)	#, this_40->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:183: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp114
	leaq	64(%rax), %rdx	#, _5
	movq	-104(%rbp), %rax	# p_param1, tmp115
	movq	%rax, %rsi	# tmp115,
	movq	%rdx, %rdi	# _5,
.LEHB154:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:184: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp116
	leaq	64(%rax), %rdx	#, _6
	movq	-112(%rbp), %rax	# p_param2, tmp117
	movq	%rax, %rsi	# tmp117,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE154:
# core/object.cpp:185: }
	jmp	.L635	#
.L632:
	movq	%rax, %rbx	#, tmp123
# core/object.cpp:182: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp118
	addq	$72, %rax	#, _7
	movq	%rax, -72(%rbp)	# _7, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp119
	addq	$8, %rax	#, _42
	movq	%rax, -80(%rbp)	# _42, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp120
	movq	(%rax), %rdx	# this_43->_ptr, _44
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp121
	movq	%rdx, %rsi	# _44,
	movq	%rax, %rdi	# tmp121,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:182: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp126
	addq	$64, %rax	#, _8
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp129
	addq	$8, %rax	#, _9
	movq	%rax, %rdi	# _9,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L630	#
.L631:
	movq	%rax, %rbx	#, tmp130
.L630:
# core/object.cpp:182: 		id(0) {
	movq	-88(%rbp), %rax	# this, _10
	movq	%rax, %rdi	# _10,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp130, D.61793
	movq	%rax, %rdi	# D.61793,
.LEHB155:
	call	_Unwind_Resume	#
.LEHE155:
.L635:
# core/object.cpp:185: }
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2443:
	.section	.gcc_except_table
.LLSDA2443:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2443-.LLSDACSB2443
.LLSDACSB2443:
	.uleb128 .LEHB151-.LFB2443
	.uleb128 .LEHE151-.LEHB151
	.uleb128 .L633-.LFB2443
	.uleb128 0
	.uleb128 .LEHB152-.LFB2443
	.uleb128 .LEHE152-.LEHB152
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB153-.LFB2443
	.uleb128 .LEHE153-.LEHB153
	.uleb128 .L631-.LFB2443
	.uleb128 0
	.uleb128 .LEHB154-.LFB2443
	.uleb128 .LEHE154-.LEHB154
	.uleb128 .L632-.LFB2443
	.uleb128 0
	.uleb128 .LEHB155-.LFB2443
	.uleb128 .LEHE155-.LEHB155
	.uleb128 0
	.uleb128 0
.LLSDACSE2443:
	.text
	.size	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_, .-_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_
	.globl	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_
	.set	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_,_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_
	.align 2
	.globl	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_
	.type	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_, @function
_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_:
.LFB2446:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2446
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_name, p_name
	movq	%rdx, -104(%rbp)	# p_param1, p_param1
	movq	%rcx, -112(%rbp)	# p_param2, p_param2
	movq	%r8, -120(%rbp)	# p_param3, p_param3
# core/object.cpp:190: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-96(%rbp), %rax	# p_name, tmp103
	movq	%rax, -32(%rbp)	# tmp103, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _34
	movq	%rax, -40(%rbp)	# _34, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_35->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _36
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _37
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _37,
	movq	%rax, %rdi	# _36,
.LEHB156:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE156:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L644	#
.L643:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _38
	movq	%rax, -48(%rbp)	# _38, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_39->_ptr, _40
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _40,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.61794
	movq	%rax, %rdi	# D.61794,
.LEHB157:
	call	_Unwind_Resume	#
.LEHE157:
.L644:
# core/object.cpp:190: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp108
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB158:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE158:
# core/object.cpp:190: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp109
	movl	$1, 56(%rax)	#, this_16(D)->flags
	movq	-88(%rbp), %rax	# this, tmp110
	movl	$0, 60(%rax)	#, this_16(D)->id
	movq	-88(%rbp), %rax	# this, tmp111
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp112
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp113
	addq	$8, %rax	#, _42
	movq	%rax, -64(%rbp)	# _42, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp114
	movq	$0, (%rax)	#, this_43->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:191: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp115
	leaq	64(%rax), %rdx	#, _5
	movq	-104(%rbp), %rax	# p_param1, tmp116
	movq	%rax, %rsi	# tmp116,
	movq	%rdx, %rdi	# _5,
.LEHB159:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:192: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp117
	leaq	64(%rax), %rdx	#, _6
	movq	-112(%rbp), %rax	# p_param2, tmp118
	movq	%rax, %rsi	# tmp118,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:193: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp119
	leaq	64(%rax), %rdx	#, _7
	movq	-120(%rbp), %rax	# p_param3, tmp120
	movq	%rax, %rsi	# tmp120,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE159:
# core/object.cpp:194: }
	jmp	.L645	#
.L642:
	movq	%rax, %rbx	#, tmp126
# core/object.cpp:190: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp121
	addq	$72, %rax	#, _8
	movq	%rax, -72(%rbp)	# _8, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp122
	addq	$8, %rax	#, _45
	movq	%rax, -80(%rbp)	# _45, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp123
	movq	(%rax), %rdx	# this_46->_ptr, _47
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp124
	movq	%rdx, %rsi	# _47,
	movq	%rax, %rdi	# tmp124,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:190: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp129
	addq	$64, %rax	#, _9
	movq	%rax, %rdi	# _9,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp132
	addq	$8, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L640	#
.L641:
	movq	%rax, %rbx	#, tmp133
.L640:
# core/object.cpp:190: 		id(0) {
	movq	-88(%rbp), %rax	# this, _11
	movq	%rax, %rdi	# _11,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp133, D.61795
	movq	%rax, %rdi	# D.61795,
.LEHB160:
	call	_Unwind_Resume	#
.LEHE160:
.L645:
# core/object.cpp:194: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2446:
	.section	.gcc_except_table
.LLSDA2446:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2446-.LLSDACSB2446
.LLSDACSB2446:
	.uleb128 .LEHB156-.LFB2446
	.uleb128 .LEHE156-.LEHB156
	.uleb128 .L643-.LFB2446
	.uleb128 0
	.uleb128 .LEHB157-.LFB2446
	.uleb128 .LEHE157-.LEHB157
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB158-.LFB2446
	.uleb128 .LEHE158-.LEHB158
	.uleb128 .L641-.LFB2446
	.uleb128 0
	.uleb128 .LEHB159-.LFB2446
	.uleb128 .LEHE159-.LEHB159
	.uleb128 .L642-.LFB2446
	.uleb128 0
	.uleb128 .LEHB160-.LFB2446
	.uleb128 .LEHE160-.LEHB160
	.uleb128 0
	.uleb128 0
.LLSDACSE2446:
	.text
	.size	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_, .-_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_
	.globl	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_S5_
	.set	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_S5_,_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_
	.align 2
	.globl	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_
	.type	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_, @function
_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_:
.LFB2449:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2449
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_name, p_name
	movq	%rdx, -104(%rbp)	# p_param1, p_param1
	movq	%rcx, -112(%rbp)	# p_param2, p_param2
	movq	%r8, -120(%rbp)	# p_param3, p_param3
	movq	%r9, -128(%rbp)	# p_param4, p_param4
# core/object.cpp:199: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-96(%rbp), %rax	# p_name, tmp104
	movq	%rax, -32(%rbp)	# tmp104, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _37
	movq	%rax, -40(%rbp)	# _37, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp105
	movq	$0, (%rax)	#, this_38->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _39
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _40
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _40,
	movq	%rax, %rdi	# _39,
.LEHB161:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE161:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L654	#
.L653:
	movq	%rax, %rbx	#, tmp108
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _41
	movq	%rax, -48(%rbp)	# _41, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp106
	movq	(%rax), %rdx	# this_42->_ptr, _43
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp107
	movq	%rdx, %rsi	# _43,
	movq	%rax, %rdi	# tmp107,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp108, D.61796
	movq	%rax, %rdi	# D.61796,
.LEHB162:
	call	_Unwind_Resume	#
.LEHE162:
.L654:
# core/object.cpp:199: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp109
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB163:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE163:
# core/object.cpp:199: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp110
	movl	$1, 56(%rax)	#, this_17(D)->flags
	movq	-88(%rbp), %rax	# this, tmp111
	movl	$0, 60(%rax)	#, this_17(D)->id
	movq	-88(%rbp), %rax	# this, tmp112
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp113
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp114
	addq	$8, %rax	#, _45
	movq	%rax, -64(%rbp)	# _45, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp115
	movq	$0, (%rax)	#, this_46->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:200: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp116
	leaq	64(%rax), %rdx	#, _5
	movq	-104(%rbp), %rax	# p_param1, tmp117
	movq	%rax, %rsi	# tmp117,
	movq	%rdx, %rdi	# _5,
.LEHB164:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:201: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp118
	leaq	64(%rax), %rdx	#, _6
	movq	-112(%rbp), %rax	# p_param2, tmp119
	movq	%rax, %rsi	# tmp119,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:202: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp120
	leaq	64(%rax), %rdx	#, _7
	movq	-120(%rbp), %rax	# p_param3, tmp121
	movq	%rax, %rsi	# tmp121,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:203: 	arguments.push_back(p_param4);
	movq	-88(%rbp), %rax	# this, tmp122
	leaq	64(%rax), %rdx	#, _8
	movq	-128(%rbp), %rax	# p_param4, tmp123
	movq	%rax, %rsi	# tmp123,
	movq	%rdx, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE164:
# core/object.cpp:204: }
	jmp	.L655	#
.L652:
	movq	%rax, %rbx	#, tmp129
# core/object.cpp:199: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp124
	addq	$72, %rax	#, _9
	movq	%rax, -72(%rbp)	# _9, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp125
	addq	$8, %rax	#, _48
	movq	%rax, -80(%rbp)	# _48, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp126
	movq	(%rax), %rdx	# this_49->_ptr, _50
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp127
	movq	%rdx, %rsi	# _50,
	movq	%rax, %rdi	# tmp127,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:199: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp132
	addq	$64, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp135
	addq	$8, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L650	#
.L651:
	movq	%rax, %rbx	#, tmp136
.L650:
# core/object.cpp:199: 		id(0) {
	movq	-88(%rbp), %rax	# this, _12
	movq	%rax, %rdi	# _12,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp136, D.61797
	movq	%rax, %rdi	# D.61797,
.LEHB165:
	call	_Unwind_Resume	#
.LEHE165:
.L655:
# core/object.cpp:204: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2449:
	.section	.gcc_except_table
.LLSDA2449:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2449-.LLSDACSB2449
.LLSDACSB2449:
	.uleb128 .LEHB161-.LFB2449
	.uleb128 .LEHE161-.LEHB161
	.uleb128 .L653-.LFB2449
	.uleb128 0
	.uleb128 .LEHB162-.LFB2449
	.uleb128 .LEHE162-.LEHB162
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB163-.LFB2449
	.uleb128 .LEHE163-.LEHB163
	.uleb128 .L651-.LFB2449
	.uleb128 0
	.uleb128 .LEHB164-.LFB2449
	.uleb128 .LEHE164-.LEHB164
	.uleb128 .L652-.LFB2449
	.uleb128 0
	.uleb128 .LEHB165-.LFB2449
	.uleb128 .LEHE165-.LEHB165
	.uleb128 0
	.uleb128 0
.LLSDACSE2449:
	.text
	.size	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_, .-_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_
	.globl	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_S5_S5_
	.set	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_S5_S5_,_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_
	.align 2
	.globl	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_S5_
	.type	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_S5_, @function
_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_S5_:
.LFB2452:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2452
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_name, p_name
	movq	%rdx, -104(%rbp)	# p_param1, p_param1
	movq	%rcx, -112(%rbp)	# p_param2, p_param2
	movq	%r8, -120(%rbp)	# p_param3, p_param3
	movq	%r9, -128(%rbp)	# p_param4, p_param4
# core/object.cpp:209: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-96(%rbp), %rax	# p_name, tmp105
	movq	%rax, -32(%rbp)	# tmp105, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _40
	movq	%rax, -40(%rbp)	# _40, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp106
	movq	$0, (%rax)	#, this_41->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _42
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _43
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _43,
	movq	%rax, %rdi	# _42,
.LEHB166:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE166:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L664	#
.L663:
	movq	%rax, %rbx	#, tmp109
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _44
	movq	%rax, -48(%rbp)	# _44, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp107
	movq	(%rax), %rdx	# this_45->_ptr, _46
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp108
	movq	%rdx, %rsi	# _46,
	movq	%rax, %rdi	# tmp108,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp109, D.61798
	movq	%rax, %rdi	# D.61798,
.LEHB167:
	call	_Unwind_Resume	#
.LEHE167:
.L664:
# core/object.cpp:209: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp110
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB168:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE168:
# core/object.cpp:209: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp111
	movl	$1, 56(%rax)	#, this_18(D)->flags
	movq	-88(%rbp), %rax	# this, tmp112
	movl	$0, 60(%rax)	#, this_18(D)->id
	movq	-88(%rbp), %rax	# this, tmp113
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp114
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp115
	addq	$8, %rax	#, _48
	movq	%rax, -64(%rbp)	# _48, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp116
	movq	$0, (%rax)	#, this_49->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:210: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp117
	leaq	64(%rax), %rdx	#, _5
	movq	-104(%rbp), %rax	# p_param1, tmp118
	movq	%rax, %rsi	# tmp118,
	movq	%rdx, %rdi	# _5,
.LEHB169:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:211: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp119
	leaq	64(%rax), %rdx	#, _6
	movq	-112(%rbp), %rax	# p_param2, tmp120
	movq	%rax, %rsi	# tmp120,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:212: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp121
	leaq	64(%rax), %rdx	#, _7
	movq	-120(%rbp), %rax	# p_param3, tmp122
	movq	%rax, %rsi	# tmp122,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:213: 	arguments.push_back(p_param4);
	movq	-88(%rbp), %rax	# this, tmp123
	leaq	64(%rax), %rdx	#, _8
	movq	-128(%rbp), %rax	# p_param4, tmp124
	movq	%rax, %rsi	# tmp124,
	movq	%rdx, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:214: 	arguments.push_back(p_param5);
	movq	-88(%rbp), %rax	# this, tmp125
	addq	$64, %rax	#, _9
	movq	16(%rbp), %rsi	# p_param5,
	movq	%rax, %rdi	# _9,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE169:
# core/object.cpp:215: }
	jmp	.L665	#
.L662:
	movq	%rax, %rbx	#, tmp131
# core/object.cpp:209: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp126
	addq	$72, %rax	#, _10
	movq	%rax, -72(%rbp)	# _10, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp127
	addq	$8, %rax	#, _51
	movq	%rax, -80(%rbp)	# _51, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp128
	movq	(%rax), %rdx	# this_52->_ptr, _53
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp129
	movq	%rdx, %rsi	# _53,
	movq	%rax, %rdi	# tmp129,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:209: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp134
	addq	$64, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp137
	addq	$8, %rax	#, _12
	movq	%rax, %rdi	# _12,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L660	#
.L661:
	movq	%rax, %rbx	#, tmp138
.L660:
# core/object.cpp:209: 		id(0) {
	movq	-88(%rbp), %rax	# this, _13
	movq	%rax, %rdi	# _13,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp138, D.61799
	movq	%rax, %rdi	# D.61799,
.LEHB170:
	call	_Unwind_Resume	#
.LEHE170:
.L665:
# core/object.cpp:215: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2452:
	.section	.gcc_except_table
.LLSDA2452:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2452-.LLSDACSB2452
.LLSDACSB2452:
	.uleb128 .LEHB166-.LFB2452
	.uleb128 .LEHE166-.LEHB166
	.uleb128 .L663-.LFB2452
	.uleb128 0
	.uleb128 .LEHB167-.LFB2452
	.uleb128 .LEHE167-.LEHB167
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB168-.LFB2452
	.uleb128 .LEHE168-.LEHB168
	.uleb128 .L661-.LFB2452
	.uleb128 0
	.uleb128 .LEHB169-.LFB2452
	.uleb128 .LEHE169-.LEHB169
	.uleb128 .L662-.LFB2452
	.uleb128 0
	.uleb128 .LEHB170-.LFB2452
	.uleb128 .LEHE170-.LEHB170
	.uleb128 0
	.uleb128 0
.LLSDACSE2452:
	.text
	.size	_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_S5_, .-_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_S5_
	.globl	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_S5_S5_S5_
	.set	_ZN10MethodInfoC1ERK6StringRK12PropertyInfoS5_S5_S5_S5_,_ZN10MethodInfoC2ERK6StringRK12PropertyInfoS5_S5_S5_S5_
	.align 2
	.globl	_ZN10MethodInfoC2EN7Variant4TypeE
	.type	_ZN10MethodInfoC2EN7Variant4TypeE, @function
_ZN10MethodInfoC2EN7Variant4TypeE:
.LFB2455:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2455
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
	movl	%esi, -60(%rbp)	# ret, ret
# core/object.cpp:219: 		id(0) {
	movq	-56(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-24(%rbp), %rax	# this, _19
	movq	%rax, -32(%rbp)	# _19, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp91
	movq	$0, (%rax)	#, this_20->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.cpp:219: 		id(0) {
	movq	-56(%rbp), %rax	# this, tmp92
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB171:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE171:
# core/object.cpp:219: 		id(0) {
	movq	-56(%rbp), %rax	# this, tmp93
	movl	$1, 56(%rax)	#, this_9(D)->flags
	movq	-56(%rbp), %rax	# this, tmp94
	movl	$0, 60(%rax)	#, this_9(D)->id
	movq	-56(%rbp), %rax	# this, tmp95
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-56(%rbp), %rax	# this, tmp96
	addq	$72, %rax	#, _4
	movq	%rax, -40(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-40(%rbp), %rax	# this, tmp97
	addq	$8, %rax	#, _22
	movq	%rax, -48(%rbp)	# _22, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp98
	movq	$0, (%rax)	#, this_23->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:220: 	return_val.type = ret;
	movq	-56(%rbp), %rax	# this, tmp99
	movl	-60(%rbp), %edx	# ret, tmp100
	movl	%edx, 8(%rax)	# tmp100, this_9(D)->return_val.type
# core/object.cpp:221: }
	jmp	.L669	#
.L668:
	movq	%rax, %rbx	#, tmp101
# core/object.cpp:219: 		id(0) {
	movq	-56(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp101, D.61800
	movq	%rax, %rdi	# D.61800,
.LEHB172:
	call	_Unwind_Resume	#
.LEHE172:
.L669:
# core/object.cpp:221: }
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2455:
	.section	.gcc_except_table
.LLSDA2455:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2455-.LLSDACSB2455
.LLSDACSB2455:
	.uleb128 .LEHB171-.LFB2455
	.uleb128 .LEHE171-.LEHB171
	.uleb128 .L668-.LFB2455
	.uleb128 0
	.uleb128 .LEHB172-.LFB2455
	.uleb128 .LEHE172-.LEHB172
	.uleb128 0
	.uleb128 0
.LLSDACSE2455:
	.text
	.size	_ZN10MethodInfoC2EN7Variant4TypeE, .-_ZN10MethodInfoC2EN7Variant4TypeE
	.globl	_ZN10MethodInfoC1EN7Variant4TypeE
	.set	_ZN10MethodInfoC1EN7Variant4TypeE,_ZN10MethodInfoC2EN7Variant4TypeE
	.align 2
	.globl	_ZN10MethodInfoC2EN7Variant4TypeERK6String
	.type	_ZN10MethodInfoC2EN7Variant4TypeERK6String, @function
_ZN10MethodInfoC2EN7Variant4TypeERK6String:
.LFB2458:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2458
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movl	%esi, -76(%rbp)	# ret, ret
	movq	%rdx, -88(%rbp)	# p_name, p_name
# core/object.cpp:226: 		id(0) {
	movq	-72(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-88(%rbp), %rax	# p_name, tmp96
	movq	%rax, -32(%rbp)	# tmp96, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _21
	movq	%rax, -40(%rbp)	# _21, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp97
	movq	$0, (%rax)	#, this_22->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _23
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _24
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _24,
	movq	%rax, %rdi	# _23,
.LEHB173:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE173:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L676	#
.L675:
	movq	%rax, %rbx	#, tmp100
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _25
	movq	%rax, -48(%rbp)	# _25, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp98
	movq	(%rax), %rdx	# this_26->_ptr, _27
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp99
	movq	%rdx, %rsi	# _27,
	movq	%rax, %rdi	# tmp99,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp100, D.61801
	movq	%rax, %rdi	# D.61801,
.LEHB174:
	call	_Unwind_Resume	#
.LEHE174:
.L676:
# core/object.cpp:226: 		id(0) {
	movq	-72(%rbp), %rax	# this, tmp101
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB175:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE175:
# core/object.cpp:226: 		id(0) {
	movq	-72(%rbp), %rax	# this, tmp102
	movl	$1, 56(%rax)	#, this_9(D)->flags
	movq	-72(%rbp), %rax	# this, tmp103
	movl	$0, 60(%rax)	#, this_9(D)->id
	movq	-72(%rbp), %rax	# this, tmp104
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-72(%rbp), %rax	# this, tmp105
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp106
	addq	$8, %rax	#, _29
	movq	%rax, -64(%rbp)	# _29, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp107
	movq	$0, (%rax)	#, this_30->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:227: 	return_val.type = ret;
	movq	-72(%rbp), %rax	# this, tmp108
	movl	-76(%rbp), %edx	# ret, tmp109
	movl	%edx, 8(%rax)	# tmp109, this_9(D)->return_val.type
# core/object.cpp:228: }
	jmp	.L677	#
.L674:
	movq	%rax, %rbx	#, tmp110
# core/object.cpp:226: 		id(0) {
	movq	-72(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp110, D.61802
	movq	%rax, %rdi	# D.61802,
.LEHB176:
	call	_Unwind_Resume	#
.LEHE176:
.L677:
# core/object.cpp:228: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2458:
	.section	.gcc_except_table
.LLSDA2458:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2458-.LLSDACSB2458
.LLSDACSB2458:
	.uleb128 .LEHB173-.LFB2458
	.uleb128 .LEHE173-.LEHB173
	.uleb128 .L675-.LFB2458
	.uleb128 0
	.uleb128 .LEHB174-.LFB2458
	.uleb128 .LEHE174-.LEHB174
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB175-.LFB2458
	.uleb128 .LEHE175-.LEHB175
	.uleb128 .L674-.LFB2458
	.uleb128 0
	.uleb128 .LEHB176-.LFB2458
	.uleb128 .LEHE176-.LEHB176
	.uleb128 0
	.uleb128 0
.LLSDACSE2458:
	.text
	.size	_ZN10MethodInfoC2EN7Variant4TypeERK6String, .-_ZN10MethodInfoC2EN7Variant4TypeERK6String
	.globl	_ZN10MethodInfoC1EN7Variant4TypeERK6String
	.set	_ZN10MethodInfoC1EN7Variant4TypeERK6String,_ZN10MethodInfoC2EN7Variant4TypeERK6String
	.align 2
	.globl	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfo
	.type	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfo, @function
_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfo:
.LFB2461:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2461
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movl	%esi, -92(%rbp)	# ret, ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
# core/object.cpp:232: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp101
	movq	%rax, -32(%rbp)	# tmp101, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _29
	movq	%rax, -40(%rbp)	# _29, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp102
	movq	$0, (%rax)	#, this_30->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _31
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _32
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _32,
	movq	%rax, %rdi	# _31,
.LEHB177:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE177:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L686	#
.L685:
	movq	%rax, %rbx	#, tmp105
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _33
	movq	%rax, -48(%rbp)	# _33, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp103
	movq	(%rax), %rdx	# this_34->_ptr, _35
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp104
	movq	%rdx, %rsi	# _35,
	movq	%rax, %rdi	# tmp104,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp105, D.61803
	movq	%rax, %rdi	# D.61803,
.LEHB178:
	call	_Unwind_Resume	#
.LEHE178:
.L686:
# core/object.cpp:232: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp106
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB179:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE179:
# core/object.cpp:232: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp107
	movl	$1, 56(%rax)	#, this_13(D)->flags
	movq	-88(%rbp), %rax	# this, tmp108
	movl	$0, 60(%rax)	#, this_13(D)->id
	movq	-88(%rbp), %rax	# this, tmp109
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp110
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp111
	addq	$8, %rax	#, _37
	movq	%rax, -64(%rbp)	# _37, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp112
	movq	$0, (%rax)	#, this_38->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:233: 	return_val.type = ret;
	movq	-88(%rbp), %rax	# this, tmp113
	movl	-92(%rbp), %edx	# ret, tmp114
	movl	%edx, 8(%rax)	# tmp114, this_13(D)->return_val.type
# core/object.cpp:234: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp115
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp116
	movq	%rax, %rsi	# tmp116,
	movq	%rdx, %rdi	# _5,
.LEHB180:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE180:
# core/object.cpp:235: }
	jmp	.L687	#
.L684:
	movq	%rax, %rbx	#, tmp122
# core/object.cpp:232: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp117
	addq	$72, %rax	#, _6
	movq	%rax, -72(%rbp)	# _6, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp118
	addq	$8, %rax	#, _40
	movq	%rax, -80(%rbp)	# _40, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp119
	movq	(%rax), %rdx	# this_41->_ptr, _42
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp120
	movq	%rdx, %rsi	# _42,
	movq	%rax, %rdi	# tmp120,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:232: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp125
	addq	$64, %rax	#, _7
	movq	%rax, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp128
	addq	$8, %rax	#, _8
	movq	%rax, %rdi	# _8,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L682	#
.L683:
	movq	%rax, %rbx	#, tmp129
.L682:
# core/object.cpp:232: 		id(0) {
	movq	-88(%rbp), %rax	# this, _9
	movq	%rax, %rdi	# _9,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp129, D.61804
	movq	%rax, %rdi	# D.61804,
.LEHB181:
	call	_Unwind_Resume	#
.LEHE181:
.L687:
# core/object.cpp:235: }
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2461:
	.section	.gcc_except_table
.LLSDA2461:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2461-.LLSDACSB2461
.LLSDACSB2461:
	.uleb128 .LEHB177-.LFB2461
	.uleb128 .LEHE177-.LEHB177
	.uleb128 .L685-.LFB2461
	.uleb128 0
	.uleb128 .LEHB178-.LFB2461
	.uleb128 .LEHE178-.LEHB178
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB179-.LFB2461
	.uleb128 .LEHE179-.LEHB179
	.uleb128 .L683-.LFB2461
	.uleb128 0
	.uleb128 .LEHB180-.LFB2461
	.uleb128 .LEHE180-.LEHB180
	.uleb128 .L684-.LFB2461
	.uleb128 0
	.uleb128 .LEHB181-.LFB2461
	.uleb128 .LEHE181-.LEHB181
	.uleb128 0
	.uleb128 0
.LLSDACSE2461:
	.text
	.size	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfo, .-_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfo
	.globl	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfo
	.set	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfo,_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfo
	.align 2
	.globl	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_
	.type	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_, @function
_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_:
.LFB2464:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2464
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movl	%esi, -92(%rbp)	# ret, ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
# core/object.cpp:239: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp102
	movq	%rax, -32(%rbp)	# tmp102, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _33
	movq	%rax, -40(%rbp)	# _33, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp103
	movq	$0, (%rax)	#, this_34->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _35
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _36
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _36,
	movq	%rax, %rdi	# _35,
.LEHB182:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE182:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L696	#
.L695:
	movq	%rax, %rbx	#, tmp106
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _37
	movq	%rax, -48(%rbp)	# _37, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp104
	movq	(%rax), %rdx	# this_38->_ptr, _39
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp105
	movq	%rdx, %rsi	# _39,
	movq	%rax, %rdi	# tmp105,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp106, D.61805
	movq	%rax, %rdi	# D.61805,
.LEHB183:
	call	_Unwind_Resume	#
.LEHE183:
.L696:
# core/object.cpp:239: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp107
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB184:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE184:
# core/object.cpp:239: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp108
	movl	$1, 56(%rax)	#, this_15(D)->flags
	movq	-88(%rbp), %rax	# this, tmp109
	movl	$0, 60(%rax)	#, this_15(D)->id
	movq	-88(%rbp), %rax	# this, tmp110
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp111
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp112
	addq	$8, %rax	#, _41
	movq	%rax, -64(%rbp)	# _41, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp113
	movq	$0, (%rax)	#, this_42->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:240: 	return_val.type = ret;
	movq	-88(%rbp), %rax	# this, tmp114
	movl	-92(%rbp), %edx	# ret, tmp115
	movl	%edx, 8(%rax)	# tmp115, this_15(D)->return_val.type
# core/object.cpp:241: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp116
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp117
	movq	%rax, %rsi	# tmp117,
	movq	%rdx, %rdi	# _5,
.LEHB185:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:242: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp118
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp119
	movq	%rax, %rsi	# tmp119,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE185:
# core/object.cpp:243: }
	jmp	.L697	#
.L694:
	movq	%rax, %rbx	#, tmp125
# core/object.cpp:239: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp120
	addq	$72, %rax	#, _7
	movq	%rax, -72(%rbp)	# _7, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp121
	addq	$8, %rax	#, _44
	movq	%rax, -80(%rbp)	# _44, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp122
	movq	(%rax), %rdx	# this_45->_ptr, _46
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp123
	movq	%rdx, %rsi	# _46,
	movq	%rax, %rdi	# tmp123,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:239: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp128
	addq	$64, %rax	#, _8
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp131
	addq	$8, %rax	#, _9
	movq	%rax, %rdi	# _9,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L692	#
.L693:
	movq	%rax, %rbx	#, tmp132
.L692:
# core/object.cpp:239: 		id(0) {
	movq	-88(%rbp), %rax	# this, _10
	movq	%rax, %rdi	# _10,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp132, D.61806
	movq	%rax, %rdi	# D.61806,
.LEHB186:
	call	_Unwind_Resume	#
.LEHE186:
.L697:
# core/object.cpp:243: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2464:
	.section	.gcc_except_table
.LLSDA2464:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2464-.LLSDACSB2464
.LLSDACSB2464:
	.uleb128 .LEHB182-.LFB2464
	.uleb128 .LEHE182-.LEHB182
	.uleb128 .L695-.LFB2464
	.uleb128 0
	.uleb128 .LEHB183-.LFB2464
	.uleb128 .LEHE183-.LEHB183
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB184-.LFB2464
	.uleb128 .LEHE184-.LEHB184
	.uleb128 .L693-.LFB2464
	.uleb128 0
	.uleb128 .LEHB185-.LFB2464
	.uleb128 .LEHE185-.LEHB185
	.uleb128 .L694-.LFB2464
	.uleb128 0
	.uleb128 .LEHB186-.LFB2464
	.uleb128 .LEHE186-.LEHB186
	.uleb128 0
	.uleb128 0
.LLSDACSE2464:
	.text
	.size	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_, .-_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_
	.globl	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_
	.set	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_,_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_
	.align 2
	.globl	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_
	.type	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_, @function
_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_:
.LFB2467:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2467
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movl	%esi, -92(%rbp)	# ret, ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
	movq	%r9, -128(%rbp)	# p_param3, p_param3
# core/object.cpp:248: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp103
	movq	%rax, -32(%rbp)	# tmp103, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _36
	movq	%rax, -40(%rbp)	# _36, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_37->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _38
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _39
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _39,
	movq	%rax, %rdi	# _38,
.LEHB187:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE187:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L706	#
.L705:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _40
	movq	%rax, -48(%rbp)	# _40, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_41->_ptr, _42
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _42,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.61807
	movq	%rax, %rdi	# D.61807,
.LEHB188:
	call	_Unwind_Resume	#
.LEHE188:
.L706:
# core/object.cpp:248: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp108
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB189:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE189:
# core/object.cpp:248: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp109
	movl	$1, 56(%rax)	#, this_16(D)->flags
	movq	-88(%rbp), %rax	# this, tmp110
	movl	$0, 60(%rax)	#, this_16(D)->id
	movq	-88(%rbp), %rax	# this, tmp111
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp112
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp113
	addq	$8, %rax	#, _44
	movq	%rax, -64(%rbp)	# _44, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp114
	movq	$0, (%rax)	#, this_45->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:249: 	return_val.type = ret;
	movq	-88(%rbp), %rax	# this, tmp115
	movl	-92(%rbp), %edx	# ret, tmp116
	movl	%edx, 8(%rax)	# tmp116, this_16(D)->return_val.type
# core/object.cpp:250: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp117
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp118
	movq	%rax, %rsi	# tmp118,
	movq	%rdx, %rdi	# _5,
.LEHB190:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:251: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp119
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp120
	movq	%rax, %rsi	# tmp120,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:252: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp121
	leaq	64(%rax), %rdx	#, _7
	movq	-128(%rbp), %rax	# p_param3, tmp122
	movq	%rax, %rsi	# tmp122,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE190:
# core/object.cpp:253: }
	jmp	.L707	#
.L704:
	movq	%rax, %rbx	#, tmp128
# core/object.cpp:248: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp123
	addq	$72, %rax	#, _8
	movq	%rax, -72(%rbp)	# _8, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp124
	addq	$8, %rax	#, _47
	movq	%rax, -80(%rbp)	# _47, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp125
	movq	(%rax), %rdx	# this_48->_ptr, _49
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp126
	movq	%rdx, %rsi	# _49,
	movq	%rax, %rdi	# tmp126,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:248: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp131
	addq	$64, %rax	#, _9
	movq	%rax, %rdi	# _9,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp134
	addq	$8, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L702	#
.L703:
	movq	%rax, %rbx	#, tmp135
.L702:
# core/object.cpp:248: 		id(0) {
	movq	-88(%rbp), %rax	# this, _11
	movq	%rax, %rdi	# _11,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp135, D.61808
	movq	%rax, %rdi	# D.61808,
.LEHB191:
	call	_Unwind_Resume	#
.LEHE191:
.L707:
# core/object.cpp:253: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2467:
	.section	.gcc_except_table
.LLSDA2467:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2467-.LLSDACSB2467
.LLSDACSB2467:
	.uleb128 .LEHB187-.LFB2467
	.uleb128 .LEHE187-.LEHB187
	.uleb128 .L705-.LFB2467
	.uleb128 0
	.uleb128 .LEHB188-.LFB2467
	.uleb128 .LEHE188-.LEHB188
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB189-.LFB2467
	.uleb128 .LEHE189-.LEHB189
	.uleb128 .L703-.LFB2467
	.uleb128 0
	.uleb128 .LEHB190-.LFB2467
	.uleb128 .LEHE190-.LEHB190
	.uleb128 .L704-.LFB2467
	.uleb128 0
	.uleb128 .LEHB191-.LFB2467
	.uleb128 .LEHE191-.LEHB191
	.uleb128 0
	.uleb128 0
.LLSDACSE2467:
	.text
	.size	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_, .-_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_
	.globl	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_
	.set	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_,_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_
	.align 2
	.globl	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_
	.type	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_, @function
_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_:
.LFB2470:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2470
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movl	%esi, -92(%rbp)	# ret, ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
	movq	%r9, -128(%rbp)	# p_param3, p_param3
# core/object.cpp:258: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp104
	movq	%rax, -32(%rbp)	# tmp104, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _39
	movq	%rax, -40(%rbp)	# _39, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp105
	movq	$0, (%rax)	#, this_40->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _41
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _42
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _42,
	movq	%rax, %rdi	# _41,
.LEHB192:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE192:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L716	#
.L715:
	movq	%rax, %rbx	#, tmp108
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _43
	movq	%rax, -48(%rbp)	# _43, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp106
	movq	(%rax), %rdx	# this_44->_ptr, _45
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp107
	movq	%rdx, %rsi	# _45,
	movq	%rax, %rdi	# tmp107,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp108, D.61809
	movq	%rax, %rdi	# D.61809,
.LEHB193:
	call	_Unwind_Resume	#
.LEHE193:
.L716:
# core/object.cpp:258: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp109
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB194:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE194:
# core/object.cpp:258: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp110
	movl	$1, 56(%rax)	#, this_17(D)->flags
	movq	-88(%rbp), %rax	# this, tmp111
	movl	$0, 60(%rax)	#, this_17(D)->id
	movq	-88(%rbp), %rax	# this, tmp112
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp113
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp114
	addq	$8, %rax	#, _47
	movq	%rax, -64(%rbp)	# _47, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp115
	movq	$0, (%rax)	#, this_48->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:259: 	return_val.type = ret;
	movq	-88(%rbp), %rax	# this, tmp116
	movl	-92(%rbp), %edx	# ret, tmp117
	movl	%edx, 8(%rax)	# tmp117, this_17(D)->return_val.type
# core/object.cpp:260: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp118
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp119
	movq	%rax, %rsi	# tmp119,
	movq	%rdx, %rdi	# _5,
.LEHB195:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:261: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp120
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp121
	movq	%rax, %rsi	# tmp121,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:262: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp122
	leaq	64(%rax), %rdx	#, _7
	movq	-128(%rbp), %rax	# p_param3, tmp123
	movq	%rax, %rsi	# tmp123,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:263: 	arguments.push_back(p_param4);
	movq	-88(%rbp), %rax	# this, tmp124
	addq	$64, %rax	#, _8
	movq	16(%rbp), %rsi	# p_param4,
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE195:
# core/object.cpp:264: }
	jmp	.L717	#
.L714:
	movq	%rax, %rbx	#, tmp130
# core/object.cpp:258: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp125
	addq	$72, %rax	#, _9
	movq	%rax, -72(%rbp)	# _9, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp126
	addq	$8, %rax	#, _50
	movq	%rax, -80(%rbp)	# _50, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp127
	movq	(%rax), %rdx	# this_51->_ptr, _52
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp128
	movq	%rdx, %rsi	# _52,
	movq	%rax, %rdi	# tmp128,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:258: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp133
	addq	$64, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp136
	addq	$8, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L712	#
.L713:
	movq	%rax, %rbx	#, tmp137
.L712:
# core/object.cpp:258: 		id(0) {
	movq	-88(%rbp), %rax	# this, _12
	movq	%rax, %rdi	# _12,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp137, D.61810
	movq	%rax, %rdi	# D.61810,
.LEHB196:
	call	_Unwind_Resume	#
.LEHE196:
.L717:
# core/object.cpp:264: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2470:
	.section	.gcc_except_table
.LLSDA2470:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2470-.LLSDACSB2470
.LLSDACSB2470:
	.uleb128 .LEHB192-.LFB2470
	.uleb128 .LEHE192-.LEHB192
	.uleb128 .L715-.LFB2470
	.uleb128 0
	.uleb128 .LEHB193-.LFB2470
	.uleb128 .LEHE193-.LEHB193
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB194-.LFB2470
	.uleb128 .LEHE194-.LEHB194
	.uleb128 .L713-.LFB2470
	.uleb128 0
	.uleb128 .LEHB195-.LFB2470
	.uleb128 .LEHE195-.LEHB195
	.uleb128 .L714-.LFB2470
	.uleb128 0
	.uleb128 .LEHB196-.LFB2470
	.uleb128 .LEHE196-.LEHB196
	.uleb128 0
	.uleb128 0
.LLSDACSE2470:
	.text
	.size	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_, .-_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_
	.globl	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_
	.set	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_,_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_
	.align 2
	.globl	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_
	.type	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_, @function
_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_:
.LFB2473:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2473
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movl	%esi, -92(%rbp)	# ret, ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
	movq	%r9, -128(%rbp)	# p_param3, p_param3
# core/object.cpp:269: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp105
	movq	%rax, -32(%rbp)	# tmp105, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _42
	movq	%rax, -40(%rbp)	# _42, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp106
	movq	$0, (%rax)	#, this_43->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _44
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _45
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _45,
	movq	%rax, %rdi	# _44,
.LEHB197:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE197:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L726	#
.L725:
	movq	%rax, %rbx	#, tmp109
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _46
	movq	%rax, -48(%rbp)	# _46, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp107
	movq	(%rax), %rdx	# this_47->_ptr, _48
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp108
	movq	%rdx, %rsi	# _48,
	movq	%rax, %rdi	# tmp108,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp109, D.61811
	movq	%rax, %rdi	# D.61811,
.LEHB198:
	call	_Unwind_Resume	#
.LEHE198:
.L726:
# core/object.cpp:269: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp110
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB199:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE199:
# core/object.cpp:269: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp111
	movl	$1, 56(%rax)	#, this_18(D)->flags
	movq	-88(%rbp), %rax	# this, tmp112
	movl	$0, 60(%rax)	#, this_18(D)->id
	movq	-88(%rbp), %rax	# this, tmp113
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp114
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp115
	addq	$8, %rax	#, _50
	movq	%rax, -64(%rbp)	# _50, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp116
	movq	$0, (%rax)	#, this_51->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:270: 	return_val.type = ret;
	movq	-88(%rbp), %rax	# this, tmp117
	movl	-92(%rbp), %edx	# ret, tmp118
	movl	%edx, 8(%rax)	# tmp118, this_18(D)->return_val.type
# core/object.cpp:271: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp119
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp120
	movq	%rax, %rsi	# tmp120,
	movq	%rdx, %rdi	# _5,
.LEHB200:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:272: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp121
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp122
	movq	%rax, %rsi	# tmp122,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:273: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp123
	leaq	64(%rax), %rdx	#, _7
	movq	-128(%rbp), %rax	# p_param3, tmp124
	movq	%rax, %rsi	# tmp124,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:274: 	arguments.push_back(p_param4);
	movq	-88(%rbp), %rax	# this, tmp125
	addq	$64, %rax	#, _8
	movq	16(%rbp), %rsi	# p_param4,
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:275: 	arguments.push_back(p_param5);
	movq	-88(%rbp), %rax	# this, tmp126
	leaq	64(%rax), %rdx	#, _9
	movq	24(%rbp), %rax	# p_param5, tmp127
	movq	%rax, %rsi	# tmp127,
	movq	%rdx, %rdi	# _9,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE200:
# core/object.cpp:276: }
	jmp	.L727	#
.L724:
	movq	%rax, %rbx	#, tmp133
# core/object.cpp:269: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp128
	addq	$72, %rax	#, _10
	movq	%rax, -72(%rbp)	# _10, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp129
	addq	$8, %rax	#, _53
	movq	%rax, -80(%rbp)	# _53, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp130
	movq	(%rax), %rdx	# this_54->_ptr, _55
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp131
	movq	%rdx, %rsi	# _55,
	movq	%rax, %rdi	# tmp131,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:269: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp136
	addq	$64, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp139
	addq	$8, %rax	#, _12
	movq	%rax, %rdi	# _12,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L722	#
.L723:
	movq	%rax, %rbx	#, tmp140
.L722:
# core/object.cpp:269: 		id(0) {
	movq	-88(%rbp), %rax	# this, _13
	movq	%rax, %rdi	# _13,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp140, D.61812
	movq	%rax, %rdi	# D.61812,
.LEHB201:
	call	_Unwind_Resume	#
.LEHE201:
.L727:
# core/object.cpp:276: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2473:
	.section	.gcc_except_table
.LLSDA2473:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2473-.LLSDACSB2473
.LLSDACSB2473:
	.uleb128 .LEHB197-.LFB2473
	.uleb128 .LEHE197-.LEHB197
	.uleb128 .L725-.LFB2473
	.uleb128 0
	.uleb128 .LEHB198-.LFB2473
	.uleb128 .LEHE198-.LEHB198
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB199-.LFB2473
	.uleb128 .LEHE199-.LEHB199
	.uleb128 .L723-.LFB2473
	.uleb128 0
	.uleb128 .LEHB200-.LFB2473
	.uleb128 .LEHE200-.LEHB200
	.uleb128 .L724-.LFB2473
	.uleb128 0
	.uleb128 .LEHB201-.LFB2473
	.uleb128 .LEHE201-.LEHB201
	.uleb128 0
	.uleb128 0
.LLSDACSE2473:
	.text
	.size	_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_, .-_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_
	.globl	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_
	.set	_ZN10MethodInfoC1EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_,_ZN10MethodInfoC2EN7Variant4TypeERK6StringRK12PropertyInfoS7_S7_S7_S7_
	.align 2
	.globl	_ZN10MethodInfoC2ERK12PropertyInfoRK6String
	.type	_ZN10MethodInfoC2ERK12PropertyInfoRK6String, @function
_ZN10MethodInfoC2ERK12PropertyInfoRK6String:
.LFB2476:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2476
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_ret, p_ret
	movq	%rdx, -88(%rbp)	# p_name, p_name
# core/object.cpp:282: 		id(0) {
	movq	-72(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-88(%rbp), %rax	# p_name, tmp96
	movq	%rax, -32(%rbp)	# tmp96, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _20
	movq	%rax, -40(%rbp)	# _20, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp97
	movq	$0, (%rax)	#, this_21->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _22
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _23
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _23,
	movq	%rax, %rdi	# _22,
.LEHB202:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE202:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L734	#
.L733:
	movq	%rax, %rbx	#, tmp100
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _24
	movq	%rax, -48(%rbp)	# _24, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp98
	movq	(%rax), %rdx	# this_25->_ptr, _26
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp99
	movq	%rdx, %rsi	# _26,
	movq	%rax, %rdi	# tmp99,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp100, D.61813
	movq	%rax, %rdi	# D.61813,
.LEHB203:
	call	_Unwind_Resume	#
.LEHE203:
.L734:
# core/object.cpp:282: 		id(0) {
	movq	-72(%rbp), %rax	# this, tmp101
	leaq	8(%rax), %rdx	#, _2
	movq	-80(%rbp), %rax	# p_ret, tmp102
	movq	%rax, %rsi	# tmp102,
	movq	%rdx, %rdi	# _2,
.LEHB204:
	call	_ZN12PropertyInfoC1ERKS_	#
.LEHE204:
# core/object.cpp:282: 		id(0) {
	movq	-72(%rbp), %rax	# this, tmp103
	movl	$1, 56(%rax)	#, this_9(D)->flags
	movq	-72(%rbp), %rax	# this, tmp104
	movl	$0, 60(%rax)	#, this_9(D)->id
	movq	-72(%rbp), %rax	# this, tmp105
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-72(%rbp), %rax	# this, tmp106
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp107
	addq	$8, %rax	#, _28
	movq	%rax, -64(%rbp)	# _28, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp108
	movq	$0, (%rax)	#, this_29->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:283: }
	jmp	.L735	#
.L732:
	movq	%rax, %rbx	#, tmp109
# core/object.cpp:282: 		id(0) {
	movq	-72(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp109, D.61814
	movq	%rax, %rdi	# D.61814,
.LEHB205:
	call	_Unwind_Resume	#
.LEHE205:
.L735:
# core/object.cpp:283: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2476:
	.section	.gcc_except_table
.LLSDA2476:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2476-.LLSDACSB2476
.LLSDACSB2476:
	.uleb128 .LEHB202-.LFB2476
	.uleb128 .LEHE202-.LEHB202
	.uleb128 .L733-.LFB2476
	.uleb128 0
	.uleb128 .LEHB203-.LFB2476
	.uleb128 .LEHE203-.LEHB203
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB204-.LFB2476
	.uleb128 .LEHE204-.LEHB204
	.uleb128 .L732-.LFB2476
	.uleb128 0
	.uleb128 .LEHB205-.LFB2476
	.uleb128 .LEHE205-.LEHB205
	.uleb128 0
	.uleb128 0
.LLSDACSE2476:
	.text
	.size	_ZN10MethodInfoC2ERK12PropertyInfoRK6String, .-_ZN10MethodInfoC2ERK12PropertyInfoRK6String
	.globl	_ZN10MethodInfoC1ERK12PropertyInfoRK6String
	.set	_ZN10MethodInfoC1ERK12PropertyInfoRK6String,_ZN10MethodInfoC2ERK12PropertyInfoRK6String
	.align 2
	.globl	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_
	.type	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_, @function
_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_:
.LFB2479:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2479
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_ret, p_ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
# core/object.cpp:289: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp101
	movq	%rax, -32(%rbp)	# tmp101, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _28
	movq	%rax, -40(%rbp)	# _28, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp102
	movq	$0, (%rax)	#, this_29->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _30
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _31
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _31,
	movq	%rax, %rdi	# _30,
.LEHB206:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE206:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L744	#
.L743:
	movq	%rax, %rbx	#, tmp105
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _32
	movq	%rax, -48(%rbp)	# _32, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp103
	movq	(%rax), %rdx	# this_33->_ptr, _34
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp104
	movq	%rdx, %rsi	# _34,
	movq	%rax, %rdi	# tmp104,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp105, D.61815
	movq	%rax, %rdi	# D.61815,
.LEHB207:
	call	_Unwind_Resume	#
.LEHE207:
.L744:
# core/object.cpp:289: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp106
	leaq	8(%rax), %rdx	#, _2
	movq	-96(%rbp), %rax	# p_ret, tmp107
	movq	%rax, %rsi	# tmp107,
	movq	%rdx, %rdi	# _2,
.LEHB208:
	call	_ZN12PropertyInfoC1ERKS_	#
.LEHE208:
# core/object.cpp:289: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp108
	movl	$1, 56(%rax)	#, this_13(D)->flags
	movq	-88(%rbp), %rax	# this, tmp109
	movl	$0, 60(%rax)	#, this_13(D)->id
	movq	-88(%rbp), %rax	# this, tmp110
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp111
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp112
	addq	$8, %rax	#, _36
	movq	%rax, -64(%rbp)	# _36, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp113
	movq	$0, (%rax)	#, this_37->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:290: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp114
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp115
	movq	%rax, %rsi	# tmp115,
	movq	%rdx, %rdi	# _5,
.LEHB209:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE209:
# core/object.cpp:291: }
	jmp	.L745	#
.L742:
	movq	%rax, %rbx	#, tmp121
# core/object.cpp:289: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp116
	addq	$72, %rax	#, _6
	movq	%rax, -72(%rbp)	# _6, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp117
	addq	$8, %rax	#, _39
	movq	%rax, -80(%rbp)	# _39, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp118
	movq	(%rax), %rdx	# this_40->_ptr, _41
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp119
	movq	%rdx, %rsi	# _41,
	movq	%rax, %rdi	# tmp119,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:289: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp124
	addq	$64, %rax	#, _7
	movq	%rax, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp127
	addq	$8, %rax	#, _8
	movq	%rax, %rdi	# _8,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L740	#
.L741:
	movq	%rax, %rbx	#, tmp128
.L740:
# core/object.cpp:289: 		id(0) {
	movq	-88(%rbp), %rax	# this, _9
	movq	%rax, %rdi	# _9,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp128, D.61816
	movq	%rax, %rdi	# D.61816,
.LEHB210:
	call	_Unwind_Resume	#
.LEHE210:
.L745:
# core/object.cpp:291: }
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2479:
	.section	.gcc_except_table
.LLSDA2479:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2479-.LLSDACSB2479
.LLSDACSB2479:
	.uleb128 .LEHB206-.LFB2479
	.uleb128 .LEHE206-.LEHB206
	.uleb128 .L743-.LFB2479
	.uleb128 0
	.uleb128 .LEHB207-.LFB2479
	.uleb128 .LEHE207-.LEHB207
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB208-.LFB2479
	.uleb128 .LEHE208-.LEHB208
	.uleb128 .L741-.LFB2479
	.uleb128 0
	.uleb128 .LEHB209-.LFB2479
	.uleb128 .LEHE209-.LEHB209
	.uleb128 .L742-.LFB2479
	.uleb128 0
	.uleb128 .LEHB210-.LFB2479
	.uleb128 .LEHE210-.LEHB210
	.uleb128 0
	.uleb128 0
.LLSDACSE2479:
	.text
	.size	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_, .-_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_
	.globl	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_
	.set	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_,_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_
	.align 2
	.globl	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_
	.type	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_, @function
_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_:
.LFB2482:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2482
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_ret, p_ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
# core/object.cpp:297: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp102
	movq	%rax, -32(%rbp)	# tmp102, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _32
	movq	%rax, -40(%rbp)	# _32, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp103
	movq	$0, (%rax)	#, this_33->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _34
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _35
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _35,
	movq	%rax, %rdi	# _34,
.LEHB211:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE211:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L754	#
.L753:
	movq	%rax, %rbx	#, tmp106
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _36
	movq	%rax, -48(%rbp)	# _36, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp104
	movq	(%rax), %rdx	# this_37->_ptr, _38
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp105
	movq	%rdx, %rsi	# _38,
	movq	%rax, %rdi	# tmp105,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp106, D.61817
	movq	%rax, %rdi	# D.61817,
.LEHB212:
	call	_Unwind_Resume	#
.LEHE212:
.L754:
# core/object.cpp:297: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp107
	leaq	8(%rax), %rdx	#, _2
	movq	-96(%rbp), %rax	# p_ret, tmp108
	movq	%rax, %rsi	# tmp108,
	movq	%rdx, %rdi	# _2,
.LEHB213:
	call	_ZN12PropertyInfoC1ERKS_	#
.LEHE213:
# core/object.cpp:297: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp109
	movl	$1, 56(%rax)	#, this_15(D)->flags
	movq	-88(%rbp), %rax	# this, tmp110
	movl	$0, 60(%rax)	#, this_15(D)->id
	movq	-88(%rbp), %rax	# this, tmp111
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp112
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp113
	addq	$8, %rax	#, _40
	movq	%rax, -64(%rbp)	# _40, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp114
	movq	$0, (%rax)	#, this_41->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:298: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp115
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp116
	movq	%rax, %rsi	# tmp116,
	movq	%rdx, %rdi	# _5,
.LEHB214:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:299: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp117
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp118
	movq	%rax, %rsi	# tmp118,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE214:
# core/object.cpp:300: }
	jmp	.L755	#
.L752:
	movq	%rax, %rbx	#, tmp124
# core/object.cpp:297: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp119
	addq	$72, %rax	#, _7
	movq	%rax, -72(%rbp)	# _7, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp120
	addq	$8, %rax	#, _43
	movq	%rax, -80(%rbp)	# _43, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp121
	movq	(%rax), %rdx	# this_44->_ptr, _45
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp122
	movq	%rdx, %rsi	# _45,
	movq	%rax, %rdi	# tmp122,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:297: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp127
	addq	$64, %rax	#, _8
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp130
	addq	$8, %rax	#, _9
	movq	%rax, %rdi	# _9,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L750	#
.L751:
	movq	%rax, %rbx	#, tmp131
.L750:
# core/object.cpp:297: 		id(0) {
	movq	-88(%rbp), %rax	# this, _10
	movq	%rax, %rdi	# _10,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp131, D.61818
	movq	%rax, %rdi	# D.61818,
.LEHB215:
	call	_Unwind_Resume	#
.LEHE215:
.L755:
# core/object.cpp:300: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2482:
	.section	.gcc_except_table
.LLSDA2482:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2482-.LLSDACSB2482
.LLSDACSB2482:
	.uleb128 .LEHB211-.LFB2482
	.uleb128 .LEHE211-.LEHB211
	.uleb128 .L753-.LFB2482
	.uleb128 0
	.uleb128 .LEHB212-.LFB2482
	.uleb128 .LEHE212-.LEHB212
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB213-.LFB2482
	.uleb128 .LEHE213-.LEHB213
	.uleb128 .L751-.LFB2482
	.uleb128 0
	.uleb128 .LEHB214-.LFB2482
	.uleb128 .LEHE214-.LEHB214
	.uleb128 .L752-.LFB2482
	.uleb128 0
	.uleb128 .LEHB215-.LFB2482
	.uleb128 .LEHE215-.LEHB215
	.uleb128 0
	.uleb128 0
.LLSDACSE2482:
	.text
	.size	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_, .-_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_
	.globl	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_
	.set	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_,_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_
	.align 2
	.globl	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_
	.type	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_, @function
_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_:
.LFB2485:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2485
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_ret, p_ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
	movq	%r9, -128(%rbp)	# p_param3, p_param3
# core/object.cpp:306: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp103
	movq	%rax, -32(%rbp)	# tmp103, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _35
	movq	%rax, -40(%rbp)	# _35, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_36->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _37
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _38
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _38,
	movq	%rax, %rdi	# _37,
.LEHB216:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE216:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L764	#
.L763:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _39
	movq	%rax, -48(%rbp)	# _39, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_40->_ptr, _41
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _41,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.61819
	movq	%rax, %rdi	# D.61819,
.LEHB217:
	call	_Unwind_Resume	#
.LEHE217:
.L764:
# core/object.cpp:306: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp108
	leaq	8(%rax), %rdx	#, _2
	movq	-96(%rbp), %rax	# p_ret, tmp109
	movq	%rax, %rsi	# tmp109,
	movq	%rdx, %rdi	# _2,
.LEHB218:
	call	_ZN12PropertyInfoC1ERKS_	#
.LEHE218:
# core/object.cpp:306: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp110
	movl	$1, 56(%rax)	#, this_16(D)->flags
	movq	-88(%rbp), %rax	# this, tmp111
	movl	$0, 60(%rax)	#, this_16(D)->id
	movq	-88(%rbp), %rax	# this, tmp112
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp113
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp114
	addq	$8, %rax	#, _43
	movq	%rax, -64(%rbp)	# _43, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp115
	movq	$0, (%rax)	#, this_44->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:307: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp116
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp117
	movq	%rax, %rsi	# tmp117,
	movq	%rdx, %rdi	# _5,
.LEHB219:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:308: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp118
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp119
	movq	%rax, %rsi	# tmp119,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:309: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp120
	leaq	64(%rax), %rdx	#, _7
	movq	-128(%rbp), %rax	# p_param3, tmp121
	movq	%rax, %rsi	# tmp121,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE219:
# core/object.cpp:310: }
	jmp	.L765	#
.L762:
	movq	%rax, %rbx	#, tmp127
# core/object.cpp:306: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp122
	addq	$72, %rax	#, _8
	movq	%rax, -72(%rbp)	# _8, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp123
	addq	$8, %rax	#, _46
	movq	%rax, -80(%rbp)	# _46, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp124
	movq	(%rax), %rdx	# this_47->_ptr, _48
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp125
	movq	%rdx, %rsi	# _48,
	movq	%rax, %rdi	# tmp125,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:306: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp130
	addq	$64, %rax	#, _9
	movq	%rax, %rdi	# _9,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp133
	addq	$8, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L760	#
.L761:
	movq	%rax, %rbx	#, tmp134
.L760:
# core/object.cpp:306: 		id(0) {
	movq	-88(%rbp), %rax	# this, _11
	movq	%rax, %rdi	# _11,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp134, D.61820
	movq	%rax, %rdi	# D.61820,
.LEHB220:
	call	_Unwind_Resume	#
.LEHE220:
.L765:
# core/object.cpp:310: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2485:
	.section	.gcc_except_table
.LLSDA2485:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2485-.LLSDACSB2485
.LLSDACSB2485:
	.uleb128 .LEHB216-.LFB2485
	.uleb128 .LEHE216-.LEHB216
	.uleb128 .L763-.LFB2485
	.uleb128 0
	.uleb128 .LEHB217-.LFB2485
	.uleb128 .LEHE217-.LEHB217
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB218-.LFB2485
	.uleb128 .LEHE218-.LEHB218
	.uleb128 .L761-.LFB2485
	.uleb128 0
	.uleb128 .LEHB219-.LFB2485
	.uleb128 .LEHE219-.LEHB219
	.uleb128 .L762-.LFB2485
	.uleb128 0
	.uleb128 .LEHB220-.LFB2485
	.uleb128 .LEHE220-.LEHB220
	.uleb128 0
	.uleb128 0
.LLSDACSE2485:
	.text
	.size	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_, .-_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_
	.globl	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_S2_
	.set	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_S2_,_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_
	.align 2
	.globl	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_
	.type	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_, @function
_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_:
.LFB2488:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2488
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_ret, p_ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
	movq	%r9, -128(%rbp)	# p_param3, p_param3
# core/object.cpp:316: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp104
	movq	%rax, -32(%rbp)	# tmp104, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _38
	movq	%rax, -40(%rbp)	# _38, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp105
	movq	$0, (%rax)	#, this_39->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _40
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _41
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _41,
	movq	%rax, %rdi	# _40,
.LEHB221:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE221:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L774	#
.L773:
	movq	%rax, %rbx	#, tmp108
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _42
	movq	%rax, -48(%rbp)	# _42, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp106
	movq	(%rax), %rdx	# this_43->_ptr, _44
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp107
	movq	%rdx, %rsi	# _44,
	movq	%rax, %rdi	# tmp107,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp108, D.61821
	movq	%rax, %rdi	# D.61821,
.LEHB222:
	call	_Unwind_Resume	#
.LEHE222:
.L774:
# core/object.cpp:316: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp109
	leaq	8(%rax), %rdx	#, _2
	movq	-96(%rbp), %rax	# p_ret, tmp110
	movq	%rax, %rsi	# tmp110,
	movq	%rdx, %rdi	# _2,
.LEHB223:
	call	_ZN12PropertyInfoC1ERKS_	#
.LEHE223:
# core/object.cpp:316: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp111
	movl	$1, 56(%rax)	#, this_17(D)->flags
	movq	-88(%rbp), %rax	# this, tmp112
	movl	$0, 60(%rax)	#, this_17(D)->id
	movq	-88(%rbp), %rax	# this, tmp113
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp114
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp115
	addq	$8, %rax	#, _46
	movq	%rax, -64(%rbp)	# _46, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp116
	movq	$0, (%rax)	#, this_47->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:317: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp117
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp118
	movq	%rax, %rsi	# tmp118,
	movq	%rdx, %rdi	# _5,
.LEHB224:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:318: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp119
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp120
	movq	%rax, %rsi	# tmp120,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:319: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp121
	leaq	64(%rax), %rdx	#, _7
	movq	-128(%rbp), %rax	# p_param3, tmp122
	movq	%rax, %rsi	# tmp122,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:320: 	arguments.push_back(p_param4);
	movq	-88(%rbp), %rax	# this, tmp123
	addq	$64, %rax	#, _8
	movq	16(%rbp), %rsi	# p_param4,
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE224:
# core/object.cpp:321: }
	jmp	.L775	#
.L772:
	movq	%rax, %rbx	#, tmp129
# core/object.cpp:316: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp124
	addq	$72, %rax	#, _9
	movq	%rax, -72(%rbp)	# _9, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp125
	addq	$8, %rax	#, _49
	movq	%rax, -80(%rbp)	# _49, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp126
	movq	(%rax), %rdx	# this_50->_ptr, _51
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp127
	movq	%rdx, %rsi	# _51,
	movq	%rax, %rdi	# tmp127,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:316: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp132
	addq	$64, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp135
	addq	$8, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L770	#
.L771:
	movq	%rax, %rbx	#, tmp136
.L770:
# core/object.cpp:316: 		id(0) {
	movq	-88(%rbp), %rax	# this, _12
	movq	%rax, %rdi	# _12,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp136, D.61822
	movq	%rax, %rdi	# D.61822,
.LEHB225:
	call	_Unwind_Resume	#
.LEHE225:
.L775:
# core/object.cpp:321: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2488:
	.section	.gcc_except_table
.LLSDA2488:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2488-.LLSDACSB2488
.LLSDACSB2488:
	.uleb128 .LEHB221-.LFB2488
	.uleb128 .LEHE221-.LEHB221
	.uleb128 .L773-.LFB2488
	.uleb128 0
	.uleb128 .LEHB222-.LFB2488
	.uleb128 .LEHE222-.LEHB222
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB223-.LFB2488
	.uleb128 .LEHE223-.LEHB223
	.uleb128 .L771-.LFB2488
	.uleb128 0
	.uleb128 .LEHB224-.LFB2488
	.uleb128 .LEHE224-.LEHB224
	.uleb128 .L772-.LFB2488
	.uleb128 0
	.uleb128 .LEHB225-.LFB2488
	.uleb128 .LEHE225-.LEHB225
	.uleb128 0
	.uleb128 0
.LLSDACSE2488:
	.text
	.size	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_, .-_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_
	.globl	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_S2_S2_
	.set	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_S2_S2_,_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_
	.align 2
	.globl	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_
	.type	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_, @function
_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_:
.LFB2491:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2491
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_ret, p_ret
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_param1, p_param1
	movq	%r8, -120(%rbp)	# p_param2, p_param2
	movq	%r9, -128(%rbp)	# p_param3, p_param3
# core/object.cpp:327: 		id(0) {
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-104(%rbp), %rax	# p_name, tmp105
	movq	%rax, -32(%rbp)	# tmp105, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _41
	movq	%rax, -40(%rbp)	# _41, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp106
	movq	$0, (%rax)	#, this_42->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _43
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rdx	# p_str, _44
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _44,
	movq	%rax, %rdi	# _43,
.LEHB226:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE226:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L784	#
.L783:
	movq	%rax, %rbx	#, tmp109
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _45
	movq	%rax, -48(%rbp)	# _45, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp107
	movq	(%rax), %rdx	# this_46->_ptr, _47
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp108
	movq	%rdx, %rsi	# _47,
	movq	%rax, %rdi	# tmp108,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp109, D.61823
	movq	%rax, %rdi	# D.61823,
.LEHB227:
	call	_Unwind_Resume	#
.LEHE227:
.L784:
# core/object.cpp:327: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp110
	leaq	8(%rax), %rdx	#, _2
	movq	-96(%rbp), %rax	# p_ret, tmp111
	movq	%rax, %rsi	# tmp111,
	movq	%rdx, %rdi	# _2,
.LEHB228:
	call	_ZN12PropertyInfoC1ERKS_	#
.LEHE228:
# core/object.cpp:327: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp112
	movl	$1, 56(%rax)	#, this_18(D)->flags
	movq	-88(%rbp), %rax	# this, tmp113
	movl	$0, 60(%rax)	#, this_18(D)->id
	movq	-88(%rbp), %rax	# this, tmp114
	addq	$64, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
	movq	-88(%rbp), %rax	# this, tmp115
	addq	$72, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-56(%rbp), %rax	# this, tmp116
	addq	$8, %rax	#, _49
	movq	%rax, -64(%rbp)	# _49, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rax	# this, tmp117
	movq	$0, (%rax)	#, this_50->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:328: 	arguments.push_back(p_param1);
	movq	-88(%rbp), %rax	# this, tmp118
	leaq	64(%rax), %rdx	#, _5
	movq	-112(%rbp), %rax	# p_param1, tmp119
	movq	%rax, %rsi	# tmp119,
	movq	%rdx, %rdi	# _5,
.LEHB229:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:329: 	arguments.push_back(p_param2);
	movq	-88(%rbp), %rax	# this, tmp120
	leaq	64(%rax), %rdx	#, _6
	movq	-120(%rbp), %rax	# p_param2, tmp121
	movq	%rax, %rsi	# tmp121,
	movq	%rdx, %rdi	# _6,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:330: 	arguments.push_back(p_param3);
	movq	-88(%rbp), %rax	# this, tmp122
	leaq	64(%rax), %rdx	#, _7
	movq	-128(%rbp), %rax	# p_param3, tmp123
	movq	%rax, %rsi	# tmp123,
	movq	%rdx, %rdi	# _7,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:331: 	arguments.push_back(p_param4);
	movq	-88(%rbp), %rax	# this, tmp124
	addq	$64, %rax	#, _8
	movq	16(%rbp), %rsi	# p_param4,
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:332: 	arguments.push_back(p_param5);
	movq	-88(%rbp), %rax	# this, tmp125
	leaq	64(%rax), %rdx	#, _9
	movq	24(%rbp), %rax	# p_param5, tmp126
	movq	%rax, %rsi	# tmp126,
	movq	%rdx, %rdi	# _9,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE229:
# core/object.cpp:333: }
	jmp	.L785	#
.L782:
	movq	%rax, %rbx	#, tmp132
# core/object.cpp:327: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp127
	addq	$72, %rax	#, _10
	movq	%rax, -72(%rbp)	# _10, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-72(%rbp), %rax	# this, tmp128
	addq	$8, %rax	#, _52
	movq	%rax, -80(%rbp)	# _52, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp129
	movq	(%rax), %rdx	# this_53->_ptr, _54
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp130
	movq	%rdx, %rsi	# _54,
	movq	%rax, %rdi	# tmp130,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:327: 		id(0) {
	movq	-88(%rbp), %rax	# this, tmp135
	addq	$64, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	-88(%rbp), %rax	# this, tmp138
	addq	$8, %rax	#, _12
	movq	%rax, %rdi	# _12,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L780	#
.L781:
	movq	%rax, %rbx	#, tmp139
.L780:
# core/object.cpp:327: 		id(0) {
	movq	-88(%rbp), %rax	# this, _13
	movq	%rax, %rdi	# _13,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp139, D.61824
	movq	%rax, %rdi	# D.61824,
.LEHB230:
	call	_Unwind_Resume	#
.LEHE230:
.L785:
# core/object.cpp:333: }
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2491:
	.section	.gcc_except_table
.LLSDA2491:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2491-.LLSDACSB2491
.LLSDACSB2491:
	.uleb128 .LEHB226-.LFB2491
	.uleb128 .LEHE226-.LEHB226
	.uleb128 .L783-.LFB2491
	.uleb128 0
	.uleb128 .LEHB227-.LFB2491
	.uleb128 .LEHE227-.LEHB227
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB228-.LFB2491
	.uleb128 .LEHE228-.LEHB228
	.uleb128 .L781-.LFB2491
	.uleb128 0
	.uleb128 .LEHB229-.LFB2491
	.uleb128 .LEHE229-.LEHB229
	.uleb128 .L782-.LFB2491
	.uleb128 0
	.uleb128 .LEHB230-.LFB2491
	.uleb128 .LEHE230-.LEHB230
	.uleb128 0
	.uleb128 0
.LLSDACSE2491:
	.text
	.size	_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_, .-_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_
	.globl	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_
	.set	_ZN10MethodInfoC1ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_,_ZN10MethodInfoC2ERK12PropertyInfoRK6StringS2_S2_S2_S2_S2_
	.section	.rodata
.LC16:
	.string	"source"
.LC17:
	.string	"signal"
.LC18:
	.string	"target"
.LC19:
	.string	"method"
.LC20:
	.string	"binds"
	.text
	.align 2
	.globl	_ZNK6Object10Connectioncv7VariantEv
	.type	_ZNK6Object10Connectioncv7VariantEv, @function
_ZNK6Object10Connectioncv7VariantEv:
.LFB2493:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2493
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$424, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -424(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -432(%rbp)	# this, this
# core/object.cpp:337: 	Dictionary d;
	leaq	-408(%rbp), %rax	#, tmp119
	movq	%rax, %rdi	# tmp119,
.LEHB231:
	call	_ZN10DictionaryC1Ev	#
.LEHE231:
# core/object.cpp:338: 	d["source"] = source;
	movq	-432(%rbp), %rax	# this, tmp120
	movq	(%rax), %rdx	# this_29(D)->source, _1
# core/object.cpp:338: 	d["source"] = source;
	leaq	-400(%rbp), %rax	#, tmp121
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# tmp121,
.LEHB232:
	call	_ZN7VariantC1EPK6Object	#
.LEHE232:
# core/object.cpp:338: 	d["source"] = source;
	leaq	-368(%rbp), %rax	#, tmp122
	movl	$.LC16, %esi	#,
	movq	%rax, %rdi	# tmp122,
.LEHB233:
	call	_ZN7VariantC1EPKc	#
.LEHE233:
# core/object.cpp:338: 	d["source"] = source;
	leaq	-368(%rbp), %rdx	#, tmp123
	leaq	-408(%rbp), %rax	#, tmp124
	movq	%rdx, %rsi	# tmp123,
	movq	%rax, %rdi	# tmp124,
.LEHB234:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _2
# core/object.cpp:338: 	d["source"] = source;
	leaq	-400(%rbp), %rax	#, tmp125
	movq	%rax, %rsi	# tmp125,
	movq	%rdx, %rdi	# _2,
	call	_ZN7VariantaSERKS_	#
.LEHE234:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.39017.type, _91
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _91
	je	.L863	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp126
	movq	%rax, %rdi	# tmp126,
	call	_ZN7Variant5clearEv	#
.L863:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.39018.type, _90
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _90
	je	.L864	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp127
	movq	%rax, %rdi	# tmp127,
	call	_ZN7Variant5clearEv	#
.L864:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:339: 	d["signal"] = signal;
	movq	-432(%rbp), %rax	# this, tmp128
	leaq	8(%rax), %rdx	#, _3
# core/object.cpp:339: 	d["signal"] = signal;
	leaq	-336(%rbp), %rax	#, tmp129
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp129,
.LEHB235:
	call	_ZN7VariantC1ERK10StringName	#
.LEHE235:
# core/object.cpp:339: 	d["signal"] = signal;
	leaq	-304(%rbp), %rax	#, tmp130
	movl	$.LC17, %esi	#,
	movq	%rax, %rdi	# tmp130,
.LEHB236:
	call	_ZN7VariantC1EPKc	#
.LEHE236:
# core/object.cpp:339: 	d["signal"] = signal;
	leaq	-304(%rbp), %rdx	#, tmp131
	leaq	-408(%rbp), %rax	#, tmp132
	movq	%rdx, %rsi	# tmp131,
	movq	%rax, %rdi	# tmp132,
.LEHB237:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _4
# core/object.cpp:339: 	d["signal"] = signal;
	leaq	-336(%rbp), %rax	#, tmp133
	movq	%rax, %rsi	# tmp133,
	movq	%rdx, %rdi	# _4,
	call	_ZN7VariantaSERKS_	#
.LEHE237:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.39019.type, _93
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _93
	je	.L865	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp134
	movq	%rax, %rdi	# tmp134,
	call	_ZN7Variant5clearEv	#
.L865:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.39020.type, _92
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _92
	je	.L866	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp135
	movq	%rax, %rdi	# tmp135,
	call	_ZN7Variant5clearEv	#
.L866:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:340: 	d["target"] = target;
	movq	-432(%rbp), %rax	# this, tmp136
	movq	16(%rax), %rdx	# this_29(D)->target, _5
# core/object.cpp:340: 	d["target"] = target;
	leaq	-272(%rbp), %rax	#, tmp137
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp137,
.LEHB238:
	call	_ZN7VariantC1EPK6Object	#
.LEHE238:
# core/object.cpp:340: 	d["target"] = target;
	leaq	-240(%rbp), %rax	#, tmp138
	movl	$.LC18, %esi	#,
	movq	%rax, %rdi	# tmp138,
.LEHB239:
	call	_ZN7VariantC1EPKc	#
.LEHE239:
# core/object.cpp:340: 	d["target"] = target;
	leaq	-240(%rbp), %rdx	#, tmp139
	leaq	-408(%rbp), %rax	#, tmp140
	movq	%rdx, %rsi	# tmp139,
	movq	%rax, %rdi	# tmp140,
.LEHB240:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _6
# core/object.cpp:340: 	d["target"] = target;
	leaq	-272(%rbp), %rax	#, tmp141
	movq	%rax, %rsi	# tmp141,
	movq	%rdx, %rdi	# _6,
	call	_ZN7VariantaSERKS_	#
.LEHE240:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.39021.type, _95
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _95
	je	.L867	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp142
	movq	%rax, %rdi	# tmp142,
	call	_ZN7Variant5clearEv	#
.L867:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.39022.type, _94
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _94
	je	.L868	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp143
	movq	%rax, %rdi	# tmp143,
	call	_ZN7Variant5clearEv	#
.L868:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:341: 	d["method"] = method;
	movq	-432(%rbp), %rax	# this, tmp144
	leaq	24(%rax), %rdx	#, _7
# core/object.cpp:341: 	d["method"] = method;
	leaq	-208(%rbp), %rax	#, tmp145
	movq	%rdx, %rsi	# _7,
	movq	%rax, %rdi	# tmp145,
.LEHB241:
	call	_ZN7VariantC1ERK10StringName	#
.LEHE241:
# core/object.cpp:341: 	d["method"] = method;
	leaq	-176(%rbp), %rax	#, tmp146
	movl	$.LC19, %esi	#,
	movq	%rax, %rdi	# tmp146,
.LEHB242:
	call	_ZN7VariantC1EPKc	#
.LEHE242:
# core/object.cpp:341: 	d["method"] = method;
	leaq	-176(%rbp), %rdx	#, tmp147
	leaq	-408(%rbp), %rax	#, tmp148
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# tmp148,
.LEHB243:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _8
# core/object.cpp:341: 	d["method"] = method;
	leaq	-208(%rbp), %rax	#, tmp149
	movq	%rax, %rsi	# tmp149,
	movq	%rdx, %rdi	# _8,
	call	_ZN7VariantaSERKS_	#
.LEHE243:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.39023.type, _97
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _97
	je	.L869	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN7Variant5clearEv	#
.L869:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.39024.type, _96
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _96
	je	.L870	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp151
	movq	%rax, %rdi	# tmp151,
	call	_ZN7Variant5clearEv	#
.L870:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:342: 	d["flags"] = flags;
	movq	-432(%rbp), %rax	# this, tmp152
	movl	32(%rax), %edx	# this_29(D)->flags, _9
# core/object.cpp:342: 	d["flags"] = flags;
	leaq	-144(%rbp), %rax	#, tmp153
	movl	%edx, %esi	# _9,
	movq	%rax, %rdi	# tmp153,
.LEHB244:
	call	_ZN7VariantC1Ej	#
.LEHE244:
# core/object.cpp:342: 	d["flags"] = flags;
	leaq	-112(%rbp), %rax	#, tmp154
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp154,
.LEHB245:
	call	_ZN7VariantC1EPKc	#
.LEHE245:
# core/object.cpp:342: 	d["flags"] = flags;
	leaq	-112(%rbp), %rdx	#, tmp155
	leaq	-408(%rbp), %rax	#, tmp156
	movq	%rdx, %rsi	# tmp155,
	movq	%rax, %rdi	# tmp156,
.LEHB246:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _10
# core/object.cpp:342: 	d["flags"] = flags;
	leaq	-144(%rbp), %rax	#, tmp157
	movq	%rax, %rsi	# tmp157,
	movq	%rdx, %rdi	# _10,
	call	_ZN7VariantaSERKS_	#
.LEHE246:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.39025.type, _99
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _99
	je	.L871	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN7Variant5clearEv	#
.L871:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.39026.type, _98
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _98
	je	.L872	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp159
	movq	%rax, %rdi	# tmp159,
	call	_ZN7Variant5clearEv	#
.L872:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:343: 	d["binds"] = binds;
	movq	-432(%rbp), %rax	# this, tmp160
	leaq	40(%rax), %rdx	#, _11
# core/object.cpp:343: 	d["binds"] = binds;
	leaq	-80(%rbp), %rax	#, tmp161
	movq	%rdx, %rsi	# _11,
	movq	%rax, %rdi	# tmp161,
.LEHB247:
	call	_ZN7VariantC1ERK6VectorIS_E	#
.LEHE247:
# core/object.cpp:343: 	d["binds"] = binds;
	leaq	-48(%rbp), %rax	#, tmp162
	movl	$.LC20, %esi	#,
	movq	%rax, %rdi	# tmp162,
.LEHB248:
	call	_ZN7VariantC1EPKc	#
.LEHE248:
# core/object.cpp:343: 	d["binds"] = binds;
	leaq	-48(%rbp), %rdx	#, tmp163
	leaq	-408(%rbp), %rax	#, tmp164
	movq	%rdx, %rsi	# tmp163,
	movq	%rax, %rdi	# tmp164,
.LEHB249:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _12
# core/object.cpp:343: 	d["binds"] = binds;
	leaq	-80(%rbp), %rax	#, tmp165
	movq	%rax, %rsi	# tmp165,
	movq	%rdx, %rdi	# _12,
	call	_ZN7VariantaSERKS_	#
.LEHE249:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39027.type, _101
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _101
	je	.L873	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp166
	movq	%rax, %rdi	# tmp166,
	call	_ZN7Variant5clearEv	#
.L873:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39028.type, _100
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _100
	je	.L874	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp167
	movq	%rax, %rdi	# tmp167,
	call	_ZN7Variant5clearEv	#
.L874:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:344: 	return d;
	leaq	-408(%rbp), %rdx	#, tmp168
	movq	-424(%rbp), %rax	# <retval>, tmp169
	movq	%rdx, %rsi	# tmp168,
	movq	%rax, %rdi	# tmp169,
.LEHB250:
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE250:
	nop	
# core/object.cpp:337: 	Dictionary d;
	leaq	-408(%rbp), %rax	#, tmp170
	movq	%rax, %rdi	# tmp170,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:344: 	return d;
	jmp	.L862	#
.L827:
	movq	%rax, %rbx	#, tmp173
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.39017.type, _102
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _102
	je	.L875	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp171
	movq	%rax, %rdi	# tmp171,
	call	_ZN7Variant5clearEv	#
.L875:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L802	#
.L826:
	movq	%rax, %rbx	#, tmp172
.L802:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.39018.type, _103
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _103
	je	.L876	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp176
	movq	%rax, %rdi	# tmp176,
	call	_ZN7Variant5clearEv	#
.L876:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L804	#
.L829:
	movq	%rax, %rbx	#, tmp181
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.39019.type, _104
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _104
	je	.L877	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp179
	movq	%rax, %rdi	# tmp179,
	call	_ZN7Variant5clearEv	#
.L877:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L807	#
.L828:
	movq	%rax, %rbx	#, tmp180
.L807:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.39020.type, _105
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _105
	je	.L878	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp184
	movq	%rax, %rdi	# tmp184,
	call	_ZN7Variant5clearEv	#
.L878:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L804	#
.L831:
	movq	%rax, %rbx	#, tmp187
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.39021.type, _106
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _106
	je	.L879	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp185
	movq	%rax, %rdi	# tmp185,
	call	_ZN7Variant5clearEv	#
.L879:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L811	#
.L830:
	movq	%rax, %rbx	#, tmp186
.L811:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.39022.type, _107
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _107
	je	.L880	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN7Variant5clearEv	#
.L880:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L804	#
.L833:
	movq	%rax, %rbx	#, tmp193
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.39023.type, _108
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _108
	je	.L881	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp191
	movq	%rax, %rdi	# tmp191,
	call	_ZN7Variant5clearEv	#
.L881:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L815	#
.L832:
	movq	%rax, %rbx	#, tmp192
.L815:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.39024.type, _109
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _109
	je	.L882	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN7Variant5clearEv	#
.L882:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L804	#
.L835:
	movq	%rax, %rbx	#, tmp199
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.39025.type, _110
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _110
	je	.L883	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp197
	movq	%rax, %rdi	# tmp197,
	call	_ZN7Variant5clearEv	#
.L883:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L819	#
.L834:
	movq	%rax, %rbx	#, tmp198
.L819:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.39026.type, _111
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _111
	je	.L884	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp202
	movq	%rax, %rdi	# tmp202,
	call	_ZN7Variant5clearEv	#
.L884:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L804	#
.L837:
	movq	%rax, %rbx	#, tmp205
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39027.type, _112
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _112
	je	.L885	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp203
	movq	%rax, %rdi	# tmp203,
	call	_ZN7Variant5clearEv	#
.L885:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L823	#
.L836:
	movq	%rax, %rbx	#, tmp204
.L823:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39028.type, _113
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _113
	je	.L886	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp208
	movq	%rax, %rdi	# tmp208,
	call	_ZN7Variant5clearEv	#
.L886:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L804	#
.L825:
	movq	%rax, %rbx	#, tmp177
.L804:
# core/object.cpp:337: 	Dictionary d;
	leaq	-408(%rbp), %rax	#, tmp209
	movq	%rax, %rdi	# tmp209,
	call	_ZN10DictionaryD1Ev	#
	movq	%rbx, %rax	# tmp177, D.61825
	movq	%rax, %rdi	# D.61825,
.LEHB251:
	call	_Unwind_Resume	#
.LEHE251:
.L862:
# core/object.cpp:345: }
	movq	-424(%rbp), %rax	# <retval>,
	addq	$424, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2493:
	.section	.gcc_except_table
.LLSDA2493:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2493-.LLSDACSB2493
.LLSDACSB2493:
	.uleb128 .LEHB231-.LFB2493
	.uleb128 .LEHE231-.LEHB231
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB232-.LFB2493
	.uleb128 .LEHE232-.LEHB232
	.uleb128 .L825-.LFB2493
	.uleb128 0
	.uleb128 .LEHB233-.LFB2493
	.uleb128 .LEHE233-.LEHB233
	.uleb128 .L826-.LFB2493
	.uleb128 0
	.uleb128 .LEHB234-.LFB2493
	.uleb128 .LEHE234-.LEHB234
	.uleb128 .L827-.LFB2493
	.uleb128 0
	.uleb128 .LEHB235-.LFB2493
	.uleb128 .LEHE235-.LEHB235
	.uleb128 .L825-.LFB2493
	.uleb128 0
	.uleb128 .LEHB236-.LFB2493
	.uleb128 .LEHE236-.LEHB236
	.uleb128 .L828-.LFB2493
	.uleb128 0
	.uleb128 .LEHB237-.LFB2493
	.uleb128 .LEHE237-.LEHB237
	.uleb128 .L829-.LFB2493
	.uleb128 0
	.uleb128 .LEHB238-.LFB2493
	.uleb128 .LEHE238-.LEHB238
	.uleb128 .L825-.LFB2493
	.uleb128 0
	.uleb128 .LEHB239-.LFB2493
	.uleb128 .LEHE239-.LEHB239
	.uleb128 .L830-.LFB2493
	.uleb128 0
	.uleb128 .LEHB240-.LFB2493
	.uleb128 .LEHE240-.LEHB240
	.uleb128 .L831-.LFB2493
	.uleb128 0
	.uleb128 .LEHB241-.LFB2493
	.uleb128 .LEHE241-.LEHB241
	.uleb128 .L825-.LFB2493
	.uleb128 0
	.uleb128 .LEHB242-.LFB2493
	.uleb128 .LEHE242-.LEHB242
	.uleb128 .L832-.LFB2493
	.uleb128 0
	.uleb128 .LEHB243-.LFB2493
	.uleb128 .LEHE243-.LEHB243
	.uleb128 .L833-.LFB2493
	.uleb128 0
	.uleb128 .LEHB244-.LFB2493
	.uleb128 .LEHE244-.LEHB244
	.uleb128 .L825-.LFB2493
	.uleb128 0
	.uleb128 .LEHB245-.LFB2493
	.uleb128 .LEHE245-.LEHB245
	.uleb128 .L834-.LFB2493
	.uleb128 0
	.uleb128 .LEHB246-.LFB2493
	.uleb128 .LEHE246-.LEHB246
	.uleb128 .L835-.LFB2493
	.uleb128 0
	.uleb128 .LEHB247-.LFB2493
	.uleb128 .LEHE247-.LEHB247
	.uleb128 .L825-.LFB2493
	.uleb128 0
	.uleb128 .LEHB248-.LFB2493
	.uleb128 .LEHE248-.LEHB248
	.uleb128 .L836-.LFB2493
	.uleb128 0
	.uleb128 .LEHB249-.LFB2493
	.uleb128 .LEHE249-.LEHB249
	.uleb128 .L837-.LFB2493
	.uleb128 0
	.uleb128 .LEHB250-.LFB2493
	.uleb128 .LEHE250-.LEHB250
	.uleb128 .L825-.LFB2493
	.uleb128 0
	.uleb128 .LEHB251-.LFB2493
	.uleb128 .LEHE251-.LEHB251
	.uleb128 0
	.uleb128 0
.LLSDACSE2493:
	.text
	.size	_ZNK6Object10Connectioncv7VariantEv, .-_ZNK6Object10Connectioncv7VariantEv
	.align 2
	.globl	_ZNK6Object10ConnectionltERKS0_
	.type	_ZNK6Object10ConnectionltERKS0_, @function
_ZNK6Object10ConnectionltERKS0_:
.LFB2494:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_conn, p_conn
# core/object.cpp:349: 	if (source == p_conn.source) {
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_18(D)->source, _1
# core/object.cpp:349: 	if (source == p_conn.source) {
	movq	-64(%rbp), %rax	# p_conn, tmp106
	movq	(%rax), %rax	# p_conn_19(D)->source, _2
# core/object.cpp:349: 	if (source == p_conn.source) {
	cmpq	%rax, %rdx	# _2, _1
	jne	.L888	#,
# core/object.cpp:351: 		if (signal == p_conn.signal) {
	movq	-64(%rbp), %rax	# p_conn, tmp107
	addq	$8, %rax	#, _3
# core/object.cpp:351: 		if (signal == p_conn.signal) {
	movq	-56(%rbp), %rdx	# this, tmp108
	addq	$8, %rdx	#, _4
	movq	%rdx, -8(%rbp)	# _4, this
	movq	%rax, -16(%rbp)	# _3, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-8(%rbp), %rax	# this, tmp109
	movq	(%rax), %rdx	# this_25->_data, _27
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-16(%rbp), %rax	# p_name, tmp110
	movq	(%rax), %rax	# p_name_26->_data, _28
	cmpq	%rax, %rdx	# _28, _27
	sete	%al	#, D.54791
# core/object.cpp:351: 		if (signal == p_conn.signal) {
	testb	%al, %al	# D.54791
	je	.L890	#,
# core/object.cpp:353: 			if (target == p_conn.target) {
	movq	-56(%rbp), %rax	# this, tmp111
	movq	16(%rax), %rdx	# this_18(D)->target, _5
# core/object.cpp:353: 			if (target == p_conn.target) {
	movq	-64(%rbp), %rax	# p_conn, tmp112
	movq	16(%rax), %rax	# p_conn_19(D)->target, _6
# core/object.cpp:353: 			if (target == p_conn.target) {
	cmpq	%rax, %rdx	# _6, _5
	jne	.L891	#,
# core/object.cpp:355: 				return method < p_conn.method;
	movq	-64(%rbp), %rax	# p_conn, tmp113
	addq	$24, %rax	#, _7
# core/object.cpp:355: 				return method < p_conn.method;
	movq	-56(%rbp), %rdx	# this, tmp114
	addq	$24, %rdx	#, _8
	movq	%rdx, -24(%rbp)	# _8, this
	movq	%rax, -32(%rbp)	# _7, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-24(%rbp), %rax	# this, tmp115
	movq	(%rax), %rdx	# this_30->_data, _32
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-32(%rbp), %rax	# p_name, tmp116
	movq	(%rax), %rax	# p_name_31->_data, _33
	cmpq	%rax, %rdx	# _33, _32
	setb	%al	#, D.54796
# core/object.cpp:355: 				return method < p_conn.method;
	jmp	.L893	#
.L891:
# core/object.cpp:358: 				return target < p_conn.target;
	movq	-56(%rbp), %rax	# this, tmp117
	movq	16(%rax), %rdx	# this_18(D)->target, _9
# core/object.cpp:358: 				return target < p_conn.target;
	movq	-64(%rbp), %rax	# p_conn, tmp118
	movq	16(%rax), %rax	# p_conn_19(D)->target, _10
	cmpq	%rax, %rdx	# _10, _9
	setb	%al	#, D.54796
	jmp	.L893	#
.L890:
# core/object.cpp:361: 			return signal < p_conn.signal;
	movq	-64(%rbp), %rax	# p_conn, tmp119
	addq	$8, %rax	#, _11
# core/object.cpp:361: 			return signal < p_conn.signal;
	movq	-56(%rbp), %rdx	# this, tmp120
	addq	$8, %rdx	#, _12
	movq	%rdx, -40(%rbp)	# _12, this
	movq	%rax, -48(%rbp)	# _11, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-40(%rbp), %rax	# this, tmp121
	movq	(%rax), %rdx	# this_35->_data, _37
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-48(%rbp), %rax	# p_name, tmp122
	movq	(%rax), %rax	# p_name_36->_data, _38
	cmpq	%rax, %rdx	# _38, _37
	setb	%al	#, D.54796
# core/object.cpp:361: 			return signal < p_conn.signal;
	jmp	.L893	#
.L888:
# core/object.cpp:363: 		return source < p_conn.source;
	movq	-56(%rbp), %rax	# this, tmp123
	movq	(%rax), %rdx	# this_18(D)->source, _13
# core/object.cpp:363: 		return source < p_conn.source;
	movq	-64(%rbp), %rax	# p_conn, tmp124
	movq	(%rax), %rax	# p_conn_19(D)->source, _14
	cmpq	%rax, %rdx	# _14, _13
	setb	%al	#, D.54796
.L893:
# core/object.cpp:365: }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2494:
	.size	_ZNK6Object10ConnectionltERKS0_, .-_ZNK6Object10ConnectionltERKS0_
	.align 2
	.globl	_ZN6Object10ConnectionC2ERK7Variant
	.type	_ZN6Object10ConnectionC2ERK7Variant, @function
_ZN6Object10ConnectionC2ERK7Variant:
.LFB2496:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2496
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$488, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -488(%rbp)	# this, this
	movq	%rsi, -496(%rbp)	# p_variant, p_variant
# core/object.cpp:366: Object::Connection::Connection(const Variant &p_variant) {
	movq	-488(%rbp), %rax	# this, tmp138
	addq	$8, %rax	#, _1
	movq	%rax, %rdi	# _1,
.LEHB252:
	call	_ZN10StringNameC1Ev	#
.LEHE252:
	movq	-488(%rbp), %rax	# this, tmp139
	addq	$24, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB253:
	call	_ZN10StringNameC1Ev	#
.LEHE253:
# core/object.cpp:366: Object::Connection::Connection(const Variant &p_variant) {
	movq	-488(%rbp), %rax	# this, tmp140
	addq	$40, %rax	#, _3
	movq	%rax, -24(%rbp)	# _3, this
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	movq	-24(%rbp), %rax	# this, tmp141
	addq	$8, %rax	#, _140
	movq	%rax, -32(%rbp)	# _140, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp142
	movq	$0, (%rax)	#, this_141->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:368: 	Dictionary d = p_variant;
	leaq	-472(%rbp), %rax	#, tmp143
	movq	-496(%rbp), %rdx	# p_variant, tmp144
	movq	%rdx, %rsi	# tmp144,
	movq	%rax, %rdi	# tmp143,
.LEHB254:
	call	_ZNK7Variantcv10DictionaryEv	#
.LEHE254:
# core/object.cpp:369: 	if (d.has("source"))
	leaq	-464(%rbp), %rax	#, tmp145
	movl	$.LC16, %esi	#,
	movq	%rax, %rdi	# tmp145,
.LEHB255:
	call	_ZN7VariantC1EPKc	#
.LEHE255:
# core/object.cpp:369: 	if (d.has("source"))
	leaq	-464(%rbp), %rdx	#, tmp146
	leaq	-472(%rbp), %rax	#, tmp147
	movq	%rdx, %rsi	# tmp146,
	movq	%rax, %rdi	# tmp147,
.LEHB256:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE256:
	movl	%eax, %ebx	#, _44
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.39058.type, _142
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _142
	je	.L981	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp148
	movq	%rax, %rdi	# tmp148,
	call	_ZN7Variant5clearEv	#
.L981:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:369: 	if (d.has("source"))
	testb	%bl, %bl	# _44
	je	.L897	#,
# core/object.cpp:370: 		source = d["source"];
	leaq	-432(%rbp), %rax	#, tmp149
	movl	$.LC16, %esi	#,
	movq	%rax, %rdi	# tmp149,
.LEHB257:
	call	_ZN7VariantC1EPKc	#
.LEHE257:
# core/object.cpp:370: 		source = d["source"];
	leaq	-432(%rbp), %rdx	#, tmp150
	leaq	-472(%rbp), %rax	#, tmp151
	movq	%rdx, %rsi	# tmp150,
	movq	%rax, %rdi	# tmp151,
.LEHB258:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdi	# _4,
	call	_ZNK7VariantcvP6ObjectEv	#
.LEHE258:
# core/object.cpp:370: 		source = d["source"];
	movq	-488(%rbp), %rdx	# this, tmp152
	movq	%rax, (%rdx)	# _5, this_36(D)->source
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.39059.type, _143
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _143
	je	.L982	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp153
	movq	%rax, %rdi	# tmp153,
	call	_ZN7Variant5clearEv	#
.L982:
# ./core/variant.h:423: 	}
	nop	
.L897:
# core/object.cpp:371: 	if (d.has("signal"))
	leaq	-400(%rbp), %rax	#, tmp154
	movl	$.LC17, %esi	#,
	movq	%rax, %rdi	# tmp154,
.LEHB259:
	call	_ZN7VariantC1EPKc	#
.LEHE259:
# core/object.cpp:371: 	if (d.has("signal"))
	leaq	-400(%rbp), %rdx	#, tmp155
	leaq	-472(%rbp), %rax	#, tmp156
	movq	%rdx, %rsi	# tmp155,
	movq	%rax, %rdi	# tmp156,
.LEHB260:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE260:
	movl	%eax, %ebx	#, _57
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.39060.type, _144
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _144
	je	.L983	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp157
	movq	%rax, %rdi	# tmp157,
	call	_ZN7Variant5clearEv	#
.L983:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:371: 	if (d.has("signal"))
	testb	%bl, %bl	# _57
	je	.L900	#,
# core/object.cpp:372: 		signal = d["signal"];
	leaq	-368(%rbp), %rax	#, tmp158
	movl	$.LC17, %esi	#,
	movq	%rax, %rdi	# tmp158,
.LEHB261:
	call	_ZN7VariantC1EPKc	#
.LEHE261:
# core/object.cpp:372: 		signal = d["signal"];
	leaq	-368(%rbp), %rdx	#, tmp159
	leaq	-472(%rbp), %rax	#, tmp160
	movq	%rdx, %rsi	# tmp159,
	movq	%rax, %rdi	# tmp160,
.LEHB262:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _6
# core/object.cpp:372: 		signal = d["signal"];
	leaq	-376(%rbp), %rax	#, tmp161
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# tmp161,
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE262:
# core/object.cpp:372: 		signal = d["signal"];
	movq	-488(%rbp), %rax	# this, tmp162
	leaq	8(%rax), %rdx	#, _7
	leaq	-376(%rbp), %rax	#, tmp163
	movq	%rax, %rsi	# tmp163,
	movq	%rdx, %rdi	# _7,
.LEHB263:
	call	_ZN10StringNameaSERKS_	#
.LEHE263:
# core/object.cpp:372: 		signal = d["signal"];
	leaq	-376(%rbp), %rax	#, tmp164
	movq	%rax, %rdi	# tmp164,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.39062.type, _145
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _145
	je	.L984	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp165
	movq	%rax, %rdi	# tmp165,
	call	_ZN7Variant5clearEv	#
.L984:
# ./core/variant.h:423: 	}
	nop	
.L900:
# core/object.cpp:373: 	if (d.has("target"))
	leaq	-336(%rbp), %rax	#, tmp166
	movl	$.LC18, %esi	#,
	movq	%rax, %rdi	# tmp166,
.LEHB264:
	call	_ZN7VariantC1EPKc	#
.LEHE264:
# core/object.cpp:373: 	if (d.has("target"))
	leaq	-336(%rbp), %rdx	#, tmp167
	leaq	-472(%rbp), %rax	#, tmp168
	movq	%rdx, %rsi	# tmp167,
	movq	%rax, %rdi	# tmp168,
.LEHB265:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE265:
	movl	%eax, %ebx	#, _73
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.39063.type, _146
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _146
	je	.L985	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp169
	movq	%rax, %rdi	# tmp169,
	call	_ZN7Variant5clearEv	#
.L985:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:373: 	if (d.has("target"))
	testb	%bl, %bl	# _73
	je	.L903	#,
# core/object.cpp:374: 		target = d["target"];
	leaq	-304(%rbp), %rax	#, tmp170
	movl	$.LC18, %esi	#,
	movq	%rax, %rdi	# tmp170,
.LEHB266:
	call	_ZN7VariantC1EPKc	#
.LEHE266:
# core/object.cpp:374: 		target = d["target"];
	leaq	-304(%rbp), %rdx	#, tmp171
	leaq	-472(%rbp), %rax	#, tmp172
	movq	%rdx, %rsi	# tmp171,
	movq	%rax, %rdi	# tmp172,
.LEHB267:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdi	# _8,
	call	_ZNK7VariantcvP6ObjectEv	#
.LEHE267:
# core/object.cpp:374: 		target = d["target"];
	movq	-488(%rbp), %rdx	# this, tmp173
	movq	%rax, 16(%rdx)	# _9, this_36(D)->target
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.39064.type, _147
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _147
	je	.L986	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp174
	movq	%rax, %rdi	# tmp174,
	call	_ZN7Variant5clearEv	#
.L986:
# ./core/variant.h:423: 	}
	nop	
.L903:
# core/object.cpp:375: 	if (d.has("method"))
	leaq	-272(%rbp), %rax	#, tmp175
	movl	$.LC19, %esi	#,
	movq	%rax, %rdi	# tmp175,
.LEHB268:
	call	_ZN7VariantC1EPKc	#
.LEHE268:
# core/object.cpp:375: 	if (d.has("method"))
	leaq	-272(%rbp), %rdx	#, tmp176
	leaq	-472(%rbp), %rax	#, tmp177
	movq	%rdx, %rsi	# tmp176,
	movq	%rax, %rdi	# tmp177,
.LEHB269:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE269:
	movl	%eax, %ebx	#, _86
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.39065.type, _148
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _148
	je	.L987	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp178
	movq	%rax, %rdi	# tmp178,
	call	_ZN7Variant5clearEv	#
.L987:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:375: 	if (d.has("method"))
	testb	%bl, %bl	# _86
	je	.L906	#,
# core/object.cpp:376: 		method = d["method"];
	leaq	-240(%rbp), %rax	#, tmp179
	movl	$.LC19, %esi	#,
	movq	%rax, %rdi	# tmp179,
.LEHB270:
	call	_ZN7VariantC1EPKc	#
.LEHE270:
# core/object.cpp:376: 		method = d["method"];
	leaq	-240(%rbp), %rdx	#, tmp180
	leaq	-472(%rbp), %rax	#, tmp181
	movq	%rdx, %rsi	# tmp180,
	movq	%rax, %rdi	# tmp181,
.LEHB271:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _10
# core/object.cpp:376: 		method = d["method"];
	leaq	-248(%rbp), %rax	#, tmp182
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp182,
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE271:
# core/object.cpp:376: 		method = d["method"];
	movq	-488(%rbp), %rax	# this, tmp183
	leaq	24(%rax), %rdx	#, _11
	leaq	-248(%rbp), %rax	#, tmp184
	movq	%rax, %rsi	# tmp184,
	movq	%rdx, %rdi	# _11,
.LEHB272:
	call	_ZN10StringNameaSERKS_	#
.LEHE272:
# core/object.cpp:376: 		method = d["method"];
	leaq	-248(%rbp), %rax	#, tmp185
	movq	%rax, %rdi	# tmp185,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.39067.type, _149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _149
	je	.L988	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp186
	movq	%rax, %rdi	# tmp186,
	call	_ZN7Variant5clearEv	#
.L988:
# ./core/variant.h:423: 	}
	nop	
.L906:
# core/object.cpp:377: 	if (d.has("flags"))
	leaq	-208(%rbp), %rax	#, tmp187
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp187,
.LEHB273:
	call	_ZN7VariantC1EPKc	#
.LEHE273:
# core/object.cpp:377: 	if (d.has("flags"))
	leaq	-208(%rbp), %rdx	#, tmp188
	leaq	-472(%rbp), %rax	#, tmp189
	movq	%rdx, %rsi	# tmp188,
	movq	%rax, %rdi	# tmp189,
.LEHB274:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE274:
	movl	%eax, %ebx	#, _102
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.39068.type, _150
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _150
	je	.L989	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN7Variant5clearEv	#
.L989:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:377: 	if (d.has("flags"))
	testb	%bl, %bl	# _102
	je	.L909	#,
# core/object.cpp:378: 		flags = d["flags"];
	leaq	-176(%rbp), %rax	#, tmp191
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp191,
.LEHB275:
	call	_ZN7VariantC1EPKc	#
.LEHE275:
# core/object.cpp:378: 		flags = d["flags"];
	leaq	-176(%rbp), %rdx	#, tmp192
	leaq	-472(%rbp), %rax	#, tmp193
	movq	%rdx, %rsi	# tmp192,
	movq	%rax, %rdi	# tmp193,
.LEHB276:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdi	# _12,
	call	_ZNK7VariantcvjEv	#
.LEHE276:
# core/object.cpp:378: 		flags = d["flags"];
	movq	-488(%rbp), %rdx	# this, tmp194
	movl	%eax, 32(%rdx)	# _13, this_36(D)->flags
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.39069.type, _151
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _151
	je	.L990	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN7Variant5clearEv	#
.L990:
# ./core/variant.h:423: 	}
	nop	
.L909:
# core/object.cpp:379: 	if (d.has("binds"))
	leaq	-144(%rbp), %rax	#, tmp196
	movl	$.LC20, %esi	#,
	movq	%rax, %rdi	# tmp196,
.LEHB277:
	call	_ZN7VariantC1EPKc	#
.LEHE277:
# core/object.cpp:379: 	if (d.has("binds"))
	leaq	-144(%rbp), %rdx	#, tmp197
	leaq	-472(%rbp), %rax	#, tmp198
	movq	%rdx, %rsi	# tmp197,
	movq	%rax, %rdi	# tmp198,
.LEHB278:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE278:
	movl	%eax, %ebx	#, _115
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.39070.type, _152
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _152
	je	.L991	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp199
	movq	%rax, %rdi	# tmp199,
	call	_ZN7Variant5clearEv	#
.L991:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:379: 	if (d.has("binds"))
	testb	%bl, %bl	# _115
	je	.L912	#,
# core/object.cpp:380: 		binds = d["binds"];
	leaq	-96(%rbp), %rax	#, tmp200
	movl	$.LC20, %esi	#,
	movq	%rax, %rdi	# tmp200,
.LEHB279:
	call	_ZN7VariantC1EPKc	#
.LEHE279:
# core/object.cpp:380: 		binds = d["binds"];
	leaq	-96(%rbp), %rdx	#, tmp201
	leaq	-472(%rbp), %rax	#, tmp202
	movq	%rdx, %rsi	# tmp201,
	movq	%rax, %rdi	# tmp202,
.LEHB280:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _14
	leaq	-112(%rbp), %rax	#, tmp203
	movq	%rdx, %rsi	# _14,
	movq	%rax, %rdi	# tmp203,
	call	_ZNK7Variantcv6VectorIS_EEv	#
.LEHE280:
# core/object.cpp:380: 		binds = d["binds"];
	movq	-488(%rbp), %rax	# this, tmp204
	leaq	40(%rax), %rdx	#, _15
	leaq	-112(%rbp), %rax	#, tmp205
	movq	%rax, %rsi	# tmp205,
	movq	%rdx, %rdi	# _15,
.LEHB281:
	call	_ZN6VectorI7VariantEaSERKS1_	#
.LEHE281:
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-112(%rbp), %rax	#, tmp206
	addq	$8, %rax	#, _154
	movq	%rax, -40(%rbp)	# _154, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp207
	movq	(%rax), %rdx	# this_155->_ptr, _156
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp208
	movq	%rdx, %rsi	# _156,
	movq	%rax, %rdi	# tmp208,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.39072.type, _153
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _153
	je	.L992	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp209
	movq	%rax, %rdi	# tmp209,
	call	_ZN7Variant5clearEv	#
.L992:
# ./core/variant.h:423: 	}
	nop	
.L912:
# core/object.cpp:368: 	Dictionary d = p_variant;
	leaq	-472(%rbp), %rax	#, tmp210
	movq	%rax, %rdi	# tmp210,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:381: }
	jmp	.L980	#
.L947:
	movq	%rax, %rbx	#, tmp213
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.39058.type, _157
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _157
	je	.L993	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp211
	movq	%rax, %rdi	# tmp211,
	call	_ZN7Variant5clearEv	#
.L993:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L948:
	movq	%rax, %rbx	#, tmp217
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.39059.type, _158
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _158
	je	.L994	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp216
	movq	%rax, %rdi	# tmp216,
	call	_ZN7Variant5clearEv	#
.L994:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L949:
	movq	%rax, %rbx	#, tmp220
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.39060.type, _159
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _159
	je	.L995	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp219
	movq	%rax, %rdi	# tmp219,
	call	_ZN7Variant5clearEv	#
.L995:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L951:
	movq	%rax, %rbx	#, tmp224
# core/object.cpp:372: 		signal = d["signal"];
	leaq	-376(%rbp), %rax	#, tmp222
	movq	%rax, %rdi	# tmp222,
	call	_ZN10StringNameD1Ev	#
	jmp	.L922	#
.L950:
	movq	%rax, %rbx	#, tmp223
.L922:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.39062.type, _160
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _160
	je	.L996	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp227
	movq	%rax, %rdi	# tmp227,
	call	_ZN7Variant5clearEv	#
.L996:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L952:
	movq	%rax, %rbx	#, tmp229
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.39063.type, _161
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _161
	je	.L997	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp228
	movq	%rax, %rdi	# tmp228,
	call	_ZN7Variant5clearEv	#
.L997:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L953:
	movq	%rax, %rbx	#, tmp232
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.39064.type, _162
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _162
	je	.L998	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp231
	movq	%rax, %rdi	# tmp231,
	call	_ZN7Variant5clearEv	#
.L998:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L954:
	movq	%rax, %rbx	#, tmp235
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.39065.type, _163
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _163
	je	.L999	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp234
	movq	%rax, %rdi	# tmp234,
	call	_ZN7Variant5clearEv	#
.L999:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L956:
	movq	%rax, %rbx	#, tmp239
# core/object.cpp:376: 		method = d["method"];
	leaq	-248(%rbp), %rax	#, tmp237
	movq	%rax, %rdi	# tmp237,
	call	_ZN10StringNameD1Ev	#
	jmp	.L931	#
.L955:
	movq	%rax, %rbx	#, tmp238
.L931:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.39067.type, _164
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _164
	je	.L1000	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp242
	movq	%rax, %rdi	# tmp242,
	call	_ZN7Variant5clearEv	#
.L1000:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L957:
	movq	%rax, %rbx	#, tmp244
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.39068.type, _165
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _165
	je	.L1001	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp243
	movq	%rax, %rdi	# tmp243,
	call	_ZN7Variant5clearEv	#
.L1001:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L958:
	movq	%rax, %rbx	#, tmp247
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.39069.type, _166
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _166
	je	.L1002	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp246
	movq	%rax, %rdi	# tmp246,
	call	_ZN7Variant5clearEv	#
.L1002:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L959:
	movq	%rax, %rbx	#, tmp250
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.39070.type, _167
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _167
	je	.L1003	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp249
	movq	%rax, %rdi	# tmp249,
	call	_ZN7Variant5clearEv	#
.L1003:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L961:
	movq	%rax, %rbx	#, tmp256
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-112(%rbp), %rax	#, tmp252
	addq	$8, %rax	#, _168
	movq	%rax, -48(%rbp)	# _168, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp253
	movq	(%rax), %rdx	# this_169->_ptr, _170
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp254
	movq	%rdx, %rsi	# _170,
	movq	%rax, %rdi	# tmp254,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
	jmp	.L940	#
.L960:
	movq	%rax, %rbx	#, tmp255
.L940:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.39072.type, _171
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _171
	je	.L1004	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp259
	movq	%rax, %rdi	# tmp259,
	call	_ZN7Variant5clearEv	#
.L1004:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L916	#
.L946:
	movq	%rax, %rbx	#, tmp212
.L916:
# core/object.cpp:368: 	Dictionary d = p_variant;
	leaq	-472(%rbp), %rax	#, tmp260
	movq	%rax, %rdi	# tmp260,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L942	#
.L945:
	movq	%rax, %rbx	#, tmp261
.L942:
# core/object.cpp:366: Object::Connection::Connection(const Variant &p_variant) {
	movq	-488(%rbp), %rax	# this, tmp263
	addq	$40, %rax	#, _16
	movq	%rax, -56(%rbp)	# _16, this
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	movq	-56(%rbp), %rax	# this, tmp264
	addq	$8, %rax	#, _173
	movq	%rax, -64(%rbp)	# _173, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-64(%rbp), %rax	# this, tmp265
	movq	(%rax), %rdx	# this_174->_ptr, _175
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-64(%rbp), %rax	# this, tmp266
	movq	%rdx, %rsi	# _175,
	movq	%rax, %rdi	# tmp266,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:366: Object::Connection::Connection(const Variant &p_variant) {
	movq	-488(%rbp), %rax	# this, tmp269
	addq	$24, %rax	#, _17
	movq	%rax, %rdi	# _17,
	call	_ZN10StringNameD1Ev	#
	jmp	.L943	#
.L944:
	movq	%rax, %rbx	#, tmp270
.L943:
# core/object.cpp:366: Object::Connection::Connection(const Variant &p_variant) {
	movq	-488(%rbp), %rax	# this, tmp272
	addq	$8, %rax	#, _18
	movq	%rax, %rdi	# _18,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp270, D.61832
	movq	%rax, %rdi	# D.61832,
.LEHB282:
	call	_Unwind_Resume	#
.LEHE282:
.L980:
# core/object.cpp:381: }
	addq	$488, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2496:
	.section	.gcc_except_table
.LLSDA2496:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2496-.LLSDACSB2496
.LLSDACSB2496:
	.uleb128 .LEHB252-.LFB2496
	.uleb128 .LEHE252-.LEHB252
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB253-.LFB2496
	.uleb128 .LEHE253-.LEHB253
	.uleb128 .L944-.LFB2496
	.uleb128 0
	.uleb128 .LEHB254-.LFB2496
	.uleb128 .LEHE254-.LEHB254
	.uleb128 .L945-.LFB2496
	.uleb128 0
	.uleb128 .LEHB255-.LFB2496
	.uleb128 .LEHE255-.LEHB255
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB256-.LFB2496
	.uleb128 .LEHE256-.LEHB256
	.uleb128 .L947-.LFB2496
	.uleb128 0
	.uleb128 .LEHB257-.LFB2496
	.uleb128 .LEHE257-.LEHB257
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB258-.LFB2496
	.uleb128 .LEHE258-.LEHB258
	.uleb128 .L948-.LFB2496
	.uleb128 0
	.uleb128 .LEHB259-.LFB2496
	.uleb128 .LEHE259-.LEHB259
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB260-.LFB2496
	.uleb128 .LEHE260-.LEHB260
	.uleb128 .L949-.LFB2496
	.uleb128 0
	.uleb128 .LEHB261-.LFB2496
	.uleb128 .LEHE261-.LEHB261
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB262-.LFB2496
	.uleb128 .LEHE262-.LEHB262
	.uleb128 .L950-.LFB2496
	.uleb128 0
	.uleb128 .LEHB263-.LFB2496
	.uleb128 .LEHE263-.LEHB263
	.uleb128 .L951-.LFB2496
	.uleb128 0
	.uleb128 .LEHB264-.LFB2496
	.uleb128 .LEHE264-.LEHB264
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB265-.LFB2496
	.uleb128 .LEHE265-.LEHB265
	.uleb128 .L952-.LFB2496
	.uleb128 0
	.uleb128 .LEHB266-.LFB2496
	.uleb128 .LEHE266-.LEHB266
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB267-.LFB2496
	.uleb128 .LEHE267-.LEHB267
	.uleb128 .L953-.LFB2496
	.uleb128 0
	.uleb128 .LEHB268-.LFB2496
	.uleb128 .LEHE268-.LEHB268
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB269-.LFB2496
	.uleb128 .LEHE269-.LEHB269
	.uleb128 .L954-.LFB2496
	.uleb128 0
	.uleb128 .LEHB270-.LFB2496
	.uleb128 .LEHE270-.LEHB270
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB271-.LFB2496
	.uleb128 .LEHE271-.LEHB271
	.uleb128 .L955-.LFB2496
	.uleb128 0
	.uleb128 .LEHB272-.LFB2496
	.uleb128 .LEHE272-.LEHB272
	.uleb128 .L956-.LFB2496
	.uleb128 0
	.uleb128 .LEHB273-.LFB2496
	.uleb128 .LEHE273-.LEHB273
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB274-.LFB2496
	.uleb128 .LEHE274-.LEHB274
	.uleb128 .L957-.LFB2496
	.uleb128 0
	.uleb128 .LEHB275-.LFB2496
	.uleb128 .LEHE275-.LEHB275
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB276-.LFB2496
	.uleb128 .LEHE276-.LEHB276
	.uleb128 .L958-.LFB2496
	.uleb128 0
	.uleb128 .LEHB277-.LFB2496
	.uleb128 .LEHE277-.LEHB277
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB278-.LFB2496
	.uleb128 .LEHE278-.LEHB278
	.uleb128 .L959-.LFB2496
	.uleb128 0
	.uleb128 .LEHB279-.LFB2496
	.uleb128 .LEHE279-.LEHB279
	.uleb128 .L946-.LFB2496
	.uleb128 0
	.uleb128 .LEHB280-.LFB2496
	.uleb128 .LEHE280-.LEHB280
	.uleb128 .L960-.LFB2496
	.uleb128 0
	.uleb128 .LEHB281-.LFB2496
	.uleb128 .LEHE281-.LEHB281
	.uleb128 .L961-.LFB2496
	.uleb128 0
	.uleb128 .LEHB282-.LFB2496
	.uleb128 .LEHE282-.LEHB282
	.uleb128 0
	.uleb128 0
.LLSDACSE2496:
	.text
	.size	_ZN6Object10ConnectionC2ERK7Variant, .-_ZN6Object10ConnectionC2ERK7Variant
	.globl	_ZN6Object10ConnectionC1ERK7Variant
	.set	_ZN6Object10ConnectionC1ERK7Variant,_ZN6Object10ConnectionC2ERK7Variant
	.align 2
	.globl	_ZN6Object10_predeleteEv
	.type	_ZN6Object10_predeleteEv, @function
_ZN6Object10_predeleteEv:
.LFB2498:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.cpp:385: 	_predelete_ok = 1;
	movq	-8(%rbp), %rax	# this, tmp86
	movl	$1, 36(%rax)	#, this_5(D)->_predelete_ok
# core/object.cpp:386: 	notification(NOTIFICATION_PREDELETE, true);
	movq	-8(%rbp), %rax	# this, tmp87
	movl	$1, %edx	#,
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	_ZN6Object12notificationEib	#
# core/object.cpp:387: 	if (_predelete_ok) {
	movq	-8(%rbp), %rax	# this, tmp88
	movl	36(%rax), %eax	# this_5(D)->_predelete_ok, _1
# core/object.cpp:387: 	if (_predelete_ok) {
	testl	%eax, %eax	# _1
	je	.L1006	#,
# core/object.cpp:388: 		_class_ptr = NULL; //must restore so destructors can access class ptr correctly
	movq	-8(%rbp), %rax	# this, tmp89
	movq	$0, 112(%rax)	#, this_5(D)->_class_ptr
.L1006:
# core/object.cpp:390: 	return _predelete_ok;
	movq	-8(%rbp), %rax	# this, tmp90
	movl	36(%rax), %eax	# this_5(D)->_predelete_ok, _2
	testl	%eax, %eax	# _2
	setne	%al	#, _9
# core/object.cpp:391: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2498:
	.size	_ZN6Object10_predeleteEv, .-_ZN6Object10_predeleteEv
	.align 2
	.globl	_ZN6Object15_postinitializeEv
	.type	_ZN6Object15_postinitializeEv, @function
_ZN6Object15_postinitializeEv:
.LFB2499:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.cpp:394: 	_class_ptr = _get_class_namev();
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_8(D)->_vptr.Object, _1
	addq	$48, %rax	#, _2
	movq	(%rax), %rdx	# *_2, _3
# core/object.cpp:394: 	_class_ptr = _get_class_namev();
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _3
# core/object.cpp:394: 	_class_ptr = _get_class_namev();
	movq	-8(%rbp), %rdx	# this, tmp90
	movq	%rax, 112(%rdx)	# _4, this_8(D)->_class_ptr
# core/object.cpp:395: 	_initialize_classv();
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_8(D)->_vptr.Object, _5
	movq	(%rax), %rdx	# *_5, _6
# core/object.cpp:395: 	_initialize_classv();
	movq	-8(%rbp), %rax	# this, tmp92
	movq	%rax, %rdi	# tmp92,
	call	*%rdx	# _6
# core/object.cpp:396: 	notification(NOTIFICATION_POSTINITIALIZE);
	movq	-8(%rbp), %rax	# this, tmp93
	movl	$0, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	_ZN6Object12notificationEib	#
# core/object.cpp:397: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2499:
	.size	_ZN6Object15_postinitializeEv, .-_ZN6Object15_postinitializeEv
	.align 2
	.globl	_ZN6Object24get_valid_parents_staticEP4ListI6String16DefaultAllocatorE
	.type	_ZN6Object24get_valid_parents_staticEP4ListI6String16DefaultAllocatorE, @function
_ZN6Object24get_valid_parents_staticEP4ListI6String16DefaultAllocatorE:
.LFB2500:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# p_parents, p_parents
# core/object.cpp:400: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2500:
	.size	_ZN6Object24get_valid_parents_staticEP4ListI6String16DefaultAllocatorE, .-_ZN6Object24get_valid_parents_staticEP4ListI6String16DefaultAllocatorE
	.align 2
	.globl	_ZN6Object25_get_valid_parents_staticEP4ListI6String16DefaultAllocatorE
	.type	_ZN6Object25_get_valid_parents_staticEP4ListI6String16DefaultAllocatorE, @function
_ZN6Object25_get_valid_parents_staticEP4ListI6String16DefaultAllocatorE:
.LFB2501:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# p_parents, p_parents
# core/object.cpp:402: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2501:
	.size	_ZN6Object25_get_valid_parents_staticEP4ListI6String16DefaultAllocatorE, .-_ZN6Object25_get_valid_parents_staticEP4ListI6String16DefaultAllocatorE
	.align 2
	.globl	_ZN6Object3setERK10StringNameRK7VariantPb
	.type	_ZN6Object3setERK10StringNameRK7VariantPb, @function
_ZN6Object3setERK10StringNameRK7VariantPb:
.LFB2502:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2502
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# this, this
	movq	%rsi, -128(%rbp)	# p_name, p_name
	movq	%rdx, -136(%rbp)	# p_value, p_value
	movq	%rcx, -144(%rbp)	# r_valid, r_valid
# core/object.cpp:411: 	if (script_instance) {
	movq	-120(%rbp), %rax	# this, tmp114
	movq	80(%rax), %rax	# this_28(D)->script_instance, _1
# core/object.cpp:411: 	if (script_instance) {
	testq	%rax, %rax	# _1
	je	.L1012	#,
# core/object.cpp:413: 		if (script_instance->set(p_name, p_value)) {
	movq	-120(%rbp), %rax	# this, tmp115
	movq	80(%rax), %rax	# this_28(D)->script_instance, _2
	movq	-120(%rbp), %rdx	# this, tmp117
	movq	80(%rdx), %rdx	# this_28(D)->script_instance, _4
# core/object.cpp:413: 		if (script_instance->set(p_name, p_value)) {
	movq	(%rdx), %rdx	# _4->_vptr.ScriptInstance, _5
	movq	(%rdx), %r8	# *_5, _6
# core/object.cpp:413: 		if (script_instance->set(p_name, p_value)) {
	movq	-136(%rbp), %rdx	# p_value, tmp118
	movq	-128(%rbp), %rcx	# p_name, tmp119
	movq	%rcx, %rsi	# tmp119,
	movq	%rax, %rdi	# _2,
.LEHB283:
	call	*%r8	# _6
# core/object.cpp:413: 		if (script_instance->set(p_name, p_value)) {
	testb	%al, %al	# _32
	je	.L1012	#,
# core/object.cpp:414: 			if (r_valid)
	cmpq	$0, -144(%rbp)	#, r_valid
	je	.L1038	#,
# core/object.cpp:415: 				*r_valid = true;
	movq	-144(%rbp), %rax	# r_valid, tmp120
	movb	$1, (%rax)	#, *r_valid_34(D)
# core/object.cpp:416: 			return;
	jmp	.L1038	#
.L1012:
# core/object.cpp:422: 		if (ClassDB::set_property(this, p_name, p_value, r_valid)) {
	movq	-144(%rbp), %rcx	# r_valid, tmp121
	movq	-136(%rbp), %rdx	# p_value, tmp122
	movq	-128(%rbp), %rsi	# p_name, tmp123
	movq	-120(%rbp), %rax	# this, tmp124
	movq	%rax, %rdi	# tmp124,
	call	_ZN7ClassDB12set_propertyEP6ObjectRK10StringNameRK7VariantPb	#
# core/object.cpp:422: 		if (ClassDB::set_property(this, p_name, p_value, r_valid)) {
	testb	%al, %al	# _37
	jne	.L1039	#,
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.58639
# core/object.cpp:431: 	if (p_name == CoreStringNames::get_singleton()->_script) {
	leaq	24(%rax), %rdx	#, _8
	movq	-128(%rbp), %rax	# p_name, tmp125
	movq	%rax, -32(%rbp)	# tmp125, this
	movq	%rdx, -40(%rbp)	# _8, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-32(%rbp), %rax	# this, tmp126
	movq	(%rax), %rdx	# this_68->_data, _70
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-40(%rbp), %rax	# p_name, tmp127
	movq	(%rax), %rax	# p_name_69->_data, _71
	cmpq	%rax, %rdx	# _71, _70
	sete	%al	#, D.58636
# core/object.cpp:431: 	if (p_name == CoreStringNames::get_singleton()->_script) {
	testb	%al, %al	# D.58636
	je	.L1018	#,
# core/object.cpp:432: 		set_script(p_value);
	leaq	-96(%rbp), %rax	#, tmp128
	movq	-136(%rbp), %rdx	# p_value, tmp129
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp128,
	call	_ZNK7Variantcv6RefPtrEv	#
.LEHE283:
	leaq	-96(%rbp), %rdx	#, tmp130
	movq	-120(%rbp), %rax	# this, tmp131
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# tmp131,
.LEHB284:
	call	_ZN6Object10set_scriptERK6RefPtr	#
.LEHE284:
# core/object.cpp:432: 		set_script(p_value);
	leaq	-96(%rbp), %rax	#, tmp132
	movq	%rax, %rdi	# tmp132,
	call	_ZN6RefPtrD1Ev	#
# core/object.cpp:433: 		if (r_valid)
	cmpq	$0, -144(%rbp)	#, r_valid
	je	.L1040	#,
# core/object.cpp:434: 			*r_valid = true;
	movq	-144(%rbp), %rax	# r_valid, tmp133
	movb	$1, (%rax)	#, *r_valid_34(D)
# core/object.cpp:435: 		return;
	jmp	.L1040	#
.L1018:
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.58647
# core/object.cpp:437: 	} else if (p_name == CoreStringNames::get_singleton()->_meta) {
	leaq	16(%rax), %rdx	#, _10
	movq	-128(%rbp), %rax	# p_name, tmp134
	movq	%rax, -48(%rbp)	# tmp134, this
	movq	%rdx, -56(%rbp)	# _10, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-48(%rbp), %rax	# this, tmp135
	movq	(%rax), %rdx	# this_74->_data, _76
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-56(%rbp), %rax	# p_name, tmp136
	movq	(%rax), %rax	# p_name_75->_data, _77
	cmpq	%rax, %rdx	# _77, _76
	sete	%al	#, D.58644
# core/object.cpp:437: 	} else if (p_name == CoreStringNames::get_singleton()->_meta) {
	testb	%al, %al	# D.58644
	je	.L1022	#,
# core/object.cpp:439: 		metadata = p_value;
	leaq	-88(%rbp), %rax	#, tmp137
	movq	-136(%rbp), %rdx	# p_value, tmp138
	movq	%rdx, %rsi	# tmp138,
	movq	%rax, %rdi	# tmp137,
.LEHB285:
	call	_ZNK7Variantcv10DictionaryEv	#
.LEHE285:
	movq	-120(%rbp), %rax	# this, tmp139
	leaq	96(%rax), %rdx	#, _11
	leaq	-88(%rbp), %rax	#, tmp140
	movq	%rax, %rsi	# tmp140,
	movq	%rdx, %rdi	# _11,
.LEHB286:
	call	_ZN10DictionaryaSERKS_	#
.LEHE286:
# core/object.cpp:439: 		metadata = p_value;
	leaq	-88(%rbp), %rax	#, tmp141
	movq	%rax, %rdi	# tmp141,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:440: 		if (r_valid)
	cmpq	$0, -144(%rbp)	#, r_valid
	je	.L1041	#,
# core/object.cpp:441: 			*r_valid = true;
	movq	-144(%rbp), %rax	# r_valid, tmp142
	movb	$1, (%rax)	#, *r_valid_34(D)
# core/object.cpp:442: 		return;
	jmp	.L1041	#
.L1022:
# core/object.cpp:446: 	bool success = _setv(p_name, p_value);
	movq	-120(%rbp), %rax	# this, tmp143
	movq	(%rax), %rax	# this_28(D)->_vptr.Object, _12
	addq	$8, %rax	#, _13
	movq	(%rax), %r8	# *_13, _14
# core/object.cpp:446: 	bool success = _setv(p_name, p_value);
	movq	-136(%rbp), %rdx	# p_value, tmp144
	movq	-128(%rbp), %rcx	# p_name, tmp145
	movq	-120(%rbp), %rax	# this, tmp146
	movq	%rcx, %rsi	# tmp145,
	movq	%rax, %rdi	# tmp146,
.LEHB287:
	call	*%r8	# _14
	movb	%al, -17(%rbp)	# _42, success
# core/object.cpp:447: 	if (success) {
	cmpb	$0, -17(%rbp)	#, success
	je	.L1024	#,
# core/object.cpp:448: 		if (r_valid)
	cmpq	$0, -144(%rbp)	#, r_valid
	je	.L1042	#,
# core/object.cpp:449: 			*r_valid = true;
	movq	-144(%rbp), %rax	# r_valid, tmp147
	movb	$1, (%rax)	#, *r_valid_34(D)
# core/object.cpp:450: 		return;
	jmp	.L1042	#
.L1024:
# core/object.cpp:455: 		setvar(p_name, p_value, &valid);
	movq	-120(%rbp), %rax	# this, tmp148
	movq	(%rax), %rax	# this_28(D)->_vptr.Object, _15
	subq	$-128, %rax	#, _16
	movq	(%rax), %rbx	# *_16, _17
# core/object.cpp:455: 		setvar(p_name, p_value, &valid);
	movq	-128(%rbp), %rdx	# p_name, tmp149
	leaq	-80(%rbp), %rax	#, tmp150
	movq	%rdx, %rsi	# tmp149,
	movq	%rax, %rdi	# tmp150,
	call	_ZN7VariantC1ERK10StringName	#
.LEHE287:
	leaq	-97(%rbp), %rcx	#, tmp151
	movq	-136(%rbp), %rdx	# p_value, tmp152
	leaq	-80(%rbp), %rsi	#, tmp153
	movq	-120(%rbp), %rax	# this, tmp154
	movq	%rax, %rdi	# tmp154,
.LEHB288:
	call	*%rbx	# _17
.LEHE288:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39098.type, _80
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _80
	je	.L1043	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp155
	movq	%rax, %rdi	# tmp155,
	call	_ZN7Variant5clearEv	#
.L1043:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:456: 		if (valid) {
	movzbl	-97(%rbp), %eax	# valid, valid.54_18
	testb	%al, %al	# valid.54_18
	je	.L1027	#,
# core/object.cpp:457: 			if (r_valid)
	cmpq	$0, -144(%rbp)	#, r_valid
	je	.L1044	#,
# core/object.cpp:458: 				*r_valid = true;
	movq	-144(%rbp), %rax	# r_valid, tmp156
	movb	$1, (%rax)	#, *r_valid_34(D)
	jmp	.L1011	#
.L1027:
# core/object.cpp:475: 	if (r_valid)
	cmpq	$0, -144(%rbp)	#, r_valid
	je	.L1011	#,
# core/object.cpp:476: 		*r_valid = false;
	movq	-144(%rbp), %rax	# r_valid, tmp157
	movb	$0, (%rax)	#, *r_valid_34(D)
	jmp	.L1011	#
.L1033:
	movq	%rax, %rbx	#, tmp159
# core/object.cpp:432: 		set_script(p_value);
	leaq	-96(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN6RefPtrD1Ev	#
	movq	%rbx, %rax	# tmp159, D.61837
	movq	%rax, %rdi	# D.61837,
.LEHB289:
	call	_Unwind_Resume	#
.L1034:
	movq	%rax, %rbx	#, tmp161
# core/object.cpp:439: 		metadata = p_value;
	leaq	-88(%rbp), %rax	#, tmp160
	movq	%rax, %rdi	# tmp160,
	call	_ZN10DictionaryD1Ev	#
	movq	%rbx, %rax	# tmp161, D.61838
	movq	%rax, %rdi	# D.61838,
	call	_Unwind_Resume	#
.LEHE289:
.L1035:
	movq	%rax, %rbx	#, tmp163
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39098.type, _81
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _81
	je	.L1045	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp162
	movq	%rax, %rdi	# tmp162,
	call	_ZN7Variant5clearEv	#
.L1045:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp163, D.61839
	movq	%rax, %rdi	# D.61839,
.LEHB290:
	call	_Unwind_Resume	#
.LEHE290:
.L1038:
# core/object.cpp:416: 			return;
	nop	
	jmp	.L1011	#
.L1039:
# core/object.cpp:427: 			return;
	nop	
	jmp	.L1011	#
.L1040:
# core/object.cpp:435: 		return;
	nop	
	jmp	.L1011	#
.L1041:
# core/object.cpp:442: 		return;
	nop	
	jmp	.L1011	#
.L1042:
# core/object.cpp:450: 		return;
	nop	
	jmp	.L1011	#
.L1044:
# core/object.cpp:459: 			return;
	nop	
.L1011:
# core/object.cpp:477: }
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2502:
	.section	.gcc_except_table
.LLSDA2502:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2502-.LLSDACSB2502
.LLSDACSB2502:
	.uleb128 .LEHB283-.LFB2502
	.uleb128 .LEHE283-.LEHB283
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB284-.LFB2502
	.uleb128 .LEHE284-.LEHB284
	.uleb128 .L1033-.LFB2502
	.uleb128 0
	.uleb128 .LEHB285-.LFB2502
	.uleb128 .LEHE285-.LEHB285
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB286-.LFB2502
	.uleb128 .LEHE286-.LEHB286
	.uleb128 .L1034-.LFB2502
	.uleb128 0
	.uleb128 .LEHB287-.LFB2502
	.uleb128 .LEHE287-.LEHB287
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB288-.LFB2502
	.uleb128 .LEHE288-.LEHB288
	.uleb128 .L1035-.LFB2502
	.uleb128 0
	.uleb128 .LEHB289-.LFB2502
	.uleb128 .LEHE289-.LEHB289
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB290-.LFB2502
	.uleb128 .LEHE290-.LEHB290
	.uleb128 0
	.uleb128 0
.LLSDACSE2502:
	.text
	.size	_ZN6Object3setERK10StringNameRK7VariantPb, .-_ZN6Object3setERK10StringNameRK7VariantPb
	.align 2
	.globl	_ZNK6Object3getERK10StringNamePb
	.type	_ZNK6Object3getERK10StringNamePb, @function
_ZNK6Object3getERK10StringNamePb:
.LFB2503:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2503
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$264, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -248(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -256(%rbp)	# this, this
	movq	%rdx, -264(%rbp)	# p_name, p_name
	movq	%rcx, -272(%rbp)	# r_valid, r_valid
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -224(%rbp)	#, ret.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:483: 	if (script_instance) {
	movq	-256(%rbp), %rax	# this, tmp121
	movq	80(%rax), %rax	# this_34(D)->script_instance, _1
# core/object.cpp:483: 	if (script_instance) {
	testq	%rax, %rax	# _1
	je	.L1047	#,
# core/object.cpp:485: 		if (script_instance->get(p_name, ret)) {
	movq	-256(%rbp), %rax	# this, tmp122
	movq	80(%rax), %rax	# this_34(D)->script_instance, _2
	movq	-256(%rbp), %rdx	# this, tmp124
	movq	80(%rdx), %rdx	# this_34(D)->script_instance, _4
# core/object.cpp:485: 		if (script_instance->get(p_name, ret)) {
	movq	(%rdx), %rdx	# _4->_vptr.ScriptInstance, _5
	addq	$8, %rdx	#, _6
	movq	(%rdx), %r8	# *_6, _7
# core/object.cpp:485: 		if (script_instance->get(p_name, ret)) {
	leaq	-224(%rbp), %rdx	#, tmp125
	movq	-264(%rbp), %rcx	# p_name, tmp126
	movq	%rcx, %rsi	# tmp126,
	movq	%rax, %rdi	# _2,
.LEHB291:
	call	*%r8	# _7
# core/object.cpp:485: 		if (script_instance->get(p_name, ret)) {
	testb	%al, %al	# _37
	je	.L1047	#,
# core/object.cpp:486: 			if (r_valid)
	cmpq	$0, -272(%rbp)	#, r_valid
	je	.L1048	#,
# core/object.cpp:487: 				*r_valid = true;
	movq	-272(%rbp), %rax	# r_valid, tmp127
	movb	$1, (%rax)	#, *r_valid_39(D)
.L1048:
# core/object.cpp:488: 			return ret;
	leaq	-224(%rbp), %rdx	#, tmp128
	movq	-248(%rbp), %rax	# <retval>, tmp129
	movq	%rdx, %rsi	# tmp128,
	movq	%rax, %rdi	# tmp129,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L1049	#
.L1047:
# core/object.cpp:494: 		if (ClassDB::get_property(const_cast<Object *>(this), p_name, ret)) {
	leaq	-224(%rbp), %rdx	#, tmp130
	movq	-264(%rbp), %rcx	# p_name, tmp131
	movq	-256(%rbp), %rax	# this, tmp132
	movq	%rcx, %rsi	# tmp131,
	movq	%rax, %rdi	# tmp132,
	call	_ZN7ClassDB12get_propertyEP6ObjectRK10StringNameR7Variant	#
# core/object.cpp:494: 		if (ClassDB::get_property(const_cast<Object *>(this), p_name, ret)) {
	testb	%al, %al	# _44
	je	.L1050	#,
# core/object.cpp:495: 			if (r_valid)
	cmpq	$0, -272(%rbp)	#, r_valid
	je	.L1051	#,
# core/object.cpp:496: 				*r_valid = true;
	movq	-272(%rbp), %rax	# r_valid, tmp133
	movb	$1, (%rax)	#, *r_valid_39(D)
.L1051:
# core/object.cpp:497: 			return ret;
	leaq	-224(%rbp), %rdx	#, tmp134
	movq	-248(%rbp), %rax	# <retval>, tmp135
	movq	%rdx, %rsi	# tmp134,
	movq	%rax, %rdi	# tmp135,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L1049	#
.L1050:
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.54810
# core/object.cpp:501: 	if (p_name == CoreStringNames::get_singleton()->_script) {
	leaq	24(%rax), %rdx	#, _9
	movq	-264(%rbp), %rax	# p_name, tmp136
	movq	%rax, -32(%rbp)	# tmp136, this
	movq	%rdx, -40(%rbp)	# _9, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-32(%rbp), %rax	# this, tmp137
	movq	(%rax), %rdx	# this_87->_data, _89
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-40(%rbp), %rax	# p_name, tmp138
	movq	(%rax), %rax	# p_name_88->_data, _90
	cmpq	%rax, %rdx	# _90, _89
	sete	%al	#, D.54807
# core/object.cpp:501: 	if (p_name == CoreStringNames::get_singleton()->_script) {
	testb	%al, %al	# D.54807
	je	.L1054	#,
# core/object.cpp:502: 		ret = get_script();
	leaq	-168(%rbp), %rax	#, tmp139
	movq	-256(%rbp), %rdx	# this, tmp140
	movq	%rdx, %rsi	# tmp140,
	movq	%rax, %rdi	# tmp139,
	call	_ZNK6Object10get_scriptEv	#
.LEHE291:
# core/object.cpp:502: 		ret = get_script();
	leaq	-168(%rbp), %rdx	#, tmp141
	leaq	-192(%rbp), %rax	#, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
.LEHB292:
	call	_ZN7VariantC1ERK6RefPtr	#
.LEHE292:
# core/object.cpp:502: 		ret = get_script();
	leaq	-192(%rbp), %rdx	#, tmp143
	leaq	-224(%rbp), %rax	#, tmp144
	movq	%rdx, %rsi	# tmp143,
	movq	%rax, %rdi	# tmp144,
.LEHB293:
	call	_ZN7VariantaSERKS_	#
.LEHE293:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.39108.type, _93
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _93
	je	.L1097	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp145
	movq	%rax, %rdi	# tmp145,
	call	_ZN7Variant5clearEv	#
.L1097:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:502: 		ret = get_script();
	leaq	-168(%rbp), %rax	#, tmp146
	movq	%rax, %rdi	# tmp146,
	call	_ZN6RefPtrD1Ev	#
# core/object.cpp:503: 		if (r_valid)
	cmpq	$0, -272(%rbp)	#, r_valid
	je	.L1056	#,
# core/object.cpp:504: 			*r_valid = true;
	movq	-272(%rbp), %rax	# r_valid, tmp147
	movb	$1, (%rax)	#, *r_valid_39(D)
.L1056:
# core/object.cpp:505: 		return ret;
	leaq	-224(%rbp), %rdx	#, tmp148
	movq	-248(%rbp), %rax	# <retval>, tmp149
	movq	%rdx, %rsi	# tmp148,
	movq	%rax, %rdi	# tmp149,
.LEHB294:
	call	_ZN7VariantC1ERKS_	#
	jmp	.L1049	#
.L1054:
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.54819
# core/object.cpp:507: 	} else if (p_name == CoreStringNames::get_singleton()->_meta) {
	leaq	16(%rax), %rdx	#, _11
	movq	-264(%rbp), %rax	# p_name, tmp150
	movq	%rax, -48(%rbp)	# tmp150, this
	movq	%rdx, -56(%rbp)	# _11, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-48(%rbp), %rax	# this, tmp151
	movq	(%rax), %rdx	# this_94->_data, _96
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-56(%rbp), %rax	# p_name, tmp152
	movq	(%rax), %rax	# p_name_95->_data, _97
	cmpq	%rax, %rdx	# _97, _96
	sete	%al	#, D.54816
# core/object.cpp:507: 	} else if (p_name == CoreStringNames::get_singleton()->_meta) {
	testb	%al, %al	# D.54816
	je	.L1059	#,
# core/object.cpp:508: 		ret = metadata;
	movq	-256(%rbp), %rax	# this, tmp153
	leaq	96(%rax), %rdx	#, _12
# core/object.cpp:508: 		ret = metadata;
	leaq	-160(%rbp), %rax	#, tmp154
	movq	%rdx, %rsi	# _12,
	movq	%rax, %rdi	# tmp154,
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE294:
# core/object.cpp:508: 		ret = metadata;
	leaq	-160(%rbp), %rdx	#, tmp155
	leaq	-224(%rbp), %rax	#, tmp156
	movq	%rdx, %rsi	# tmp155,
	movq	%rax, %rdi	# tmp156,
.LEHB295:
	call	_ZN7VariantaSERKS_	#
.LEHE295:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.39110.type, _100
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _100
	je	.L1098	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp157
	movq	%rax, %rdi	# tmp157,
	call	_ZN7Variant5clearEv	#
.L1098:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:509: 		if (r_valid)
	cmpq	$0, -272(%rbp)	#, r_valid
	je	.L1061	#,
# core/object.cpp:510: 			*r_valid = true;
	movq	-272(%rbp), %rax	# r_valid, tmp158
	movb	$1, (%rax)	#, *r_valid_39(D)
.L1061:
# core/object.cpp:511: 		return ret;
	leaq	-224(%rbp), %rdx	#, tmp159
	movq	-248(%rbp), %rax	# <retval>, tmp160
	movq	%rdx, %rsi	# tmp159,
	movq	%rax, %rdi	# tmp160,
.LEHB296:
	call	_ZN7VariantC1ERKS_	#
	jmp	.L1049	#
.L1059:
# core/object.cpp:515: 		bool success = _getv(p_name, ret);
	movq	-256(%rbp), %rax	# this, tmp161
	movq	(%rax), %rax	# this_34(D)->_vptr.Object, _13
	addq	$16, %rax	#, _14
	movq	(%rax), %r8	# *_14, _15
# core/object.cpp:515: 		bool success = _getv(p_name, ret);
	leaq	-224(%rbp), %rdx	#, tmp162
	movq	-264(%rbp), %rcx	# p_name, tmp163
	movq	-256(%rbp), %rax	# this, tmp164
	movq	%rcx, %rsi	# tmp163,
	movq	%rax, %rdi	# tmp164,
	call	*%r8	# _15
	movb	%al, -17(%rbp)	# _49, success
# core/object.cpp:516: 		if (success) {
	cmpb	$0, -17(%rbp)	#, success
	je	.L1062	#,
# core/object.cpp:517: 			if (r_valid)
	cmpq	$0, -272(%rbp)	#, r_valid
	je	.L1063	#,
# core/object.cpp:518: 				*r_valid = true;
	movq	-272(%rbp), %rax	# r_valid, tmp165
	movb	$1, (%rax)	#, *r_valid_39(D)
.L1063:
# core/object.cpp:519: 			return ret;
	leaq	-224(%rbp), %rdx	#, tmp166
	movq	-248(%rbp), %rax	# <retval>, tmp167
	movq	%rdx, %rsi	# tmp166,
	movq	%rax, %rdi	# tmp167,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L1049	#
.L1062:
# core/object.cpp:525: 			ret = getvar(p_name, &valid);
	movq	-256(%rbp), %rax	# this, tmp168
	movq	(%rax), %rax	# this_34(D)->_vptr.Object, _16
	addq	$120, %rax	#, _17
	movq	(%rax), %rbx	# *_17, _18
# core/object.cpp:525: 			ret = getvar(p_name, &valid);
	movq	-264(%rbp), %rdx	# p_name, tmp169
	leaq	-96(%rbp), %rax	#, tmp170
	movq	%rdx, %rsi	# tmp169,
	movq	%rax, %rdi	# tmp170,
	call	_ZN7VariantC1ERK10StringName	#
.LEHE296:
# core/object.cpp:525: 			ret = getvar(p_name, &valid);
	leaq	-128(%rbp), %rax	#, tmp171
	leaq	-225(%rbp), %rcx	#, tmp172
	leaq	-96(%rbp), %rdx	#, tmp173
	movq	-256(%rbp), %rsi	# this, tmp174
	movq	%rax, %rdi	# tmp171,
.LEHB297:
	call	*%rbx	# _18
.LEHE297:
# core/object.cpp:525: 			ret = getvar(p_name, &valid);
	leaq	-128(%rbp), %rdx	#, tmp175
	leaq	-224(%rbp), %rax	#, tmp176
	movq	%rdx, %rsi	# tmp175,
	movq	%rax, %rdi	# tmp176,
.LEHB298:
	call	_ZN7VariantaSERKS_	#
.LEHE298:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.39116.type, _102
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _102
	je	.L1099	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp177
	movq	%rax, %rdi	# tmp177,
	call	_ZN7Variant5clearEv	#
.L1099:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.39115.type, _101
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _101
	je	.L1100	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp178
	movq	%rax, %rdi	# tmp178,
	call	_ZN7Variant5clearEv	#
.L1100:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:526: 			if (valid) {
	movzbl	-225(%rbp), %eax	# valid, valid.59_19
	testb	%al, %al	# valid.59_19
	je	.L1066	#,
# core/object.cpp:527: 				if (r_valid)
	cmpq	$0, -272(%rbp)	#, r_valid
	je	.L1067	#,
# core/object.cpp:528: 					*r_valid = true;
	movq	-272(%rbp), %rax	# r_valid, tmp179
	movb	$1, (%rax)	#, *r_valid_39(D)
.L1067:
# core/object.cpp:529: 				return ret;
	leaq	-224(%rbp), %rdx	#, tmp180
	movq	-248(%rbp), %rax	# <retval>, tmp181
	movq	%rdx, %rsi	# tmp180,
	movq	%rax, %rdi	# tmp181,
.LEHB299:
	call	_ZN7VariantC1ERKS_	#
.LEHE299:
	jmp	.L1049	#
.L1066:
# core/object.cpp:545: 		if (r_valid)
	cmpq	$0, -272(%rbp)	#, r_valid
	je	.L1068	#,
# core/object.cpp:546: 			*r_valid = false;
	movq	-272(%rbp), %rax	# r_valid, tmp182
	movb	$0, (%rax)	#, *r_valid_39(D)
.L1068:
	movq	-248(%rbp), %rax	# <retval>, tmp183
	movq	%rax, -64(%rbp)	# tmp183, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-64(%rbp), %rax	# this, tmp184
	movl	$0, (%rax)	#, this_103->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:547: 		return Variant();
	nop	
.L1049:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _104
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _104
	je	.L1101	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp185
	movq	%rax, %rdi	# tmp185,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1101	#
.L1084:
	movq	%rax, %rbx	#, tmp188
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.39108.type, _105
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _105
	je	.L1102	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp186
	movq	%rax, %rdi	# tmp186,
	call	_ZN7Variant5clearEv	#
.L1102:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1073	#
.L1083:
	movq	%rax, %rbx	#, tmp187
.L1073:
# core/object.cpp:502: 		ret = get_script();
	leaq	-168(%rbp), %rax	#, tmp191
	movq	%rax, %rdi	# tmp191,
	call	_ZN6RefPtrD1Ev	#
	jmp	.L1074	#
.L1085:
	movq	%rax, %rbx	#, tmp195
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.39110.type, _106
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _106
	je	.L1103	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp194
	movq	%rax, %rdi	# tmp194,
	call	_ZN7Variant5clearEv	#
.L1103:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1074	#
.L1087:
	movq	%rax, %rbx	#, tmp199
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.39116.type, _107
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _107
	je	.L1104	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp197
	movq	%rax, %rdi	# tmp197,
	call	_ZN7Variant5clearEv	#
.L1104:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1079	#
.L1086:
	movq	%rax, %rbx	#, tmp198
.L1079:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.39115.type, _108
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _108
	je	.L1105	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp202
	movq	%rax, %rdi	# tmp202,
	call	_ZN7Variant5clearEv	#
.L1105:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1074	#
.L1082:
	movq	%rax, %rbx	#, tmp192
.L1074:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _109
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _109
	je	.L1106	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp203
	movq	%rax, %rdi	# tmp203,
	call	_ZN7Variant5clearEv	#
.L1106:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp192, D.61842
	movq	%rax, %rdi	# D.61842,
.LEHB300:
	call	_Unwind_Resume	#
.LEHE300:
.L1101:
	nop	
# core/object.cpp:549: }
	movq	-248(%rbp), %rax	# <retval>,
	addq	$264, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2503:
	.section	.gcc_except_table
.LLSDA2503:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2503-.LLSDACSB2503
.LLSDACSB2503:
	.uleb128 .LEHB291-.LFB2503
	.uleb128 .LEHE291-.LEHB291
	.uleb128 .L1082-.LFB2503
	.uleb128 0
	.uleb128 .LEHB292-.LFB2503
	.uleb128 .LEHE292-.LEHB292
	.uleb128 .L1083-.LFB2503
	.uleb128 0
	.uleb128 .LEHB293-.LFB2503
	.uleb128 .LEHE293-.LEHB293
	.uleb128 .L1084-.LFB2503
	.uleb128 0
	.uleb128 .LEHB294-.LFB2503
	.uleb128 .LEHE294-.LEHB294
	.uleb128 .L1082-.LFB2503
	.uleb128 0
	.uleb128 .LEHB295-.LFB2503
	.uleb128 .LEHE295-.LEHB295
	.uleb128 .L1085-.LFB2503
	.uleb128 0
	.uleb128 .LEHB296-.LFB2503
	.uleb128 .LEHE296-.LEHB296
	.uleb128 .L1082-.LFB2503
	.uleb128 0
	.uleb128 .LEHB297-.LFB2503
	.uleb128 .LEHE297-.LEHB297
	.uleb128 .L1086-.LFB2503
	.uleb128 0
	.uleb128 .LEHB298-.LFB2503
	.uleb128 .LEHE298-.LEHB298
	.uleb128 .L1087-.LFB2503
	.uleb128 0
	.uleb128 .LEHB299-.LFB2503
	.uleb128 .LEHE299-.LEHB299
	.uleb128 .L1082-.LFB2503
	.uleb128 0
	.uleb128 .LEHB300-.LFB2503
	.uleb128 .LEHE300-.LEHB300
	.uleb128 0
	.uleb128 0
.LLSDACSE2503:
	.text
	.size	_ZNK6Object3getERK10StringNamePb, .-_ZNK6Object3getERK10StringNamePb
	.section	.rodata
	.align 8
.LC21:
	.string	"Condition ' !value_stack.empty() ' is true."
.LC22:
	.string	"core/object.cpp"
.LC23:
	.string	"set_indexed"
	.text
	.align 2
	.globl	_ZN6Object11set_indexedERK6VectorI10StringNameERK7VariantPb
	.type	_ZN6Object11set_indexedERK6VectorI10StringNameERK7VariantPb, @function
_ZN6Object11set_indexedERK6VectorI10StringNameERK7VariantPb:
.LFB2504:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2504
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$712, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -696(%rbp)	# this, this
	movq	%rsi, -704(%rbp)	# p_names, p_names
	movq	%rdx, -712(%rbp)	# p_value, p_value
	movq	%rcx, -720(%rbp)	# r_valid, r_valid
	movq	-704(%rbp), %rax	# p_names, tmp278
	movq	%rax, -32(%rbp)	# tmp278, this
# ./core/vector.h:78: 	_FORCE_INLINE_ bool empty() const { return _cowdata.empty(); }
	movq	-32(%rbp), %rax	# this, tmp279
	addq	$8, %rax	#, _100
	movq	%rax, -40(%rbp)	# _100, this
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	movq	-40(%rbp), %rax	# this, tmp280
	movq	(%rax), %rax	# this_101->_ptr, _102
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	testq	%rax, %rax	# _102
	sete	%al	#, D.58655
# ./core/vector.h:78: 	_FORCE_INLINE_ bool empty() const { return _cowdata.empty(); }
	nop	
# core/object.cpp:552: 	if (p_names.empty()) {
	testb	%al, %al	# D.58655
	je	.L1110	#,
# core/object.cpp:553: 		if (r_valid)
	cmpq	$0, -720(%rbp)	#, r_valid
	je	.L1259	#,
# core/object.cpp:554: 			*r_valid = false;
	movq	-720(%rbp), %rax	# r_valid, tmp281
	movb	$0, (%rax)	#, *r_valid_48(D)
# core/object.cpp:555: 		return;
	jmp	.L1259	#
.L1110:
	movq	-704(%rbp), %rax	# p_names, tmp282
	movq	%rax, -48(%rbp)	# tmp282, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp283
	addq	$8, %rax	#, _107
	movq	%rax, -56(%rbp)	# _107, this
	movq	-56(%rbp), %rax	# this, tmp284
	movq	%rax, -64(%rbp)	# tmp284, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp285
	movq	(%rax), %rax	# this_109->_ptr, _110
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _110
	jne	.L1113	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _111
	jmp	.L1114	#
.L1113:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp286
	movq	(%rax), %rax	# this_109->_ptr, _112
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _111
.L1114:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _111, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L1115	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp287
	movl	(%rax), %eax	# *size_116, _117
	jmp	.L1116	#
.L1115:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58666
.L1116:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:557: 	if (p_names.size() == 1) {
	cmpl	$1, %eax	#, D.58666
	sete	%al	#, retval.61_46
# core/object.cpp:557: 	if (p_names.size() == 1) {
	testb	%al, %al	# retval.61_46
	je	.L1118	#,
	movq	-704(%rbp), %rax	# p_names, tmp288
	movq	%rax, -80(%rbp)	# tmp288, this
	movl	$0, -84(%rbp)	#, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-80(%rbp), %rax	# this, tmp289
	addq	$8, %rax	#, _126
	movq	%rax, -96(%rbp)	# _126, this
	movl	-84(%rbp), %eax	# p_index, tmp290
	movl	%eax, -100(%rbp)	# tmp290, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-100(%rbp), %eax	# p_index, tmp292
	shrl	$31, %eax	#, tmp291
	movzbl	%al, %eax	# _129, _130
	testq	%rax, %rax	# _131
	jne	.L1119	#,
	movq	-96(%rbp), %rax	# this, tmp293
	movq	%rax, -112(%rbp)	# tmp293, this
	movq	-112(%rbp), %rax	# this, tmp294
	movq	%rax, -120(%rbp)	# tmp294, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-120(%rbp), %rax	# this, tmp295
	movq	(%rax), %rax	# this_133->_ptr, _134
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _134
	jne	.L1120	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _135
	jmp	.L1121	#
.L1120:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-120(%rbp), %rax	# this, tmp296
	movq	(%rax), %rax	# this_133->_ptr, _136
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _135
.L1121:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -128(%rbp)	# _135, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -128(%rbp)	#, size
	je	.L1122	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-128(%rbp), %rax	# size, tmp297
	movl	(%rax), %eax	# *size_140, _141
	jmp	.L1123	#
.L1122:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _142
.L1123:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -100(%rbp)	# _142, p_index
	setge	%al	#, _148
	movzbl	%al, %eax	# _148, _149
	testq	%rax, %rax	# _150
	je	.L1124	#,
.L1119:
	movl	$1, %eax	#, iftmp.71_151
	jmp	.L1125	#
.L1124:
	movl	$0, %eax	#, iftmp.71_151
.L1125:
	movzbl	%al, %eax	# iftmp.71_151, _154
	testq	%rax, %rax	# _154
	setne	%al	#, retval.70_155
	testb	%al, %al	# retval.70_155
	je	.L1126	#,
	movq	-96(%rbp), %rax	# this, tmp298
	movq	%rax, -136(%rbp)	# tmp298, this
	movq	-136(%rbp), %rax	# this, tmp299
	movq	%rax, -144(%rbp)	# tmp299, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp300
	movq	(%rax), %rax	# this_157->_ptr, _158
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _158
	jne	.L1127	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _159
	jmp	.L1128	#
.L1127:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-144(%rbp), %rax	# this, tmp301
	movq	(%rax), %rax	# this_157->_ptr, _160
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _159
.L1128:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -152(%rbp)	# _159, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -152(%rbp)	#, size
	je	.L1129	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-152(%rbp), %rax	# size, tmp302
	movl	(%rax), %eax	# *size_164, _165
	jmp	.L1130	#
.L1129:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _166
.L1130:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _166, _172
	movl	-100(%rbp), %eax	# p_index, tmp303
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _172,
	movq	%rax, %rcx	# _173,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB301:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1126:
	movq	-96(%rbp), %rax	# this, tmp304
	movq	%rax, -160(%rbp)	# tmp304, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-160(%rbp), %rax	# this, tmp305
	movq	(%rax), %rax	# this_174->_ptr, _175
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _175
	jne	.L1131	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _176
	jmp	.L1132	#
.L1131:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-160(%rbp), %rax	# this, tmp306
	movq	(%rax), %rax	# this_174->_ptr, _176
.L1132:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-100(%rbp), %edx	# p_index, tmp307
	movslq	%edx, %rdx	# tmp307, _181
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rdx	#, _182
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rdx), %rsi	#, D.58691
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:558: 		set(p_names[0], p_value, r_valid);
	movq	-720(%rbp), %rcx	# r_valid, tmp308
	movq	-712(%rbp), %rdx	# p_value, tmp309
	movq	-696(%rbp), %rax	# this, tmp310
	movq	%rax, %rdi	# tmp310,
	call	_ZN6Object3setERK10StringNameRK7VariantPb	#
.LEHE301:
# core/object.cpp:559: 		return;
	jmp	.L1107	#
.L1118:
# core/object.cpp:562: 	bool valid = false;
	movb	$0, -673(%rbp)	#, valid
# core/object.cpp:563: 	if (!r_valid) r_valid = &valid;
	cmpq	$0, -720(%rbp)	#, r_valid
	jne	.L1135	#,
# core/object.cpp:563: 	if (!r_valid) r_valid = &valid;
	leaq	-673(%rbp), %rax	#, tmp311
	movq	%rax, -720(%rbp)	# tmp311, r_valid
.L1135:
# core/object.cpp:565: 	List<Variant> value_stack;
	leaq	-688(%rbp), %rax	#, tmp312
	movq	%rax, %rdi	# tmp312,
	call	_ZN4ListI7Variant16DefaultAllocatorEC1Ev	#
	movq	-704(%rbp), %rax	# p_names, tmp313
	movq	%rax, -168(%rbp)	# tmp313, this
	movl	$0, -172(%rbp)	#, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-168(%rbp), %rax	# this, tmp314
	addq	$8, %rax	#, _189
	movq	%rax, -184(%rbp)	# _189, this
	movl	-172(%rbp), %eax	# p_index, tmp315
	movl	%eax, -188(%rbp)	# tmp315, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-188(%rbp), %eax	# p_index, tmp317
	shrl	$31, %eax	#, tmp316
	movzbl	%al, %eax	# _192, _193
	testq	%rax, %rax	# _194
	jne	.L1136	#,
	movq	-184(%rbp), %rax	# this, tmp318
	movq	%rax, -200(%rbp)	# tmp318, this
	movq	-200(%rbp), %rax	# this, tmp319
	movq	%rax, -208(%rbp)	# tmp319, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-208(%rbp), %rax	# this, tmp320
	movq	(%rax), %rax	# this_196->_ptr, _197
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _197
	jne	.L1137	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _198
	jmp	.L1138	#
.L1137:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-208(%rbp), %rax	# this, tmp321
	movq	(%rax), %rax	# this_196->_ptr, _199
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _198
.L1138:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -216(%rbp)	# _198, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -216(%rbp)	#, size
	je	.L1139	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-216(%rbp), %rax	# size, tmp322
	movl	(%rax), %eax	# *size_203, _204
	jmp	.L1140	#
.L1139:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _205
.L1140:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -188(%rbp)	# _205, p_index
	setge	%al	#, _211
	movzbl	%al, %eax	# _211, _212
	testq	%rax, %rax	# _213
	je	.L1141	#,
.L1136:
	movl	$1, %eax	#, iftmp.71_214
	jmp	.L1142	#
.L1141:
	movl	$0, %eax	#, iftmp.71_214
.L1142:
	movzbl	%al, %eax	# iftmp.71_214, _217
	testq	%rax, %rax	# _217
	setne	%al	#, retval.70_218
	testb	%al, %al	# retval.70_218
	je	.L1143	#,
	movq	-184(%rbp), %rax	# this, tmp323
	movq	%rax, -224(%rbp)	# tmp323, this
	movq	-224(%rbp), %rax	# this, tmp324
	movq	%rax, -232(%rbp)	# tmp324, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-232(%rbp), %rax	# this, tmp325
	movq	(%rax), %rax	# this_220->_ptr, _221
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _221
	jne	.L1144	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _222
	jmp	.L1145	#
.L1144:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-232(%rbp), %rax	# this, tmp326
	movq	(%rax), %rax	# this_220->_ptr, _223
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _222
.L1145:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -240(%rbp)	# _222, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -240(%rbp)	#, size
	je	.L1146	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-240(%rbp), %rax	# size, tmp327
	movl	(%rax), %eax	# *size_227, _228
	jmp	.L1147	#
.L1146:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _229
.L1147:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _229, _235
	movl	-188(%rbp), %eax	# p_index, tmp328
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _235,
	movq	%rax, %rcx	# _236,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB302:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1143:
	movq	-184(%rbp), %rax	# this, tmp329
	movq	%rax, -248(%rbp)	# tmp329, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-248(%rbp), %rax	# this, tmp330
	movq	(%rax), %rax	# this_237->_ptr, _238
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _238
	jne	.L1148	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _239
	jmp	.L1149	#
.L1148:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-248(%rbp), %rax	# this, tmp331
	movq	(%rax), %rax	# this_237->_ptr, _239
.L1149:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-188(%rbp), %edx	# p_index, tmp332
	movslq	%edx, %rdx	# tmp332, _244
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rdx	#, _245
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rdx), %rdi	#, D.58728
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:567: 	value_stack.push_back(get(p_names[0], r_valid));
	leaq	-672(%rbp), %rax	#, tmp333
	movq	-720(%rbp), %rdx	# r_valid, tmp334
	movq	-696(%rbp), %rsi	# this, tmp335
	movq	%rdx, %rcx	# tmp334,
	movq	%rdi, %rdx	# D.58728,
	movq	%rax, %rdi	# tmp333,
	.cfi_escape 0x2e,0
	call	_ZNK6Object3getERK10StringNamePb	#
.LEHE302:
# core/object.cpp:567: 	value_stack.push_back(get(p_names[0], r_valid));
	leaq	-672(%rbp), %rdx	#, tmp336
	leaq	-688(%rbp), %rax	#, tmp337
	movq	%rdx, %rsi	# tmp336,
	movq	%rax, %rdi	# tmp337,
.LEHB303:
	call	_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_	#
.LEHE303:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-672(%rbp), %eax	# D.39235.type, _250
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _250
	je	.L1260	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-672(%rbp), %rax	#, tmp338
	movq	%rax, %rdi	# tmp338,
	call	_ZN7Variant5clearEv	#
.L1260:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:569: 	if (!*r_valid) {
	movq	-720(%rbp), %rax	# r_valid, tmp339
	movzbl	(%rax), %eax	# *r_valid_29, _4
# core/object.cpp:569: 	if (!*r_valid) {
	xorl	$1, %eax	#, _5
# core/object.cpp:569: 	if (!*r_valid) {
	testb	%al, %al	# _5
	je	.L1153	#,
# core/object.cpp:570: 		value_stack.clear();
	leaq	-688(%rbp), %rax	#, tmp340
	movq	%rax, %rdi	# tmp340,
.LEHB304:
	call	_ZN4ListI7Variant16DefaultAllocatorE5clearEv	#
	movl	$0, %ebx	#, finally_tmp.64_32
# core/object.cpp:571: 		return;
	jmp	.L1154	#
.L1153:
# core/object.cpp:574: 	for (int i = 1; i < p_names.size() - 1; i++) {
	movl	$1, -20(%rbp)	#, i
.L1183:
	movq	-704(%rbp), %rax	# p_names, tmp341
	movq	%rax, -256(%rbp)	# tmp341, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-256(%rbp), %rax	# this, tmp342
	addq	$8, %rax	#, _252
	movq	%rax, -264(%rbp)	# _252, this
	movq	-264(%rbp), %rax	# this, tmp343
	movq	%rax, -272(%rbp)	# tmp343, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp344
	movq	(%rax), %rax	# this_254->_ptr, _255
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _255
	jne	.L1155	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _256
	jmp	.L1156	#
.L1155:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp345
	movq	(%rax), %rax	# this_254->_ptr, _257
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _256
.L1156:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _256, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L1157	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp346
	movl	(%rax), %eax	# *size_261, _262
	jmp	.L1158	#
.L1157:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58755
.L1158:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:574: 	for (int i = 1; i < p_names.size() - 1; i++) {
	subl	$1, %eax	#, _7
# core/object.cpp:574: 	for (int i = 1; i < p_names.size() - 1; i++) {
	cmpl	%eax, -20(%rbp)	# _7, i
	setl	%al	#, retval.62_58
	testb	%al, %al	# retval.62_58
	je	.L1160	#,
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rax	# value_stack._data, _334
# ./core/list.h:211: 		return _data ? _data->last : 0;
	testq	%rax, %rax	# _334
	je	.L1161	#,
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rax	# value_stack._data, _335
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	8(%rax), %rax	# _335->last, D.58805
# ./core/list.h:211: 		return _data ? _data->last : 0;
	jmp	.L1252	#
.L1161:
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movl	$0, %eax	#, D.58805
# ./core/list.h:211: 		return _data ? _data->last : 0;
	nop	
.L1252:
	movq	%rax, -376(%rbp)	# D.58805, this
# ./core/list.h:121: 			return value;
	movq	-376(%rbp), %rsi	# this, D.58801
	movq	-704(%rbp), %rax	# p_names, tmp347
	movq	%rax, -288(%rbp)	# tmp347, this
	movl	-20(%rbp), %eax	# i, tmp348
	movl	%eax, -292(%rbp)	# tmp348, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-288(%rbp), %rax	# this, tmp349
	addq	$8, %rax	#, _271
	movq	%rax, -304(%rbp)	# _271, this
	movl	-292(%rbp), %eax	# p_index, tmp350
	movl	%eax, -308(%rbp)	# tmp350, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-308(%rbp), %eax	# p_index, tmp352
	shrl	$31, %eax	#, tmp351
	movzbl	%al, %eax	# _274, _275
	testq	%rax, %rax	# _276
	jne	.L1165	#,
	movq	-304(%rbp), %rax	# this, tmp353
	movq	%rax, -320(%rbp)	# tmp353, this
	movq	-320(%rbp), %rax	# this, tmp354
	movq	%rax, -328(%rbp)	# tmp354, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-328(%rbp), %rax	# this, tmp355
	movq	(%rax), %rax	# this_278->_ptr, _279
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _279
	jne	.L1166	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _280
	jmp	.L1167	#
.L1166:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-328(%rbp), %rax	# this, tmp356
	movq	(%rax), %rax	# this_278->_ptr, _281
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _280
.L1167:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -336(%rbp)	# _280, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -336(%rbp)	#, size
	je	.L1168	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-336(%rbp), %rax	# size, tmp357
	movl	(%rax), %eax	# *size_285, _286
	jmp	.L1169	#
.L1168:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _287
.L1169:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -308(%rbp)	# _287, p_index
	setge	%al	#, _293
	movzbl	%al, %eax	# _293, _294
	testq	%rax, %rax	# _295
	je	.L1170	#,
.L1165:
	movl	$1, %eax	#, iftmp.71_296
	jmp	.L1171	#
.L1170:
	movl	$0, %eax	#, iftmp.71_296
.L1171:
	movzbl	%al, %eax	# iftmp.71_296, _299
	testq	%rax, %rax	# _299
	setne	%al	#, retval.70_300
	testb	%al, %al	# retval.70_300
	je	.L1172	#,
	movq	-304(%rbp), %rax	# this, tmp358
	movq	%rax, -344(%rbp)	# tmp358, this
	movq	-344(%rbp), %rax	# this, tmp359
	movq	%rax, -352(%rbp)	# tmp359, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-352(%rbp), %rax	# this, tmp360
	movq	(%rax), %rax	# this_302->_ptr, _303
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _303
	jne	.L1173	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _304
	jmp	.L1174	#
.L1173:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-352(%rbp), %rax	# this, tmp361
	movq	(%rax), %rax	# this_302->_ptr, _305
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _304
.L1174:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -360(%rbp)	# _304, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -360(%rbp)	#, size
	je	.L1175	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-360(%rbp), %rax	# size, tmp362
	movl	(%rax), %eax	# *size_309, _310
	jmp	.L1176	#
.L1175:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _311
.L1176:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _311, _317
	movl	-308(%rbp), %eax	# p_index, tmp363
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _317,
	movq	%rax, %rcx	# _318,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1172:
	movq	-304(%rbp), %rax	# this, tmp364
	movq	%rax, -368(%rbp)	# tmp364, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-368(%rbp), %rax	# this, tmp365
	movq	(%rax), %rax	# this_319->_ptr, _320
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _320
	jne	.L1177	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _321
	jmp	.L1178	#
.L1177:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-368(%rbp), %rax	# this, tmp366
	movq	(%rax), %rax	# this_319->_ptr, _321
.L1178:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-308(%rbp), %edx	# p_index, tmp367
	movslq	%edx, %rdx	# tmp367, _326
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rdx	#, _327
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rdx), %rdi	#, D.58780
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:575: 		value_stack.push_back(value_stack.back()->get().get_named(p_names[i], r_valid));
	leaq	-640(%rbp), %rax	#, tmp368
	movq	-720(%rbp), %rdx	# r_valid, tmp369
	movq	%rdx, %rcx	# tmp369,
	movq	%rdi, %rdx	# D.58780,
	movq	%rax, %rdi	# tmp368,
	.cfi_escape 0x2e,0
	call	_ZNK7Variant9get_namedERK10StringNamePb	#
.LEHE304:
# core/object.cpp:575: 		value_stack.push_back(value_stack.back()->get().get_named(p_names[i], r_valid));
	leaq	-640(%rbp), %rdx	#, tmp370
	leaq	-688(%rbp), %rax	#, tmp371
	movq	%rdx, %rsi	# tmp370,
	movq	%rax, %rdi	# tmp371,
.LEHB305:
	call	_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_	#
.LEHE305:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-640(%rbp), %eax	# D.39277.type, _340
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _340
	je	.L1261	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-640(%rbp), %rax	#, tmp372
	movq	%rax, %rdi	# tmp372,
	call	_ZN7Variant5clearEv	#
.L1261:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:577: 		if (!*r_valid) {
	movq	-720(%rbp), %rax	# r_valid, tmp373
	movzbl	(%rax), %eax	# *r_valid_29, _11
# core/object.cpp:577: 		if (!*r_valid) {
	xorl	$1, %eax	#, _12
# core/object.cpp:577: 		if (!*r_valid) {
	testb	%al, %al	# _12
	je	.L1182	#,
# core/object.cpp:578: 			value_stack.clear();
	leaq	-688(%rbp), %rax	#, tmp374
	movq	%rax, %rdi	# tmp374,
.LEHB306:
	call	_ZN4ListI7Variant16DefaultAllocatorE5clearEv	#
	movl	$0, %ebx	#, finally_tmp.64_32
# core/object.cpp:579: 			return;
	jmp	.L1154	#
.L1182:
# core/object.cpp:574: 	for (int i = 1; i < p_names.size() - 1; i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L1183	#
.L1160:
# core/object.cpp:583: 	value_stack.push_back(p_value); // p_names[p_names.size() - 1]
	movq	-712(%rbp), %rdx	# p_value, tmp375
	leaq	-688(%rbp), %rax	#, tmp376
	movq	%rdx, %rsi	# tmp375,
	movq	%rax, %rdi	# tmp376,
	call	_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_	#
	movq	-704(%rbp), %rax	# p_names, tmp377
	movq	%rax, -384(%rbp)	# tmp377, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-384(%rbp), %rax	# this, tmp378
	addq	$8, %rax	#, _342
	movq	%rax, -392(%rbp)	# _342, this
	movq	-392(%rbp), %rax	# this, tmp379
	movq	%rax, -400(%rbp)	# tmp379, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-400(%rbp), %rax	# this, tmp380
	movq	(%rax), %rax	# this_344->_ptr, _345
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _345
	jne	.L1184	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _346
	jmp	.L1185	#
.L1184:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-400(%rbp), %rax	# this, tmp381
	movq	(%rax), %rax	# this_344->_ptr, _347
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _346
.L1185:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -408(%rbp)	# _346, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -408(%rbp)	#, size
	je	.L1186	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-408(%rbp), %rax	# size, tmp382
	movl	(%rax), %eax	# *size_351, _352
	jmp	.L1187	#
.L1186:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58816
.L1187:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:585: 	for (int i = p_names.size() - 1; i > 0; i--) {
	subl	$1, %eax	#, tmp383
	movl	%eax, -24(%rbp)	# tmp383, i
.L1216:
# core/object.cpp:585: 	for (int i = p_names.size() - 1; i > 0; i--) {
	cmpl	$0, -24(%rbp)	#, i
	jle	.L1189	#,
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rax	# value_stack._data, _434
# ./core/list.h:211: 		return _data ? _data->last : 0;
	testq	%rax, %rax	# _434
	je	.L1190	#,
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rax	# value_stack._data, _435
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	8(%rax), %rax	# _435->last, D.58879
# ./core/list.h:211: 		return _data ? _data->last : 0;
	jmp	.L1254	#
.L1190:
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movl	$0, %eax	#, D.58879
# ./core/list.h:211: 		return _data ? _data->last : 0;
	nop	
.L1254:
	movq	%rax, -520(%rbp)	# D.58879, this
# ./core/list.h:88: 			return prev_ptr;
	movq	-520(%rbp), %rax	# this, tmp384
	movq	32(%rax), %rax	# this_432->prev_ptr, D.58875
	movq	%rax, -512(%rbp)	# D.58875, this
# ./core/list.h:121: 			return value;
	movq	-512(%rbp), %rax	# this, D.58871
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rdx	# value_stack._data, _424
# ./core/list.h:211: 		return _data ? _data->last : 0;
	testq	%rdx, %rdx	# _424
	je	.L1195	#,
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rdx	# value_stack._data, _425
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	8(%rdx), %rdx	# _425->last, D.58866
# ./core/list.h:211: 		return _data ? _data->last : 0;
	jmp	.L1255	#
.L1195:
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movl	$0, %edx	#, D.58866
# ./core/list.h:211: 		return _data ? _data->last : 0;
	nop	
.L1255:
	movq	%rdx, -504(%rbp)	# D.58866, this
# ./core/list.h:121: 			return value;
	movq	-504(%rbp), %rdx	# this, D.58862
	movq	-704(%rbp), %rcx	# p_names, tmp385
	movq	%rcx, -416(%rbp)	# tmp385, this
	movl	-24(%rbp), %ecx	# i, tmp386
	movl	%ecx, -420(%rbp)	# tmp386, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-416(%rbp), %rcx	# this, tmp387
	addq	$8, %rcx	#, _361
	movq	%rcx, -432(%rbp)	# _361, this
	movl	-420(%rbp), %ecx	# p_index, tmp388
	movl	%ecx, -436(%rbp)	# tmp388, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-436(%rbp), %ecx	# p_index, tmp390
	shrl	$31, %ecx	#, tmp389
	movzbl	%cl, %ecx	# _364, _365
	testq	%rcx, %rcx	# _366
	jne	.L1199	#,
	movq	-432(%rbp), %rcx	# this, tmp391
	movq	%rcx, -448(%rbp)	# tmp391, this
	movq	-448(%rbp), %rcx	# this, tmp392
	movq	%rcx, -456(%rbp)	# tmp392, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-456(%rbp), %rcx	# this, tmp393
	movq	(%rcx), %rcx	# this_368->_ptr, _369
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rcx, %rcx	# _369
	jne	.L1200	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %ecx	#, _370
	jmp	.L1201	#
.L1200:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-456(%rbp), %rcx	# this, tmp394
	movq	(%rcx), %rcx	# this_368->_ptr, _371
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rcx	#, _370
.L1201:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rcx, -464(%rbp)	# _370, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -464(%rbp)	#, size
	je	.L1202	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-464(%rbp), %rcx	# size, tmp395
	movl	(%rcx), %ecx	# *size_375, _376
	jmp	.L1203	#
.L1202:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %ecx	#, _377
.L1203:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%ecx, -436(%rbp)	# _377, p_index
	setge	%cl	#, _383
	movzbl	%cl, %ecx	# _383, _384
	testq	%rcx, %rcx	# _385
	je	.L1204	#,
.L1199:
	movl	$1, %ecx	#, iftmp.71_386
	jmp	.L1205	#
.L1204:
	movl	$0, %ecx	#, iftmp.71_386
.L1205:
	movzbl	%cl, %ecx	# iftmp.71_386, _389
	testq	%rcx, %rcx	# _389
	setne	%cl	#, retval.70_390
	testb	%cl, %cl	# retval.70_390
	je	.L1206	#,
	movq	-432(%rbp), %rax	# this, tmp396
	movq	%rax, -472(%rbp)	# tmp396, this
	movq	-472(%rbp), %rax	# this, tmp397
	movq	%rax, -480(%rbp)	# tmp397, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-480(%rbp), %rax	# this, tmp398
	movq	(%rax), %rax	# this_392->_ptr, _393
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _393
	jne	.L1207	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _394
	jmp	.L1208	#
.L1207:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-480(%rbp), %rax	# this, tmp399
	movq	(%rax), %rax	# this_392->_ptr, _395
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _394
.L1208:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -488(%rbp)	# _394, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -488(%rbp)	#, size
	je	.L1209	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-488(%rbp), %rax	# size, tmp400
	movl	(%rax), %eax	# *size_399, _400
	jmp	.L1210	#
.L1209:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _401
.L1210:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _401, _407
	movl	-436(%rbp), %eax	# p_index, tmp401
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _407,
	movq	%rax, %rcx	# _408,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1206:
	movq	-432(%rbp), %rcx	# this, tmp402
	movq	%rcx, -496(%rbp)	# tmp402, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-496(%rbp), %rcx	# this, tmp403
	movq	(%rcx), %rcx	# this_409->_ptr, _410
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rcx, %rcx	# _410
	jne	.L1211	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _411
	jmp	.L1212	#
.L1211:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-496(%rbp), %rcx	# this, tmp404
	movq	(%rcx), %rcx	# this_409->_ptr, _411
.L1212:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-436(%rbp), %esi	# p_index, tmp405
	movslq	%esi, %rsi	# tmp405, _416
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rsi	#, _417
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	addq	%rcx, %rsi	# _411, D.58841
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:587: 		value_stack.back()->prev()->get().set_named(p_names[i], value_stack.back()->get(), r_valid);
	movq	-720(%rbp), %rcx	# r_valid, tmp406
	movq	%rax, %rdi	# D.58871,
	.cfi_escape 0x2e,0
	call	_ZN7Variant9set_namedERK10StringNameRKS_Pb	#
# core/object.cpp:588: 		value_stack.pop_back();
	leaq	-688(%rbp), %rax	#, tmp407
	movq	%rax, %rdi	# tmp407,
	call	_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv	#
# core/object.cpp:590: 		if (!*r_valid) {
	movq	-720(%rbp), %rax	# r_valid, tmp408
	movzbl	(%rax), %eax	# *r_valid_29, _20
# core/object.cpp:590: 		if (!*r_valid) {
	xorl	$1, %eax	#, _21
# core/object.cpp:590: 		if (!*r_valid) {
	testb	%al, %al	# _21
	je	.L1215	#,
# core/object.cpp:591: 			value_stack.clear();
	leaq	-688(%rbp), %rax	#, tmp409
	movq	%rax, %rdi	# tmp409,
	call	_ZN4ListI7Variant16DefaultAllocatorE5clearEv	#
	movl	$0, %ebx	#, finally_tmp.64_32
# core/object.cpp:592: 			return;
	jmp	.L1154	#
.L1215:
# core/object.cpp:585: 	for (int i = p_names.size() - 1; i > 0; i--) {
	subl	$1, -24(%rbp)	#, i
	jmp	.L1216	#
.L1189:
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rax	# value_stack._data, _505
# ./core/list.h:211: 		return _data ? _data->last : 0;
	testq	%rax, %rax	# _505
	je	.L1217	#,
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	-688(%rbp), %rax	# value_stack._data, _506
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movq	8(%rax), %rax	# _506->last, D.58925
# ./core/list.h:211: 		return _data ? _data->last : 0;
	jmp	.L1256	#
.L1217:
# ./core/list.h:211: 		return _data ? _data->last : 0;
	movl	$0, %eax	#, D.58925
# ./core/list.h:211: 		return _data ? _data->last : 0;
	nop	
.L1256:
	movq	%rax, -616(%rbp)	# D.58925, this
# ./core/list.h:121: 			return value;
	movq	-616(%rbp), %rdx	# this, D.58921
	movq	-704(%rbp), %rax	# p_names, tmp410
	movq	%rax, -528(%rbp)	# tmp410, this
	movl	$0, -532(%rbp)	#, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-528(%rbp), %rax	# this, tmp411
	addq	$8, %rax	#, _442
	movq	%rax, -544(%rbp)	# _442, this
	movl	-532(%rbp), %eax	# p_index, tmp412
	movl	%eax, -548(%rbp)	# tmp412, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-548(%rbp), %eax	# p_index, tmp414
	shrl	$31, %eax	#, tmp413
	movzbl	%al, %eax	# _445, _446
	testq	%rax, %rax	# _447
	jne	.L1221	#,
	movq	-544(%rbp), %rax	# this, tmp415
	movq	%rax, -560(%rbp)	# tmp415, this
	movq	-560(%rbp), %rax	# this, tmp416
	movq	%rax, -568(%rbp)	# tmp416, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-568(%rbp), %rax	# this, tmp417
	movq	(%rax), %rax	# this_449->_ptr, _450
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _450
	jne	.L1222	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _451
	jmp	.L1223	#
.L1222:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-568(%rbp), %rax	# this, tmp418
	movq	(%rax), %rax	# this_449->_ptr, _452
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _451
.L1223:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -576(%rbp)	# _451, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -576(%rbp)	#, size
	je	.L1224	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-576(%rbp), %rax	# size, tmp419
	movl	(%rax), %eax	# *size_456, _457
	jmp	.L1225	#
.L1224:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _458
.L1225:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -548(%rbp)	# _458, p_index
	setge	%al	#, _464
	movzbl	%al, %eax	# _464, _465
	testq	%rax, %rax	# _466
	je	.L1226	#,
.L1221:
	movl	$1, %eax	#, iftmp.71_467
	jmp	.L1227	#
.L1226:
	movl	$0, %eax	#, iftmp.71_467
.L1227:
	movzbl	%al, %eax	# iftmp.71_467, _470
	testq	%rax, %rax	# _470
	setne	%al	#, retval.70_471
	testb	%al, %al	# retval.70_471
	je	.L1228	#,
	movq	-544(%rbp), %rax	# this, tmp420
	movq	%rax, -584(%rbp)	# tmp420, this
	movq	-584(%rbp), %rax	# this, tmp421
	movq	%rax, -592(%rbp)	# tmp421, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-592(%rbp), %rax	# this, tmp422
	movq	(%rax), %rax	# this_473->_ptr, _474
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _474
	jne	.L1229	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _475
	jmp	.L1230	#
.L1229:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-592(%rbp), %rax	# this, tmp423
	movq	(%rax), %rax	# this_473->_ptr, _476
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _475
.L1230:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -600(%rbp)	# _475, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -600(%rbp)	#, size
	je	.L1231	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-600(%rbp), %rax	# size, tmp424
	movl	(%rax), %eax	# *size_480, _481
	jmp	.L1232	#
.L1231:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _482
.L1232:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _482, _488
	movl	-548(%rbp), %eax	# p_index, tmp425
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _488,
	movq	%rax, %rcx	# _489,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1228:
	movq	-544(%rbp), %rax	# this, tmp426
	movq	%rax, -608(%rbp)	# tmp426, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-608(%rbp), %rax	# this, tmp427
	movq	(%rax), %rax	# this_490->_ptr, _491
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _491
	jne	.L1233	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _492
	jmp	.L1234	#
.L1233:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-608(%rbp), %rax	# this, tmp428
	movq	(%rax), %rax	# this_490->_ptr, _492
.L1234:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-548(%rbp), %ecx	# p_index, tmp429
	movslq	%ecx, %rcx	# tmp429, _497
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rcx	#, _498
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rcx), %rsi	#, D.58900
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:596: 	set(p_names[0], value_stack.back()->get(), r_valid);
	movq	-720(%rbp), %rcx	# r_valid, tmp430
	movq	-696(%rbp), %rax	# this, tmp431
	movq	%rax, %rdi	# tmp431,
	.cfi_escape 0x2e,0
	call	_ZN6Object3setERK10StringNameRK7VariantPb	#
# core/object.cpp:597: 	value_stack.pop_back();
	leaq	-688(%rbp), %rax	#, tmp432
	movq	%rax, %rdi	# tmp432,
	call	_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv	#
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	movq	-688(%rbp), %rax	# value_stack._data, _511
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	testq	%rax, %rax	# _511
	je	.L1237	#,
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	movq	-688(%rbp), %rax	# value_stack._data, _512
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	movl	16(%rax), %eax	# _512->size_cache, _513
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	testl	%eax, %eax	# _513
	jne	.L1238	#,
.L1237:
	movl	$1, %eax	#, D.58930
	jmp	.L1239	#
.L1238:
	movl	$0, %eax	#, D.58930
.L1239:
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	nop	
# core/object.cpp:599: 	ERR_FAIL_COND(!value_stack.empty());
	xorl	$1, %eax	#, _26
	movzbl	%al, %eax	# _26, _27
	testq	%rax, %rax	# _28
	setne	%al	#, retval.63_72
	testb	%al, %al	# retval.63_72
	je	.L1241	#,
# core/object.cpp:599: 	ERR_FAIL_COND(!value_stack.empty());
	movl	$0, %r8d	#,
	movl	$.LC21, %ecx	#,
	movl	$599, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC23, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
.LEHE306:
	movl	$0, %ebx	#, finally_tmp.64_32
# core/object.cpp:599: 	ERR_FAIL_COND(!value_stack.empty());
	jmp	.L1154	#
.L1241:
# core/object.cpp:599: 	ERR_FAIL_COND(!value_stack.empty());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$1, %ebx	#, finally_tmp.64_32
.L1154:
	leaq	-688(%rbp), %rax	#, tmp433
	movq	%rax, %rdi	# tmp433,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
	cmpl	$1, %ebx	#, finally_tmp.64_32
	jmp	.L1107	#
.L1249:
	movq	%rax, %rbx	#, tmp436
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-672(%rbp), %eax	# D.39235.type, _518
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _518
	je	.L1262	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-672(%rbp), %rax	#, tmp434
	movq	%rax, %rdi	# tmp434,
	call	_ZN7Variant5clearEv	#
.L1262:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1245	#
.L1250:
	movq	%rax, %rbx	#, tmp440
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-640(%rbp), %eax	# D.39277.type, _519
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _519
	je	.L1263	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-640(%rbp), %rax	#, tmp439
	movq	%rax, %rdi	# tmp439,
	call	_ZN7Variant5clearEv	#
.L1263:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1245	#
.L1248:
	movq	%rax, %rbx	#, tmp435
.L1245:
# core/object.cpp:565: 	List<Variant> value_stack;
	leaq	-688(%rbp), %rax	#, tmp442
	movq	%rax, %rdi	# tmp442,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp435, D.61846
	movq	%rax, %rdi	# D.61846,
.LEHB307:
	call	_Unwind_Resume	#
.LEHE307:
.L1259:
# core/object.cpp:555: 		return;
	nop	
.L1107:
# core/object.cpp:600: }
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2504:
	.section	.gcc_except_table
.LLSDA2504:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2504-.LLSDACSB2504
.LLSDACSB2504:
	.uleb128 .LEHB301-.LFB2504
	.uleb128 .LEHE301-.LEHB301
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB302-.LFB2504
	.uleb128 .LEHE302-.LEHB302
	.uleb128 .L1248-.LFB2504
	.uleb128 0
	.uleb128 .LEHB303-.LFB2504
	.uleb128 .LEHE303-.LEHB303
	.uleb128 .L1249-.LFB2504
	.uleb128 0
	.uleb128 .LEHB304-.LFB2504
	.uleb128 .LEHE304-.LEHB304
	.uleb128 .L1248-.LFB2504
	.uleb128 0
	.uleb128 .LEHB305-.LFB2504
	.uleb128 .LEHE305-.LEHB305
	.uleb128 .L1250-.LFB2504
	.uleb128 0
	.uleb128 .LEHB306-.LFB2504
	.uleb128 .LEHE306-.LEHB306
	.uleb128 .L1248-.LFB2504
	.uleb128 0
	.uleb128 .LEHB307-.LFB2504
	.uleb128 .LEHE307-.LEHB307
	.uleb128 0
	.uleb128 0
.LLSDACSE2504:
	.text
	.size	_ZN6Object11set_indexedERK6VectorI10StringNameERK7VariantPb, .-_ZN6Object11set_indexedERK6VectorI10StringNameERK7VariantPb
	.align 2
	.globl	_ZNK6Object11get_indexedERK6VectorI10StringNameEPb
	.type	_ZNK6Object11get_indexedERK6VectorI10StringNameEPb, @function
_ZNK6Object11get_indexedERK6VectorI10StringNameEPb:
.LFB2505:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2505
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$344, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -328(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -336(%rbp)	# this, this
	movq	%rdx, -344(%rbp)	# p_names, p_names
	movq	%rcx, -352(%rbp)	# r_valid, r_valid
	movq	-344(%rbp), %rax	# p_names, tmp154
	movq	%rax, -32(%rbp)	# tmp154, this
# ./core/vector.h:78: 	_FORCE_INLINE_ bool empty() const { return _cowdata.empty(); }
	movq	-32(%rbp), %rax	# this, tmp155
	addq	$8, %rax	#, _42
	movq	%rax, -40(%rbp)	# _42, this
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	movq	-40(%rbp), %rax	# this, tmp156
	movq	(%rax), %rax	# this_43->_ptr, _44
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	testq	%rax, %rax	# _44
	sete	%al	#, D.55778
# ./core/vector.h:78: 	_FORCE_INLINE_ bool empty() const { return _cowdata.empty(); }
	nop	
# core/object.cpp:603: 	if (p_names.empty()) {
	testb	%al, %al	# D.55778
	je	.L1267	#,
# core/object.cpp:604: 		if (r_valid)
	cmpq	$0, -352(%rbp)	#, r_valid
	je	.L1268	#,
# core/object.cpp:605: 			*r_valid = false;
	movq	-352(%rbp), %rax	# r_valid, tmp157
	movb	$0, (%rax)	#, *r_valid_32(D)
.L1268:
	movq	-328(%rbp), %rax	# <retval>, tmp158
	movq	%rax, -48(%rbp)	# tmp158, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-48(%rbp), %rax	# this, tmp159
	movl	$0, (%rax)	#, this_48->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:606: 		return Variant();
	jmp	.L1264	#
.L1267:
# core/object.cpp:608: 	bool valid = false;
	movb	$0, -289(%rbp)	#, valid
	movq	-344(%rbp), %rax	# p_names, tmp160
	movq	%rax, -56(%rbp)	# tmp160, this
	movl	$0, -60(%rbp)	#, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-56(%rbp), %rax	# this, tmp161
	addq	$8, %rax	#, _51
	movq	%rax, -72(%rbp)	# _51, this
	movl	-60(%rbp), %eax	# p_index, tmp162
	movl	%eax, -76(%rbp)	# tmp162, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-76(%rbp), %eax	# p_index, tmp164
	shrl	$31, %eax	#, tmp163
	movzbl	%al, %eax	# _54, _55
	testq	%rax, %rax	# _56
	jne	.L1270	#,
	movq	-72(%rbp), %rax	# this, tmp165
	movq	%rax, -88(%rbp)	# tmp165, this
	movq	-88(%rbp), %rax	# this, tmp166
	movq	%rax, -96(%rbp)	# tmp166, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-96(%rbp), %rax	# this, tmp167
	movq	(%rax), %rax	# this_58->_ptr, _59
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _59
	jne	.L1271	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _60
	jmp	.L1272	#
.L1271:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-96(%rbp), %rax	# this, tmp168
	movq	(%rax), %rax	# this_58->_ptr, _61
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _60
.L1272:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -104(%rbp)	# _60, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -104(%rbp)	#, size
	je	.L1273	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-104(%rbp), %rax	# size, tmp169
	movl	(%rax), %eax	# *size_65, _66
	jmp	.L1274	#
.L1273:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _67
.L1274:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -76(%rbp)	# _67, p_index
	setge	%al	#, _73
	movzbl	%al, %eax	# _73, _74
	testq	%rax, %rax	# _75
	je	.L1275	#,
.L1270:
	movl	$1, %eax	#, iftmp.71_76
	jmp	.L1276	#
.L1275:
	movl	$0, %eax	#, iftmp.71_76
.L1276:
	movzbl	%al, %eax	# iftmp.71_76, _79
	testq	%rax, %rax	# _79
	setne	%al	#, retval.70_80
	testb	%al, %al	# retval.70_80
	je	.L1277	#,
	movq	-72(%rbp), %rax	# this, tmp170
	movq	%rax, -112(%rbp)	# tmp170, this
	movq	-112(%rbp), %rax	# this, tmp171
	movq	%rax, -120(%rbp)	# tmp171, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-120(%rbp), %rax	# this, tmp172
	movq	(%rax), %rax	# this_82->_ptr, _83
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _83
	jne	.L1278	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _84
	jmp	.L1279	#
.L1278:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-120(%rbp), %rax	# this, tmp173
	movq	(%rax), %rax	# this_82->_ptr, _85
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _84
.L1279:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -128(%rbp)	# _84, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -128(%rbp)	#, size
	je	.L1280	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-128(%rbp), %rax	# size, tmp174
	movl	(%rax), %eax	# *size_89, _90
	jmp	.L1281	#
.L1280:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _91
.L1281:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _91, _97
	movl	-76(%rbp), %eax	# p_index, tmp175
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _97,
	movq	%rax, %rcx	# _98,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB308:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1277:
	movq	-72(%rbp), %rax	# this, tmp176
	movq	%rax, -136(%rbp)	# tmp176, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-136(%rbp), %rax	# this, tmp177
	movq	(%rax), %rax	# this_99->_ptr, _100
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _100
	jne	.L1282	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _101
	jmp	.L1283	#
.L1282:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-136(%rbp), %rax	# this, tmp178
	movq	(%rax), %rax	# this_99->_ptr, _101
.L1283:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-76(%rbp), %edx	# p_index, tmp179
	movslq	%edx, %rdx	# tmp179, _106
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rdx	#, _107
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rdx), %rdi	#, D.55801
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:610: 	Variant current_value = get(p_names[0], &valid);
	leaq	-320(%rbp), %rax	#, tmp180
	leaq	-289(%rbp), %rdx	#, tmp181
	movq	-336(%rbp), %rsi	# this, tmp182
	movq	%rdx, %rcx	# tmp181,
	movq	%rdi, %rdx	# D.55801,
	movq	%rax, %rdi	# tmp180,
	call	_ZNK6Object3getERK10StringNamePb	#
.LEHE308:
# core/object.cpp:611: 	for (int i = 1; i < p_names.size(); i++) {
	movl	$1, -20(%rbp)	#, i
.L1310:
	movq	-344(%rbp), %rax	# p_names, tmp183
	movq	%rax, -144(%rbp)	# tmp183, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-144(%rbp), %rax	# this, tmp184
	addq	$8, %rax	#, _113
	movq	%rax, -152(%rbp)	# _113, this
	movq	-152(%rbp), %rax	# this, tmp185
	movq	%rax, -160(%rbp)	# tmp185, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-160(%rbp), %rax	# this, tmp186
	movq	(%rax), %rax	# this_115->_ptr, _116
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _116
	jne	.L1286	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _117
	jmp	.L1287	#
.L1286:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-160(%rbp), %rax	# this, tmp187
	movq	(%rax), %rax	# this_115->_ptr, _118
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _117
.L1287:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -168(%rbp)	# _117, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -168(%rbp)	#, size
	je	.L1288	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-168(%rbp), %rax	# size, tmp188
	movl	(%rax), %eax	# *size_122, _123
	jmp	.L1289	#
.L1288:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.55827
.L1289:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:611: 	for (int i = 1; i < p_names.size(); i++) {
	cmpl	%eax, -20(%rbp)	# D.55827, i
	setl	%al	#, retval.74_25
	testb	%al, %al	# retval.74_25
	je	.L1291	#,
	movq	-344(%rbp), %rax	# p_names, tmp189
	movq	%rax, -176(%rbp)	# tmp189, this
	movl	-20(%rbp), %eax	# i, tmp190
	movl	%eax, -180(%rbp)	# tmp190, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-176(%rbp), %rax	# this, tmp191
	addq	$8, %rax	#, _132
	movq	%rax, -192(%rbp)	# _132, this
	movl	-180(%rbp), %eax	# p_index, tmp192
	movl	%eax, -196(%rbp)	# tmp192, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-196(%rbp), %eax	# p_index, tmp194
	shrl	$31, %eax	#, tmp193
	movzbl	%al, %eax	# _135, _136
	testq	%rax, %rax	# _137
	jne	.L1292	#,
	movq	-192(%rbp), %rax	# this, tmp195
	movq	%rax, -208(%rbp)	# tmp195, this
	movq	-208(%rbp), %rax	# this, tmp196
	movq	%rax, -216(%rbp)	# tmp196, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-216(%rbp), %rax	# this, tmp197
	movq	(%rax), %rax	# this_139->_ptr, _140
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _140
	jne	.L1293	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _141
	jmp	.L1294	#
.L1293:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-216(%rbp), %rax	# this, tmp198
	movq	(%rax), %rax	# this_139->_ptr, _142
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _141
.L1294:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -224(%rbp)	# _141, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -224(%rbp)	#, size
	je	.L1295	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-224(%rbp), %rax	# size, tmp199
	movl	(%rax), %eax	# *size_146, _147
	jmp	.L1296	#
.L1295:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _148
.L1296:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -196(%rbp)	# _148, p_index
	setge	%al	#, _154
	movzbl	%al, %eax	# _154, _155
	testq	%rax, %rax	# _156
	je	.L1297	#,
.L1292:
	movl	$1, %eax	#, iftmp.71_157
	jmp	.L1298	#
.L1297:
	movl	$0, %eax	#, iftmp.71_157
.L1298:
	movzbl	%al, %eax	# iftmp.71_157, _160
	testq	%rax, %rax	# _160
	setne	%al	#, retval.70_161
	testb	%al, %al	# retval.70_161
	je	.L1299	#,
	movq	-192(%rbp), %rax	# this, tmp200
	movq	%rax, -232(%rbp)	# tmp200, this
	movq	-232(%rbp), %rax	# this, tmp201
	movq	%rax, -240(%rbp)	# tmp201, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-240(%rbp), %rax	# this, tmp202
	movq	(%rax), %rax	# this_163->_ptr, _164
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _164
	jne	.L1300	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _165
	jmp	.L1301	#
.L1300:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-240(%rbp), %rax	# this, tmp203
	movq	(%rax), %rax	# this_163->_ptr, _166
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _165
.L1301:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -248(%rbp)	# _165, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -248(%rbp)	#, size
	je	.L1302	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-248(%rbp), %rax	# size, tmp204
	movl	(%rax), %eax	# *size_170, _171
	jmp	.L1303	#
.L1302:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _172
.L1303:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _172, _178
	movl	-196(%rbp), %eax	# p_index, tmp205
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _178,
	movq	%rax, %rcx	# _179,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB309:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1299:
	movq	-192(%rbp), %rax	# this, tmp206
	movq	%rax, -256(%rbp)	# tmp206, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-256(%rbp), %rax	# this, tmp207
	movq	(%rax), %rax	# this_180->_ptr, _181
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _181
	jne	.L1304	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _182
	jmp	.L1305	#
.L1304:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-256(%rbp), %rax	# this, tmp208
	movq	(%rax), %rax	# this_180->_ptr, _182
.L1305:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-196(%rbp), %edx	# p_index, tmp209
	movslq	%edx, %rdx	# tmp209, _187
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rdx	#, _188
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rdx), %rdi	#, D.55852
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:612: 		current_value = current_value.get_named(p_names[i], &valid);
	leaq	-288(%rbp), %rax	#, tmp210
	leaq	-289(%rbp), %rdx	#, tmp211
	leaq	-320(%rbp), %rsi	#, tmp212
	movq	%rdx, %rcx	# tmp211,
	movq	%rdi, %rdx	# D.55852,
	movq	%rax, %rdi	# tmp210,
	.cfi_escape 0x2e,0
	call	_ZNK7Variant9get_namedERK10StringNamePb	#
.LEHE309:
# core/object.cpp:612: 		current_value = current_value.get_named(p_names[i], &valid);
	leaq	-288(%rbp), %rdx	#, tmp213
	leaq	-320(%rbp), %rax	#, tmp214
	movq	%rdx, %rsi	# tmp213,
	movq	%rax, %rdi	# tmp214,
.LEHB310:
	call	_ZN7VariantaSERKS_	#
.LEHE310:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.39294.type, _193
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _193
	je	.L1323	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp215
	movq	%rax, %rdi	# tmp215,
	call	_ZN7Variant5clearEv	#
.L1323:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:614: 		if (!valid)
	movzbl	-289(%rbp), %eax	# valid, valid.75_4
	xorl	$1, %eax	#, _5
# core/object.cpp:614: 		if (!valid)
	testb	%al, %al	# _5
	jne	.L1324	#,
# core/object.cpp:611: 	for (int i = 1; i < p_names.size(); i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L1310	#
.L1324:
# core/object.cpp:615: 			break;
	nop	
.L1291:
# core/object.cpp:617: 	if (r_valid)
	cmpq	$0, -352(%rbp)	#, r_valid
	je	.L1311	#,
# core/object.cpp:618: 		*r_valid = valid;
	movzbl	-289(%rbp), %edx	# valid, valid.76_6
	movq	-352(%rbp), %rax	# r_valid, tmp216
	movb	%dl, (%rax)	# valid.76_6, *r_valid_32(D)
.L1311:
# core/object.cpp:620: 	return current_value;
	leaq	-320(%rbp), %rdx	#, tmp217
	movq	-328(%rbp), %rax	# <retval>, tmp218
	movq	%rdx, %rsi	# tmp217,
	movq	%rax, %rdi	# tmp218,
.LEHB311:
	call	_ZN7VariantC1ERKS_	#
.LEHE311:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-320(%rbp), %eax	# current_value.type, _194
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _194
	je	.L1325	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-320(%rbp), %rax	#, tmp219
	movq	%rax, %rdi	# tmp219,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1325	#
.L1319:
	movq	%rax, %rbx	#, tmp222
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.39294.type, _195
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _195
	je	.L1326	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp220
	movq	%rax, %rdi	# tmp220,
	call	_ZN7Variant5clearEv	#
.L1326:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1316	#
.L1318:
	movq	%rax, %rbx	#, tmp221
.L1316:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-320(%rbp), %eax	# current_value.type, _196
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _196
	je	.L1327	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-320(%rbp), %rax	#, tmp225
	movq	%rax, %rdi	# tmp225,
	call	_ZN7Variant5clearEv	#
.L1327:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp221, D.61852
	movq	%rax, %rdi	# D.61852,
.LEHB312:
	call	_Unwind_Resume	#
.LEHE312:
.L1325:
	nop	
.L1264:
# core/object.cpp:621: }
	movq	-328(%rbp), %rax	# <retval>,
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2505:
	.section	.gcc_except_table
.LLSDA2505:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2505-.LLSDACSB2505
.LLSDACSB2505:
	.uleb128 .LEHB308-.LFB2505
	.uleb128 .LEHE308-.LEHB308
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB309-.LFB2505
	.uleb128 .LEHE309-.LEHB309
	.uleb128 .L1318-.LFB2505
	.uleb128 0
	.uleb128 .LEHB310-.LFB2505
	.uleb128 .LEHE310-.LEHB310
	.uleb128 .L1319-.LFB2505
	.uleb128 0
	.uleb128 .LEHB311-.LFB2505
	.uleb128 .LEHE311-.LEHB311
	.uleb128 .L1318-.LFB2505
	.uleb128 0
	.uleb128 .LEHB312-.LFB2505
	.uleb128 .LEHE312-.LEHB312
	.uleb128 0
	.uleb128 0
.LLSDACSE2505:
	.text
	.size	_ZNK6Object11get_indexedERK6VectorI10StringNameEPb, .-_ZNK6Object11get_indexedERK6VectorI10StringNameEPb
	.section	.rodata
.LC24:
	.string	"Script Variables"
.LC25:
	.string	"Script"
.LC26:
	.string	"script"
.LC27:
	.string	""
.LC28:
	.string	"__meta__"
	.text
	.align 2
	.globl	_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb
	.type	_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb, @function
_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb:
.LFB2506:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2506
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$376, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -360(%rbp)	# this, this
	movq	%rsi, -368(%rbp)	# p_list, p_list
	movl	%edx, %eax	# p_reversed, tmp116
	movb	%al, -372(%rbp)	# tmp117, p_reversed
# core/object.cpp:625: 	if (script_instance && p_reversed) {
	movq	-360(%rbp), %rax	# this, tmp118
	movq	80(%rax), %rax	# this_43(D)->script_instance, _1
# core/object.cpp:625: 	if (script_instance && p_reversed) {
	testq	%rax, %rax	# _1
	je	.L1329	#,
# core/object.cpp:625: 	if (script_instance && p_reversed) {
	cmpb	$0, -372(%rbp)	#, p_reversed
	je	.L1329	#,
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-304(%rbp), %rax	#, tmp119
	movq	%rax, %rdi	# tmp119,
.LEHB313:
	call	_ZN10StringNameC1Ev	#
.LEHE313:
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	leaq	-296(%rbp), %rax	#, _142
	movq	%rax, -24(%rbp)	# _142, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-24(%rbp), %rax	# this, tmp120
	movq	$0, (%rax)	#, this_143->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-288(%rbp), %rax	#, tmp121
	movl	$.LC24, %esi	#,
	movq	%rax, %rdi	# tmp121,
.LEHB314:
	call	_ZN6StringC1EPKc	#
.LEHE314:
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-296(%rbp), %rsi	#, tmp122
	leaq	-288(%rbp), %rdx	#, tmp123
	leaq	-352(%rbp), %rax	#, tmp124
	subq	$8, %rsp	#,
	leaq	-304(%rbp), %rcx	#, tmp125
	pushq	%rcx	# tmp125
	movl	$256, %r9d	#,
	movq	%rsi, %r8	# tmp122,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp124,
.LEHB315:
	.cfi_escape 0x2e,0x10
	call	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName	#
.LEHE315:
	addq	$16, %rsp	#,
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-352(%rbp), %rdx	#, tmp126
	movq	-368(%rbp), %rax	# p_list, tmp127
	movq	%rdx, %rsi	# tmp126,
	movq	%rax, %rdi	# tmp127,
.LEHB316:
	.cfi_escape 0x2e,0
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE316:
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-352(%rbp), %rax	#, tmp128
	movq	%rax, %rdi	# tmp128,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-288(%rbp), %rax	#, tmp129
	movq	%rax, %rdi	# tmp129,
	call	_ZN6StringD1Ev	#
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-296(%rbp), %rax	#, tmp130
	movq	%rax, %rdi	# tmp130,
	call	_ZN6StringD1Ev	#
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-304(%rbp), %rax	#, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:627: 		script_instance->get_property_list(p_list);
	movq	-360(%rbp), %rax	# this, tmp132
	movq	80(%rax), %rax	# this_43(D)->script_instance, _2
	movq	-360(%rbp), %rdx	# this, tmp134
	movq	80(%rdx), %rdx	# this_43(D)->script_instance, _4
# core/object.cpp:627: 		script_instance->get_property_list(p_list);
	movq	(%rdx), %rdx	# _4->_vptr.ScriptInstance, _5
	addq	$16, %rdx	#, _6
	movq	(%rdx), %rcx	# *_6, _7
# core/object.cpp:627: 		script_instance->get_property_list(p_list);
	movq	-368(%rbp), %rdx	# p_list, tmp135
	movq	%rdx, %rsi	# tmp135,
	movq	%rax, %rdi	# _2,
.LEHB317:
	call	*%rcx	# _7
.L1329:
# core/object.cpp:630: 	_get_property_listv(p_list, p_reversed);
	movq	-360(%rbp), %rax	# this, tmp136
	movq	(%rax), %rax	# this_43(D)->_vptr.Object, _8
	addq	$24, %rax	#, _9
	movq	(%rax), %r8	# *_9, _10
# core/object.cpp:630: 	_get_property_listv(p_list, p_reversed);
	movzbl	-372(%rbp), %edx	# p_reversed, _11
	movq	-368(%rbp), %rcx	# p_list, tmp137
	movq	-360(%rbp), %rax	# this, tmp138
	movq	%rcx, %rsi	# tmp137,
	movq	%rax, %rdi	# tmp138,
	call	*%r8	# _10
# core/object.cpp:632: 	if (!is_class("Script")) { // can still be set, but this is for userfriendlyness
	movq	-360(%rbp), %rax	# this, tmp139
	movq	(%rax), %rax	# this_43(D)->_vptr.Object, _12
	addq	$80, %rax	#, _13
	movq	(%rax), %rbx	# *_13, _14
# core/object.cpp:632: 	if (!is_class("Script")) { // can still be set, but this is for userfriendlyness
	leaq	-280(%rbp), %rax	#, tmp140
	movl	$.LC25, %esi	#,
	movq	%rax, %rdi	# tmp140,
	call	_ZN6StringC1EPKc	#
.LEHE317:
	leaq	-280(%rbp), %rdx	#, tmp141
	movq	-360(%rbp), %rax	# this, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
.LEHB318:
	call	*%rbx	# _14
.LEHE318:
# core/object.cpp:632: 	if (!is_class("Script")) { // can still be set, but this is for userfriendlyness
	xorl	$1, %eax	#, _15
	movl	%eax, %ebx	# _15, retval.77_71
# core/object.cpp:632: 	if (!is_class("Script")) { // can still be set, but this is for userfriendlyness
	leaq	-280(%rbp), %rax	#, tmp143
	movq	%rax, %rdi	# tmp143,
	call	_ZN6StringD1Ev	#
# core/object.cpp:632: 	if (!is_class("Script")) { // can still be set, but this is for userfriendlyness
	testb	%bl, %bl	# retval.77_71
	je	.L1330	#,
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-216(%rbp), %rax	#, tmp144
	movq	%rax, %rdi	# tmp144,
.LEHB319:
	call	_ZN10StringNameC1Ev	#
.LEHE319:
	leaq	-208(%rbp), %rax	#, tmp145
	movl	$.LC25, %esi	#,
	movq	%rax, %rdi	# tmp145,
.LEHB320:
	call	_ZN6StringC1EPKc	#
.LEHE320:
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-200(%rbp), %rax	#, tmp146
	movl	$.LC26, %esi	#,
	movq	%rax, %rdi	# tmp146,
.LEHB321:
	call	_ZN6StringC1EPKc	#
.LEHE321:
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-208(%rbp), %rsi	#, tmp147
	leaq	-200(%rbp), %rdx	#, tmp148
	leaq	-272(%rbp), %rax	#, tmp149
	subq	$8, %rsp	#,
	leaq	-216(%rbp), %rcx	#, tmp150
	pushq	%rcx	# tmp150
	movl	$7, %r9d	#,
	movq	%rsi, %r8	# tmp147,
	movl	$17, %ecx	#,
	movl	$17, %esi	#,
	movq	%rax, %rdi	# tmp149,
.LEHB322:
	.cfi_escape 0x2e,0x10
	call	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName	#
.LEHE322:
	addq	$16, %rsp	#,
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-272(%rbp), %rdx	#, tmp151
	movq	-368(%rbp), %rax	# p_list, tmp152
	movq	%rdx, %rsi	# tmp151,
	movq	%rax, %rdi	# tmp152,
.LEHB323:
	.cfi_escape 0x2e,0
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE323:
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-272(%rbp), %rax	#, tmp153
	movq	%rax, %rdi	# tmp153,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-200(%rbp), %rax	#, tmp154
	movq	%rax, %rdi	# tmp154,
	call	_ZN6StringD1Ev	#
	leaq	-208(%rbp), %rax	#, tmp155
	movq	%rax, %rdi	# tmp155,
	call	_ZN6StringD1Ev	#
	leaq	-216(%rbp), %rax	#, tmp156
	movq	%rax, %rdi	# tmp156,
	call	_ZN10StringNameD1Ev	#
.L1330:
# core/object.cpp:638: 	if (!metadata.empty()) {
	movq	-360(%rbp), %rax	# this, tmp157
	addq	$96, %rax	#, _16
	movq	%rax, %rdi	# _16,
.LEHB324:
	call	_ZNK10Dictionary5emptyEv	#
# core/object.cpp:638: 	if (!metadata.empty()) {
	xorl	$1, %eax	#, retval.78_97
# core/object.cpp:638: 	if (!metadata.empty()) {
	testb	%al, %al	# retval.78_97
	je	.L1331	#,
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-136(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN10StringNameC1Ev	#
.LEHE324:
	leaq	-128(%rbp), %rax	#, tmp159
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# tmp159,
.LEHB325:
	call	_ZN6StringC1EPKc	#
.LEHE325:
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-120(%rbp), %rax	#, tmp160
	movl	$.LC28, %esi	#,
	movq	%rax, %rdi	# tmp160,
.LEHB326:
	call	_ZN6StringC1EPKc	#
.LEHE326:
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-128(%rbp), %rsi	#, tmp161
	leaq	-120(%rbp), %rdx	#, tmp162
	leaq	-192(%rbp), %rax	#, tmp163
	subq	$8, %rsp	#,
	leaq	-136(%rbp), %rcx	#, tmp164
	pushq	%rcx	# tmp164
	movl	$1048581, %r9d	#,
	movq	%rsi, %r8	# tmp161,
	movl	$0, %ecx	#,
	movl	$18, %esi	#,
	movq	%rax, %rdi	# tmp163,
.LEHB327:
	.cfi_escape 0x2e,0x10
	call	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName	#
.LEHE327:
	addq	$16, %rsp	#,
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-192(%rbp), %rdx	#, tmp165
	movq	-368(%rbp), %rax	# p_list, tmp166
	movq	%rdx, %rsi	# tmp165,
	movq	%rax, %rdi	# tmp166,
.LEHB328:
	.cfi_escape 0x2e,0
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE328:
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-192(%rbp), %rax	#, tmp167
	movq	%rax, %rdi	# tmp167,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-120(%rbp), %rax	#, tmp168
	movq	%rax, %rdi	# tmp168,
	call	_ZN6StringD1Ev	#
	leaq	-128(%rbp), %rax	#, tmp169
	movq	%rax, %rdi	# tmp169,
	call	_ZN6StringD1Ev	#
	leaq	-136(%rbp), %rax	#, tmp170
	movq	%rax, %rdi	# tmp170,
	call	_ZN10StringNameD1Ev	#
.L1331:
# core/object.cpp:641: 	if (script_instance && !p_reversed) {
	movq	-360(%rbp), %rax	# this, tmp171
	movq	80(%rax), %rax	# this_43(D)->script_instance, _18
# core/object.cpp:641: 	if (script_instance && !p_reversed) {
	testq	%rax, %rax	# _18
	je	.L1363	#,
# core/object.cpp:641: 	if (script_instance && !p_reversed) {
	movzbl	-372(%rbp), %eax	# p_reversed, tmp172
	xorl	$1, %eax	#, _19
# core/object.cpp:641: 	if (script_instance && !p_reversed) {
	testb	%al, %al	# _19
	je	.L1363	#,
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-56(%rbp), %rax	#, tmp173
	movq	%rax, %rdi	# tmp173,
.LEHB329:
	call	_ZN10StringNameC1Ev	#
.LEHE329:
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	leaq	-48(%rbp), %rax	#, _144
	movq	%rax, -32(%rbp)	# _144, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp174
	movq	$0, (%rax)	#, this_145->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-40(%rbp), %rax	#, tmp175
	movl	$.LC24, %esi	#,
	movq	%rax, %rdi	# tmp175,
.LEHB330:
	call	_ZN6StringC1EPKc	#
.LEHE330:
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-48(%rbp), %rsi	#, tmp176
	leaq	-40(%rbp), %rdx	#, tmp177
	leaq	-112(%rbp), %rax	#, tmp178
	subq	$8, %rsp	#,
	leaq	-56(%rbp), %rcx	#, tmp179
	pushq	%rcx	# tmp179
	movl	$256, %r9d	#,
	movq	%rsi, %r8	# tmp176,
	movl	$0, %ecx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp178,
.LEHB331:
	.cfi_escape 0x2e,0x10
	call	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName	#
.LEHE331:
	addq	$16, %rsp	#,
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-112(%rbp), %rdx	#, tmp180
	movq	-368(%rbp), %rax	# p_list, tmp181
	movq	%rdx, %rsi	# tmp180,
	movq	%rax, %rdi	# tmp181,
.LEHB332:
	.cfi_escape 0x2e,0
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE332:
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-112(%rbp), %rax	#, tmp182
	movq	%rax, %rdi	# tmp182,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-40(%rbp), %rax	#, tmp183
	movq	%rax, %rdi	# tmp183,
	call	_ZN6StringD1Ev	#
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-48(%rbp), %rax	#, tmp184
	movq	%rax, %rdi	# tmp184,
	call	_ZN6StringD1Ev	#
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-56(%rbp), %rax	#, tmp185
	movq	%rax, %rdi	# tmp185,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:643: 		script_instance->get_property_list(p_list);
	movq	-360(%rbp), %rax	# this, tmp186
	movq	80(%rax), %rax	# this_43(D)->script_instance, _20
	movq	-360(%rbp), %rdx	# this, tmp188
	movq	80(%rdx), %rdx	# this_43(D)->script_instance, _22
# core/object.cpp:643: 		script_instance->get_property_list(p_list);
	movq	(%rdx), %rdx	# _22->_vptr.ScriptInstance, _23
	addq	$16, %rdx	#, _24
	movq	(%rdx), %rcx	# *_24, _25
# core/object.cpp:643: 		script_instance->get_property_list(p_list);
	movq	-368(%rbp), %rdx	# p_list, tmp189
	movq	%rdx, %rsi	# tmp189,
	movq	%rax, %rdi	# _20,
.LEHB333:
	call	*%rcx	# _25
# core/object.cpp:645: }
	jmp	.L1363	#
.L1350:
	movq	%rax, %rbx	#, tmp192
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-352(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L1334	#
.L1349:
	movq	%rax, %rbx	#, tmp191
.L1334:
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-288(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN6StringD1Ev	#
	jmp	.L1335	#
.L1348:
	movq	%rax, %rbx	#, tmp196
.L1335:
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-296(%rbp), %rax	#, tmp198
	movq	%rax, %rdi	# tmp198,
	call	_ZN6StringD1Ev	#
# core/object.cpp:626: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-304(%rbp), %rax	#, tmp201
	movq	%rax, %rdi	# tmp201,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp199, D.61856
	movq	%rax, %rdi	# D.61856,
	call	_Unwind_Resume	#
.L1351:
	movq	%rax, %rbx	#, tmp203
# core/object.cpp:632: 	if (!is_class("Script")) { // can still be set, but this is for userfriendlyness
	leaq	-280(%rbp), %rax	#, tmp202
	movq	%rax, %rdi	# tmp202,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp203, D.61857
	movq	%rax, %rdi	# D.61857,
	call	_Unwind_Resume	#
.L1355:
	movq	%rax, %rbx	#, tmp206
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-272(%rbp), %rax	#, tmp204
	movq	%rax, %rdi	# tmp204,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L1338	#
.L1354:
	movq	%rax, %rbx	#, tmp205
.L1338:
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-200(%rbp), %rax	#, tmp209
	movq	%rax, %rdi	# tmp209,
	call	_ZN6StringD1Ev	#
	jmp	.L1339	#
.L1353:
	movq	%rax, %rbx	#, tmp210
.L1339:
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-208(%rbp), %rax	#, tmp212
	movq	%rax, %rdi	# tmp212,
	call	_ZN6StringD1Ev	#
	jmp	.L1340	#
.L1352:
	movq	%rax, %rbx	#, tmp213
.L1340:
# core/object.cpp:636: 		p_list->push_back(PropertyInfo(Variant::OBJECT, "script", PROPERTY_HINT_RESOURCE_TYPE, "Script", PROPERTY_USAGE_DEFAULT));
	leaq	-216(%rbp), %rax	#, tmp215
	movq	%rax, %rdi	# tmp215,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp213, D.61858
	movq	%rax, %rdi	# D.61858,
	call	_Unwind_Resume	#
.L1359:
	movq	%rax, %rbx	#, tmp218
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-192(%rbp), %rax	#, tmp216
	movq	%rax, %rdi	# tmp216,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L1342	#
.L1358:
	movq	%rax, %rbx	#, tmp217
.L1342:
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-120(%rbp), %rax	#, tmp221
	movq	%rax, %rdi	# tmp221,
	call	_ZN6StringD1Ev	#
	jmp	.L1343	#
.L1357:
	movq	%rax, %rbx	#, tmp222
.L1343:
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-128(%rbp), %rax	#, tmp224
	movq	%rax, %rdi	# tmp224,
	call	_ZN6StringD1Ev	#
	jmp	.L1344	#
.L1356:
	movq	%rax, %rbx	#, tmp225
.L1344:
# core/object.cpp:639: 		p_list->push_back(PropertyInfo(Variant::DICTIONARY, "__meta__", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NOEDITOR | PROPERTY_USAGE_INTERNAL));
	leaq	-136(%rbp), %rax	#, tmp227
	movq	%rax, %rdi	# tmp227,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp225, D.61859
	movq	%rax, %rdi	# D.61859,
	call	_Unwind_Resume	#
.L1362:
	movq	%rax, %rbx	#, tmp230
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-112(%rbp), %rax	#, tmp228
	movq	%rax, %rdi	# tmp228,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L1346	#
.L1361:
	movq	%rax, %rbx	#, tmp229
.L1346:
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-40(%rbp), %rax	#, tmp233
	movq	%rax, %rdi	# tmp233,
	call	_ZN6StringD1Ev	#
	jmp	.L1347	#
.L1360:
	movq	%rax, %rbx	#, tmp234
.L1347:
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-48(%rbp), %rax	#, tmp236
	movq	%rax, %rdi	# tmp236,
	call	_ZN6StringD1Ev	#
# core/object.cpp:642: 		p_list->push_back(PropertyInfo(Variant::NIL, "Script Variables", PROPERTY_HINT_NONE, String(), PROPERTY_USAGE_CATEGORY));
	leaq	-56(%rbp), %rax	#, tmp239
	movq	%rax, %rdi	# tmp239,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp237, D.61860
	movq	%rax, %rdi	# D.61860,
	call	_Unwind_Resume	#
.LEHE333:
.L1363:
# core/object.cpp:645: }
	nop	
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2506:
	.section	.gcc_except_table
.LLSDA2506:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2506-.LLSDACSB2506
.LLSDACSB2506:
	.uleb128 .LEHB313-.LFB2506
	.uleb128 .LEHE313-.LEHB313
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB314-.LFB2506
	.uleb128 .LEHE314-.LEHB314
	.uleb128 .L1348-.LFB2506
	.uleb128 0
	.uleb128 .LEHB315-.LFB2506
	.uleb128 .LEHE315-.LEHB315
	.uleb128 .L1349-.LFB2506
	.uleb128 0
	.uleb128 .LEHB316-.LFB2506
	.uleb128 .LEHE316-.LEHB316
	.uleb128 .L1350-.LFB2506
	.uleb128 0
	.uleb128 .LEHB317-.LFB2506
	.uleb128 .LEHE317-.LEHB317
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB318-.LFB2506
	.uleb128 .LEHE318-.LEHB318
	.uleb128 .L1351-.LFB2506
	.uleb128 0
	.uleb128 .LEHB319-.LFB2506
	.uleb128 .LEHE319-.LEHB319
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB320-.LFB2506
	.uleb128 .LEHE320-.LEHB320
	.uleb128 .L1352-.LFB2506
	.uleb128 0
	.uleb128 .LEHB321-.LFB2506
	.uleb128 .LEHE321-.LEHB321
	.uleb128 .L1353-.LFB2506
	.uleb128 0
	.uleb128 .LEHB322-.LFB2506
	.uleb128 .LEHE322-.LEHB322
	.uleb128 .L1354-.LFB2506
	.uleb128 0
	.uleb128 .LEHB323-.LFB2506
	.uleb128 .LEHE323-.LEHB323
	.uleb128 .L1355-.LFB2506
	.uleb128 0
	.uleb128 .LEHB324-.LFB2506
	.uleb128 .LEHE324-.LEHB324
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB325-.LFB2506
	.uleb128 .LEHE325-.LEHB325
	.uleb128 .L1356-.LFB2506
	.uleb128 0
	.uleb128 .LEHB326-.LFB2506
	.uleb128 .LEHE326-.LEHB326
	.uleb128 .L1357-.LFB2506
	.uleb128 0
	.uleb128 .LEHB327-.LFB2506
	.uleb128 .LEHE327-.LEHB327
	.uleb128 .L1358-.LFB2506
	.uleb128 0
	.uleb128 .LEHB328-.LFB2506
	.uleb128 .LEHE328-.LEHB328
	.uleb128 .L1359-.LFB2506
	.uleb128 0
	.uleb128 .LEHB329-.LFB2506
	.uleb128 .LEHE329-.LEHB329
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB330-.LFB2506
	.uleb128 .LEHE330-.LEHB330
	.uleb128 .L1360-.LFB2506
	.uleb128 0
	.uleb128 .LEHB331-.LFB2506
	.uleb128 .LEHE331-.LEHB331
	.uleb128 .L1361-.LFB2506
	.uleb128 0
	.uleb128 .LEHB332-.LFB2506
	.uleb128 .LEHE332-.LEHB332
	.uleb128 .L1362-.LFB2506
	.uleb128 0
	.uleb128 .LEHB333-.LFB2506
	.uleb128 .LEHE333-.LEHB333
	.uleb128 0
	.uleb128 0
.LLSDACSE2506:
	.text
	.size	_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb, .-_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb
	.align 2
	.globl	_ZNK6Object18_validate_propertyER12PropertyInfo
	.type	_ZNK6Object18_validate_propertyER12PropertyInfo, @function
_ZNK6Object18_validate_propertyER12PropertyInfo:
.LFB2507:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# property, property
# core/object.cpp:648: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2507:
	.size	_ZNK6Object18_validate_propertyER12PropertyInfo, .-_ZNK6Object18_validate_propertyER12PropertyInfo
	.align 2
	.globl	_ZNK6Object15get_method_listEP4ListI10MethodInfo16DefaultAllocatorE
	.type	_ZNK6Object15get_method_listEP4ListI10MethodInfo16DefaultAllocatorE, @function
_ZNK6Object15get_method_listEP4ListI10MethodInfo16DefaultAllocatorE:
.LFB2508:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2508
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_list, p_list
	movq	-40(%rbp), %rax	# this, tmp95
	movq	%rax, -24(%rbp)	# tmp95, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-24(%rbp), %rax	# this, tmp96
	movq	112(%rax), %rax	# this_21->_class_ptr, _22
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _22
	jne	.L1366	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-24(%rbp), %rax	# this, tmp97
	movq	(%rax), %rax	# this_21->_vptr.Object, _23
	addq	$48, %rax	#, _24
	movq	(%rax), %rdx	# *_24, _25
# core/object.h:647: 			return *_get_class_namev();
	movq	-24(%rbp), %rax	# this, tmp98
	movq	%rax, %rdi	# tmp98,
.LEHB334:
	call	*%rdx	# _25
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L1367	#
.L1366:
# core/object.h:649: 			return *_class_ptr;
	movq	-24(%rbp), %rax	# this, tmp99
	movq	112(%rax), %rax	# this_21->_class_ptr, D.54833
.L1367:
# core/object.cpp:652: 	ClassDB::get_method_list(get_class_name(), p_list);
	leaq	-32(%rbp), %rdx	#, tmp100
	movq	%rax, %rsi	# D.54833,
	movq	%rdx, %rdi	# tmp100,
	call	_ZN10StringNameC1ERKS_	#
.LEHE334:
	movq	-48(%rbp), %rsi	# p_list, tmp101
	leaq	-32(%rbp), %rax	#, tmp102
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp102,
.LEHB335:
	call	_ZN7ClassDB15get_method_listE10StringNameP4ListI10MethodInfo16DefaultAllocatorEbb	#
.LEHE335:
# core/object.cpp:652: 	ClassDB::get_method_list(get_class_name(), p_list);
	leaq	-32(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:653: 	if (script_instance) {
	movq	-40(%rbp), %rax	# this, tmp104
	movq	80(%rax), %rax	# this_11(D)->script_instance, _2
# core/object.cpp:653: 	if (script_instance) {
	testq	%rax, %rax	# _2
	je	.L1371	#,
# core/object.cpp:654: 		script_instance->get_method_list(p_list);
	movq	-40(%rbp), %rax	# this, tmp105
	movq	80(%rax), %rax	# this_11(D)->script_instance, _3
	movq	-40(%rbp), %rdx	# this, tmp107
	movq	80(%rdx), %rdx	# this_11(D)->script_instance, _5
# core/object.cpp:654: 		script_instance->get_method_list(p_list);
	movq	(%rdx), %rdx	# _5->_vptr.ScriptInstance, _6
	addq	$48, %rdx	#, _7
	movq	(%rdx), %rcx	# *_7, _8
# core/object.cpp:654: 		script_instance->get_method_list(p_list);
	movq	-48(%rbp), %rdx	# p_list, tmp108
	movq	%rdx, %rsi	# tmp108,
	movq	%rax, %rdi	# _3,
.LEHB336:
	call	*%rcx	# _8
# core/object.cpp:656: }
	jmp	.L1371	#
.L1370:
	movq	%rax, %rbx	#, tmp110
# core/object.cpp:652: 	ClassDB::get_method_list(get_class_name(), p_list);
	leaq	-32(%rbp), %rax	#, tmp109
	movq	%rax, %rdi	# tmp109,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp110, D.61866
	movq	%rax, %rdi	# D.61866,
	call	_Unwind_Resume	#
.LEHE336:
.L1371:
# core/object.cpp:656: }
	nop	
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2508:
	.section	.gcc_except_table
.LLSDA2508:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2508-.LLSDACSB2508
.LLSDACSB2508:
	.uleb128 .LEHB334-.LFB2508
	.uleb128 .LEHE334-.LEHB334
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB335-.LFB2508
	.uleb128 .LEHE335-.LEHB335
	.uleb128 .L1370-.LFB2508
	.uleb128 0
	.uleb128 .LEHB336-.LFB2508
	.uleb128 .LEHE336-.LEHB336
	.uleb128 0
	.uleb128 0
.LLSDACSE2508:
	.text
	.size	_ZNK6Object15get_method_listEP4ListI10MethodInfo16DefaultAllocatorE, .-_ZNK6Object15get_method_listEP4ListI10MethodInfo16DefaultAllocatorE
	.align 2
	.globl	_ZN6Object10_call_bindEPPK7VariantiRNS0_9CallErrorE
	.type	_ZN6Object10_call_bindEPPK7VariantiRNS0_9CallErrorE, @function
_ZN6Object10_call_bindEPPK7VariantiRNS0_9CallErrorE:
.LFB2509:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2509
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -64(%rbp)	# this, this
	movq	%rdx, -72(%rbp)	# p_args, p_args
	movl	%ecx, -76(%rbp)	# p_argcount, p_argcount
	movq	%r8, -88(%rbp)	# r_error, r_error
# core/object.cpp:660: 	if (p_argcount < 1) {
	cmpl	$0, -76(%rbp)	#, p_argcount
	jg	.L1373	#,
# core/object.cpp:661: 		r_error.error = Variant::CallError::CALL_ERROR_TOO_FEW_ARGUMENTS;
	movq	-88(%rbp), %rax	# r_error, tmp92
	movl	$4, (%rax)	#, r_error_18(D)->error
# core/object.cpp:662: 		r_error.argument = 0;
	movq	-88(%rbp), %rax	# r_error, tmp93
	movl	$0, 4(%rax)	#, r_error_18(D)->argument
	movq	-56(%rbp), %rax	# <retval>, tmp94
	movq	%rax, -24(%rbp)	# tmp94, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-24(%rbp), %rax	# this, tmp95
	movl	$0, (%rax)	#, this_29->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:663: 		return Variant();
	jmp	.L1372	#
.L1373:
# core/object.cpp:666: 	if (p_args[0]->get_type() != Variant::STRING) {
	movq	-72(%rbp), %rax	# p_args, tmp96
	movq	(%rax), %rax	# *p_args_13(D), _1
	movq	%rax, -32(%rbp)	# _1, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-32(%rbp), %rax	# this, tmp97
	movl	(%rax), %eax	# this_30->type, D.54660
# core/object.cpp:666: 	if (p_args[0]->get_type() != Variant::STRING) {
	cmpl	$4, %eax	#, D.54660
	setne	%al	#, retval.79_14
# core/object.cpp:666: 	if (p_args[0]->get_type() != Variant::STRING) {
	testb	%al, %al	# retval.79_14
	je	.L1376	#,
# core/object.cpp:667: 		r_error.error = Variant::CallError::CALL_ERROR_INVALID_ARGUMENT;
	movq	-88(%rbp), %rax	# r_error, tmp98
	movl	$2, (%rax)	#, r_error_18(D)->error
# core/object.cpp:668: 		r_error.argument = 0;
	movq	-88(%rbp), %rax	# r_error, tmp99
	movl	$0, 4(%rax)	#, r_error_18(D)->argument
# core/object.cpp:669: 		r_error.expected = Variant::STRING;
	movq	-88(%rbp), %rax	# r_error, tmp100
	movl	$4, 8(%rax)	#, r_error_18(D)->expected
	movq	-56(%rbp), %rax	# <retval>, tmp101
	movq	%rax, -40(%rbp)	# tmp101, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-40(%rbp), %rax	# this, tmp102
	movl	$0, (%rax)	#, this_32->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:670: 		return Variant();
	jmp	.L1372	#
.L1376:
# core/object.cpp:673: 	StringName method = *p_args[0];
	movq	-72(%rbp), %rax	# p_args, tmp103
	movq	(%rax), %rdx	# *p_args_13(D), _3
	leaq	-48(%rbp), %rax	#, tmp104
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp104,
.LEHB337:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE337:
# core/object.cpp:675: 	return call(method, &p_args[1], p_argcount - 1, r_error);
	movq	-64(%rbp), %rax	# this, tmp105
	movq	(%rax), %rax	# this_16(D)->_vptr.Object, _4
	addq	$96, %rax	#, _5
	movq	(%rax), %r10	# *_5, _6
	movl	-76(%rbp), %eax	# p_argcount, tmp106
	leal	-1(%rax), %r8d	#, _7
	movq	-72(%rbp), %rax	# p_args, tmp107
	leaq	8(%rax), %rcx	#, _8
	movq	-56(%rbp), %rax	# <retval>, tmp108
	movq	-88(%rbp), %rdi	# r_error, tmp109
	leaq	-48(%rbp), %rdx	#, tmp110
	movq	-64(%rbp), %rsi	# this, tmp111
	movq	%rdi, %r9	# tmp109,
	movq	%rax, %rdi	# tmp108,
.LEHB338:
	call	*%r10	# _6
.LEHE338:
	nop	
# core/object.cpp:673: 	StringName method = *p_args[0];
	leaq	-48(%rbp), %rax	#, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1372	#
.L1379:
	movq	%rax, %rbx	#, tmp114
	leaq	-48(%rbp), %rax	#, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp114, D.61867
	movq	%rax, %rdi	# D.61867,
.LEHB339:
	call	_Unwind_Resume	#
.LEHE339:
.L1372:
# core/object.cpp:676: }
	movq	-56(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2509:
	.section	.gcc_except_table
.LLSDA2509:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2509-.LLSDACSB2509
.LLSDACSB2509:
	.uleb128 .LEHB337-.LFB2509
	.uleb128 .LEHE337-.LEHB337
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB338-.LFB2509
	.uleb128 .LEHE338-.LEHB338
	.uleb128 .L1379-.LFB2509
	.uleb128 0
	.uleb128 .LEHB339-.LFB2509
	.uleb128 .LEHE339-.LEHB339
	.uleb128 0
	.uleb128 0
.LLSDACSE2509:
	.text
	.size	_ZN6Object10_call_bindEPPK7VariantiRNS0_9CallErrorE, .-_ZN6Object10_call_bindEPPK7VariantiRNS0_9CallErrorE
	.align 2
	.globl	_ZN6Object19_call_deferred_bindEPPK7VariantiRNS0_9CallErrorE
	.type	_ZN6Object19_call_deferred_bindEPPK7VariantiRNS0_9CallErrorE, @function
_ZN6Object19_call_deferred_bindEPPK7VariantiRNS0_9CallErrorE:
.LFB2510:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2510
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
	movq	%rdx, -88(%rbp)	# p_args, p_args
	movl	%ecx, -92(%rbp)	# p_argcount, p_argcount
	movq	%r8, -104(%rbp)	# r_error, r_error
# core/object.cpp:680: 	if (p_argcount < 1) {
	cmpl	$0, -92(%rbp)	#, p_argcount
	jg	.L1381	#,
# core/object.cpp:681: 		r_error.error = Variant::CallError::CALL_ERROR_TOO_FEW_ARGUMENTS;
	movq	-104(%rbp), %rax	# r_error, tmp91
	movl	$4, (%rax)	#, r_error_15(D)->error
# core/object.cpp:682: 		r_error.argument = 0;
	movq	-104(%rbp), %rax	# r_error, tmp92
	movl	$0, 4(%rax)	#, r_error_15(D)->argument
	movq	-72(%rbp), %rax	# <retval>, tmp93
	movq	%rax, -24(%rbp)	# tmp93, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-24(%rbp), %rax	# this, tmp94
	movl	$0, (%rax)	#, this_32->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:683: 		return Variant();
	jmp	.L1380	#
.L1381:
# core/object.cpp:686: 	if (p_args[0]->get_type() != Variant::STRING) {
	movq	-88(%rbp), %rax	# p_args, tmp95
	movq	(%rax), %rax	# *p_args_13(D), _1
	movq	%rax, -32(%rbp)	# _1, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-32(%rbp), %rax	# this, tmp96
	movl	(%rax), %eax	# this_33->type, D.54666
# core/object.cpp:686: 	if (p_args[0]->get_type() != Variant::STRING) {
	cmpl	$4, %eax	#, D.54666
	setne	%al	#, retval.80_14
# core/object.cpp:686: 	if (p_args[0]->get_type() != Variant::STRING) {
	testb	%al, %al	# retval.80_14
	je	.L1384	#,
# core/object.cpp:687: 		r_error.error = Variant::CallError::CALL_ERROR_INVALID_ARGUMENT;
	movq	-104(%rbp), %rax	# r_error, tmp97
	movl	$2, (%rax)	#, r_error_15(D)->error
# core/object.cpp:688: 		r_error.argument = 0;
	movq	-104(%rbp), %rax	# r_error, tmp98
	movl	$0, 4(%rax)	#, r_error_15(D)->argument
# core/object.cpp:689: 		r_error.expected = Variant::STRING;
	movq	-104(%rbp), %rax	# r_error, tmp99
	movl	$4, 8(%rax)	#, r_error_15(D)->expected
	movq	-72(%rbp), %rax	# <retval>, tmp100
	movq	%rax, -40(%rbp)	# tmp100, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-40(%rbp), %rax	# this, tmp101
	movl	$0, (%rax)	#, this_35->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:690: 		return Variant();
	jmp	.L1380	#
.L1384:
# core/object.cpp:693: 	r_error.error = Variant::CallError::CALL_OK;
	movq	-104(%rbp), %rax	# r_error, tmp102
	movl	$0, (%rax)	#, r_error_15(D)->error
# core/object.cpp:695: 	StringName method = *p_args[0];
	movq	-88(%rbp), %rax	# p_args, tmp103
	movq	(%rax), %rdx	# *p_args_13(D), _3
	leaq	-64(%rbp), %rax	#, tmp104
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp104,
.LEHB340:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE340:
.LEHB341:
# core/object.cpp:697: 	MessageQueue::get_singleton()->push_call(get_instance_id(), method, &p_args[1], p_argcount - 1);
	call	_ZN12MessageQueue13get_singletonEv	#
	movq	%rax, %rdi	#, _4
	movl	-92(%rbp), %eax	# p_argcount, tmp105
	leal	-1(%rax), %esi	#, _5
	movq	-88(%rbp), %rax	# p_args, tmp106
	leaq	8(%rax), %rcx	#, _6
	movq	-80(%rbp), %rax	# this, tmp107
	movq	%rax, -48(%rbp)	# tmp107, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-48(%rbp), %rax	# this, tmp108
	movq	64(%rax), %rax	# this_36->_instance_id, D.54671
# core/object.cpp:697: 	MessageQueue::get_singleton()->push_call(get_instance_id(), method, &p_args[1], p_argcount - 1);
	leaq	-64(%rbp), %rdx	#, tmp109
	movl	$0, %r9d	#,
	movl	%esi, %r8d	# _5,
	movq	%rax, %rsi	# D.54671,
	call	_ZN12MessageQueue9push_callEmRK10StringNamePPK7Variantib	#
.LEHE341:
	movq	-72(%rbp), %rax	# <retval>, tmp110
	movq	%rax, -56(%rbp)	# tmp110, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-56(%rbp), %rax	# this, tmp111
	movl	$0, (%rax)	#, this_38->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:695: 	StringName method = *p_args[0];
	leaq	-64(%rbp), %rax	#, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1380	#
.L1388:
	movq	%rax, %rbx	#, tmp114
	leaq	-64(%rbp), %rax	#, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp114, D.61871
	movq	%rax, %rdi	# D.61871,
.LEHB342:
	call	_Unwind_Resume	#
.LEHE342:
.L1380:
# core/object.cpp:700: }
	movq	-72(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2510:
	.section	.gcc_except_table
.LLSDA2510:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2510-.LLSDACSB2510
.LLSDACSB2510:
	.uleb128 .LEHB340-.LFB2510
	.uleb128 .LEHE340-.LEHB340
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB341-.LFB2510
	.uleb128 .LEHE341-.LEHB341
	.uleb128 .L1388-.LFB2510
	.uleb128 0
	.uleb128 .LEHB342-.LFB2510
	.uleb128 .LEHE342-.LEHB342
	.uleb128 0
	.uleb128 0
.LLSDACSE2510:
	.text
	.size	_ZN6Object19_call_deferred_bindEPPK7VariantiRNS0_9CallErrorE, .-_ZN6Object19_call_deferred_bindEPPK7VariantiRNS0_9CallErrorE
	.align 2
	.globl	_ZN6Object15call_multilevelERK10StringNamePPK7Varianti
	.type	_ZN6Object15call_multilevelERK10StringNamePPK7Varianti, @function
_ZN6Object15call_multilevelERK10StringNamePPK7Varianti:
.LFB2511:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2511
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# this, this
	movq	%rsi, -128(%rbp)	# p_method, p_method
	movq	%rdx, -136(%rbp)	# p_args, p_args
	movl	%ecx, -140(%rbp)	# p_argcount, p_argcount
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.55168
# core/object.cpp:740: 	if (p_method == CoreStringNames::get_singleton()->_free) {
	movq	%rax, %rdx	# D.55168, _2
	movq	-128(%rbp), %rax	# p_method, tmp105
	movq	%rax, -32(%rbp)	# tmp105, this
	movq	%rdx, -40(%rbp)	# _2, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-32(%rbp), %rax	# this, tmp106
	movq	(%rax), %rdx	# this_46->_data, _48
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-40(%rbp), %rax	# p_name, tmp107
	movq	(%rax), %rax	# p_name_47->_data, _49
	cmpq	%rax, %rdx	# _49, _48
	sete	%al	#, D.55165
# core/object.cpp:740: 	if (p_method == CoreStringNames::get_singleton()->_free) {
	testb	%al, %al	# D.55165
	je	.L1392	#,
# core/object.cpp:754: 		memdelete(this);
	movq	-120(%rbp), %rax	# this, tmp108
	movq	%rax, %rdi	# tmp108,
.LEHB343:
	call	_Z9memdeleteI6ObjectEvPT_	#
	jmp	.L1389	#
.L1392:
# core/object.cpp:763: 	if (script_instance) {
	movq	-120(%rbp), %rax	# this, tmp109
	movq	80(%rax), %rax	# this_22(D)->script_instance, _3
# core/object.cpp:763: 	if (script_instance) {
	testq	%rax, %rax	# _3
	je	.L1394	#,
# core/object.cpp:764: 		script_instance->call_multilevel(p_method, p_args, p_argcount);
	movq	-120(%rbp), %rax	# this, tmp110
	movq	80(%rax), %rax	# this_22(D)->script_instance, _4
	movq	-120(%rbp), %rdx	# this, tmp112
	movq	80(%rdx), %rdx	# this_22(D)->script_instance, _6
# core/object.cpp:764: 		script_instance->call_multilevel(p_method, p_args, p_argcount);
	movq	(%rdx), %rdx	# _6->_vptr.ScriptInstance, _7
	addq	$88, %rdx	#, _8
	movq	(%rdx), %r8	# *_8, _9
# core/object.cpp:764: 		script_instance->call_multilevel(p_method, p_args, p_argcount);
	movl	-140(%rbp), %ecx	# p_argcount, tmp113
	movq	-136(%rbp), %rdx	# p_args, tmp114
	movq	-128(%rbp), %rsi	# p_method, tmp115
	movq	%rax, %rdi	# _4,
	call	*%r8	# _9
.L1394:
# core/object.cpp:768: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	movq	-128(%rbp), %rdx	# p_method, tmp116
	leaq	-96(%rbp), %rax	#, tmp117
	movq	%rdx, %rsi	# tmp116,
	movq	%rax, %rdi	# tmp117,
	call	_ZN10StringNameC1ERKS_	#
.LEHE343:
	movq	-120(%rbp), %rax	# this, tmp118
	movq	%rax, -48(%rbp)	# tmp118, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-48(%rbp), %rax	# this, tmp119
	movq	112(%rax), %rax	# this_52->_class_ptr, _53
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _53
	jne	.L1395	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-48(%rbp), %rax	# this, tmp120
	movq	(%rax), %rax	# this_52->_vptr.Object, _54
	addq	$48, %rax	#, _55
	movq	(%rax), %rdx	# *_55, _56
# core/object.h:647: 			return *_get_class_namev();
	movq	-48(%rbp), %rax	# this, tmp121
	movq	%rax, %rdi	# tmp121,
.LEHB344:
	call	*%rdx	# _56
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L1396	#
.L1395:
# core/object.h:649: 			return *_class_ptr;
	movq	-48(%rbp), %rax	# this, tmp122
	movq	112(%rax), %rax	# this_52->_class_ptr, D.55172
.L1396:
# core/object.cpp:768: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-88(%rbp), %rdx	#, tmp123
	movq	%rax, %rsi	# D.55172,
	movq	%rdx, %rdi	# tmp123,
	call	_ZN10StringNameC1ERKS_	#
.LEHE344:
# core/object.cpp:768: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-96(%rbp), %rdx	#, tmp124
	leaq	-88(%rbp), %rax	#, tmp125
	movq	%rdx, %rsi	# tmp124,
	movq	%rax, %rdi	# tmp125,
.LEHB345:
	call	_ZN7ClassDB10get_methodE10StringNameS0_	#
.LEHE345:
	movq	%rax, -24(%rbp)	# _30, method
	leaq	-88(%rbp), %rax	#, tmp126
	movq	%rax, %rdi	# tmp126,
	call	_ZN10StringNameD1Ev	#
	leaq	-96(%rbp), %rax	#, tmp127
	movq	%rax, %rdi	# tmp127,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:770: 	if (method) {
	cmpq	$0, -24(%rbp)	#, method
	je	.L1389	#,
# core/object.cpp:772: 		method->call(this, p_args, p_argcount, error);
	movq	-24(%rbp), %rax	# method, tmp128
	movq	(%rax), %rax	# method_31->_vptr.MethodBind, _11
	addq	$8, %rax	#, _12
	movq	(%rax), %r10	# *_12, _13
# core/object.cpp:772: 		method->call(this, p_args, p_argcount, error);
	leaq	-80(%rbp), %rax	#, tmp129
	leaq	-108(%rbp), %r8	#, tmp130
	movl	-140(%rbp), %edi	# p_argcount, tmp131
	movq	-136(%rbp), %rcx	# p_args, tmp132
	movq	-120(%rbp), %rdx	# this, tmp133
	movq	-24(%rbp), %rsi	# method, tmp134
	movq	%r8, %r9	# tmp130,
	movl	%edi, %r8d	# tmp131,
	movq	%rax, %rdi	# tmp129,
.LEHB346:
	call	*%r10	# _13
.LEHE346:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39396.type, _61
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _61
	je	.L1403	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp135
	movq	%rax, %rdi	# tmp135,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1403	#
.L1402:
	movq	%rax, %rbx	#, tmp138
# core/object.cpp:768: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-88(%rbp), %rax	#, tmp136
	movq	%rax, %rdi	# tmp136,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1400	#
.L1401:
	movq	%rax, %rbx	#, tmp137
.L1400:
# core/object.cpp:768: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-96(%rbp), %rax	#, tmp141
	movq	%rax, %rdi	# tmp141,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp137, D.61874
	movq	%rax, %rdi	# D.61874,
.LEHB347:
	call	_Unwind_Resume	#
.LEHE347:
.L1403:
# ./core/variant.h:423: 	}
	nop	
.L1389:
# core/object.cpp:775: }
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2511:
	.section	.gcc_except_table
.LLSDA2511:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2511-.LLSDACSB2511
.LLSDACSB2511:
	.uleb128 .LEHB343-.LFB2511
	.uleb128 .LEHE343-.LEHB343
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB344-.LFB2511
	.uleb128 .LEHE344-.LEHB344
	.uleb128 .L1401-.LFB2511
	.uleb128 0
	.uleb128 .LEHB345-.LFB2511
	.uleb128 .LEHE345-.LEHB345
	.uleb128 .L1402-.LFB2511
	.uleb128 0
	.uleb128 .LEHB346-.LFB2511
	.uleb128 .LEHE346-.LEHB346
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB347-.LFB2511
	.uleb128 .LEHE347-.LEHB347
	.uleb128 0
	.uleb128 0
.LLSDACSE2511:
	.text
	.size	_ZN6Object15call_multilevelERK10StringNamePPK7Varianti, .-_ZN6Object15call_multilevelERK10StringNamePPK7Varianti
	.align 2
	.globl	_ZN6Object24call_multilevel_reversedERK10StringNamePPK7Varianti
	.type	_ZN6Object24call_multilevel_reversedERK10StringNamePPK7Varianti, @function
_ZN6Object24call_multilevel_reversedERK10StringNamePPK7Varianti:
.LFB2512:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2512
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# this, this
	movq	%rsi, -112(%rbp)	# p_method, p_method
	movq	%rdx, -120(%rbp)	# p_args, p_args
	movl	%ecx, -124(%rbp)	# p_argcount, p_argcount
# core/object.cpp:779: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	movq	-112(%rbp), %rdx	# p_method, tmp100
	leaq	-80(%rbp), %rax	#, tmp101
	movq	%rdx, %rsi	# tmp100,
	movq	%rax, %rdi	# tmp101,
.LEHB348:
	call	_ZN10StringNameC1ERKS_	#
.LEHE348:
	movq	-104(%rbp), %rax	# this, tmp102
	movq	%rax, -32(%rbp)	# tmp102, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-32(%rbp), %rax	# this, tmp103
	movq	112(%rax), %rax	# this_40->_class_ptr, _41
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _41
	jne	.L1405	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-32(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_40->_vptr.Object, _42
	addq	$48, %rax	#, _43
	movq	(%rax), %rdx	# *_43, _44
# core/object.h:647: 			return *_get_class_namev();
	movq	-32(%rbp), %rax	# this, tmp105
	movq	%rax, %rdi	# tmp105,
.LEHB349:
	call	*%rdx	# _44
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L1406	#
.L1405:
# core/object.h:649: 			return *_class_ptr;
	movq	-32(%rbp), %rax	# this, tmp106
	movq	112(%rax), %rax	# this_40->_class_ptr, D.54713
.L1406:
# core/object.cpp:779: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-72(%rbp), %rdx	#, tmp107
	movq	%rax, %rsi	# D.54713,
	movq	%rdx, %rdi	# tmp107,
	call	_ZN10StringNameC1ERKS_	#
.LEHE349:
# core/object.cpp:779: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-80(%rbp), %rdx	#, tmp108
	leaq	-72(%rbp), %rax	#, tmp109
	movq	%rdx, %rsi	# tmp108,
	movq	%rax, %rdi	# tmp109,
.LEHB350:
	call	_ZN7ClassDB10get_methodE10StringNameS0_	#
.LEHE350:
	movq	%rax, -24(%rbp)	# _23, method
	leaq	-72(%rbp), %rax	#, tmp110
	movq	%rax, %rdi	# tmp110,
	call	_ZN10StringNameD1Ev	#
	leaq	-80(%rbp), %rax	#, tmp111
	movq	%rax, %rdi	# tmp111,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:784: 	if (method) {
	cmpq	$0, -24(%rbp)	#, method
	je	.L1407	#,
# core/object.cpp:786: 		method->call(this, p_args, p_argcount, error);
	movq	-24(%rbp), %rax	# method, tmp112
	movq	(%rax), %rax	# method_24->_vptr.MethodBind, _2
	addq	$8, %rax	#, _3
	movq	(%rax), %r10	# *_3, _4
# core/object.cpp:786: 		method->call(this, p_args, p_argcount, error);
	leaq	-64(%rbp), %rax	#, tmp113
	leaq	-92(%rbp), %r8	#, tmp114
	movl	-124(%rbp), %edi	# p_argcount, tmp115
	movq	-120(%rbp), %rcx	# p_args, tmp116
	movq	-104(%rbp), %rdx	# this, tmp117
	movq	-24(%rbp), %rsi	# method, tmp118
	movq	%r8, %r9	# tmp114,
	movl	%edi, %r8d	# tmp115,
	movq	%rax, %rdi	# tmp113,
.LEHB351:
	call	*%r10	# _4
.LEHE351:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# D.39407.type, _49
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _49
	je	.L1414	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp119
	movq	%rax, %rdi	# tmp119,
	call	_ZN7Variant5clearEv	#
.L1414:
# ./core/variant.h:423: 	}
	nop	
.L1407:
# core/object.cpp:792: 	if (script_instance) {
	movq	-104(%rbp), %rax	# this, tmp120
	movq	80(%rax), %rax	# this_19(D)->script_instance, _5
# core/object.cpp:792: 	if (script_instance) {
	testq	%rax, %rax	# _5
	je	.L1415	#,
# core/object.cpp:793: 		script_instance->call_multilevel_reversed(p_method, p_args, p_argcount);
	movq	-104(%rbp), %rax	# this, tmp121
	movq	80(%rax), %rax	# this_19(D)->script_instance, _6
	movq	-104(%rbp), %rdx	# this, tmp123
	movq	80(%rdx), %rdx	# this_19(D)->script_instance, _8
# core/object.cpp:793: 		script_instance->call_multilevel_reversed(p_method, p_args, p_argcount);
	movq	(%rdx), %rdx	# _8->_vptr.ScriptInstance, _9
	addq	$96, %rdx	#, _10
	movq	(%rdx), %r8	# *_10, _11
# core/object.cpp:793: 		script_instance->call_multilevel_reversed(p_method, p_args, p_argcount);
	movl	-124(%rbp), %ecx	# p_argcount, tmp124
	movq	-120(%rbp), %rdx	# p_args, tmp125
	movq	-112(%rbp), %rsi	# p_method, tmp126
	movq	%rax, %rdi	# _6,
.LEHB352:
	call	*%r8	# _11
# core/object.cpp:796: }
	jmp	.L1415	#
.L1413:
	movq	%rax, %rbx	#, tmp129
# core/object.cpp:779: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-72(%rbp), %rax	#, tmp127
	movq	%rax, %rdi	# tmp127,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1411	#
.L1412:
	movq	%rax, %rbx	#, tmp128
.L1411:
# core/object.cpp:779: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-80(%rbp), %rax	#, tmp132
	movq	%rax, %rdi	# tmp132,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp128, D.61876
	movq	%rax, %rdi	# D.61876,
	call	_Unwind_Resume	#
.LEHE352:
.L1415:
# core/object.cpp:796: }
	nop	
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2512:
	.section	.gcc_except_table
.LLSDA2512:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2512-.LLSDACSB2512
.LLSDACSB2512:
	.uleb128 .LEHB348-.LFB2512
	.uleb128 .LEHE348-.LEHB348
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB349-.LFB2512
	.uleb128 .LEHE349-.LEHB349
	.uleb128 .L1412-.LFB2512
	.uleb128 0
	.uleb128 .LEHB350-.LFB2512
	.uleb128 .LEHE350-.LEHB350
	.uleb128 .L1413-.LFB2512
	.uleb128 0
	.uleb128 .LEHB351-.LFB2512
	.uleb128 .LEHE351-.LEHB351
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB352-.LFB2512
	.uleb128 .LEHE352-.LEHB352
	.uleb128 0
	.uleb128 0
.LLSDACSE2512:
	.text
	.size	_ZN6Object24call_multilevel_reversedERK10StringNamePPK7Varianti, .-_ZN6Object24call_multilevel_reversedERK10StringNamePPK7Varianti
	.align 2
	.globl	_ZNK6Object10has_methodERK10StringName
	.type	_ZNK6Object10has_methodERK10StringName, @function
_ZNK6Object10has_methodERK10StringName:
.LFB2513:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2513
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_method, p_method
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.54727
# core/object.cpp:800: 	if (p_method == CoreStringNames::get_singleton()->_free) {
	movq	%rax, %rdx	# D.54727, _2
	movq	-80(%rbp), %rax	# p_method, tmp105
	movq	%rax, -32(%rbp)	# tmp105, this
	movq	%rdx, -40(%rbp)	# _2, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-32(%rbp), %rax	# this, tmp106
	movq	(%rax), %rdx	# this_44->_data, _46
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-40(%rbp), %rax	# p_name, tmp107
	movq	(%rax), %rax	# p_name_45->_data, _47
	cmpq	%rax, %rdx	# _47, _46
	sete	%al	#, D.54724
# core/object.cpp:800: 	if (p_method == CoreStringNames::get_singleton()->_free) {
	testb	%al, %al	# D.54724
	je	.L1419	#,
# core/object.cpp:801: 		return true;
	movl	$1, %eax	#, _12
	jmp	.L1430	#
.L1419:
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	movq	-72(%rbp), %rax	# this, tmp108
	movq	80(%rax), %rax	# this_21(D)->script_instance, _3
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	testq	%rax, %rax	# _3
	je	.L1421	#,
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	movq	-72(%rbp), %rax	# this, tmp109
	movq	80(%rax), %rax	# this_21(D)->script_instance, _4
	movq	-72(%rbp), %rdx	# this, tmp111
	movq	80(%rdx), %rdx	# this_21(D)->script_instance, _6
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	movq	(%rdx), %rdx	# _6->_vptr.ScriptInstance, _7
	addq	$56, %rdx	#, _8
	movq	(%rdx), %rcx	# *_8, _9
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	movq	-80(%rbp), %rdx	# p_method, tmp112
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# _4,
.LEHB353:
	call	*%rcx	# _9
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	testb	%al, %al	# _10
	je	.L1421	#,
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	movl	$1, %eax	#, iftmp.85_13
	jmp	.L1422	#
.L1421:
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	movl	$0, %eax	#, iftmp.85_13
.L1422:
# core/object.cpp:804: 	if (script_instance && script_instance->has_method(p_method)) {
	testb	%al, %al	# iftmp.85_13
	je	.L1423	#,
# core/object.cpp:805: 		return true;
	movl	$1, %eax	#, _12
	jmp	.L1430	#
.L1423:
# core/object.cpp:808: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	movq	-80(%rbp), %rdx	# p_method, tmp113
	leaq	-64(%rbp), %rax	#, tmp114
	movq	%rdx, %rsi	# tmp113,
	movq	%rax, %rdi	# tmp114,
	call	_ZN10StringNameC1ERKS_	#
.LEHE353:
	movq	-72(%rbp), %rax	# this, tmp115
	movq	%rax, -48(%rbp)	# tmp115, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-48(%rbp), %rax	# this, tmp116
	movq	112(%rax), %rax	# this_50->_class_ptr, _51
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _51
	jne	.L1424	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-48(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_50->_vptr.Object, _52
	addq	$48, %rax	#, _53
	movq	(%rax), %rdx	# *_53, _54
# core/object.h:647: 			return *_get_class_namev();
	movq	-48(%rbp), %rax	# this, tmp118
	movq	%rax, %rdi	# tmp118,
.LEHB354:
	call	*%rdx	# _54
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L1425	#
.L1424:
# core/object.h:649: 			return *_class_ptr;
	movq	-48(%rbp), %rax	# this, tmp119
	movq	112(%rax), %rax	# this_50->_class_ptr, D.54731
.L1425:
# core/object.cpp:808: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-56(%rbp), %rdx	#, tmp120
	movq	%rax, %rsi	# D.54731,
	movq	%rdx, %rdi	# tmp120,
	call	_ZN10StringNameC1ERKS_	#
.LEHE354:
# core/object.cpp:808: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-64(%rbp), %rdx	#, tmp121
	leaq	-56(%rbp), %rax	#, tmp122
	movq	%rdx, %rsi	# tmp121,
	movq	%rax, %rdi	# tmp122,
.LEHB355:
	call	_ZN7ClassDB10get_methodE10StringNameS0_	#
.LEHE355:
	movq	%rax, -24(%rbp)	# _31, method
	leaq	-56(%rbp), %rax	#, tmp123
	movq	%rax, %rdi	# tmp123,
	call	_ZN10StringNameD1Ev	#
	leaq	-64(%rbp), %rax	#, tmp124
	movq	%rax, %rdi	# tmp124,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:810: 	return method != NULL;
	cmpq	$0, -24(%rbp)	#, method
	setne	%al	#, _12
	jmp	.L1430	#
.L1429:
	movq	%rax, %rbx	#, tmp128
# core/object.cpp:808: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-56(%rbp), %rax	#, tmp126
	movq	%rax, %rdi	# tmp126,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1427	#
.L1428:
	movq	%rax, %rbx	#, tmp127
.L1427:
# core/object.cpp:808: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-64(%rbp), %rax	#, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp127, D.61878
	movq	%rax, %rdi	# D.61878,
.LEHB356:
	call	_Unwind_Resume	#
.LEHE356:
.L1430:
# core/object.cpp:811: }
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2513:
	.section	.gcc_except_table
.LLSDA2513:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2513-.LLSDACSB2513
.LLSDACSB2513:
	.uleb128 .LEHB353-.LFB2513
	.uleb128 .LEHE353-.LEHB353
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB354-.LFB2513
	.uleb128 .LEHE354-.LEHB354
	.uleb128 .L1428-.LFB2513
	.uleb128 0
	.uleb128 .LEHB355-.LFB2513
	.uleb128 .LEHE355-.LEHB355
	.uleb128 .L1429-.LFB2513
	.uleb128 0
	.uleb128 .LEHB356-.LFB2513
	.uleb128 .LEHE356-.LEHB356
	.uleb128 0
	.uleb128 0
.LLSDACSE2513:
	.text
	.size	_ZNK6Object10has_methodERK10StringName, .-_ZNK6Object10has_methodERK10StringName
	.align 2
	.globl	_ZNK6Object6getvarERK7VariantPb
	.type	_ZNK6Object6getvarERK7VariantPb, @function
_ZNK6Object6getvarERK7VariantPb:
.LFB2514:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -32(%rbp)	# this, this
	movq	%rdx, -40(%rbp)	# p_key, p_key
	movq	%rcx, -48(%rbp)	# r_valid, r_valid
# core/object.cpp:815: 	if (r_valid)
	cmpq	$0, -48(%rbp)	#, r_valid
	je	.L1432	#,
# core/object.cpp:816: 		*r_valid = false;
	movq	-48(%rbp), %rax	# r_valid, tmp82
	movb	$0, (%rax)	#, *r_valid_2(D)
.L1432:
	movq	-24(%rbp), %rax	# <retval>, tmp83
	movq	%rax, -8(%rbp)	# tmp83, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-8(%rbp), %rax	# this, tmp84
	movl	$0, (%rax)	#, this_6->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:817: 	return Variant();
	nop	
# core/object.cpp:818: }
	movq	-24(%rbp), %rax	# <retval>,
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2514:
	.size	_ZNK6Object6getvarERK7VariantPb, .-_ZNK6Object6getvarERK7VariantPb
	.align 2
	.globl	_ZN6Object6setvarERK7VariantS2_Pb
	.type	_ZN6Object6setvarERK7VariantS2_Pb, @function
_ZN6Object6setvarERK7VariantS2_Pb:
.LFB2515:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_key, p_key
	movq	%rdx, -24(%rbp)	# p_value, p_value
	movq	%rcx, -32(%rbp)	# r_valid, r_valid
# core/object.cpp:821: 	if (r_valid)
	cmpq	$0, -32(%rbp)	#, r_valid
	je	.L1436	#,
# core/object.cpp:822: 		*r_valid = false;
	movq	-32(%rbp), %rax	# r_valid, tmp82
	movb	$0, (%rax)	#, *r_valid_2(D)
.L1436:
# core/object.cpp:823: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2515:
	.size	_ZN6Object6setvarERK7VariantS2_Pb, .-_ZN6Object6setvarERK7VariantS2_Pb
	.section	.rodata
	.align 8
.LC29:
	.string	"Method/Function Failed, returning: Variant()"
.LC30:
	.string	"callv"
	.text
	.align 2
	.globl	_ZN6Object5callvERK10StringNameRK5Array
	.type	_ZN6Object5callvERK10StringNameRK5Array, @function
_ZN6Object5callvERK10StringNameRK5Array:
.LFB2516:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2516
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
	movq	%rdx, -104(%rbp)	# p_method, p_method
	movq	%rcx, -112(%rbp)	# p_args, p_args
# core/object.cpp:826: 	const Variant **argptrs = NULL;
	movq	$0, -24(%rbp)	#, argptrs
# core/object.cpp:828: 	if (p_args.size() > 0) {
	movq	-112(%rbp), %rax	# p_args, tmp101
	movq	%rax, %rdi	# tmp101,
.LEHB357:
	call	_ZNK5Array4sizeEv	#
# core/object.cpp:828: 	if (p_args.size() > 0) {
	testl	%eax, %eax	# _1
	setg	%al	#, retval.86_27
# core/object.cpp:828: 	if (p_args.size() > 0) {
	testb	%al, %al	# retval.86_27
	je	.L1438	#,
# core/object.cpp:829: 		argptrs = (const Variant **)alloca(sizeof(Variant *) * p_args.size());
	movq	-112(%rbp), %rax	# p_args, tmp102
	movq	%rax, %rdi	# tmp102,
	call	_ZNK5Array4sizeEv	#
	cltq
	salq	$3, %rax	#, _4
	leaq	8(%rax), %rdx	#, tmp103
	movl	$16, %eax	#, tmp133
	subq	$1, %rax	#, tmp104
	addq	%rdx, %rax	# tmp103, tmp105
	movl	$16, %ecx	#, tmp134
	movl	$0, %edx	#, tmp108
	divq	%rcx	# tmp134
	imulq	$16, %rax, %rax	#, tmp107, tmp109
	subq	%rax, %rsp	# tmp109,
	movq	%rsp, %rax	#, tmp110
	addq	$15, %rax	#, tmp111
	shrq	$4, %rax	#, tmp112
	salq	$4, %rax	#, tmp113
	movq	%rax, -24(%rbp)	# tmp113, argptrs
# core/object.cpp:830: 		for (int i = 0; i < p_args.size(); i++) {
	movl	$0, -28(%rbp)	#, i
.L1439:
# core/object.cpp:830: 		for (int i = 0; i < p_args.size(); i++) {
	movq	-112(%rbp), %rax	# p_args, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZNK5Array4sizeEv	#
# core/object.cpp:830: 		for (int i = 0; i < p_args.size(); i++) {
	cmpl	%eax, -28(%rbp)	# _5, i
	setl	%al	#, retval.87_35
	testb	%al, %al	# retval.87_35
	je	.L1438	#,
# core/object.cpp:831: 			argptrs[i] = &p_args[i];
	movl	-28(%rbp), %eax	# i, tmp115
	cltq
# core/object.cpp:831: 			argptrs[i] = &p_args[i];
	leaq	0(,%rax,8), %rdx	#, _7
	movq	-24(%rbp), %rax	# argptrs, tmp116
	leaq	(%rdx,%rax), %rbx	#, _8
# core/object.cpp:831: 			argptrs[i] = &p_args[i];
	movl	-28(%rbp), %edx	# i, tmp117
	movq	-112(%rbp), %rax	# p_args, tmp118
	movl	%edx, %esi	# tmp117,
	movq	%rax, %rdi	# tmp118,
	call	_ZNK5ArrayixEi	#
# core/object.cpp:831: 			argptrs[i] = &p_args[i];
	movq	%rax, (%rbx)	# _9, *_8
# core/object.cpp:830: 		for (int i = 0; i < p_args.size(); i++) {
	addl	$1, -28(%rbp)	#, i
	jmp	.L1439	#
.L1438:
# core/object.cpp:836: 	Variant ret = call(p_method, argptrs, p_args.size(), ce);
	movq	-96(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_40(D)->_vptr.Object, _10
	addq	$96, %rax	#, _11
	movq	(%rax), %rbx	# *_11, _12
	movq	-112(%rbp), %rax	# p_args, tmp120
	movq	%rax, %rdi	# tmp120,
	call	_ZNK5Array4sizeEv	#
	movl	%eax, %edi	#, _13
	leaq	-80(%rbp), %rax	#, tmp121
	leaq	-52(%rbp), %r8	#, tmp122
	movq	-24(%rbp), %rcx	# argptrs, tmp123
	movq	-104(%rbp), %rdx	# p_method, tmp124
	movq	-96(%rbp), %rsi	# this, tmp125
	movq	%r8, %r9	# tmp122,
	movl	%edi, %r8d	# _13,
	movq	%rax, %rdi	# tmp121,
	call	*%rbx	# _12
.LEHE357:
# core/object.cpp:837: 	if (ce.error != Variant::CallError::CALL_OK) {
	movl	-52(%rbp), %eax	# ce.error, _14
# core/object.cpp:837: 	if (ce.error != Variant::CallError::CALL_OK) {
	testl	%eax, %eax	# _14
	je	.L1440	#,
# core/object.cpp:839: 		ERR_FAIL_V(Variant());
	movl	$0, %r8d	#,
	movl	$.LC29, %ecx	#,
	movl	$839, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC30, %edi	#,
.LEHB358:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# core/object.cpp:839: 		ERR_FAIL_V(Variant());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-88(%rbp), %rax	# <retval>, tmp126
	movq	%rax, -40(%rbp)	# tmp126, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-40(%rbp), %rax	# this, tmp127
	movl	$0, (%rax)	#, this_53->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:839: 		ERR_FAIL_V(Variant());
	jmp	.L1441	#
.L1440:
# core/object.cpp:841: 	return ret;
	leaq	-80(%rbp), %rdx	#, tmp128
	movq	-88(%rbp), %rax	# <retval>, tmp129
	movq	%rdx, %rsi	# tmp128,
	movq	%rax, %rdi	# tmp129,
	call	_ZN7VariantC1ERKS_	#
.LEHE358:
.L1441:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# ret.type, _54
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _54
	je	.L1448	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp130
	movq	%rax, %rdi	# tmp130,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1448	#
.L1446:
	movq	%rax, %rbx	#, tmp132
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# ret.type, _55
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _55
	je	.L1449	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN7Variant5clearEv	#
.L1449:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp132, D.61880
	movq	%rax, %rdi	# D.61880,
.LEHB359:
	call	_Unwind_Resume	#
.LEHE359:
.L1448:
	nop	
# core/object.cpp:842: }
	movq	-88(%rbp), %rax	# <retval>,
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2516:
	.section	.gcc_except_table
.LLSDA2516:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2516-.LLSDACSB2516
.LLSDACSB2516:
	.uleb128 .LEHB357-.LFB2516
	.uleb128 .LEHE357-.LEHB357
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB358-.LFB2516
	.uleb128 .LEHE358-.LEHB358
	.uleb128 .L1446-.LFB2516
	.uleb128 0
	.uleb128 .LEHB359-.LFB2516
	.uleb128 .LEHE359-.LEHB359
	.uleb128 0
	.uleb128 0
.LLSDACSE2516:
	.text
	.size	_ZN6Object5callvERK10StringNameRK5Array, .-_ZN6Object5callvERK10StringNameRK5Array
	.align 2
	.globl	_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_
	.type	_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_, @function
_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_:
.LFB2517:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	addq	$-128, %rsp	#,
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
	movq	%rdx, -104(%rbp)	# p_name, p_name
	movq	%rcx, -112(%rbp)	# p_arg1, p_arg1
	movq	%r8, -120(%rbp)	# p_arg2, p_arg2
	movq	%r9, -128(%rbp)	# p_arg3, p_arg3
# core/object.cpp:846: 	VARIANT_ARGPTRS;
	movq	-112(%rbp), %rax	# p_arg1, tmp88
	movq	%rax, -64(%rbp)	# tmp88, argptr
	movq	-120(%rbp), %rax	# p_arg2, tmp89
	movq	%rax, -56(%rbp)	# tmp89, argptr
	movq	-128(%rbp), %rax	# p_arg3, tmp90
	movq	%rax, -48(%rbp)	# tmp90, argptr
	movq	16(%rbp), %rax	# p_arg4, tmp91
	movq	%rax, -40(%rbp)	# tmp91, argptr
	movq	24(%rbp), %rax	# p_arg5, tmp92
	movq	%rax, -32(%rbp)	# tmp92, argptr
# core/object.cpp:848: 	int argc = 0;
	movl	$0, -4(%rbp)	#, argc
# core/object.cpp:849: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	movl	$0, -8(%rbp)	#, i
.L1454:
# core/object.cpp:849: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	cmpl	$4, -8(%rbp)	#, i
	jg	.L1451	#,
# core/object.cpp:850: 		if (argptr[i]->get_type() == Variant::NIL)
	movl	-8(%rbp), %eax	# i, tmp94
	cltq
	movq	-64(%rbp,%rax,8), %rax	# argptr, _1
	movq	%rax, -16(%rbp)	# _1, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-16(%rbp), %rax	# this, tmp95
	movl	(%rax), %eax	# this_34->type, D.54838
# core/object.cpp:850: 		if (argptr[i]->get_type() == Variant::NIL)
	testl	%eax, %eax	# D.54838
	sete	%al	#, retval.88_23
# core/object.cpp:850: 		if (argptr[i]->get_type() == Variant::NIL)
	testb	%al, %al	# retval.88_23
	jne	.L1456	#,
# core/object.cpp:852: 		argc++;
	addl	$1, -4(%rbp)	#, argc
# core/object.cpp:849: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L1454	#
.L1456:
# core/object.cpp:851: 			break;
	nop	
.L1451:
# core/object.cpp:857: 	Variant ret = call(p_name, argptr, argc, error);
	movq	-96(%rbp), %rax	# this, tmp96
	movq	(%rax), %rax	# this_26(D)->_vptr.Object, _3
	addq	$96, %rax	#, _4
	movq	(%rax), %r10	# *_4, _5
	movq	-88(%rbp), %rax	# <retval>, tmp97
	leaq	-76(%rbp), %r8	#, tmp98
	movl	-4(%rbp), %edi	# argc, tmp99
	leaq	-64(%rbp), %rcx	#, tmp100
	movq	-104(%rbp), %rdx	# p_name, tmp101
	movq	-96(%rbp), %rsi	# this, tmp102
	movq	%r8, %r9	# tmp98,
	movl	%edi, %r8d	# tmp99,
	movq	%rax, %rdi	# tmp97,
	call	*%r10	# _5
# core/object.cpp:858: 	return ret;
	nop	
# core/object.cpp:859: }
	movq	-88(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2517:
	.size	_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_, .-_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_
	.align 2
	.globl	_ZN6Object15call_multilevelERK10StringNameRK7VariantS5_S5_S5_S5_
	.type	_ZN6Object15call_multilevelERK10StringNameRK7VariantS5_S5_S5_S5_, @function
_ZN6Object15call_multilevelERK10StringNameRK7VariantS5_S5_S5_S5_:
.LFB2518:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_name, p_name
	movq	%rdx, -88(%rbp)	# p_arg1, p_arg1
	movq	%rcx, -96(%rbp)	# p_arg2, p_arg2
	movq	%r8, -104(%rbp)	# p_arg3, p_arg3
	movq	%r9, -112(%rbp)	# p_arg4, p_arg4
# core/object.cpp:863: 	VARIANT_ARGPTRS;
	movq	-88(%rbp), %rax	# p_arg1, tmp88
	movq	%rax, -64(%rbp)	# tmp88, argptr
	movq	-96(%rbp), %rax	# p_arg2, tmp89
	movq	%rax, -56(%rbp)	# tmp89, argptr
	movq	-104(%rbp), %rax	# p_arg3, tmp90
	movq	%rax, -48(%rbp)	# tmp90, argptr
	movq	-112(%rbp), %rax	# p_arg4, tmp91
	movq	%rax, -40(%rbp)	# tmp91, argptr
	movq	16(%rbp), %rax	# p_arg5, tmp92
	movq	%rax, -32(%rbp)	# tmp92, argptr
# core/object.cpp:865: 	int argc = 0;
	movl	$0, -4(%rbp)	#, argc
# core/object.cpp:866: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	movl	$0, -8(%rbp)	#, i
.L1461:
# core/object.cpp:866: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	cmpl	$4, -8(%rbp)	#, i
	jg	.L1458	#,
# core/object.cpp:867: 		if (argptr[i]->get_type() == Variant::NIL)
	movl	-8(%rbp), %eax	# i, tmp94
	cltq
	movq	-64(%rbp,%rax,8), %rax	# argptr, _1
	movq	%rax, -16(%rbp)	# _1, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-16(%rbp), %rax	# this, tmp95
	movl	(%rax), %eax	# this_31->type, D.54842
# core/object.cpp:867: 		if (argptr[i]->get_type() == Variant::NIL)
	testl	%eax, %eax	# D.54842
	sete	%al	#, retval.89_23
# core/object.cpp:867: 		if (argptr[i]->get_type() == Variant::NIL)
	testb	%al, %al	# retval.89_23
	jne	.L1462	#,
# core/object.cpp:869: 		argc++;
	addl	$1, -4(%rbp)	#, argc
# core/object.cpp:866: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L1461	#
.L1462:
# core/object.cpp:868: 			break;
	nop	
.L1458:
# core/object.cpp:873: 	call_multilevel(p_name, argptr, argc);
	movq	-72(%rbp), %rax	# this, tmp96
	movq	(%rax), %rax	# this_26(D)->_vptr.Object, _3
	addq	$104, %rax	#, _4
	movq	(%rax), %r8	# *_4, _5
# core/object.cpp:873: 	call_multilevel(p_name, argptr, argc);
	movl	-4(%rbp), %ecx	# argc, tmp97
	leaq	-64(%rbp), %rdx	#, tmp98
	movq	-80(%rbp), %rsi	# p_name, tmp99
	movq	-72(%rbp), %rax	# this, tmp100
	movq	%rax, %rdi	# tmp100,
	call	*%r8	# _5
# core/object.cpp:874: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2518:
	.size	_ZN6Object15call_multilevelERK10StringNameRK7VariantS5_S5_S5_S5_, .-_ZN6Object15call_multilevelERK10StringNameRK7VariantS5_S5_S5_S5_
	.align 2
	.globl	_ZN6Object4callERK10StringNamePPK7VariantiRNS3_9CallErrorE
	.type	_ZN6Object4callERK10StringNamePPK7VariantiRNS3_9CallErrorE, @function
_ZN6Object4callERK10StringNamePPK7VariantiRNS3_9CallErrorE:
.LFB2519:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2519
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$200, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -176(%rbp)	# this, this
	movq	%rdx, -184(%rbp)	# p_method, p_method
	movq	%rcx, -192(%rbp)	# p_args, p_args
	movl	%r8d, -196(%rbp)	# p_argcount, p_argcount
	movq	%r9, -208(%rbp)	# r_error, r_error
# core/object.cpp:878: 	r_error.error = Variant::CallError::CALL_OK;
	movq	-208(%rbp), %rax	# r_error, tmp112
	movl	$0, (%rax)	#, r_error_24(D)->error
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.55182
# core/object.cpp:880: 	if (p_method == CoreStringNames::get_singleton()->_free) {
	movq	%rax, %rdx	# D.55182, _2
	movq	-184(%rbp), %rax	# p_method, tmp113
	movq	%rax, -32(%rbp)	# tmp113, this
	movq	%rdx, -40(%rbp)	# _2, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-32(%rbp), %rax	# this, tmp114
	movq	(%rax), %rdx	# this_62->_data, _64
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-40(%rbp), %rax	# p_name, tmp115
	movq	(%rax), %rax	# p_name_63->_data, _65
	cmpq	%rax, %rdx	# _65, _64
	sete	%al	#, D.55179
# core/object.cpp:880: 	if (p_method == CoreStringNames::get_singleton()->_free) {
	testb	%al, %al	# D.55179
	je	.L1466	#,
# core/object.cpp:904: 		memdelete(this);
	movq	-176(%rbp), %rax	# this, tmp116
	movq	%rax, %rdi	# tmp116,
.LEHB360:
	call	_Z9memdeleteI6ObjectEvPT_	#
.LEHE360:
# core/object.cpp:905: 		r_error.error = Variant::CallError::CALL_OK;
	movq	-208(%rbp), %rax	# r_error, tmp117
	movl	$0, (%rax)	#, r_error_24(D)->error
	movq	-168(%rbp), %rax	# <retval>, tmp118
	movq	%rax, -48(%rbp)	# tmp118, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-48(%rbp), %rax	# this, tmp119
	movl	$0, (%rax)	#, this_68->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:906: 		return Variant();
	jmp	.L1463	#
.L1466:
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -160(%rbp)	#, ret.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:911: 	if (script_instance) {
	movq	-176(%rbp), %rax	# this, tmp120
	movq	80(%rax), %rax	# this_28(D)->script_instance, _3
# core/object.cpp:911: 	if (script_instance) {
	testq	%rax, %rax	# _3
	je	.L1468	#,
# core/object.cpp:912: 		ret = script_instance->call(p_method, p_args, p_argcount, r_error);
	movq	-176(%rbp), %rax	# this, tmp121
	movq	80(%rax), %rsi	# this_28(D)->script_instance, _4
	movq	-176(%rbp), %rax	# this, tmp123
	movq	80(%rax), %rax	# this_28(D)->script_instance, _6
# core/object.cpp:912: 		ret = script_instance->call(p_method, p_args, p_argcount, r_error);
	movq	(%rax), %rax	# _6->_vptr.ScriptInstance, _7
	addq	$72, %rax	#, _8
	movq	(%rax), %r10	# *_8, _9
# core/object.cpp:912: 		ret = script_instance->call(p_method, p_args, p_argcount, r_error);
	leaq	-128(%rbp), %rax	#, tmp124
	movq	-208(%rbp), %r8	# r_error, tmp125
	movl	-196(%rbp), %edi	# p_argcount, tmp126
	movq	-192(%rbp), %rcx	# p_args, tmp127
	movq	-184(%rbp), %rdx	# p_method, tmp128
	movq	%r8, %r9	# tmp125,
	movl	%edi, %r8d	# tmp126,
	movq	%rax, %rdi	# tmp124,
.LEHB361:
	call	*%r10	# _9
.LEHE361:
# core/object.cpp:912: 		ret = script_instance->call(p_method, p_args, p_argcount, r_error);
	leaq	-128(%rbp), %rdx	#, tmp129
	leaq	-160(%rbp), %rax	#, tmp130
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp130,
.LEHB362:
	call	_ZN7VariantaSERKS_	#
.LEHE362:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.39483.type, _69
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _69
	je	.L1499	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN7Variant5clearEv	#
.L1499:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:914: 		switch (r_error.error) {
	movq	-208(%rbp), %rax	# r_error, tmp132
	movl	(%rax), %eax	# r_error_24(D)->error, _10
# core/object.cpp:914: 		switch (r_error.error) {
	cmpl	$4, %eax	#, _11
	jg	.L1468	#,
	cmpl	$2, %eax	#, _11
	jge	.L1471	#,
	testl	%eax, %eax	# _11
	je	.L1472	#,
	cmpl	$1, %eax	#, _11
# core/object.cpp:919: 				break;
	jmp	.L1468	#
.L1472:
# core/object.cpp:917: 				return ret;
	leaq	-160(%rbp), %rdx	#, tmp133
	movq	-168(%rbp), %rax	# <retval>, tmp134
	movq	%rdx, %rsi	# tmp133,
	movq	%rax, %rdi	# tmp134,
.LEHB363:
	call	_ZN7VariantC1ERKS_	#
	jmp	.L1474	#
.L1471:
# core/object.cpp:923: 				return ret;
	leaq	-160(%rbp), %rdx	#, tmp135
	movq	-168(%rbp), %rax	# <retval>, tmp136
	movq	%rdx, %rsi	# tmp135,
	movq	%rax, %rdi	# tmp136,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L1474	#
.L1468:
# core/object.cpp:929: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	movq	-184(%rbp), %rdx	# p_method, tmp137
	leaq	-96(%rbp), %rax	#, tmp138
	movq	%rdx, %rsi	# tmp137,
	movq	%rax, %rdi	# tmp138,
	call	_ZN10StringNameC1ERKS_	#
.LEHE363:
	movq	-176(%rbp), %rax	# this, tmp139
	movq	%rax, -56(%rbp)	# tmp139, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-56(%rbp), %rax	# this, tmp140
	movq	112(%rax), %rax	# this_70->_class_ptr, _71
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _71
	jne	.L1475	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-56(%rbp), %rax	# this, tmp141
	movq	(%rax), %rax	# this_70->_vptr.Object, _72
	addq	$48, %rax	#, _73
	movq	(%rax), %rdx	# *_73, _74
# core/object.h:647: 			return *_get_class_namev();
	movq	-56(%rbp), %rax	# this, tmp142
	movq	%rax, %rdi	# tmp142,
.LEHB364:
	call	*%rdx	# _74
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L1476	#
.L1475:
# core/object.h:649: 			return *_class_ptr;
	movq	-56(%rbp), %rax	# this, tmp143
	movq	112(%rax), %rax	# this_70->_class_ptr, D.55189
.L1476:
# core/object.cpp:929: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-88(%rbp), %rdx	#, tmp144
	movq	%rax, %rsi	# D.55189,
	movq	%rdx, %rdi	# tmp144,
	call	_ZN10StringNameC1ERKS_	#
.LEHE364:
# core/object.cpp:929: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-96(%rbp), %rdx	#, tmp145
	leaq	-88(%rbp), %rax	#, tmp146
	movq	%rdx, %rsi	# tmp145,
	movq	%rax, %rdi	# tmp146,
.LEHB365:
	call	_ZN7ClassDB10get_methodE10StringNameS0_	#
.LEHE365:
	movq	%rax, -24(%rbp)	# _42, method
	leaq	-88(%rbp), %rax	#, tmp147
	movq	%rax, %rdi	# tmp147,
	call	_ZN10StringNameD1Ev	#
	leaq	-96(%rbp), %rax	#, tmp148
	movq	%rax, %rdi	# tmp148,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:931: 	if (method) {
	cmpq	$0, -24(%rbp)	#, method
	je	.L1477	#,
# core/object.cpp:933: 		ret = method->call(this, p_args, p_argcount, r_error);
	movq	-24(%rbp), %rax	# method, tmp149
	movq	(%rax), %rax	# method_43->_vptr.MethodBind, _13
	addq	$8, %rax	#, _14
	movq	(%rax), %r10	# *_14, _15
# core/object.cpp:933: 		ret = method->call(this, p_args, p_argcount, r_error);
	leaq	-80(%rbp), %rax	#, tmp150
	movq	-208(%rbp), %r8	# r_error, tmp151
	movl	-196(%rbp), %edi	# p_argcount, tmp152
	movq	-192(%rbp), %rcx	# p_args, tmp153
	movq	-176(%rbp), %rdx	# this, tmp154
	movq	-24(%rbp), %rsi	# method, tmp155
	movq	%r8, %r9	# tmp151,
	movl	%edi, %r8d	# tmp152,
	movq	%rax, %rdi	# tmp150,
.LEHB366:
	call	*%r10	# _15
.LEHE366:
# core/object.cpp:933: 		ret = method->call(this, p_args, p_argcount, r_error);
	leaq	-80(%rbp), %rdx	#, tmp156
	leaq	-160(%rbp), %rax	#, tmp157
	movq	%rdx, %rsi	# tmp156,
	movq	%rax, %rdi	# tmp157,
.LEHB367:
	call	_ZN7VariantaSERKS_	#
.LEHE367:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39495.type, _79
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _79
	je	.L1500	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1500	#
.L1477:
# core/object.cpp:935: 		r_error.error = Variant::CallError::CALL_ERROR_INVALID_METHOD;
	movq	-208(%rbp), %rax	# r_error, tmp159
	movl	$1, (%rax)	#, r_error_24(D)->error
	jmp	.L1479	#
.L1500:
# ./core/variant.h:423: 	}
	nop	
.L1479:
# core/object.cpp:938: 	return ret;
	leaq	-160(%rbp), %rdx	#, tmp160
	movq	-168(%rbp), %rax	# <retval>, tmp161
	movq	%rdx, %rsi	# tmp160,
	movq	%rax, %rdi	# tmp161,
.LEHB368:
	call	_ZN7VariantC1ERKS_	#
.LEHE368:
.L1474:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# ret.type, _80
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _80
	je	.L1501	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp162
	movq	%rax, %rdi	# tmp162,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1501	#
.L1491:
	movq	%rax, %rbx	#, tmp165
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.39483.type, _81
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _81
	je	.L1502	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp163
	movq	%rax, %rdi	# tmp163,
	call	_ZN7Variant5clearEv	#
.L1502:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1484	#
.L1493:
	movq	%rax, %rbx	#, tmp170
# core/object.cpp:929: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-88(%rbp), %rax	#, tmp168
	movq	%rax, %rdi	# tmp168,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1486	#
.L1492:
	movq	%rax, %rbx	#, tmp169
.L1486:
# core/object.cpp:929: 	MethodBind *method = ClassDB::get_method(get_class_name(), p_method);
	leaq	-96(%rbp), %rax	#, tmp173
	movq	%rax, %rdi	# tmp173,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1484	#
.L1494:
	movq	%rax, %rbx	#, tmp175
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39495.type, _82
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _82
	je	.L1503	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp174
	movq	%rax, %rdi	# tmp174,
	call	_ZN7Variant5clearEv	#
.L1503:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1484	#
.L1490:
	movq	%rax, %rbx	#, tmp164
.L1484:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# ret.type, _83
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _83
	je	.L1504	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp177
	movq	%rax, %rdi	# tmp177,
	call	_ZN7Variant5clearEv	#
.L1504:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp164, D.61888
	movq	%rax, %rdi	# D.61888,
.LEHB369:
	call	_Unwind_Resume	#
.LEHE369:
.L1501:
	nop	
.L1463:
# core/object.cpp:939: }
	movq	-168(%rbp), %rax	# <retval>,
	addq	$200, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2519:
	.section	.gcc_except_table
.LLSDA2519:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2519-.LLSDACSB2519
.LLSDACSB2519:
	.uleb128 .LEHB360-.LFB2519
	.uleb128 .LEHE360-.LEHB360
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB361-.LFB2519
	.uleb128 .LEHE361-.LEHB361
	.uleb128 .L1490-.LFB2519
	.uleb128 0
	.uleb128 .LEHB362-.LFB2519
	.uleb128 .LEHE362-.LEHB362
	.uleb128 .L1491-.LFB2519
	.uleb128 0
	.uleb128 .LEHB363-.LFB2519
	.uleb128 .LEHE363-.LEHB363
	.uleb128 .L1490-.LFB2519
	.uleb128 0
	.uleb128 .LEHB364-.LFB2519
	.uleb128 .LEHE364-.LEHB364
	.uleb128 .L1492-.LFB2519
	.uleb128 0
	.uleb128 .LEHB365-.LFB2519
	.uleb128 .LEHE365-.LEHB365
	.uleb128 .L1493-.LFB2519
	.uleb128 0
	.uleb128 .LEHB366-.LFB2519
	.uleb128 .LEHE366-.LEHB366
	.uleb128 .L1490-.LFB2519
	.uleb128 0
	.uleb128 .LEHB367-.LFB2519
	.uleb128 .LEHE367-.LEHB367
	.uleb128 .L1494-.LFB2519
	.uleb128 0
	.uleb128 .LEHB368-.LFB2519
	.uleb128 .LEHE368-.LEHB368
	.uleb128 .L1490-.LFB2519
	.uleb128 0
	.uleb128 .LEHB369-.LFB2519
	.uleb128 .LEHE369-.LEHB369
	.uleb128 0
	.uleb128 0
.LLSDACSE2519:
	.text
	.size	_ZN6Object4callERK10StringNamePPK7VariantiRNS3_9CallErrorE, .-_ZN6Object4callERK10StringNamePPK7VariantiRNS3_9CallErrorE
	.align 2
	.globl	_ZN6Object12notificationEib
	.type	_ZN6Object12notificationEib, @function
_ZN6Object12notificationEib:
.LFB2520:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_notification, p_notification
	movl	%edx, %eax	# p_reversed, tmp93
	movb	%al, -16(%rbp)	# tmp94, p_reversed
# core/object.cpp:943: 	_notificationv(p_notification, p_reversed);
	movq	-8(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_14(D)->_vptr.Object, _1
	addq	$32, %rax	#, _2
	movq	(%rax), %r8	# *_2, _3
# core/object.cpp:943: 	_notificationv(p_notification, p_reversed);
	movzbl	-16(%rbp), %edx	# p_reversed, _4
	movl	-12(%rbp), %ecx	# p_notification, tmp96
	movq	-8(%rbp), %rax	# this, tmp97
	movl	%ecx, %esi	# tmp96,
	movq	%rax, %rdi	# tmp97,
	call	*%r8	# _3
# core/object.cpp:945: 	if (script_instance) {
	movq	-8(%rbp), %rax	# this, tmp98
	movq	80(%rax), %rax	# this_14(D)->script_instance, _5
# core/object.cpp:945: 	if (script_instance) {
	testq	%rax, %rax	# _5
	je	.L1507	#,
# core/object.cpp:946: 		script_instance->notification(p_notification);
	movq	-8(%rbp), %rax	# this, tmp99
	movq	80(%rax), %rax	# this_14(D)->script_instance, _6
	movq	-8(%rbp), %rdx	# this, tmp101
	movq	80(%rdx), %rdx	# this_14(D)->script_instance, _8
# core/object.cpp:946: 		script_instance->notification(p_notification);
	movq	(%rdx), %rdx	# _8->_vptr.ScriptInstance, _9
	addq	$104, %rdx	#, _10
	movq	(%rdx), %rcx	# *_10, _11
# core/object.cpp:946: 		script_instance->notification(p_notification);
	movl	-12(%rbp), %edx	# p_notification, tmp102
	movl	%edx, %esi	# tmp102,
	movq	%rax, %rdi	# _6,
	call	*%rcx	# _11
.L1507:
# core/object.cpp:948: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2520:
	.size	_ZN6Object12notificationEib, .-_ZN6Object12notificationEib
	.section	.rodata
.LC31:
	.string	"]"
.LC32:
	.string	":"
.LC33:
	.string	"["
	.text
	.align 2
	.globl	_ZN6Object9to_stringEv
	.type	_ZN6Object9to_stringEv, @function
_ZN6Object9to_stringEv:
.LFB2521:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2521
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -144(%rbp)	# this, this
# core/object.cpp:951: 	if (script_instance) {
	movq	-144(%rbp), %rax	# this, tmp103
	movq	80(%rax), %rax	# this_26(D)->script_instance, _1
# core/object.cpp:951: 	if (script_instance) {
	testq	%rax, %rax	# _1
	je	.L1509	#,
# core/object.cpp:953: 		String ret = script_instance->to_string(&valid);
	movq	-144(%rbp), %rax	# this, tmp104
	movq	80(%rax), %rcx	# this_26(D)->script_instance, _2
	movq	-144(%rbp), %rax	# this, tmp106
	movq	80(%rax), %rax	# this_26(D)->script_instance, _4
# core/object.cpp:953: 		String ret = script_instance->to_string(&valid);
	movq	(%rax), %rax	# _4->_vptr.ScriptInstance, _5
	addq	$112, %rax	#, _6
	movq	(%rax), %r8	# *_6, _7
	leaq	-120(%rbp), %rax	#, tmp107
	leaq	-105(%rbp), %rdx	#, tmp108
	movq	%rcx, %rsi	# _2,
	movq	%rax, %rdi	# tmp107,
.LEHB370:
	call	*%r8	# _7
.LEHE370:
# core/object.cpp:954: 		if (valid)
	movzbl	-105(%rbp), %eax	# valid, valid.91_8
	testb	%al, %al	# valid.91_8
	je	.L1510	#,
	movq	-136(%rbp), %rax	# <retval>, tmp109
	movq	%rax, -24(%rbp)	# tmp109, this
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _76
	movq	%rax, -32(%rbp)	# _76, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp110
	movq	$0, (%rax)	#, this_77->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _78
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	leaq	-120(%rbp), %rdx	#, _79
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _79,
	movq	%rax, %rdi	# _78,
.LEHB371:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE371:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L1532	#
.L1531:
	movq	%rax, %rbx	#, tmp114
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-24(%rbp), %rax	# this, _80
	movq	%rax, -40(%rbp)	# _80, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp111
	movq	(%rax), %rdx	# this_81->_ptr, _82
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp112
	movq	%rdx, %rsi	# _82,
	movq	%rax, %rdi	# tmp112,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# core/object.cpp:953: 		String ret = script_instance->to_string(&valid);
	leaq	-120(%rbp), %rax	#, tmp117
	movq	%rax, %rdi	# tmp117,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp113, D.61892
	movq	%rax, %rdi	# D.61892,
.LEHB372:
	call	_Unwind_Resume	#
.L1532:
	movl	$0, %ebx	#, finally_tmp.92_14
# core/object.cpp:955: 			return ret;
	jmp	.L1513	#
.L1510:
	movl	$1, %ebx	#, finally_tmp.92_14
.L1513:
	leaq	-120(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZN6StringD1Ev	#
	cmpl	$1, %ebx	#, finally_tmp.92_14
	jne	.L1508	#,
.L1509:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-104(%rbp), %rax	#, tmp119
	movl	$.LC31, %esi	#,
	movq	%rax, %rdi	# tmp119,
	call	_ZN6StringC1EPKc	#
.LEHE372:
	movq	-144(%rbp), %rax	# this, tmp120
	movq	%rax, -48(%rbp)	# tmp120, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-48(%rbp), %rax	# this, tmp121
	movq	64(%rax), %rax	# this_83->_instance_id, D.55140
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	movq	%rax, %rdx	# D.55140, _10
	leaq	-88(%rbp), %rax	#, tmp122
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp122,
.LEHB373:
	call	_Z4itosl	#
.LEHE373:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-72(%rbp), %rax	#, tmp123
	movl	$.LC32, %esi	#,
	movq	%rax, %rdi	# tmp123,
.LEHB374:
	call	_ZN6StringC1EPKc	#
.LEHE374:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	movq	-144(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_26(D)->_vptr.Object, _11
	addq	$64, %rax	#, _12
	movq	(%rax), %rcx	# *_12, _13
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-56(%rbp), %rax	#, tmp125
	movq	-144(%rbp), %rdx	# this, tmp126
	movq	%rdx, %rsi	# tmp126,
	movq	%rax, %rdi	# tmp125,
.LEHB375:
	call	*%rcx	# _13
.LEHE375:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-64(%rbp), %rax	#, tmp127
	leaq	-56(%rbp), %rdx	#, tmp128
	movl	$.LC33, %esi	#,
	movq	%rax, %rdi	# tmp127,
.LEHB376:
	call	_ZplPKcRK6String	#
.LEHE376:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-80(%rbp), %rax	#, tmp129
	leaq	-72(%rbp), %rdx	#, tmp130
	leaq	-64(%rbp), %rcx	#, tmp131
	movq	%rcx, %rsi	# tmp131,
	movq	%rax, %rdi	# tmp129,
.LEHB377:
	call	_ZNK6StringplERKS_	#
.LEHE377:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-96(%rbp), %rax	#, tmp132
	leaq	-88(%rbp), %rdx	#, tmp133
	leaq	-80(%rbp), %rcx	#, tmp134
	movq	%rcx, %rsi	# tmp134,
	movq	%rax, %rdi	# tmp132,
.LEHB378:
	call	_ZNK6StringplERKS_	#
.LEHE378:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	movq	-136(%rbp), %rax	# <retval>, tmp135
	leaq	-104(%rbp), %rdx	#, tmp136
	leaq	-96(%rbp), %rcx	#, tmp137
	movq	%rcx, %rsi	# tmp137,
	movq	%rax, %rdi	# tmp135,
.LEHB379:
	call	_ZNK6StringplERKS_	#
.LEHE379:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	nop	
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-96(%rbp), %rax	#, tmp138
	movq	%rax, %rdi	# tmp138,
	call	_ZN6StringD1Ev	#
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-80(%rbp), %rax	#, tmp139
	movq	%rax, %rdi	# tmp139,
	call	_ZN6StringD1Ev	#
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-64(%rbp), %rax	#, tmp140
	movq	%rax, %rdi	# tmp140,
	call	_ZN6StringD1Ev	#
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-56(%rbp), %rax	#, tmp141
	movq	%rax, %rdi	# tmp141,
	call	_ZN6StringD1Ev	#
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-72(%rbp), %rax	#, tmp142
	movq	%rax, %rdi	# tmp142,
	call	_ZN6StringD1Ev	#
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-88(%rbp), %rax	#, tmp143
	movq	%rax, %rdi	# tmp143,
	call	_ZN6StringD1Ev	#
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-104(%rbp), %rax	#, tmp144
	movq	%rax, %rdi	# tmp144,
	call	_ZN6StringD1Ev	#
	jmp	.L1508	#
.L1530:
	movq	%rax, %rbx	#, tmp147
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-96(%rbp), %rax	#, tmp145
	movq	%rax, %rdi	# tmp145,
	call	_ZN6StringD1Ev	#
	jmp	.L1518	#
.L1529:
	movq	%rax, %rbx	#, tmp146
.L1518:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-80(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN6StringD1Ev	#
	jmp	.L1519	#
.L1528:
	movq	%rax, %rbx	#, tmp151
.L1519:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-64(%rbp), %rax	#, tmp153
	movq	%rax, %rdi	# tmp153,
	call	_ZN6StringD1Ev	#
	jmp	.L1520	#
.L1527:
	movq	%rax, %rbx	#, tmp154
.L1520:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-56(%rbp), %rax	#, tmp156
	movq	%rax, %rdi	# tmp156,
	call	_ZN6StringD1Ev	#
	jmp	.L1521	#
.L1526:
	movq	%rax, %rbx	#, tmp157
.L1521:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-72(%rbp), %rax	#, tmp159
	movq	%rax, %rdi	# tmp159,
	call	_ZN6StringD1Ev	#
	jmp	.L1522	#
.L1525:
	movq	%rax, %rbx	#, tmp160
.L1522:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-88(%rbp), %rax	#, tmp162
	movq	%rax, %rdi	# tmp162,
	call	_ZN6StringD1Ev	#
	jmp	.L1523	#
.L1524:
	movq	%rax, %rbx	#, tmp163
.L1523:
# core/object.cpp:957: 	return "[" + get_class() + ":" + itos(get_instance_id()) + "]";
	leaq	-104(%rbp), %rax	#, tmp165
	movq	%rax, %rdi	# tmp165,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp163, D.61893
	movq	%rax, %rdi	# D.61893,
.LEHB380:
	call	_Unwind_Resume	#
.LEHE380:
.L1508:
# core/object.cpp:958: }
	movq	-136(%rbp), %rax	# <retval>,
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2521:
	.section	.gcc_except_table
.LLSDA2521:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2521-.LLSDACSB2521
.LLSDACSB2521:
	.uleb128 .LEHB370-.LFB2521
	.uleb128 .LEHE370-.LEHB370
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB371-.LFB2521
	.uleb128 .LEHE371-.LEHB371
	.uleb128 .L1531-.LFB2521
	.uleb128 0
	.uleb128 .LEHB372-.LFB2521
	.uleb128 .LEHE372-.LEHB372
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB373-.LFB2521
	.uleb128 .LEHE373-.LEHB373
	.uleb128 .L1524-.LFB2521
	.uleb128 0
	.uleb128 .LEHB374-.LFB2521
	.uleb128 .LEHE374-.LEHB374
	.uleb128 .L1525-.LFB2521
	.uleb128 0
	.uleb128 .LEHB375-.LFB2521
	.uleb128 .LEHE375-.LEHB375
	.uleb128 .L1526-.LFB2521
	.uleb128 0
	.uleb128 .LEHB376-.LFB2521
	.uleb128 .LEHE376-.LEHB376
	.uleb128 .L1527-.LFB2521
	.uleb128 0
	.uleb128 .LEHB377-.LFB2521
	.uleb128 .LEHE377-.LEHB377
	.uleb128 .L1528-.LFB2521
	.uleb128 0
	.uleb128 .LEHB378-.LFB2521
	.uleb128 .LEHE378-.LEHB378
	.uleb128 .L1529-.LFB2521
	.uleb128 0
	.uleb128 .LEHB379-.LFB2521
	.uleb128 .LEHE379-.LEHB379
	.uleb128 .L1530-.LFB2521
	.uleb128 0
	.uleb128 .LEHB380-.LFB2521
	.uleb128 .LEHE380-.LEHB380
	.uleb128 0
	.uleb128 0
.LLSDACSE2521:
	.text
	.size	_ZN6Object9to_stringEv, .-_ZN6Object9to_stringEv
	.align 2
	.globl	_ZN6Object17_changed_callbackEPS_PKc
	.type	_ZN6Object17_changed_callbackEPS_PKc, @function
_ZN6Object17_changed_callbackEPS_PKc:
.LFB2522:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_changed, p_changed
	movq	%rdx, -24(%rbp)	# p_prop, p_prop
# core/object.cpp:961: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2522:
	.size	_ZN6Object17_changed_callbackEPS_PKc, .-_ZN6Object17_changed_callbackEPS_PKc
	.align 2
	.globl	_ZN6Object19add_change_receptorEPS_
	.type	_ZN6Object19add_change_receptorEPS_, @function
_ZN6Object19add_change_receptorEPS_:
.LFB2523:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_receptor, p_receptor
# core/object.cpp:965: 	change_receptors.insert(p_receptor);
	movq	-8(%rbp), %rax	# this, tmp83
	leaq	40(%rax), %rdx	#, _1
	leaq	-16(%rbp), %rax	#, tmp84
	movq	%rax, %rsi	# tmp84,
	movq	%rdx, %rdi	# _1,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_	#
# core/object.cpp:966: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2523:
	.size	_ZN6Object19add_change_receptorEPS_, .-_ZN6Object19add_change_receptorEPS_
	.align 2
	.globl	_ZN6Object22remove_change_receptorEPS_
	.type	_ZN6Object22remove_change_receptorEPS_, @function
_ZN6Object22remove_change_receptorEPS_:
.LFB2524:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_receptor, p_receptor
# core/object.cpp:970: 	change_receptors.erase(p_receptor);
	movq	-8(%rbp), %rax	# this, tmp83
	leaq	40(%rax), %rdx	#, _1
	leaq	-16(%rbp), %rax	#, tmp84
	movq	%rax, %rsi	# tmp84,
	movq	%rdx, %rdi	# _1,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_	#
# core/object.cpp:971: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2524:
	.size	_ZN6Object22remove_change_receptorEPS_, .-_ZN6Object22remove_change_receptorEPS_
	.align 2
	.globl	_ZN6Object28property_list_changed_notifyEv
	.type	_ZN6Object28property_list_changed_notifyEv, @function
_ZN6Object28property_list_changed_notifyEv:
.LFB2525:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# this, this
	movq	-24(%rbp), %rax	# this, tmp82
	movq	%rax, -8(%rbp)	# tmp82, this
	movq	$.LC27, -16(%rbp)	#, p_what
# core/object.h:583: 	_FORCE_INLINE_ void _change_notify(const char *p_what = "") {}
	nop	
# core/object.cpp:976: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2525:
	.size	_ZN6Object28property_list_changed_notifyEv, .-_ZN6Object28property_list_changed_notifyEv
	.align 2
	.globl	_ZN6Object13cancel_deleteEv
	.type	_ZN6Object13cancel_deleteEv, @function
_ZN6Object13cancel_deleteEv:
.LFB2526:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# core/object.cpp:980: 	_predelete_ok = true;
	movq	-8(%rbp), %rax	# this, tmp82
	movl	$1, 36(%rax)	#, this_2(D)->_predelete_ok
# core/object.cpp:981: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2526:
	.size	_ZN6Object13cancel_deleteEv, .-_ZN6Object13cancel_deleteEv
	.section	.rodata
	.align 8
.LC34:
	.string	"Condition ' p_script.is_null() ' is true."
.LC35:
	.string	"set_script_and_instance"
	.align 8
.LC36:
	.string	"Condition ' !p_instance ' is true."
	.align 8
.LC37:
	.string	"Condition ' script_instance != __null || !script.is_null() ' is true."
	.text
	.align 2
	.globl	_ZN6Object23set_script_and_instanceERK6RefPtrP14ScriptInstance
	.type	_ZN6Object23set_script_and_instanceERK6RefPtrP14ScriptInstance, @function
_ZN6Object23set_script_and_instanceERK6RefPtrP14ScriptInstance:
.LFB2527:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_script, p_script
	movq	%rdx, -24(%rbp)	# p_instance, p_instance
# core/object.cpp:986: 	ERR_FAIL_COND(p_script.is_null());
	movq	-16(%rbp), %rax	# p_script, tmp102
	movq	%rax, %rdi	# tmp102,
	call	_ZNK6RefPtr7is_nullEv	#
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	setne	%al	#, retval.104_26
	testb	%al, %al	# retval.104_26
	je	.L1539	#,
# core/object.cpp:986: 	ERR_FAIL_COND(p_script.is_null());
	movl	$0, %r8d	#,
	movl	$.LC34, %ecx	#,
	movl	$986, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC35, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L1538	#
.L1539:
# core/object.cpp:986: 	ERR_FAIL_COND(p_script.is_null());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:987: 	ERR_FAIL_COND(!p_instance);
	cmpq	$0, -24(%rbp)	#, p_instance
	sete	%al	#, _4
	movzbl	%al, %eax	# _4, _5
	testq	%rax, %rax	# _6
	je	.L1541	#,
# core/object.cpp:987: 	ERR_FAIL_COND(!p_instance);
	movl	$0, %r8d	#,
	movl	$.LC36, %ecx	#,
	movl	$987, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC35, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L1538	#
.L1541:
# core/object.cpp:987: 	ERR_FAIL_COND(!p_instance);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:988: 	ERR_FAIL_COND(script_instance != NULL || !script.is_null());
	movq	-8(%rbp), %rax	# this, tmp103
	movq	80(%rax), %rax	# this_30(D)->script_instance, _7
	testq	%rax, %rax	# _7
	setne	%al	#, _8
	movzbl	%al, %eax	# _8, _9
	testq	%rax, %rax	# _10
	jne	.L1542	#,
	movq	-8(%rbp), %rax	# this, tmp104
	addq	$88, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZNK6RefPtr7is_nullEv	#
	xorl	$1, %eax	#, _13
	movzbl	%al, %eax	# _13, _14
	testq	%rax, %rax	# _15
	je	.L1543	#,
.L1542:
# core/object.cpp:988: 	ERR_FAIL_COND(script_instance != NULL || !script.is_null());
	movl	$1, %eax	#, iftmp.106_18
	jmp	.L1544	#
.L1543:
# core/object.cpp:988: 	ERR_FAIL_COND(script_instance != NULL || !script.is_null());
	movl	$0, %eax	#, iftmp.106_18
.L1544:
# core/object.cpp:988: 	ERR_FAIL_COND(script_instance != NULL || !script.is_null());
	movzbl	%al, %eax	# iftmp.106_18, _16
	testq	%rax, %rax	# _16
	setne	%al	#, retval.105_35
	testb	%al, %al	# retval.105_35
	je	.L1545	#,
# core/object.cpp:988: 	ERR_FAIL_COND(script_instance != NULL || !script.is_null());
	movl	$0, %r8d	#,
	movl	$.LC37, %ecx	#,
	movl	$988, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC35, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L1538	#
.L1545:
# core/object.cpp:988: 	ERR_FAIL_COND(script_instance != NULL || !script.is_null());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:990: 	script = p_script;
	movq	-8(%rbp), %rax	# this, tmp105
	leaq	88(%rax), %rdx	#, _17
	movq	-16(%rbp), %rax	# p_script, tmp106
	movq	%rax, %rsi	# tmp106,
	movq	%rdx, %rdi	# _17,
	call	_ZN6RefPtraSERKS_	#
# core/object.cpp:991: 	script_instance = p_instance;
	movq	-8(%rbp), %rax	# this, tmp107
	movq	-24(%rbp), %rdx	# p_instance, tmp108
	movq	%rdx, 80(%rax)	# tmp108, this_30(D)->script_instance
.L1538:
# core/object.cpp:992: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2527:
	.size	_ZN6Object23set_script_and_instanceERK6RefPtrP14ScriptInstance, .-_ZN6Object23set_script_and_instanceERK6RefPtrP14ScriptInstance
	.align 2
	.globl	_ZN6Object10set_scriptERK6RefPtr
	.type	_ZN6Object10set_scriptERK6RefPtr, @function
_ZN6Object10set_scriptERK6RefPtr:
.LFB2528:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2528
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$216, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -216(%rbp)	# this, this
	movq	%rsi, -224(%rbp)	# p_script, p_script
# core/object.cpp:996: 	if (script == p_script)
	movq	-216(%rbp), %rax	# this, tmp120
	leaq	88(%rax), %rdx	#, _1
	movq	-224(%rbp), %rax	# p_script, tmp121
	movq	%rax, %rsi	# tmp121,
	movq	%rdx, %rdi	# _1,
.LEHB381:
	call	_ZNK6RefPtreqERKS_	#
# core/object.cpp:996: 	if (script == p_script)
	testb	%al, %al	# _30
	jne	.L1581	#,
# core/object.cpp:999: 	if (script_instance) {
	movq	-216(%rbp), %rax	# this, tmp122
	movq	80(%rax), %rax	# this_26(D)->script_instance, _2
# core/object.cpp:999: 	if (script_instance) {
	testq	%rax, %rax	# _2
	je	.L1549	#,
# core/object.cpp:1000: 		memdelete(script_instance);
	movq	-216(%rbp), %rax	# this, tmp123
	movq	80(%rax), %rax	# this_26(D)->script_instance, _3
	movq	%rax, %rdi	# _3,
	call	_Z9memdeleteI14ScriptInstanceEvPT_	#
# core/object.cpp:1001: 		script_instance = NULL;
	movq	-216(%rbp), %rax	# this, tmp124
	movq	$0, 80(%rax)	#, this_26(D)->script_instance
.L1549:
# core/object.cpp:1004: 	script = p_script;
	movq	-216(%rbp), %rax	# this, tmp125
	leaq	88(%rax), %rdx	#, _4
	movq	-224(%rbp), %rax	# p_script, tmp126
	movq	%rax, %rsi	# tmp126,
	movq	%rdx, %rdi	# _4,
	call	_ZN6RefPtraSERKS_	#
# core/object.cpp:1005: 	Ref<Script> s(script);
	movq	-216(%rbp), %rax	# this, tmp127
	leaq	88(%rax), %rdx	#, _5
# core/object.cpp:1005: 	Ref<Script> s(script);
	leaq	-200(%rbp), %rax	#, tmp128
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp128,
	call	_ZN3RefI6ScriptEC1ERK6RefPtr	#
.LEHE381:
# core/object.cpp:1007: 	if (!s.is_null()) {
	leaq	-200(%rbp), %rax	#, tmp129
	movq	%rax, %rdi	# tmp129,
	call	_ZNK3RefI6ScriptE7is_nullEv	#
# core/object.cpp:1007: 	if (!s.is_null()) {
	xorl	$1, %eax	#, retval.108_37
# core/object.cpp:1007: 	if (!s.is_null()) {
	testb	%al, %al	# retval.108_37
	je	.L1550	#,
# ./core/reference.h:112: 		return reference;
	movq	-200(%rbp), %rax	# s.reference, D.58599
# core/object.cpp:1008: 		if (s->can_instance()) {
	movq	(%rax), %rdx	# _38->D.33053.D.27638.D.26671._vptr.Object, _7
	addq	$248, %rdx	#, _8
	movq	(%rdx), %rdx	# *_8, _9
# core/object.cpp:1008: 		if (s->can_instance()) {
	movq	%rax, %rdi	# D.58599,
.LEHB382:
	call	*%rdx	# _9
# core/object.cpp:1008: 		if (s->can_instance()) {
	testb	%al, %al	# _40
	je	.L1552	#,
# ./core/reference.h:112: 		return reference;
	movq	-200(%rbp), %rax	# s.reference, D.58603
# core/object.cpp:1010: 			script_instance = s->instance_create(this);
	movq	(%rax), %rdx	# _49->D.33053.D.27638.D.26671._vptr.Object, _10
	addq	$272, %rdx	#, _11
	movq	(%rdx), %rcx	# *_11, _12
# core/object.cpp:1010: 			script_instance = s->instance_create(this);
	movq	-216(%rbp), %rdx	# this, tmp130
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# D.58603,
	call	*%rcx	# _12
# core/object.cpp:1010: 			script_instance = s->instance_create(this);
	movq	-216(%rbp), %rdx	# this, tmp131
	movq	%rax, 80(%rdx)	# _13, this_26(D)->script_instance
	jmp	.L1550	#
.L1552:
# core/object.cpp:1011: 		} else if (Engine::get_singleton()->is_editor_hint()) {
	call	_ZN6Engine13get_singletonEv	#
	movq	%rax, -24(%rbp)	# _14, this
# ./core/engine.h:119: 	_FORCE_INLINE_ bool is_editor_hint() const { return false; }
	movl	$0, %eax	#, D.58607
# core/object.cpp:1011: 		} else if (Engine::get_singleton()->is_editor_hint()) {
	testb	%al, %al	# D.58607
	je	.L1550	#,
# ./core/reference.h:112: 		return reference;
	movq	-200(%rbp), %rax	# s.reference, D.58611
# core/object.cpp:1013: 			script_instance = s->placeholder_instance_create(this);
	movq	(%rax), %rdx	# _45->D.33053.D.27638.D.26671._vptr.Object, _15
	addq	$280, %rdx	#, _16
	movq	(%rdx), %rcx	# *_16, _17
# core/object.cpp:1013: 			script_instance = s->placeholder_instance_create(this);
	movq	-216(%rbp), %rdx	# this, tmp132
	movq	%rdx, %rsi	# tmp132,
	movq	%rax, %rdi	# D.58611,
	call	*%rcx	# _17
.LEHE382:
# core/object.cpp:1013: 			script_instance = s->placeholder_instance_create(this);
	movq	-216(%rbp), %rdx	# this, tmp133
	movq	%rax, 80(%rdx)	# _18, this_26(D)->script_instance
.L1550:
	movq	-216(%rbp), %rax	# this, tmp134
	movq	%rax, -32(%rbp)	# tmp134, this
	movq	$.LC27, -40(%rbp)	#, p_what
# core/object.h:583: 	_FORCE_INLINE_ void _change_notify(const char *p_what = "") {}
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -192(%rbp)	#, D.39554.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -160(%rbp)	#, D.39553.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -128(%rbp)	#, D.39552.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -96(%rbp)	#, D.39551.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -64(%rbp)	#, D.39550.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/core_string_names.h:50: 	_FORCE_INLINE_ static CoreStringNames *get_singleton() { return singleton; }
	movq	_ZN15CoreStringNames9singletonE(%rip), %rax	# singleton, D.58614
# core/object.cpp:1018: 	emit_signal(CoreStringNames::get_singleton()->script_changed);
	leaq	32(%rax), %rsi	#, _20
# core/object.cpp:1018: 	emit_signal(CoreStringNames::get_singleton()->script_changed);
	leaq	-160(%rbp), %r9	#, tmp135
	leaq	-128(%rbp), %r8	#, tmp136
	leaq	-96(%rbp), %rcx	#, tmp137
	leaq	-64(%rbp), %rdx	#, tmp138
	movq	-216(%rbp), %rax	# this, tmp139
	subq	$8, %rsp	#,
	leaq	-192(%rbp), %rdi	#, tmp140
	pushq	%rdi	# tmp140
	movq	%rax, %rdi	# tmp139,
.LEHB383:
	.cfi_escape 0x2e,0x10
	call	_ZN6Object11emit_signalERK10StringNameRK7VariantS5_S5_S5_S5_	#
.LEHE383:
	addq	$16, %rsp	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# D.39550.type, _81
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _81
	je	.L1582	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp141
	movq	%rax, %rdi	# tmp141,
	call	_ZN7Variant5clearEv	#
.L1582:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.39551.type, _80
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _80
	je	.L1583	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp142
	movq	%rax, %rdi	# tmp142,
	call	_ZN7Variant5clearEv	#
.L1583:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.39552.type, _79
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _79
	je	.L1584	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp143
	movq	%rax, %rdi	# tmp143,
	call	_ZN7Variant5clearEv	#
.L1584:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.39553.type, _78
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _78
	je	.L1585	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp144
	movq	%rax, %rdi	# tmp144,
	call	_ZN7Variant5clearEv	#
.L1585:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.39554.type, _77
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _77
	je	.L1586	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp145
	movq	%rax, %rdi	# tmp145,
	call	_ZN7Variant5clearEv	#
.L1586:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1005: 	Ref<Script> s(script);
	leaq	-200(%rbp), %rax	#, tmp146
	movq	%rax, %rdi	# tmp146,
	call	_ZN3RefI6ScriptED1Ev	#
	jmp	.L1546	#
.L1570:
	movq	%rax, %rbx	#, tmp149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# D.39550.type, _82
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _82
	je	.L1587	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp147
	movq	%rax, %rdi	# tmp147,
	call	_ZN7Variant5clearEv	#
.L1587:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.39551.type, _83
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _83
	je	.L1588	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp152
	movq	%rax, %rdi	# tmp152,
	call	_ZN7Variant5clearEv	#
.L1588:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.39552.type, _84
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _84
	je	.L1589	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp155
	movq	%rax, %rdi	# tmp155,
	call	_ZN7Variant5clearEv	#
.L1589:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.39553.type, _85
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _85
	je	.L1590	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN7Variant5clearEv	#
.L1590:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.39554.type, _86
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _86
	je	.L1591	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp161
	movq	%rax, %rdi	# tmp161,
	call	_ZN7Variant5clearEv	#
.L1591:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1568	#
.L1569:
	movq	%rax, %rbx	#, tmp162
.L1568:
# core/object.cpp:1005: 	Ref<Script> s(script);
	leaq	-200(%rbp), %rax	#, tmp164
	movq	%rax, %rdi	# tmp164,
	call	_ZN3RefI6ScriptED1Ev	#
	movq	%rbx, %rax	# tmp162, D.61909
	movq	%rax, %rdi	# D.61909,
.LEHB384:
	call	_Unwind_Resume	#
.LEHE384:
.L1581:
# core/object.cpp:997: 		return;
	nop	
.L1546:
# core/object.cpp:1019: }
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2528:
	.section	.gcc_except_table
.LLSDA2528:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2528-.LLSDACSB2528
.LLSDACSB2528:
	.uleb128 .LEHB381-.LFB2528
	.uleb128 .LEHE381-.LEHB381
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB382-.LFB2528
	.uleb128 .LEHE382-.LEHB382
	.uleb128 .L1569-.LFB2528
	.uleb128 0
	.uleb128 .LEHB383-.LFB2528
	.uleb128 .LEHE383-.LEHB383
	.uleb128 .L1570-.LFB2528
	.uleb128 0
	.uleb128 .LEHB384-.LFB2528
	.uleb128 .LEHE384-.LEHB384
	.uleb128 0
	.uleb128 0
.LLSDACSE2528:
	.text
	.size	_ZN6Object10set_scriptERK6RefPtr, .-_ZN6Object10set_scriptERK6RefPtr
	.align 2
	.globl	_ZN6Object19set_script_instanceEP14ScriptInstance
	.type	_ZN6Object19set_script_instanceEP14ScriptInstance, @function
_ZN6Object19set_script_instanceEP14ScriptInstance:
.LFB2529:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2529
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_instance, p_instance
# core/object.cpp:1023: 	if (script_instance == p_instance)
	movq	-56(%rbp), %rax	# this, tmp92
	movq	80(%rax), %rax	# this_13(D)->script_instance, _1
# core/object.cpp:1023: 	if (script_instance == p_instance)
	cmpq	%rax, -64(%rbp)	# _1, p_instance
	je	.L1603	#,
# core/object.cpp:1026: 	if (script_instance)
	movq	-56(%rbp), %rax	# this, tmp93
	movq	80(%rax), %rax	# this_13(D)->script_instance, _2
# core/object.cpp:1026: 	if (script_instance)
	testq	%rax, %rax	# _2
	je	.L1595	#,
# core/object.cpp:1027: 		memdelete(script_instance);
	movq	-56(%rbp), %rax	# this, tmp94
	movq	80(%rax), %rax	# this_13(D)->script_instance, _3
	movq	%rax, %rdi	# _3,
.LEHB385:
	call	_Z9memdeleteI14ScriptInstanceEvPT_	#
.L1595:
# core/object.cpp:1029: 	script_instance = p_instance;
	movq	-56(%rbp), %rax	# this, tmp95
	movq	-64(%rbp), %rdx	# p_instance, tmp96
	movq	%rdx, 80(%rax)	# tmp96, this_13(D)->script_instance
# core/object.cpp:1031: 	if (p_instance)
	cmpq	$0, -64(%rbp)	#, p_instance
	je	.L1596	#,
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	movq	-64(%rbp), %rax	# p_instance, tmp97
	movq	(%rax), %rax	# p_instance_14(D)->_vptr.ScriptInstance, _4
	addq	$136, %rax	#, _5
	movq	(%rax), %rcx	# *_5, _6
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	leaq	-32(%rbp), %rax	#, tmp98
	movq	-64(%rbp), %rdx	# p_instance, tmp99
	movq	%rdx, %rsi	# tmp99,
	movq	%rax, %rdi	# tmp98,
	call	*%rcx	# _6
.LEHE385:
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	leaq	-40(%rbp), %rax	#, tmp100
	leaq	-32(%rbp), %rdx	#, tmp101
	movq	%rdx, %rsi	# tmp101,
	movq	%rax, %rdi	# tmp100,
.LEHB386:
	call	_ZNK3RefI6ScriptE11get_ref_ptrEv	#
.LEHE386:
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	movq	-56(%rbp), %rax	# this, tmp102
	leaq	88(%rax), %rdx	#, _7
	leaq	-40(%rbp), %rax	#, tmp103
	movq	%rax, %rsi	# tmp103,
	movq	%rdx, %rdi	# _7,
.LEHB387:
	call	_ZN6RefPtraSERKS_	#
.LEHE387:
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	leaq	-40(%rbp), %rax	#, tmp104
	movq	%rax, %rdi	# tmp104,
	call	_ZN6RefPtrD1Ev	#
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	leaq	-32(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN3RefI6ScriptED1Ev	#
	jmp	.L1592	#
.L1596:
# core/object.cpp:1034: 		script = RefPtr();
	leaq	-24(%rbp), %rax	#, tmp106
	movq	%rax, %rdi	# tmp106,
.LEHB388:
	call	_ZN6RefPtrC1Ev	#
.LEHE388:
# core/object.cpp:1034: 		script = RefPtr();
	movq	-56(%rbp), %rax	# this, tmp107
	leaq	88(%rax), %rdx	#, _8
	leaq	-24(%rbp), %rax	#, tmp108
	movq	%rax, %rsi	# tmp108,
	movq	%rdx, %rdi	# _8,
.LEHB389:
	call	_ZN6RefPtraSERKS_	#
.LEHE389:
# core/object.cpp:1034: 		script = RefPtr();
	leaq	-24(%rbp), %rax	#, tmp109
	movq	%rax, %rdi	# tmp109,
	call	_ZN6RefPtrD1Ev	#
	jmp	.L1592	#
.L1601:
	movq	%rax, %rbx	#, tmp112
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	leaq	-40(%rbp), %rax	#, tmp110
	movq	%rax, %rdi	# tmp110,
	call	_ZN6RefPtrD1Ev	#
	jmp	.L1598	#
.L1600:
	movq	%rax, %rbx	#, tmp111
.L1598:
# core/object.cpp:1032: 		script = p_instance->get_script().get_ref_ptr();
	leaq	-32(%rbp), %rax	#, tmp115
	movq	%rax, %rdi	# tmp115,
	call	_ZN3RefI6ScriptED1Ev	#
	movq	%rbx, %rax	# tmp111, D.61910
	movq	%rax, %rdi	# D.61910,
.LEHB390:
	call	_Unwind_Resume	#
.L1602:
	movq	%rax, %rbx	#, tmp117
# core/object.cpp:1034: 		script = RefPtr();
	leaq	-24(%rbp), %rax	#, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_ZN6RefPtrD1Ev	#
	movq	%rbx, %rax	# tmp117, D.61911
	movq	%rax, %rdi	# D.61911,
	call	_Unwind_Resume	#
.LEHE390:
.L1603:
# core/object.cpp:1024: 		return;
	nop	
.L1592:
# core/object.cpp:1035: }
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2529:
	.section	.gcc_except_table
.LLSDA2529:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2529-.LLSDACSB2529
.LLSDACSB2529:
	.uleb128 .LEHB385-.LFB2529
	.uleb128 .LEHE385-.LEHB385
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB386-.LFB2529
	.uleb128 .LEHE386-.LEHB386
	.uleb128 .L1600-.LFB2529
	.uleb128 0
	.uleb128 .LEHB387-.LFB2529
	.uleb128 .LEHE387-.LEHB387
	.uleb128 .L1601-.LFB2529
	.uleb128 0
	.uleb128 .LEHB388-.LFB2529
	.uleb128 .LEHE388-.LEHB388
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB389-.LFB2529
	.uleb128 .LEHE389-.LEHB389
	.uleb128 .L1602-.LFB2529
	.uleb128 0
	.uleb128 .LEHB390-.LFB2529
	.uleb128 .LEHE390-.LEHB390
	.uleb128 0
	.uleb128 0
.LLSDACSE2529:
	.text
	.size	_ZN6Object19set_script_instanceEP14ScriptInstance, .-_ZN6Object19set_script_instanceEP14ScriptInstance
	.align 2
	.globl	_ZNK6Object10get_scriptEv
	.type	_ZNK6Object10get_scriptEv, @function
_ZNK6Object10get_scriptEv:
.LFB2530:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -16(%rbp)	# this, this
# core/object.cpp:1039: 	return script;
	movq	-16(%rbp), %rax	# this, tmp83
	leaq	88(%rax), %rdx	#, _1
	movq	-8(%rbp), %rax	# <retval>, tmp84
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# tmp84,
	call	_ZN6RefPtrC1ERKS_	#
# core/object.cpp:1040: }
	movq	-8(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2530:
	.size	_ZNK6Object10get_scriptEv, .-_ZNK6Object10get_scriptEv
	.align 2
	.globl	_ZNK6Object8has_metaERK6String
	.type	_ZNK6Object8has_metaERK6String, @function
_ZNK6Object8has_metaERK6String:
.LFB2531:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2531
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_name, p_name
# core/object.cpp:1044: 	return metadata.has(p_name);
	movq	-56(%rbp), %rax	# this, tmp88
	leaq	96(%rax), %rbx	#, _1
	movq	-64(%rbp), %rdx	# p_name, tmp89
	leaq	-48(%rbp), %rax	#, tmp90
	movq	%rdx, %rsi	# tmp89,
	movq	%rax, %rdi	# tmp90,
.LEHB391:
	call	_ZN7VariantC1ERK6String	#
.LEHE391:
	leaq	-48(%rbp), %rax	#, tmp91
	movq	%rax, %rsi	# tmp91,
	movq	%rbx, %rdi	# _1,
.LEHB392:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE392:
	movl	%eax, %ebx	#, _7
# core/object.cpp:1044: 	return metadata.has(p_name);
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39570.type, _11
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _11
	je	.L1614	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp92
	movq	%rax, %rdi	# tmp92,
	call	_ZN7Variant5clearEv	#
.L1614:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1044: 	return metadata.has(p_name);
	movl	%ebx, %eax	# _7, <retval>
	jmp	.L1613	#
.L1611:
	movq	%rax, %rbx	#, tmp95
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39570.type, _12
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _12
	je	.L1615	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp94
	movq	%rax, %rdi	# tmp94,
	call	_ZN7Variant5clearEv	#
.L1615:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp95, D.61915
	movq	%rax, %rdi	# D.61915,
.LEHB393:
	call	_Unwind_Resume	#
.LEHE393:
.L1613:
# core/object.cpp:1045: }
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2531:
	.section	.gcc_except_table
.LLSDA2531:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2531-.LLSDACSB2531
.LLSDACSB2531:
	.uleb128 .LEHB391-.LFB2531
	.uleb128 .LEHE391-.LEHB391
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB392-.LFB2531
	.uleb128 .LEHE392-.LEHB392
	.uleb128 .L1611-.LFB2531
	.uleb128 0
	.uleb128 .LEHB393-.LFB2531
	.uleb128 .LEHE393-.LEHB393
	.uleb128 0
	.uleb128 0
.LLSDACSE2531:
	.text
	.size	_ZNK6Object8has_metaERK6String, .-_ZNK6Object8has_metaERK6String
	.align 2
	.globl	_ZN6Object8set_metaERK6StringRK7Variant
	.type	_ZN6Object8set_metaERK6StringRK7Variant, @function
_ZN6Object8set_metaERK6StringRK7Variant:
.LFB2532:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2532
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_name, p_name
	movq	%rdx, -104(%rbp)	# p_value, p_value
	movq	-104(%rbp), %rax	# p_value, tmp93
	movq	%rax, -24(%rbp)	# tmp93, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-24(%rbp), %rax	# this, tmp94
	movl	(%rax), %eax	# this_22->type, D.54683
# core/object.cpp:1049: 	if (p_value.get_type() == Variant::NIL) {
	testl	%eax, %eax	# D.54683
	sete	%al	#, retval.122_9
# core/object.cpp:1049: 	if (p_value.get_type() == Variant::NIL) {
	testb	%al, %al	# retval.122_9
	je	.L1618	#,
# core/object.cpp:1050: 		metadata.erase(p_name);
	movq	-88(%rbp), %rax	# this, tmp95
	leaq	96(%rax), %rbx	#, _2
	movq	-96(%rbp), %rdx	# p_name, tmp96
	leaq	-80(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB394:
	call	_ZN7VariantC1ERK6String	#
.LEHE394:
	leaq	-80(%rbp), %rax	#, tmp98
	movq	%rax, %rsi	# tmp98,
	movq	%rbx, %rdi	# _2,
.LEHB395:
	call	_ZN10Dictionary5eraseERK7Variant	#
.LEHE395:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39576.type, _24
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _24
	je	.L1631	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp99
	movq	%rax, %rdi	# tmp99,
	call	_ZN7Variant5clearEv	#
.L1631:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1051: 		return;
	jmp	.L1616	#
.L1618:
# core/object.cpp:1054: 	metadata[p_name] = p_value;
	movq	-96(%rbp), %rdx	# p_name, tmp100
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rdx, %rsi	# tmp100,
	movq	%rax, %rdi	# tmp101,
.LEHB396:
	call	_ZN7VariantC1ERK6String	#
.LEHE396:
	movq	-88(%rbp), %rax	# this, tmp102
	leaq	96(%rax), %rdx	#, _3
	leaq	-48(%rbp), %rax	#, tmp103
	movq	%rax, %rsi	# tmp103,
	movq	%rdx, %rdi	# _3,
.LEHB397:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _4
# core/object.cpp:1054: 	metadata[p_name] = p_value;
	movq	-104(%rbp), %rax	# p_value, tmp104
	movq	%rax, %rsi	# tmp104,
	movq	%rdx, %rdi	# _4,
	call	_ZN7VariantaSERKS_	#
.LEHE397:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39577.type, _25
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _25
	je	.L1632	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1632	#
.L1626:
	movq	%rax, %rbx	#, tmp107
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39576.type, _26
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _26
	je	.L1633	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp106
	movq	%rax, %rdi	# tmp106,
	call	_ZN7Variant5clearEv	#
.L1633:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp107, D.61916
	movq	%rax, %rdi	# D.61916,
.LEHB398:
	call	_Unwind_Resume	#
.LEHE398:
.L1627:
	movq	%rax, %rbx	#, tmp109
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39577.type, _27
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _27
	je	.L1634	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN7Variant5clearEv	#
.L1634:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp109, D.61917
	movq	%rax, %rdi	# D.61917,
.LEHB399:
	call	_Unwind_Resume	#
.LEHE399:
.L1632:
	nop	
.L1616:
# core/object.cpp:1055: }
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2532:
	.section	.gcc_except_table
.LLSDA2532:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2532-.LLSDACSB2532
.LLSDACSB2532:
	.uleb128 .LEHB394-.LFB2532
	.uleb128 .LEHE394-.LEHB394
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB395-.LFB2532
	.uleb128 .LEHE395-.LEHB395
	.uleb128 .L1626-.LFB2532
	.uleb128 0
	.uleb128 .LEHB396-.LFB2532
	.uleb128 .LEHE396-.LEHB396
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB397-.LFB2532
	.uleb128 .LEHE397-.LEHB397
	.uleb128 .L1627-.LFB2532
	.uleb128 0
	.uleb128 .LEHB398-.LFB2532
	.uleb128 .LEHE398-.LEHB398
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB399-.LFB2532
	.uleb128 .LEHE399-.LEHB399
	.uleb128 0
	.uleb128 0
.LLSDACSE2532:
	.text
	.size	_ZN6Object8set_metaERK6StringRK7Variant, .-_ZN6Object8set_metaERK6StringRK7Variant
	.section	.rodata
	.align 8
.LC38:
	.string	"Condition ' !metadata.has(p_name) ' is true. returned: Variant()"
.LC39:
	.string	"get_meta"
	.text
	.align 2
	.globl	_ZNK6Object8get_metaERK6String
	.type	_ZNK6Object8get_metaERK6String, @function
_ZNK6Object8get_metaERK6String:
.LFB2533:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2533
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
	movq	%rdx, -104(%rbp)	# p_name, p_name
# core/object.cpp:1059: 	ERR_FAIL_COND_V(!metadata.has(p_name), Variant());
	movq	-96(%rbp), %rax	# this, tmp96
	leaq	96(%rax), %rbx	#, _1
	movq	-104(%rbp), %rdx	# p_name, tmp97
	leaq	-80(%rbp), %rax	#, tmp98
	movq	%rdx, %rsi	# tmp97,
	movq	%rax, %rdi	# tmp98,
.LEHB400:
	call	_ZN7VariantC1ERK6String	#
.LEHE400:
	leaq	-80(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rbx, %rdi	# _1,
.LEHB401:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE401:
	xorl	$1, %eax	#, _3
	movzbl	%al, %eax	# _3, _4
	testq	%rax, %rax	# _5
	setne	%bl	#, retval.123_16
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39582.type, _28
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _28
	je	.L1649	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN7Variant5clearEv	#
.L1649:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1059: 	ERR_FAIL_COND_V(!metadata.has(p_name), Variant());
	testb	%bl, %bl	# retval.123_16
	je	.L1637	#,
# core/object.cpp:1059: 	ERR_FAIL_COND_V(!metadata.has(p_name), Variant());
	movl	$0, %r8d	#,
	movl	$.LC38, %ecx	#,
	movl	$1059, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC39, %edi	#,
.LEHB402:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rax, -24(%rbp)	# tmp101, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-24(%rbp), %rax	# this, tmp102
	movl	$0, (%rax)	#, this_29->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:1059: 	ERR_FAIL_COND_V(!metadata.has(p_name), Variant());
	jmp	.L1635	#
.L1637:
# core/object.cpp:1059: 	ERR_FAIL_COND_V(!metadata.has(p_name), Variant());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1060: 	return metadata[p_name];
	movq	-104(%rbp), %rdx	# p_name, tmp103
	leaq	-48(%rbp), %rax	#, tmp104
	movq	%rdx, %rsi	# tmp103,
	movq	%rax, %rdi	# tmp104,
	call	_ZN7VariantC1ERK6String	#
.LEHE402:
	movq	-96(%rbp), %rax	# this, tmp105
	leaq	96(%rax), %rdx	#, _6
	leaq	-48(%rbp), %rax	#, tmp106
	movq	%rax, %rsi	# tmp106,
	movq	%rdx, %rdi	# _6,
.LEHB403:
	call	_ZNK10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _7
	movq	-88(%rbp), %rax	# <retval>, tmp107
	movq	%rdx, %rsi	# _7,
	movq	%rax, %rdi	# tmp107,
	call	_ZN7VariantC1ERKS_	#
.LEHE403:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39585.type, _30
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _30
	je	.L1650	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN7Variant5clearEv	#
# ./core/variant.h:423: 	}
	jmp	.L1650	#
.L1644:
	movq	%rax, %rbx	#, tmp110
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.39582.type, _31
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _31
	je	.L1651	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp109
	movq	%rax, %rdi	# tmp109,
	call	_ZN7Variant5clearEv	#
.L1651:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp110, D.61918
	movq	%rax, %rdi	# D.61918,
.LEHB404:
	call	_Unwind_Resume	#
.LEHE404:
.L1645:
	movq	%rax, %rbx	#, tmp112
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39585.type, _32
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _32
	je	.L1652	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp111
	movq	%rax, %rdi	# tmp111,
	call	_ZN7Variant5clearEv	#
.L1652:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp112, D.61919
	movq	%rax, %rdi	# D.61919,
.LEHB405:
	call	_Unwind_Resume	#
.LEHE405:
.L1650:
	nop	
.L1635:
# core/object.cpp:1061: }
	movq	-88(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2533:
	.section	.gcc_except_table
.LLSDA2533:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2533-.LLSDACSB2533
.LLSDACSB2533:
	.uleb128 .LEHB400-.LFB2533
	.uleb128 .LEHE400-.LEHB400
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB401-.LFB2533
	.uleb128 .LEHE401-.LEHB401
	.uleb128 .L1644-.LFB2533
	.uleb128 0
	.uleb128 .LEHB402-.LFB2533
	.uleb128 .LEHE402-.LEHB402
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB403-.LFB2533
	.uleb128 .LEHE403-.LEHB403
	.uleb128 .L1645-.LFB2533
	.uleb128 0
	.uleb128 .LEHB404-.LFB2533
	.uleb128 .LEHE404-.LEHB404
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB405-.LFB2533
	.uleb128 .LEHE405-.LEHB405
	.uleb128 0
	.uleb128 0
.LLSDACSE2533:
	.text
	.size	_ZNK6Object8get_metaERK6String, .-_ZNK6Object8get_metaERK6String
	.align 2
	.globl	_ZN6Object11remove_metaERK6String
	.type	_ZN6Object11remove_metaERK6String, @function
_ZN6Object11remove_metaERK6String:
.LFB2534:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2534
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_name, p_name
# core/object.cpp:1064: 	metadata.erase(p_name);
	movq	-56(%rbp), %rax	# this, tmp86
	leaq	96(%rax), %rbx	#, _1
	movq	-64(%rbp), %rdx	# p_name, tmp87
	leaq	-48(%rbp), %rax	#, tmp88
	movq	%rdx, %rsi	# tmp87,
	movq	%rax, %rdi	# tmp88,
.LEHB406:
	call	_ZN7VariantC1ERK6String	#
.LEHE406:
	leaq	-48(%rbp), %rax	#, tmp89
	movq	%rax, %rsi	# tmp89,
	movq	%rbx, %rdi	# _1,
.LEHB407:
	call	_ZN10Dictionary5eraseERK7Variant	#
.LEHE407:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39591.type, _9
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _9
	je	.L1661	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp90
	movq	%rax, %rdi	# tmp90,
	call	_ZN7Variant5clearEv	#
.L1661:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1065: }
	jmp	.L1660	#
.L1657:
	movq	%rax, %rbx	#, tmp92
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.39591.type, _10
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _10
	je	.L1662	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp91
	movq	%rax, %rdi	# tmp91,
	call	_ZN7Variant5clearEv	#
.L1662:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp92, D.61923
	movq	%rax, %rdi	# D.61923,
.LEHB408:
	call	_Unwind_Resume	#
.LEHE408:
.L1660:
# core/object.cpp:1065: }
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2534:
	.section	.gcc_except_table
.LLSDA2534:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2534-.LLSDACSB2534
.LLSDACSB2534:
	.uleb128 .LEHB406-.LFB2534
	.uleb128 .LEHE406-.LEHB406
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB407-.LFB2534
	.uleb128 .LEHE407-.LEHB407
	.uleb128 .L1657-.LFB2534
	.uleb128 0
	.uleb128 .LEHB408-.LFB2534
	.uleb128 .LEHE408-.LEHB408
	.uleb128 0
	.uleb128 0
.LLSDACSE2534:
	.text
	.size	_ZN6Object11remove_metaERK6String, .-_ZN6Object11remove_metaERK6String
	.align 2
	.globl	_ZNK6Object23_get_property_list_bindEv
	.type	_ZNK6Object23_get_property_list_bindEv, @function
_ZNK6Object23_get_property_list_bindEv:
.LFB2535:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2535
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -48(%rbp)	# this, this
# core/object.cpp:1069: 	List<PropertyInfo> lpi;
	leaq	-24(%rbp), %rax	#, tmp83
	movq	%rax, %rdi	# tmp83,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
# core/object.cpp:1070: 	get_property_list(&lpi);
	leaq	-24(%rbp), %rcx	#, tmp84
	movq	-48(%rbp), %rax	# this, tmp85
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp84,
	movq	%rax, %rdi	# tmp85,
.LEHB409:
	call	_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb	#
# core/object.cpp:1071: 	return convert_property_list(&lpi);
	movq	-40(%rbp), %rax	# <retval>, tmp86
	leaq	-24(%rbp), %rdx	#, tmp87
	movq	%rdx, %rsi	# tmp87,
	movq	%rax, %rdi	# tmp86,
	call	_Z21convert_property_listPK4ListI12PropertyInfo16DefaultAllocatorE	#
.LEHE409:
	nop	
# core/object.cpp:1069: 	List<PropertyInfo> lpi;
	leaq	-24(%rbp), %rax	#, tmp88
	movq	%rax, %rdi	# tmp88,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
# core/object.cpp:1071: 	return convert_property_list(&lpi);
	jmp	.L1667	#
.L1666:
	movq	%rax, %rbx	#, tmp90
# core/object.cpp:1069: 	List<PropertyInfo> lpi;
	leaq	-24(%rbp), %rax	#, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp90, D.61924
	movq	%rax, %rdi	# D.61924,
.LEHB410:
	call	_Unwind_Resume	#
.LEHE410:
.L1667:
# core/object.cpp:1072: }
	movq	-40(%rbp), %rax	# <retval>,
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2535:
	.section	.gcc_except_table
.LLSDA2535:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2535-.LLSDACSB2535
.LLSDACSB2535:
	.uleb128 .LEHB409-.LFB2535
	.uleb128 .LEHE409-.LEHB409
	.uleb128 .L1666-.LFB2535
	.uleb128 0
	.uleb128 .LEHB410-.LFB2535
	.uleb128 .LEHE410-.LEHB410
	.uleb128 0
	.uleb128 0
.LLSDACSE2535:
	.text
	.size	_ZNK6Object23_get_property_list_bindEv, .-_ZNK6Object23_get_property_list_bindEv
	.align 2
	.globl	_ZNK6Object21_get_method_list_bindEv
	.type	_ZNK6Object21_get_method_list_bindEv, @function
_ZNK6Object21_get_method_list_bindEv:
.LFB2536:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2536
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# core/object.cpp:1076: 	List<MethodInfo> ml;
	leaq	-72(%rbp), %rax	#, tmp90
	movq	%rax, %rdi	# tmp90,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorEC1Ev	#
# core/object.cpp:1077: 	get_method_list(&ml);
	leaq	-72(%rbp), %rdx	#, tmp91
	movq	-96(%rbp), %rax	# this, tmp92
	movq	%rdx, %rsi	# tmp91,
	movq	%rax, %rdi	# tmp92,
.LEHB411:
	call	_ZNK6Object15get_method_listEP4ListI10MethodInfo16DefaultAllocatorE	#
# core/object.cpp:1078: 	Array ret;
	movq	-88(%rbp), %rax	# <retval>, tmp93
	movq	%rax, %rdi	# tmp93,
	call	_ZN5ArrayC1Ev	#
.LEHE411:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-72(%rbp), %rax	# ml._data, _29
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _29
	je	.L1669	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-72(%rbp), %rax	# ml._data, _30
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _30->first, D.59508
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L1687	#
.L1669:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59508
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L1687:
# core/object.cpp:1080: 	for (List<MethodInfo>::Element *E = ml.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59508, E
.L1676:
# core/object.cpp:1080: 	for (List<MethodInfo>::Element *E = ml.front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L1692	#,
	movq	-24(%rbp), %rax	# E, tmp94
	movq	%rax, -32(%rbp)	# tmp94, this
# ./core/list.h:121: 			return value;
	movq	-32(%rbp), %rdx	# this, D.59513
# core/object.cpp:1082: 		Dictionary d = E->get();
	leaq	-80(%rbp), %rax	#, tmp95
	movq	%rdx, %rsi	# D.59513,
	movq	%rax, %rdi	# tmp95,
.LEHB412:
	call	_ZNK10MethodInfocv10DictionaryEv	#
.LEHE412:
# core/object.cpp:1084: 		ret.push_back(d);
	leaq	-80(%rbp), %rdx	#, tmp96
	leaq	-64(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB413:
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE413:
# core/object.cpp:1084: 		ret.push_back(d);
	leaq	-64(%rbp), %rdx	#, tmp98
	movq	-88(%rbp), %rax	# <retval>, tmp99
	movq	%rdx, %rsi	# tmp98,
	movq	%rax, %rdi	# tmp99,
.LEHB414:
	call	_ZN5Array9push_backERK7Variant	#
.LEHE414:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# D.39753.type, _39
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _39
	je	.L1693	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN7Variant5clearEv	#
.L1693:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1082: 		Dictionary d = E->get();
	leaq	-80(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN10DictionaryD1Ev	#
	movq	-24(%rbp), %rax	# E, tmp102
	movq	%rax, -40(%rbp)	# tmp102, this
# ./core/list.h:73: 			return next_ptr;
	movq	-40(%rbp), %rax	# this, tmp103
	movq	88(%rax), %rax	# this_37->next_ptr, D.59517
# core/object.cpp:1080: 	for (List<MethodInfo>::Element *E = ml.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59517, E
# core/object.cpp:1080: 	for (List<MethodInfo>::Element *E = ml.front(); E; E = E->next()) {
	jmp	.L1676	#
.L1692:
# core/object.cpp:1087: 	return ret;
	nop	
# core/object.cpp:1076: 	List<MethodInfo> ml;
	leaq	-72(%rbp), %rax	#, tmp104
	movq	%rax, %rdi	# tmp104,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorED1Ev	#
# core/object.cpp:1087: 	return ret;
	jmp	.L1691	#
.L1686:
	movq	%rax, %rbx	#, tmp107
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# D.39753.type, _40
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _40
	je	.L1694	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN7Variant5clearEv	#
.L1694:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1680	#
.L1685:
	movq	%rax, %rbx	#, tmp106
.L1680:
# core/object.cpp:1082: 		Dictionary d = E->get();
	leaq	-80(%rbp), %rax	#, tmp110
	movq	%rax, %rdi	# tmp110,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L1681	#
.L1684:
	movq	%rax, %rbx	#, tmp111
.L1681:
	movq	-88(%rbp), %rax	# <retval>, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN5ArrayD1Ev	#
	jmp	.L1682	#
.L1683:
	movq	%rax, %rbx	#, tmp114
.L1682:
# core/object.cpp:1076: 	List<MethodInfo> ml;
	leaq	-72(%rbp), %rax	#, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp114, D.61927
	movq	%rax, %rdi	# D.61927,
.LEHB415:
	call	_Unwind_Resume	#
.LEHE415:
.L1691:
# core/object.cpp:1088: }
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2536:
	.section	.gcc_except_table
.LLSDA2536:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2536-.LLSDACSB2536
.LLSDACSB2536:
	.uleb128 .LEHB411-.LFB2536
	.uleb128 .LEHE411-.LEHB411
	.uleb128 .L1683-.LFB2536
	.uleb128 0
	.uleb128 .LEHB412-.LFB2536
	.uleb128 .LEHE412-.LEHB412
	.uleb128 .L1684-.LFB2536
	.uleb128 0
	.uleb128 .LEHB413-.LFB2536
	.uleb128 .LEHE413-.LEHB413
	.uleb128 .L1685-.LFB2536
	.uleb128 0
	.uleb128 .LEHB414-.LFB2536
	.uleb128 .LEHE414-.LEHB414
	.uleb128 .L1686-.LFB2536
	.uleb128 0
	.uleb128 .LEHB415-.LFB2536
	.uleb128 .LEHE415-.LEHB415
	.uleb128 0
	.uleb128 0
.LLSDACSE2536:
	.text
	.size	_ZNK6Object21_get_method_list_bindEv, .-_ZNK6Object21_get_method_list_bindEv
	.align 2
	.globl	_ZNK6Object19_get_meta_list_bindEv
	.type	_ZNK6Object19_get_meta_list_bindEv, @function
_ZNK6Object19_get_meta_list_bindEv:
.LFB2537:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2537
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
# core/object.cpp:1092: 	PoolVector<String> _metaret;
	movq	-72(%rbp), %rax	# <retval>, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN10PoolVectorI6StringEC1Ev	#
# core/object.cpp:1094: 	List<Variant> keys;
	leaq	-56(%rbp), %rax	#, tmp90
	movq	%rax, %rdi	# tmp90,
	call	_ZN4ListI7Variant16DefaultAllocatorEC1Ev	#
# core/object.cpp:1095: 	metadata.get_key_list(&keys);
	movq	-80(%rbp), %rax	# this, tmp91
	leaq	96(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp92
	movq	%rax, %rsi	# tmp92,
	movq	%rdx, %rdi	# _1,
.LEHB416:
	call	_ZNK10Dictionary12get_key_listEP4ListI7Variant16DefaultAllocatorE	#
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-56(%rbp), %rax	# keys._data, _25
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _25
	je	.L1696	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-56(%rbp), %rax	# keys._data, _26
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _26->first, D.57489
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L1708	#
.L1696:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.57489
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L1708:
# core/object.cpp:1096: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.57489, E
.L1702:
# core/object.cpp:1096: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L1711	#,
	movq	-24(%rbp), %rax	# E, tmp93
	movq	%rax, -32(%rbp)	# tmp93, this
# ./core/list.h:121: 			return value;
	movq	-32(%rbp), %rdx	# this, D.57494
# core/object.cpp:1098: 		_metaret.push_back(E->get());
	leaq	-48(%rbp), %rax	#, tmp94
	movq	%rdx, %rsi	# D.57494,
	movq	%rax, %rdi	# tmp94,
	call	_ZNK7Variantcv6StringEv	#
.LEHE416:
# core/object.cpp:1098: 		_metaret.push_back(E->get());
	leaq	-48(%rbp), %rdx	#, tmp95
	movq	-72(%rbp), %rax	# <retval>, tmp96
	movq	%rdx, %rsi	# tmp95,
	movq	%rax, %rdi	# tmp96,
.LEHB417:
	call	_ZN10PoolVectorI6StringE9push_backERKS0_	#
.LEHE417:
# core/object.cpp:1098: 		_metaret.push_back(E->get());
	leaq	-48(%rbp), %rax	#, tmp97
	movq	%rax, %rdi	# tmp97,
	call	_ZN6StringD1Ev	#
	movq	-24(%rbp), %rax	# E, tmp98
	movq	%rax, -40(%rbp)	# tmp98, this
# ./core/list.h:73: 			return next_ptr;
	movq	-40(%rbp), %rax	# this, tmp99
	movq	24(%rax), %rax	# this_33->next_ptr, D.57498
# core/object.cpp:1096: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.57498, E
# core/object.cpp:1096: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	jmp	.L1702	#
.L1711:
# core/object.cpp:1101: 	return _metaret;
	nop	
# core/object.cpp:1094: 	List<Variant> keys;
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
# core/object.cpp:1101: 	return _metaret;
	jmp	.L1710	#
.L1707:
	movq	%rax, %rbx	#, tmp103
# core/object.cpp:1098: 		_metaret.push_back(E->get());
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
	jmp	.L1705	#
.L1706:
	movq	%rax, %rbx	#, tmp102
.L1705:
# core/object.cpp:1094: 	List<Variant> keys;
	leaq	-56(%rbp), %rax	#, tmp106
	movq	%rax, %rdi	# tmp106,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
	movq	-72(%rbp), %rax	# <retval>, tmp109
	movq	%rax, %rdi	# tmp109,
	call	_ZN10PoolVectorI6StringED1Ev	#
	movq	%rbx, %rax	# tmp107, D.61930
	movq	%rax, %rdi	# D.61930,
.LEHB418:
	call	_Unwind_Resume	#
.LEHE418:
.L1710:
# core/object.cpp:1102: }
	movq	-72(%rbp), %rax	# <retval>,
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2537:
	.section	.gcc_except_table
.LLSDA2537:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2537-.LLSDACSB2537
.LLSDACSB2537:
	.uleb128 .LEHB416-.LFB2537
	.uleb128 .LEHE416-.LEHB416
	.uleb128 .L1706-.LFB2537
	.uleb128 0
	.uleb128 .LEHB417-.LFB2537
	.uleb128 .LEHE417-.LEHB417
	.uleb128 .L1707-.LFB2537
	.uleb128 0
	.uleb128 .LEHB418-.LFB2537
	.uleb128 .LEHE418-.LEHB418
	.uleb128 0
	.uleb128 0
.LLSDACSE2537:
	.text
	.size	_ZNK6Object19_get_meta_list_bindEv, .-_ZNK6Object19_get_meta_list_bindEv
	.align 2
	.globl	_ZNK6Object13get_meta_listEP4ListI6String16DefaultAllocatorE
	.type	_ZNK6Object13get_meta_listEP4ListI6String16DefaultAllocatorE, @function
_ZNK6Object13get_meta_listEP4ListI6String16DefaultAllocatorE:
.LFB2538:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2538
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_list, p_list
# core/object.cpp:1105: 	List<Variant> keys;
	leaq	-56(%rbp), %rax	#, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN4ListI7Variant16DefaultAllocatorEC1Ev	#
# core/object.cpp:1106: 	metadata.get_key_list(&keys);
	movq	-72(%rbp), %rax	# this, tmp90
	leaq	96(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp91
	movq	%rax, %rsi	# tmp91,
	movq	%rdx, %rdi	# _1,
.LEHB419:
	call	_ZNK10Dictionary12get_key_listEP4ListI7Variant16DefaultAllocatorE	#
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-56(%rbp), %rax	# keys._data, _23
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _23
	je	.L1713	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-56(%rbp), %rax	# keys._data, _24
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _24->first, D.57311
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L1724	#
.L1713:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.57311
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L1724:
# core/object.cpp:1107: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.57311, E
.L1719:
# core/object.cpp:1107: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L1716	#,
	movq	-24(%rbp), %rax	# E, tmp92
	movq	%rax, -32(%rbp)	# tmp92, this
# ./core/list.h:121: 			return value;
	movq	-32(%rbp), %rdx	# this, D.57316
# core/object.cpp:1109: 		p_list->push_back(E->get());
	leaq	-48(%rbp), %rax	#, tmp93
	movq	%rdx, %rsi	# D.57316,
	movq	%rax, %rdi	# tmp93,
	call	_ZNK7Variantcv6StringEv	#
.LEHE419:
# core/object.cpp:1109: 		p_list->push_back(E->get());
	leaq	-48(%rbp), %rdx	#, tmp94
	movq	-80(%rbp), %rax	# p_list, tmp95
	movq	%rdx, %rsi	# tmp94,
	movq	%rax, %rdi	# tmp95,
.LEHB420:
	call	_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_	#
.LEHE420:
# core/object.cpp:1109: 		p_list->push_back(E->get());
	leaq	-48(%rbp), %rax	#, tmp96
	movq	%rax, %rdi	# tmp96,
	call	_ZN6StringD1Ev	#
	movq	-24(%rbp), %rax	# E, tmp97
	movq	%rax, -40(%rbp)	# tmp97, this
# ./core/list.h:73: 			return next_ptr;
	movq	-40(%rbp), %rax	# this, tmp98
	movq	24(%rax), %rax	# this_31->next_ptr, D.57320
# core/object.cpp:1107: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.57320, E
# core/object.cpp:1107: 	for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	jmp	.L1719	#
.L1716:
# core/object.cpp:1105: 	List<Variant> keys;
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rdi	# tmp99,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
# core/object.cpp:1111: }
	jmp	.L1725	#
.L1723:
	movq	%rax, %rbx	#, tmp102
# core/object.cpp:1109: 		p_list->push_back(E->get());
	leaq	-48(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN6StringD1Ev	#
	jmp	.L1721	#
.L1722:
	movq	%rax, %rbx	#, tmp101
.L1721:
# core/object.cpp:1105: 	List<Variant> keys;
	leaq	-56(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp101, D.61933
	movq	%rax, %rdi	# D.61933,
.LEHB421:
	call	_Unwind_Resume	#
.LEHE421:
.L1725:
# core/object.cpp:1111: }
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2538:
	.section	.gcc_except_table
.LLSDA2538:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2538-.LLSDACSB2538
.LLSDACSB2538:
	.uleb128 .LEHB419-.LFB2538
	.uleb128 .LEHE419-.LEHB419
	.uleb128 .L1722-.LFB2538
	.uleb128 0
	.uleb128 .LEHB420-.LFB2538
	.uleb128 .LEHE420-.LEHB420
	.uleb128 .L1723-.LFB2538
	.uleb128 0
	.uleb128 .LEHB421-.LFB2538
	.uleb128 .LEHE421-.LEHB421
	.uleb128 0
	.uleb128 0
.LLSDACSE2538:
	.text
	.size	_ZNK6Object13get_meta_listEP4ListI6String16DefaultAllocatorE, .-_ZNK6Object13get_meta_listEP4ListI6String16DefaultAllocatorE
	.section	.text._ZN6Object6SignalD2Ev,"axG",@progbits,_ZN6Object6SignalD5Ev,comdat
	.align 2
	.weak	_ZN6Object6SignalD2Ev
	.type	_ZN6Object6SignalD2Ev, @function
_ZN6Object6SignalD2Ev:
.LFB2541:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:442: 	struct Signal {
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$88, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED1Ev	#
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10MethodInfoD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2541:
	.size	_ZN6Object6SignalD2Ev, .-_ZN6Object6SignalD2Ev
	.weak	_ZN6Object6SignalD1Ev
	.set	_ZN6Object6SignalD1Ev,_ZN6Object6SignalD2Ev
	.section	.text._ZN12PropertyInfoaSERKS_,"axG",@progbits,_ZN12PropertyInfoaSERKS_,comdat
	.align 2
	.weak	_ZN12PropertyInfoaSERKS_
	.type	_ZN12PropertyInfoaSERKS_, @function
_ZN12PropertyInfoaSERKS_:
.LFB2544:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# D.38824, D.38824
# core/object.h:138: struct PropertyInfo {
	movq	-32(%rbp), %rax	# D.38824, tmp93
	movl	(%rax), %edx	# _11(D)->type, _1
	movq	-24(%rbp), %rax	# this, tmp94
	movl	%edx, (%rax)	# _1, this_12(D)->type
	movq	-32(%rbp), %rax	# D.38824, tmp95
	leaq	8(%rax), %rdx	#, _2
	movq	-24(%rbp), %rax	# this, tmp96
	leaq	8(%rax), %rcx	#, _3
	leaq	-16(%rbp), %rax	#, tmp97
	movq	%rcx, %rsi	# _3,
	movq	%rax, %rdi	# tmp97,
	call	_ZN6StringaSERKS_	#
	leaq	-16(%rbp), %rax	#, tmp98
	movq	%rax, %rdi	# tmp98,
	call	_ZN6StringD1Ev	#
	movq	-32(%rbp), %rax	# D.38824, tmp99
	leaq	16(%rax), %rdx	#, _4
	movq	-24(%rbp), %rax	# this, tmp100
	addq	$16, %rax	#, _5
	movq	%rdx, %rsi	# _4,
	movq	%rax, %rdi	# _5,
	call	_ZN10StringNameaSERKS_	#
	movq	-32(%rbp), %rax	# D.38824, tmp101
	movl	24(%rax), %edx	# _11(D)->hint, _6
	movq	-24(%rbp), %rax	# this, tmp102
	movl	%edx, 24(%rax)	# _6, this_12(D)->hint
	movq	-32(%rbp), %rax	# D.38824, tmp103
	leaq	32(%rax), %rdx	#, _7
	movq	-24(%rbp), %rax	# this, tmp104
	leaq	32(%rax), %rcx	#, _8
	leaq	-8(%rbp), %rax	#, tmp105
	movq	%rcx, %rsi	# _8,
	movq	%rax, %rdi	# tmp105,
	call	_ZN6StringaSERKS_	#
	leaq	-8(%rbp), %rax	#, tmp106
	movq	%rax, %rdi	# tmp106,
	call	_ZN6StringD1Ev	#
	movq	-32(%rbp), %rax	# D.38824, tmp107
	movl	40(%rax), %edx	# _11(D)->usage, _9
	movq	-24(%rbp), %rax	# this, tmp108
	movl	%edx, 40(%rax)	# _9, this_12(D)->usage
	movq	-24(%rbp), %rax	# this, _23
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2544:
	.size	_ZN12PropertyInfoaSERKS_, .-_ZN12PropertyInfoaSERKS_
	.section	.text._ZN10MethodInfoaSERKS_,"axG",@progbits,_ZN10MethodInfoaSERKS_,comdat
	.align 2
	.weak	_ZN10MethodInfoaSERKS_
	.type	_ZN10MethodInfoaSERKS_, @function
_ZN10MethodInfoaSERKS_:
.LFB2543:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# D.39820, D.39820
# core/object.h:200: struct MethodInfo {
	movq	-32(%rbp), %rdx	# D.39820, _1
	movq	-24(%rbp), %rcx	# this, _2
	leaq	-8(%rbp), %rax	#, tmp94
	movq	%rcx, %rsi	# _2,
	movq	%rax, %rdi	# tmp94,
	call	_ZN6StringaSERKS_	#
	leaq	-8(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6StringD1Ev	#
	movq	-32(%rbp), %rax	# D.39820, tmp96
	leaq	8(%rax), %rdx	#, _3
	movq	-24(%rbp), %rax	# this, tmp97
	addq	$8, %rax	#, _4
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _4,
	call	_ZN12PropertyInfoaSERKS_	#
	movq	-32(%rbp), %rax	# D.39820, tmp98
	movl	56(%rax), %edx	# _11(D)->flags, _5
	movq	-24(%rbp), %rax	# this, tmp99
	movl	%edx, 56(%rax)	# _5, this_12(D)->flags
	movq	-32(%rbp), %rax	# D.39820, tmp100
	movl	60(%rax), %edx	# _11(D)->id, _6
	movq	-24(%rbp), %rax	# this, tmp101
	movl	%edx, 60(%rax)	# _6, this_12(D)->id
	movq	-32(%rbp), %rax	# D.39820, tmp102
	leaq	64(%rax), %rdx	#, _7
	movq	-24(%rbp), %rax	# this, tmp103
	addq	$64, %rax	#, _8
	movq	%rdx, %rsi	# _7,
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_	#
	movq	-32(%rbp), %rax	# D.39820, tmp104
	leaq	72(%rax), %rdx	#, _9
	movq	-24(%rbp), %rax	# this, tmp105
	addq	$72, %rax	#, _10
	movq	%rdx, %rsi	# _9,
	movq	%rax, %rdi	# _10,
	call	_ZN6VectorI7VariantEaSERKS1_	#
	movq	-24(%rbp), %rax	# this, _22
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2543:
	.size	_ZN10MethodInfoaSERKS_, .-_ZN10MethodInfoaSERKS_
	.section	.text._ZN6Object6SignalaSERKS0_,"axG",@progbits,_ZN6Object6SignalaSERKS0_,comdat
	.align 2
	.weak	_ZN6Object6SignalaSERKS0_
	.type	_ZN6Object6SignalaSERKS0_, @function
_ZN6Object6SignalaSERKS0_:
.LFB2545:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.39832, D.39832
# core/object.h:442: 	struct Signal {
	movq	-16(%rbp), %rdx	# D.39832, _1
	movq	-8(%rbp), %rax	# this, _2
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# _2,
	call	_ZN10MethodInfoaSERKS_	#
	movq	-16(%rbp), %rax	# D.39832, tmp89
	leaq	88(%rax), %rdx	#, _3
	movq	-8(%rbp), %rax	# this, tmp90
	addq	$88, %rax	#, _4
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _4,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_	#
	movq	-16(%rbp), %rax	# D.39832, tmp91
	movl	96(%rax), %edx	# _6(D)->lock, _5
	movq	-8(%rbp), %rax	# this, tmp92
	movl	%edx, 96(%rax)	# _5, this_7(D)->lock
	movq	-8(%rbp), %rax	# this, _12
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2545:
	.size	_ZN6Object6SignalaSERKS0_, .-_ZN6Object6SignalaSERKS0_
	.section	.rodata
	.align 8
.LC40:
	.string	"Condition ' p_signal.name == \"\" ' is true."
.LC41:
	.string	"add_user_signal"
	.align 8
.LC42:
	.string	"Condition ' ClassDB::has_signal(get_class_name(), p_signal.name) ' is true."
	.align 8
.LC43:
	.string	"Condition ' signal_map.has(p_signal.name) ' is true."
	.text
	.align 2
	.globl	_ZN6Object15add_user_signalERK10MethodInfo
	.type	_ZN6Object15add_user_signalERK10MethodInfo, @function
_ZN6Object15add_user_signalERK10MethodInfo:
.LFB2539:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2539
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)	# this, this
	movq	%rsi, -176(%rbp)	# p_signal, p_signal
# core/object.cpp:1115: 	ERR_FAIL_COND(p_signal.name == "");
	movq	-176(%rbp), %rax	# p_signal, _1
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# _1,
.LEHB422:
	call	_ZNK6StringeqEPKc	#
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	setne	%al	#, retval.193_28
	testb	%al, %al	# retval.193_28
	je	.L1734	#,
# core/object.cpp:1115: 	ERR_FAIL_COND(p_signal.name == "");
	movl	$0, %r8d	#,
	movl	$.LC40, %ecx	#,
	movl	$1115, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC41, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L1733	#
.L1734:
# core/object.cpp:1115: 	ERR_FAIL_COND(p_signal.name == "");
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1116: 	ERR_FAIL_COND(ClassDB::has_signal(get_class_name(), p_signal.name));
	movq	-176(%rbp), %rdx	# p_signal, _5
	leaq	-56(%rbp), %rax	#, tmp109
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp109,
	call	_ZN10StringNameC1ERK6String	#
.LEHE422:
	movq	-168(%rbp), %rax	# this, tmp110
	movq	%rax, -24(%rbp)	# tmp110, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-24(%rbp), %rax	# this, tmp111
	movq	112(%rax), %rax	# this_73->_class_ptr, _74
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _74
	jne	.L1736	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-24(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_73->_vptr.Object, _75
	addq	$48, %rax	#, _76
	movq	(%rax), %rdx	# *_76, _77
# core/object.h:647: 			return *_get_class_namev();
	movq	-24(%rbp), %rax	# this, tmp113
	movq	%rax, %rdi	# tmp113,
.LEHB423:
	call	*%rdx	# _77
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L1737	#
.L1736:
# core/object.h:649: 			return *_class_ptr;
	movq	-24(%rbp), %rax	# this, tmp114
	movq	112(%rax), %rax	# this_73->_class_ptr, D.59215
.L1737:
# core/object.cpp:1116: 	ERR_FAIL_COND(ClassDB::has_signal(get_class_name(), p_signal.name));
	leaq	-48(%rbp), %rdx	#, tmp115
	movq	%rax, %rsi	# D.59215,
	movq	%rdx, %rdi	# tmp115,
	call	_ZN10StringNameC1ERKS_	#
.LEHE423:
# core/object.cpp:1116: 	ERR_FAIL_COND(ClassDB::has_signal(get_class_name(), p_signal.name));
	leaq	-56(%rbp), %rdx	#, tmp116
	leaq	-48(%rbp), %rax	#, tmp117
	movq	%rdx, %rsi	# tmp116,
	movq	%rax, %rdi	# tmp117,
.LEHB424:
	call	_ZN7ClassDB10has_signalE10StringNameS0_	#
.LEHE424:
	movzbl	%al, %eax	# _7, _8
	testq	%rax, %rax	# _9
	setne	%bl	#, retval.194_36
	leaq	-48(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZN10StringNameD1Ev	#
	leaq	-56(%rbp), %rax	#, tmp119
	movq	%rax, %rdi	# tmp119,
	call	_ZN10StringNameD1Ev	#
	testb	%bl, %bl	# retval.194_36
	je	.L1738	#,
# core/object.cpp:1116: 	ERR_FAIL_COND(ClassDB::has_signal(get_class_name(), p_signal.name));
	movl	$0, %r8d	#,
	movl	$.LC42, %ecx	#,
	movl	$1116, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC41, %edi	#,
.LEHB425:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L1733	#
.L1738:
# core/object.cpp:1116: 	ERR_FAIL_COND(ClassDB::has_signal(get_class_name(), p_signal.name));
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1117: 	ERR_FAIL_COND(signal_map.has(p_signal.name));
	movq	-168(%rbp), %rax	# this, tmp120
	leaq	8(%rax), %rbx	#, _10
	movq	-176(%rbp), %rdx	# p_signal, _11
	leaq	-40(%rbp), %rax	#, tmp121
	movq	%rdx, %rsi	# _11,
	movq	%rax, %rdi	# tmp121,
	call	_ZN10StringNameC1ERK6String	#
.LEHE425:
	leaq	-40(%rbp), %rax	#, tmp122
	movq	%rax, %rsi	# tmp122,
	movq	%rbx, %rdi	# _10,
.LEHB426:
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_	#
.LEHE426:
	movzbl	%al, %eax	# _12, _13
	testq	%rax, %rax	# _14
	setne	%bl	#, retval.195_45
	leaq	-40(%rbp), %rax	#, tmp123
	movq	%rax, %rdi	# tmp123,
	call	_ZN10StringNameD1Ev	#
	testb	%bl, %bl	# retval.195_45
	je	.L1739	#,
# core/object.cpp:1117: 	ERR_FAIL_COND(signal_map.has(p_signal.name));
	movl	$0, %r8d	#,
	movl	$.LC43, %ecx	#,
	movl	$1117, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC41, %edi	#,
.LEHB427:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L1733	#
.L1739:
# core/object.cpp:1117: 	ERR_FAIL_COND(signal_map.has(p_signal.name));
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1118: 	Signal s;
	leaq	-160(%rbp), %rax	#, tmp124
	movq	%rax, %rdi	# tmp124,
	call	_ZN6Object6SignalC1Ev	#
.LEHE427:
# core/object.cpp:1119: 	s.user = p_signal;
	movq	-176(%rbp), %rdx	# p_signal, tmp125
	leaq	-160(%rbp), %rax	#, tmp126
	movq	%rdx, %rsi	# tmp125,
	movq	%rax, %rdi	# tmp126,
.LEHB428:
	call	_ZN10MethodInfoaSERKS_	#
# core/object.cpp:1120: 	signal_map[p_signal.name] = s;
	movq	-176(%rbp), %rdx	# p_signal, _15
# core/object.cpp:1120: 	signal_map[p_signal.name] = s;
	leaq	-32(%rbp), %rax	#, tmp127
	movq	%rdx, %rsi	# _15,
	movq	%rax, %rdi	# tmp127,
	call	_ZN10StringNameC1ERK6String	#
.LEHE428:
# core/object.cpp:1120: 	signal_map[p_signal.name] = s;
	movq	-168(%rbp), %rax	# this, tmp128
	leaq	8(%rax), %rdx	#, _16
	leaq	-32(%rbp), %rax	#, tmp129
	movq	%rax, %rsi	# tmp129,
	movq	%rdx, %rdi	# _16,
.LEHB429:
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
	movq	%rax, %rdx	#, _17
# core/object.cpp:1120: 	signal_map[p_signal.name] = s;
	leaq	-160(%rbp), %rax	#, tmp130
	movq	%rax, %rsi	# tmp130,
	movq	%rdx, %rdi	# _17,
	call	_ZN6Object6SignalaSERKS0_	#
.LEHE429:
# core/object.cpp:1120: 	signal_map[p_signal.name] = s;
	leaq	-32(%rbp), %rax	#, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1118: 	Signal s;
	leaq	-160(%rbp), %rax	#, tmp132
	movq	%rax, %rdi	# tmp132,
	call	_ZN6Object6SignalD1Ev	#
	jmp	.L1733	#
.L1747:
	movq	%rax, %rbx	#, tmp135
# core/object.cpp:1116: 	ERR_FAIL_COND(ClassDB::has_signal(get_class_name(), p_signal.name));
	leaq	-48(%rbp), %rax	#, tmp133
	movq	%rax, %rdi	# tmp133,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1742	#
.L1746:
	movq	%rax, %rbx	#, tmp134
.L1742:
# core/object.cpp:1116: 	ERR_FAIL_COND(ClassDB::has_signal(get_class_name(), p_signal.name));
	leaq	-56(%rbp), %rax	#, tmp138
	movq	%rax, %rdi	# tmp138,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp134, D.61938
	movq	%rax, %rdi	# D.61938,
.LEHB430:
	call	_Unwind_Resume	#
.L1748:
	movq	%rax, %rbx	#, tmp140
# core/object.cpp:1117: 	ERR_FAIL_COND(signal_map.has(p_signal.name));
	leaq	-40(%rbp), %rax	#, tmp139
	movq	%rax, %rdi	# tmp139,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp140, D.61939
	movq	%rax, %rdi	# D.61939,
	call	_Unwind_Resume	#
.L1750:
	movq	%rax, %rbx	#, tmp143
# core/object.cpp:1120: 	signal_map[p_signal.name] = s;
	leaq	-32(%rbp), %rax	#, tmp141
	movq	%rax, %rdi	# tmp141,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1745	#
.L1749:
	movq	%rax, %rbx	#, tmp142
.L1745:
# core/object.cpp:1118: 	Signal s;
	leaq	-160(%rbp), %rax	#, tmp146
	movq	%rax, %rdi	# tmp146,
	call	_ZN6Object6SignalD1Ev	#
	movq	%rbx, %rax	# tmp142, D.61940
	movq	%rax, %rdi	# D.61940,
	call	_Unwind_Resume	#
.LEHE430:
.L1733:
# core/object.cpp:1121: }
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2539:
	.section	.gcc_except_table
.LLSDA2539:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2539-.LLSDACSB2539
.LLSDACSB2539:
	.uleb128 .LEHB422-.LFB2539
	.uleb128 .LEHE422-.LEHB422
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB423-.LFB2539
	.uleb128 .LEHE423-.LEHB423
	.uleb128 .L1746-.LFB2539
	.uleb128 0
	.uleb128 .LEHB424-.LFB2539
	.uleb128 .LEHE424-.LEHB424
	.uleb128 .L1747-.LFB2539
	.uleb128 0
	.uleb128 .LEHB425-.LFB2539
	.uleb128 .LEHE425-.LEHB425
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB426-.LFB2539
	.uleb128 .LEHE426-.LEHB426
	.uleb128 .L1748-.LFB2539
	.uleb128 0
	.uleb128 .LEHB427-.LFB2539
	.uleb128 .LEHE427-.LEHB427
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB428-.LFB2539
	.uleb128 .LEHE428-.LEHB428
	.uleb128 .L1749-.LFB2539
	.uleb128 0
	.uleb128 .LEHB429-.LFB2539
	.uleb128 .LEHE429-.LEHB429
	.uleb128 .L1750-.LFB2539
	.uleb128 0
	.uleb128 .LEHB430-.LFB2539
	.uleb128 .LEHE430-.LEHB430
	.uleb128 0
	.uleb128 0
.LLSDACSE2539:
	.text
	.size	_ZN6Object15add_user_signalERK10MethodInfo, .-_ZN6Object15add_user_signalERK10MethodInfo
	.align 2
	.globl	_ZNK6Object16_has_user_signalERK10StringName
	.type	_ZNK6Object16_has_user_signalERK10StringName, @function
_ZNK6Object16_has_user_signalERK10StringName:
.LFB2546:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_name, p_name
# core/object.cpp:1125: 	if (!signal_map.has(p_name))
	movq	-56(%rbp), %rax	# this, tmp97
	leaq	8(%rax), %rdx	#, _1
	movq	-64(%rbp), %rax	# p_name, tmp98
	movq	%rax, %rsi	# tmp98,
	movq	%rdx, %rdi	# _1,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_	#
# core/object.cpp:1125: 	if (!signal_map.has(p_name))
	xorl	$1, %eax	#, retval.200_14
# core/object.cpp:1125: 	if (!signal_map.has(p_name))
	testb	%al, %al	# retval.200_14
	je	.L1752	#,
# core/object.cpp:1126: 		return false;
	movl	$0, %eax	#, _7
	jmp	.L1753	#
.L1752:
# core/object.cpp:1127: 	return signal_map[p_name].user.name.length() > 0;
	movq	-56(%rbp), %rax	# this, tmp99
	leaq	8(%rax), %rdx	#, _3
	movq	-64(%rbp), %rax	# p_name, tmp100
	movq	%rax, %rsi	# tmp100,
	movq	%rdx, %rdi	# _3,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
	movq	%rax, -8(%rbp)	# _5, this
	movq	-8(%rbp), %rax	# this, tmp101
	movq	%rax, -16(%rbp)	# tmp101, this
# ./core/ustring.h:157: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-16(%rbp), %rax	# this, _22
	movq	%rax, -24(%rbp)	# _22, this
	movq	-24(%rbp), %rax	# this, tmp102
	movq	%rax, -32(%rbp)	# tmp102, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-32(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_24->_ptr, _25
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _25
	jne	.L1754	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _26
	jmp	.L1755	#
.L1754:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-32(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_24->_ptr, _27
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _26
.L1755:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -40(%rbp)	# _26, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -40(%rbp)	#, size
	je	.L1756	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-40(%rbp), %rax	# size, tmp105
	movl	(%rax), %eax	# *size_31, _32
	jmp	.L1757	#
.L1756:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _33
.L1757:
# ./core/ustring.h:157: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/ustring.h:200: 		int s = size();
	movl	%eax, -44(%rbp)	# _33, s
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	cmpl	$0, -44(%rbp)	#, s
	je	.L1759	#,
	movl	-44(%rbp), %eax	# s, tmp106
	subl	$1, %eax	#, D.55582
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	jmp	.L1762	#
.L1759:
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	movl	$0, %eax	#, D.55582
# ./core/ustring.h:201: 		return s ? (s - 1) : 0; // length does not include zero
	nop	
.L1762:
# core/object.cpp:1127: 	return signal_map[p_name].user.name.length() > 0;
	testl	%eax, %eax	# D.55582
	setg	%al	#, _7
.L1753:
# core/object.cpp:1128: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2546:
	.size	_ZNK6Object16_has_user_signalERK10StringName, .-_ZNK6Object16_has_user_signalERK10StringName
	.section	.rodata
	.align 8
.LC44:
	.string	"Condition ' p_argcount < 1 ' is true. returned: Variant()"
.LC45:
	.string	"_emit_signal"
	.align 8
.LC46:
	.string	"Condition ' p_args[0]->get_type() != Variant::STRING ' is true. returned: Variant()"
	.text
	.align 2
	.globl	_ZN6Object12_emit_signalEPPK7VariantiRNS0_9CallErrorE
	.type	_ZN6Object12_emit_signalEPPK7VariantiRNS0_9CallErrorE, @function
_ZN6Object12_emit_signalEPPK7VariantiRNS0_9CallErrorE:
.LFB2547:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2547
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
	movq	%rdx, -104(%rbp)	# p_args, p_args
	movl	%ecx, -108(%rbp)	# p_argcount, p_argcount
	movq	%r8, -120(%rbp)	# r_error, r_error
# core/object.cpp:1139: 	r_error.error = Variant::CallError::CALL_ERROR_TOO_FEW_ARGUMENTS;
	movq	-120(%rbp), %rax	# r_error, tmp96
	movl	$4, (%rax)	#, r_error_17(D)->error
# core/object.cpp:1141: 	ERR_FAIL_COND_V(p_argcount < 1, Variant());
	cmpl	$0, -108(%rbp)	#, p_argcount
	setle	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L1764	#,
# core/object.cpp:1141: 	ERR_FAIL_COND_V(p_argcount < 1, Variant());
	movl	$0, %r8d	#,
	movl	$.LC44, %ecx	#,
	movl	$1141, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC45, %edi	#,
.LEHB431:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-88(%rbp), %rax	# <retval>, tmp97
	movq	%rax, -40(%rbp)	# tmp97, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-40(%rbp), %rax	# this, tmp98
	movl	$0, (%rax)	#, this_42->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:1141: 	ERR_FAIL_COND_V(p_argcount < 1, Variant());
	jmp	.L1763	#
.L1764:
# core/object.cpp:1141: 	ERR_FAIL_COND_V(p_argcount < 1, Variant());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1142: 	if (p_args[0]->get_type() != Variant::STRING) {
	movq	-104(%rbp), %rax	# p_args, tmp99
	movq	(%rax), %rax	# *p_args_21(D), _4
	movq	%rax, -48(%rbp)	# _4, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-48(%rbp), %rax	# this, tmp100
	movl	(%rax), %eax	# this_43->type, D.58585
# core/object.cpp:1142: 	if (p_args[0]->get_type() != Variant::STRING) {
	cmpl	$4, %eax	#, D.58585
	setne	%al	#, retval.202_22
# core/object.cpp:1142: 	if (p_args[0]->get_type() != Variant::STRING) {
	testb	%al, %al	# retval.202_22
	je	.L1767	#,
# core/object.cpp:1143: 		r_error.error = Variant::CallError::CALL_ERROR_INVALID_ARGUMENT;
	movq	-120(%rbp), %rax	# r_error, tmp101
	movl	$2, (%rax)	#, r_error_17(D)->error
# core/object.cpp:1144: 		r_error.argument = 0;
	movq	-120(%rbp), %rax	# r_error, tmp102
	movl	$0, 4(%rax)	#, r_error_17(D)->argument
# core/object.cpp:1145: 		r_error.expected = Variant::STRING;
	movq	-120(%rbp), %rax	# r_error, tmp103
	movl	$4, 8(%rax)	#, r_error_17(D)->expected
# core/object.cpp:1146: 		ERR_FAIL_COND_V(p_args[0]->get_type() != Variant::STRING, Variant());
	movq	-104(%rbp), %rax	# p_args, tmp104
	movq	(%rax), %rax	# *p_args_21(D), _6
	movq	%rax, -56(%rbp)	# _6, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-56(%rbp), %rax	# this, tmp105
	movl	(%rax), %eax	# this_45->type, D.58589
# core/object.cpp:1146: 		ERR_FAIL_COND_V(p_args[0]->get_type() != Variant::STRING, Variant());
	cmpl	$4, %eax	#, D.58589
	setne	%al	#, _8
	movzbl	%al, %eax	# _8, _9
	testq	%rax, %rax	# _10
	setne	%al	#, retval.203_26
	testb	%al, %al	# retval.203_26
	je	.L1769	#,
# core/object.cpp:1146: 		ERR_FAIL_COND_V(p_args[0]->get_type() != Variant::STRING, Variant());
	movl	$0, %r8d	#,
	movl	$.LC46, %ecx	#,
	movl	$1146, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC45, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-88(%rbp), %rax	# <retval>, tmp106
	movq	%rax, -64(%rbp)	# tmp106, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-64(%rbp), %rax	# this, tmp107
	movl	$0, (%rax)	#, this_47->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:1146: 		ERR_FAIL_COND_V(p_args[0]->get_type() != Variant::STRING, Variant());
	jmp	.L1763	#
.L1769:
# core/object.cpp:1146: 		ERR_FAIL_COND_V(p_args[0]->get_type() != Variant::STRING, Variant());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
.L1767:
# core/object.cpp:1149: 	r_error.error = Variant::CallError::CALL_OK;
	movq	-120(%rbp), %rax	# r_error, tmp108
	movl	$0, (%rax)	#, r_error_17(D)->error
# core/object.cpp:1151: 	StringName signal = *p_args[0];
	movq	-104(%rbp), %rax	# p_args, tmp109
	movq	(%rax), %rdx	# *p_args_21(D), _11
	leaq	-80(%rbp), %rax	#, tmp110
	movq	%rdx, %rsi	# _11,
	movq	%rax, %rdi	# tmp110,
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE431:
# core/object.cpp:1153: 	const Variant **args = NULL;
	movq	$0, -24(%rbp)	#, args
# core/object.cpp:1155: 	int argc = p_argcount - 1;
	movl	-108(%rbp), %eax	# p_argcount, tmp114
	subl	$1, %eax	#, tmp113
	movl	%eax, -28(%rbp)	# tmp113, argc
# core/object.cpp:1156: 	if (argc) {
	cmpl	$0, -28(%rbp)	#, argc
	je	.L1770	#,
# core/object.cpp:1157: 		args = &p_args[1];
	movq	-104(%rbp), %rax	# p_args, tmp118
	addq	$8, %rax	#, tmp117
	movq	%rax, -24(%rbp)	# tmp117, args
.L1770:
# core/object.cpp:1160: 	emit_signal(signal, args, argc);
	movl	-28(%rbp), %ecx	# argc, tmp119
	movq	-24(%rbp), %rdx	# args, tmp120
	leaq	-80(%rbp), %rsi	#, tmp121
	movq	-96(%rbp), %rax	# this, tmp122
	movq	%rax, %rdi	# tmp122,
.LEHB432:
	call	_ZN6Object11emit_signalERK10StringNamePPK7Varianti	#
.LEHE432:
	movq	-88(%rbp), %rax	# <retval>, tmp123
	movq	%rax, -72(%rbp)	# tmp123, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-72(%rbp), %rax	# this, tmp124
	movl	$0, (%rax)	#, this_48->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:1151: 	StringName signal = *p_args[0];
	leaq	-80(%rbp), %rax	#, tmp125
	movq	%rax, %rdi	# tmp125,
	call	_ZN10StringNameD1Ev	#
	jmp	.L1763	#
.L1773:
	movq	%rax, %rbx	#, tmp127
	leaq	-80(%rbp), %rax	#, tmp126
	movq	%rax, %rdi	# tmp126,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp127, D.61945
	movq	%rax, %rdi	# D.61945,
.LEHB433:
	call	_Unwind_Resume	#
.LEHE433:
.L1763:
# core/object.cpp:1163: }
	movq	-88(%rbp), %rax	# <retval>,
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2547:
	.section	.gcc_except_table
.LLSDA2547:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2547-.LLSDACSB2547
.LLSDACSB2547:
	.uleb128 .LEHB431-.LFB2547
	.uleb128 .LEHE431-.LEHB431
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB432-.LFB2547
	.uleb128 .LEHE432-.LEHB432
	.uleb128 .L1773-.LFB2547
	.uleb128 0
	.uleb128 .LEHB433-.LFB2547
	.uleb128 .LEHE433-.LEHB433
	.uleb128 0
	.uleb128 0
.LLSDACSE2547:
	.text
	.size	_ZN6Object12_emit_signalEPPK7VariantiRNS0_9CallErrorE, .-_ZN6Object12_emit_signalEPPK7VariantiRNS0_9CallErrorE
	.section	.text._ZN27_ObjectSignalDisconnectDataC2Ev,"axG",@progbits,_ZN27_ObjectSignalDisconnectDataC5Ev,comdat
	.align 2
	.weak	_ZN27_ObjectSignalDisconnectDataC2Ev
	.type	_ZN27_ObjectSignalDisconnectDataC2Ev, @function
_ZN27_ObjectSignalDisconnectDataC2Ev:
.LFB2550:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2550
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# core/object.cpp:1130: struct _ObjectSignalDisconnectData {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB434:
	call	_ZN10StringNameC1Ev	#
.LEHE434:
	movq	-24(%rbp), %rax	# this, tmp87
	addq	$16, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB435:
	call	_ZN10StringNameC1Ev	#
.LEHE435:
	jmp	.L1777	#
.L1776:
	movq	%rax, %rbx	#, tmp88
	movq	-24(%rbp), %rax	# this, _4
	movq	%rax, %rdi	# _4,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp88, D.61951
	movq	%rax, %rdi	# D.61951,
.LEHB436:
	call	_Unwind_Resume	#
.LEHE436:
.L1777:
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2550:
	.section	.gcc_except_table
.LLSDA2550:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2550-.LLSDACSB2550
.LLSDACSB2550:
	.uleb128 .LEHB434-.LFB2550
	.uleb128 .LEHE434-.LEHB434
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB435-.LFB2550
	.uleb128 .LEHE435-.LEHB435
	.uleb128 .L1776-.LFB2550
	.uleb128 0
	.uleb128 .LEHB436-.LFB2550
	.uleb128 .LEHE436-.LEHB436
	.uleb128 0
	.uleb128 0
.LLSDACSE2550:
	.section	.text._ZN27_ObjectSignalDisconnectDataC2Ev,"axG",@progbits,_ZN27_ObjectSignalDisconnectDataC5Ev,comdat
	.size	_ZN27_ObjectSignalDisconnectDataC2Ev, .-_ZN27_ObjectSignalDisconnectDataC2Ev
	.weak	_ZN27_ObjectSignalDisconnectDataC1Ev
	.set	_ZN27_ObjectSignalDisconnectDataC1Ev,_ZN27_ObjectSignalDisconnectDataC2Ev
	.section	.text._ZN27_ObjectSignalDisconnectDataD2Ev,"axG",@progbits,_ZN27_ObjectSignalDisconnectDataD5Ev,comdat
	.align 2
	.weak	_ZN27_ObjectSignalDisconnectDataD2Ev
	.type	_ZN27_ObjectSignalDisconnectDataD2Ev, @function
_ZN27_ObjectSignalDisconnectDataD2Ev:
.LFB2553:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.cpp:1130: struct _ObjectSignalDisconnectData {
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$16, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2553:
	.size	_ZN27_ObjectSignalDisconnectDataD2Ev, .-_ZN27_ObjectSignalDisconnectDataD2Ev
	.weak	_ZN27_ObjectSignalDisconnectDataD1Ev
	.set	_ZN27_ObjectSignalDisconnectDataD1Ev,_ZN27_ObjectSignalDisconnectDataD2Ev
	.section	.rodata
.LC47:
	.string	"./core/vector.h"
.LC48:
	.string	"operator[]"
	.align 8
.LC49:
	.string	"((Vector<T> *)(this))->_cowdata.size()"
.LC50:
	.string	"': "
	.align 8
.LC51:
	.string	"Error calling method from signal '"
.LC52:
	.string	"emit_signal"
	.text
	.align 2
	.globl	_ZN6Object11emit_signalERK10StringNamePPK7Varianti
	.type	_ZN6Object11emit_signalERK10StringNamePPK7Varianti, @function
_ZN6Object11emit_signalERK10StringNamePPK7Varianti:
.LFB2548:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2548
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$872, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -856(%rbp)	# this, this
	movq	%rsi, -864(%rbp)	# p_name, p_name
	movq	%rdx, -872(%rbp)	# p_args, p_args
	movl	%ecx, -876(%rbp)	# p_argcount, p_argcount
# core/object.cpp:1167: 	if (_block_signals)
	movq	-856(%rbp), %rax	# this, tmp301
	movzbl	32(%rax), %eax	# this_81(D)->_block_signals, _1
# core/object.cpp:1167: 	if (_block_signals)
	testb	%al, %al	# _1
	je	.L1780	#,
# core/object.cpp:1168: 		return ERR_CANT_ACQUIRE_RESOURCE; //no emit, signals blocked
	movl	$28, %ebx	#, _53
	jmp	.L1907	#
.L1780:
# core/object.cpp:1170: 	Signal *s = signal_map.getptr(p_name);
	movq	-856(%rbp), %rax	# this, tmp302
	addq	$8, %rax	#, _2
	movq	%rax, -104(%rbp)	# _2, this
	movq	-864(%rbp), %rax	# p_name, tmp303
	movq	%rax, -112(%rbp)	# tmp303, p_key
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	movq	-104(%rbp), %rax	# this, tmp304
	movq	(%rax), %rax	# this_197->hash_table, _199
	testq	%rax, %rax	# _199
	sete	%al	#, _200
	movzbl	%al, %eax	# _200, _201
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _202
	je	.L1782	#,
# ./core/hash_map.h:322: 			return NULL;
	movl	$0, %eax	#, D.58335
	jmp	.L1783	#
.L1782:
	movq	-104(%rbp), %rax	# this, tmp305
	movq	%rax, -120(%rbp)	# tmp305, this
	movq	-112(%rbp), %rax	# p_key, tmp306
	movq	%rax, -128(%rbp)	# tmp306, p_key
	movq	-128(%rbp), %rax	# p_key, tmp307
	movq	%rax, -136(%rbp)	# tmp307, p_string_name
	movq	-136(%rbp), %rax	# p_string_name, tmp308
	movq	%rax, -144(%rbp)	# tmp308, this
# ./core/string_name.h:112: 		if (_data)
	movq	-144(%rbp), %rax	# this, tmp309
	movq	(%rax), %rax	# this_207->_data, _208
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _208
	je	.L1784	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-144(%rbp), %rax	# this, tmp310
	movq	(%rax), %rax	# this_207->_data, _209
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _209->hash, _210
	jmp	.L1785	#
.L1784:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _210
.L1785:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -148(%rbp)	# _210, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-120(%rbp), %rax	# this, tmp311
	movzbl	8(%rax), %eax	# this_204->hash_table_power, _217
	movzbl	%al, %eax	# _217, _218
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp312
	movl	%eax, %ecx	# _218, tmp556
	sall	%cl, %edx	# tmp556, tmp312
	movl	%edx, %eax	# tmp312, _219
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _220
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-148(%rbp), %eax	# hash, tmp314
	movl	%eax, -152(%rbp)	# tmp314, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-120(%rbp), %rax	# this, tmp315
	movq	(%rax), %rax	# this_204->hash_table, _223
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-152(%rbp), %edx	# index, _224
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _225
	addq	%rdx, %rax	# _225, _226
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_226, tmp316
	movq	%rax, -160(%rbp)	# tmp316, e
.L1792:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -160(%rbp)	#, e
	je	.L1787	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-160(%rbp), %rax	# e, tmp317
	movl	(%rax), %eax	# e_228->hash, _229
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -148(%rbp)	# _229, hash
	jne	.L1788	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-160(%rbp), %rax	# e, tmp318
	leaq	16(%rax), %rdx	#, _230
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-128(%rbp), %rax	# p_key, tmp319
	movq	%rax, %rsi	# tmp319,
	movq	%rdx, %rdi	# _230,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _231
	je	.L1788	#,
	movl	$1, %eax	#, iftmp.197_232
	jmp	.L1789	#
.L1788:
	movl	$0, %eax	#, iftmp.197_232
.L1789:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_232
	je	.L1790	#,
# ./core/hash_map.h:198: 				return e;
	movq	-160(%rbp), %rax	# e, _236
	jmp	.L1791	#
.L1790:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-160(%rbp), %rax	# e, tmp320
	movq	8(%rax), %rax	# e_228->next, tmp321
	movq	%rax, -160(%rbp)	# tmp321, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L1792	#
.L1787:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _236
.L1791:
# ./core/hash_map.h:324: 		Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -168(%rbp)	# _236, e
# ./core/hash_map.h:326: 		if (e)
	cmpq	$0, -168(%rbp)	#, e
	je	.L1793	#,
# ./core/hash_map.h:327: 			return &e->pair.data;
	movq	-168(%rbp), %rax	# e, tmp322
	addq	$24, %rax	#, D.58335
	jmp	.L1783	#
.L1793:
# ./core/hash_map.h:329: 		return NULL;
	movl	$0, %eax	#, D.58335
.L1783:
# core/object.cpp:1170: 	Signal *s = signal_map.getptr(p_name);
	movq	%rax, -56(%rbp)	# D.58335, s
# core/object.cpp:1171: 	if (!s) {
	cmpq	$0, -56(%rbp)	#, s
	jne	.L1794	#,
# core/object.cpp:1181: 		return ERR_UNAVAILABLE;
	movl	$2, %ebx	#, _53
	jmp	.L1907	#
.L1794:
# core/object.cpp:1184: 	List<_ObjectSignalDisconnectData> disconnect_data;
	leaq	-776(%rbp), %rax	#, tmp323
	movq	%rax, %rdi	# tmp323,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC1Ev	#
# core/object.cpp:1189: 	VMap<Signal::Target, Signal::Slot> slot_map = s->slot_map;
	movq	-56(%rbp), %rax	# s, tmp324
	addq	$88, %rax	#, _3
	movq	%rax, -176(%rbp)	# _3, p_from
# ./core/vmap.h:207: 	_FORCE_INLINE_ VMap(const VMap &p_from) { _cowdata._ref(p_from._cowdata); }
	leaq	-784(%rbp), %rax	#, _247
	movq	%rax, -184(%rbp)	# _247, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-184(%rbp), %rax	# this, tmp325
	movq	$0, (%rax)	#, this_248->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vmap.h:207: 	_FORCE_INLINE_ VMap(const VMap &p_from) { _cowdata._ref(p_from._cowdata); }
	leaq	-784(%rbp), %rax	#, _249
# ./core/vmap.h:207: 	_FORCE_INLINE_ VMap(const VMap &p_from) { _cowdata._ref(p_from._cowdata); }
	movq	-176(%rbp), %rdx	# p_from, _250
# ./core/vmap.h:207: 	_FORCE_INLINE_ VMap(const VMap &p_from) { _cowdata._ref(p_from._cowdata); }
	movq	%rdx, %rsi	# _250,
	movq	%rax, %rdi	# _249,
.LEHB437:
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_	#
.LEHE437:
# ./core/vmap.h:207: 	_FORCE_INLINE_ VMap(const VMap &p_from) { _cowdata._ref(p_from._cowdata); }
	jmp	.L1929	#
.L1925:
	movq	%rax, %rbx	#, tmp329
# ./core/vmap.h:207: 	_FORCE_INLINE_ VMap(const VMap &p_from) { _cowdata._ref(p_from._cowdata); }
	leaq	-784(%rbp), %rax	#, _251
	movq	%rax, -192(%rbp)	# _251, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-192(%rbp), %rax	# this, tmp326
	movq	(%rax), %rdx	# this_252->_ptr, _253
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-192(%rbp), %rax	# this, tmp327
	movq	%rdx, %rsi	# _253,
	movq	%rax, %rdi	# tmp327,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	jmp	.L1797	#
.L1929:
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	leaq	-784(%rbp), %rax	#, _254
	movq	%rax, -200(%rbp)	# _254, this
	movq	-200(%rbp), %rax	# this, tmp332
	movq	%rax, -208(%rbp)	# tmp332, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-208(%rbp), %rax	# this, tmp333
	movq	(%rax), %rax	# this_256->_ptr, _257
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _257
	jne	.L1798	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _258
	jmp	.L1799	#
.L1798:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-208(%rbp), %rax	# this, tmp334
	movq	(%rax), %rax	# this_256->_ptr, _259
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _258
.L1799:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -216(%rbp)	# _258, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -216(%rbp)	#, size
	je	.L1800	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-216(%rbp), %rax	# size, tmp335
	movl	(%rax), %eax	# *size_263, _264
	jmp	.L1801	#
.L1800:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58358
.L1801:
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1191: 	int ssize = slot_map.size();
	movl	%eax, -60(%rbp)	# D.58358, ssize
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	leaq	-800(%rbp), %rax	#, tmp336
	addq	$8, %rax	#, _271
	movq	%rax, -224(%rbp)	# _271, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-224(%rbp), %rax	# this, tmp337
	movq	$0, (%rax)	#, this_272->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:1197: 	Error err = OK;
	movl	$0, -20(%rbp)	#, err
# core/object.cpp:1199: 	for (int i = 0; i < ssize; i++) {
	movl	$0, -24(%rbp)	#, i
.L1897:
# core/object.cpp:1199: 	for (int i = 0; i < ssize; i++) {
	movl	-24(%rbp), %eax	# i, tmp338
	cmpl	-60(%rbp), %eax	# ssize, tmp338
	jge	.L1803	#,
# core/object.cpp:1201: 		const Connection &c = slot_map.getv(i).conn;
	movl	-24(%rbp), %edx	# i, tmp339
	leaq	-784(%rbp), %rax	#, tmp340
	movl	%edx, %esi	# tmp339,
	movq	%rax, %rdi	# tmp340,
.LEHB438:
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi	#
# core/object.cpp:1201: 		const Connection &c = slot_map.getv(i).conn;
	addq	$8, %rax	#, tmp341
	movq	%rax, -72(%rbp)	# tmp341, c
# core/object.cpp:1208: 		target = c.target;
	movq	-72(%rbp), %rax	# c, tmp342
	movq	16(%rax), %rax	# c_92->target, tmp343
	movq	%rax, -80(%rbp)	# tmp343, target
# core/object.cpp:1211: 		const Variant **args = p_args;
	movq	-872(%rbp), %rax	# p_args, tmp344
	movq	%rax, -32(%rbp)	# tmp344, args
# core/object.cpp:1212: 		int argc = p_argcount;
	movl	-876(%rbp), %eax	# p_argcount, tmp345
	movl	%eax, -36(%rbp)	# tmp345, argc
# core/object.cpp:1214: 		if (c.binds.size()) {
	movq	-72(%rbp), %rax	# c, tmp346
	addq	$40, %rax	#, _5
	movq	%rax, -232(%rbp)	# _5, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-232(%rbp), %rax	# this, tmp347
	addq	$8, %rax	#, _274
	movq	%rax, -240(%rbp)	# _274, this
	movq	-240(%rbp), %rax	# this, tmp348
	movq	%rax, -248(%rbp)	# tmp348, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-248(%rbp), %rax	# this, tmp349
	movq	(%rax), %rax	# this_276->_ptr, _277
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _277
	jne	.L1804	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _278
	jmp	.L1805	#
.L1804:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-248(%rbp), %rax	# this, tmp350
	movq	(%rax), %rax	# this_276->_ptr, _279
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _278
.L1805:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -256(%rbp)	# _278, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -256(%rbp)	#, size
	je	.L1806	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-256(%rbp), %rax	# size, tmp351
	movl	(%rax), %eax	# *size_283, _284
	jmp	.L1807	#
.L1806:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58374
.L1807:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1214: 		if (c.binds.size()) {
	testl	%eax, %eax	# D.58374
	setne	%al	#, retval.204_99
# core/object.cpp:1214: 		if (c.binds.size()) {
	testb	%al, %al	# retval.204_99
	je	.L1809	#,
# core/object.cpp:1216: 			bind_mem.resize(p_argcount + c.binds.size());
	movq	-72(%rbp), %rax	# c, tmp352
	addq	$40, %rax	#, _7
	movq	%rax, -264(%rbp)	# _7, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-264(%rbp), %rax	# this, tmp353
	addq	$8, %rax	#, _292
	movq	%rax, -272(%rbp)	# _292, this
	movq	-272(%rbp), %rax	# this, tmp354
	movq	%rax, -280(%rbp)	# tmp354, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-280(%rbp), %rax	# this, tmp355
	movq	(%rax), %rax	# this_294->_ptr, _295
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _295
	jne	.L1810	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _296
	jmp	.L1811	#
.L1810:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-280(%rbp), %rax	# this, tmp356
	movq	(%rax), %rax	# this_294->_ptr, _297
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _296
.L1811:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -288(%rbp)	# _296, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -288(%rbp)	#, size
	je	.L1812	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-288(%rbp), %rax	# size, tmp357
	movl	(%rax), %eax	# *size_301, _302
	movl	%eax, %edx	# _302, D.58388
	jmp	.L1813	#
.L1812:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %edx	#, D.58388
.L1813:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1216: 			bind_mem.resize(p_argcount + c.binds.size());
	movl	-876(%rbp), %eax	# p_argcount, tmp358
	addl	%eax, %edx	# tmp358, _9
	leaq	-800(%rbp), %rax	#, tmp359
	movl	%edx, %esi	# _9,
	movq	%rax, %rdi	# tmp359,
	call	_ZN6VectorIPK7VariantE6resizeEi	#
# core/object.cpp:1218: 			for (int j = 0; j < p_argcount; j++) {
	movl	$0, -40(%rbp)	#, j
.L1832:
# core/object.cpp:1218: 			for (int j = 0; j < p_argcount; j++) {
	movl	-40(%rbp), %eax	# j, tmp360
	cmpl	-876(%rbp), %eax	# p_argcount, tmp360
	jge	.L1815	#,
# core/object.cpp:1219: 				bind_mem.write[j] = p_args[j];
	movl	-40(%rbp), %eax	# j, tmp361
	cltq
# core/object.cpp:1219: 				bind_mem.write[j] = p_args[j];
	leaq	0(,%rax,8), %rdx	#, _11
	movq	-872(%rbp), %rax	# p_args, tmp362
	leaq	(%rdx,%rax), %rbx	#, _12
	movl	-40(%rbp), %eax	# j, tmp363
	movl	%eax, -292(%rbp)	# tmp363, p_index
# ./core/vector.h:49: 		CRASH_BAD_INDEX(p_index, ((Vector<T> *)(this))->_cowdata.size());
	movl	-292(%rbp), %eax	# p_index, tmp365
	shrl	$31, %eax	#, tmp364
	movzbl	%al, %eax	# _310, _311
	testq	%rax, %rax	# _312
	jne	.L1816	#,
	leaq	-800(%rbp), %rax	#, tmp366
	addq	$8, %rax	#, _313
	movq	%rax, -304(%rbp)	# _313, this
	movq	-304(%rbp), %rax	# this, tmp367
	movq	%rax, -312(%rbp)	# tmp367, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp368
	movq	(%rax), %rax	# this_315->_ptr, _316
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _316
	jne	.L1817	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _317
	jmp	.L1818	#
.L1817:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-312(%rbp), %rax	# this, tmp369
	movq	(%rax), %rax	# this_315->_ptr, _318
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _317
.L1818:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -320(%rbp)	# _317, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -320(%rbp)	#, size
	je	.L1819	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-320(%rbp), %rax	# size, tmp370
	movl	(%rax), %eax	# *size_322, _323
	jmp	.L1820	#
.L1819:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _324
.L1820:
# ./core/vector.h:49: 		CRASH_BAD_INDEX(p_index, ((Vector<T> *)(this))->_cowdata.size());
	cmpl	%eax, -292(%rbp)	# _324, p_index
	setge	%al	#, _330
	movzbl	%al, %eax	# _330, _331
	testq	%rax, %rax	# _332
	je	.L1821	#,
.L1816:
	movl	$1, %eax	#, iftmp.228_333
	jmp	.L1822	#
.L1821:
	movl	$0, %eax	#, iftmp.228_333
.L1822:
	movzbl	%al, %eax	# iftmp.228_333, _336
	testq	%rax, %rax	# _336
	setne	%al	#, retval.227_337
	testb	%al, %al	# retval.227_337
	je	.L1823	#,
	leaq	-800(%rbp), %rax	#, tmp371
	addq	$8, %rax	#, _338
	movq	%rax, -328(%rbp)	# _338, this
	movq	-328(%rbp), %rax	# this, tmp372
	movq	%rax, -336(%rbp)	# tmp372, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-336(%rbp), %rax	# this, tmp373
	movq	(%rax), %rax	# this_340->_ptr, _341
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _341
	jne	.L1824	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _342
	jmp	.L1825	#
.L1824:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-336(%rbp), %rax	# this, tmp374
	movq	(%rax), %rax	# this_340->_ptr, _343
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _342
.L1825:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -344(%rbp)	# _342, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -344(%rbp)	#, size
	je	.L1826	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-344(%rbp), %rax	# size, tmp375
	movl	(%rax), %eax	# *size_347, _348
	jmp	.L1827	#
.L1826:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _349
.L1827:
# ./core/vector.h:49: 		CRASH_BAD_INDEX(p_index, ((Vector<T> *)(this))->_cowdata.size());
	movslq	%eax, %rdx	# _349, _355
	movl	-292(%rbp), %eax	# p_index, tmp376
	cltq
	pushq	$1	#
	pushq	$.LC49	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _355,
	movq	%rax, %rcx	# _356,
	movl	$49, %edx	#,
	movl	$.LC47, %esi	#,
	movl	$.LC48, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1823:
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	leaq	-800(%rbp), %rax	#, tmp377
	addq	$8, %rax	#, _357
	movq	%rax, -352(%rbp)	# _357, this
# ./core/cowdata.h:116: 		_copy_on_write();
	movq	-352(%rbp), %rax	# this, tmp378
	movq	%rax, %rdi	# tmp378,
	.cfi_escape 0x2e,0
	call	_ZN7CowDataIPK7VariantE14_copy_on_writeEv	#
	movq	-352(%rbp), %rax	# this, tmp379
	movq	%rax, -360(%rbp)	# tmp379, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-360(%rbp), %rax	# this, tmp380
	movq	(%rax), %rax	# this_359->_ptr, _360
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _360
	jne	.L1828	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _361
	jmp	.L1829	#
.L1828:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-360(%rbp), %rax	# this, tmp381
	movq	(%rax), %rax	# this_359->_ptr, _361
.L1829:
# ./core/cowdata.h:117: 		return (T *)_get_data();
	nop	
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	movl	-292(%rbp), %edx	# p_index, tmp382
	movslq	%edx, %rdx	# tmp382, _369
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	salq	$3, %rdx	#, _370
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	addq	%rax, %rdx	# _361, D.58412
# core/object.cpp:1219: 				bind_mem.write[j] = p_args[j];
	movq	(%rbx), %rax	# *_12, _14
# core/object.cpp:1219: 				bind_mem.write[j] = p_args[j];
	movq	%rax, (%rdx)	# _14, *_13
# core/object.cpp:1218: 			for (int j = 0; j < p_argcount; j++) {
	addl	$1, -40(%rbp)	#, j
	jmp	.L1832	#
.L1815:
# core/object.cpp:1221: 			for (int j = 0; j < c.binds.size(); j++) {
	movl	$0, -44(%rbp)	#, j
.L1871:
# core/object.cpp:1221: 			for (int j = 0; j < c.binds.size(); j++) {
	movq	-72(%rbp), %rax	# c, tmp383
	addq	$40, %rax	#, _15
	movq	%rax, -368(%rbp)	# _15, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-368(%rbp), %rax	# this, tmp384
	addq	$8, %rax	#, _373
	movq	%rax, -376(%rbp)	# _373, this
	movq	-376(%rbp), %rax	# this, tmp385
	movq	%rax, -384(%rbp)	# tmp385, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-384(%rbp), %rax	# this, tmp386
	movq	(%rax), %rax	# this_375->_ptr, _376
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _376
	jne	.L1833	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _377
	jmp	.L1834	#
.L1833:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-384(%rbp), %rax	# this, tmp387
	movq	(%rax), %rax	# this_375->_ptr, _378
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _377
.L1834:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -392(%rbp)	# _377, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -392(%rbp)	#, size
	je	.L1835	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-392(%rbp), %rax	# size, tmp388
	movl	(%rax), %eax	# *size_382, _383
	jmp	.L1836	#
.L1835:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58438
.L1836:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1221: 			for (int j = 0; j < c.binds.size(); j++) {
	cmpl	%eax, -44(%rbp)	# D.58438, j
	setl	%al	#, retval.205_108
	testb	%al, %al	# retval.205_108
	je	.L1838	#,
# core/object.cpp:1222: 				bind_mem.write[p_argcount + j] = &c.binds[j];
	movq	-72(%rbp), %rax	# c, tmp389
	leaq	40(%rax), %rbx	#, _17
# core/object.cpp:1222: 				bind_mem.write[p_argcount + j] = &c.binds[j];
	movl	-876(%rbp), %edx	# p_argcount, tmp390
	movl	-44(%rbp), %eax	# j, tmp391
	addl	%edx, %eax	# tmp390, _18
	movl	%eax, -396(%rbp)	# _18, p_index
# ./core/vector.h:49: 		CRASH_BAD_INDEX(p_index, ((Vector<T> *)(this))->_cowdata.size());
	movl	-396(%rbp), %eax	# p_index, tmp393
	shrl	$31, %eax	#, tmp392
	movzbl	%al, %eax	# _391, _392
	testq	%rax, %rax	# _393
	jne	.L1839	#,
	leaq	-800(%rbp), %rax	#, tmp394
	addq	$8, %rax	#, _394
	movq	%rax, -408(%rbp)	# _394, this
	movq	-408(%rbp), %rax	# this, tmp395
	movq	%rax, -416(%rbp)	# tmp395, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-416(%rbp), %rax	# this, tmp396
	movq	(%rax), %rax	# this_396->_ptr, _397
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _397
	jne	.L1840	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _398
	jmp	.L1841	#
.L1840:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-416(%rbp), %rax	# this, tmp397
	movq	(%rax), %rax	# this_396->_ptr, _399
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _398
.L1841:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -424(%rbp)	# _398, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -424(%rbp)	#, size
	je	.L1842	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-424(%rbp), %rax	# size, tmp398
	movl	(%rax), %eax	# *size_403, _404
	jmp	.L1843	#
.L1842:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _405
.L1843:
# ./core/vector.h:49: 		CRASH_BAD_INDEX(p_index, ((Vector<T> *)(this))->_cowdata.size());
	cmpl	%eax, -396(%rbp)	# _405, p_index
	setge	%al	#, _411
	movzbl	%al, %eax	# _411, _412
	testq	%rax, %rax	# _413
	je	.L1844	#,
.L1839:
	movl	$1, %eax	#, iftmp.228_414
	jmp	.L1845	#
.L1844:
	movl	$0, %eax	#, iftmp.228_414
.L1845:
	movzbl	%al, %eax	# iftmp.228_414, _417
	testq	%rax, %rax	# _417
	setne	%al	#, retval.227_418
	testb	%al, %al	# retval.227_418
	je	.L1846	#,
	leaq	-800(%rbp), %rax	#, tmp399
	addq	$8, %rax	#, _419
	movq	%rax, -432(%rbp)	# _419, this
	movq	-432(%rbp), %rax	# this, tmp400
	movq	%rax, -440(%rbp)	# tmp400, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-440(%rbp), %rax	# this, tmp401
	movq	(%rax), %rax	# this_421->_ptr, _422
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _422
	jne	.L1847	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _423
	jmp	.L1848	#
.L1847:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-440(%rbp), %rax	# this, tmp402
	movq	(%rax), %rax	# this_421->_ptr, _424
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _423
.L1848:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -448(%rbp)	# _423, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -448(%rbp)	#, size
	je	.L1849	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-448(%rbp), %rax	# size, tmp403
	movl	(%rax), %eax	# *size_428, _429
	jmp	.L1850	#
.L1849:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _430
.L1850:
# ./core/vector.h:49: 		CRASH_BAD_INDEX(p_index, ((Vector<T> *)(this))->_cowdata.size());
	movslq	%eax, %rdx	# _430, _436
	movl	-396(%rbp), %eax	# p_index, tmp404
	cltq
	pushq	$1	#
	pushq	$.LC49	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _436,
	movq	%rax, %rcx	# _437,
	movl	$49, %edx	#,
	movl	$.LC47, %esi	#,
	movl	$.LC48, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1846:
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	leaq	-800(%rbp), %rax	#, tmp405
	addq	$8, %rax	#, _438
	movq	%rax, -456(%rbp)	# _438, this
# ./core/cowdata.h:116: 		_copy_on_write();
	movq	-456(%rbp), %rax	# this, tmp406
	movq	%rax, %rdi	# tmp406,
	.cfi_escape 0x2e,0
	call	_ZN7CowDataIPK7VariantE14_copy_on_writeEv	#
	movq	-456(%rbp), %rax	# this, tmp407
	movq	%rax, -464(%rbp)	# tmp407, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-464(%rbp), %rax	# this, tmp408
	movq	(%rax), %rax	# this_440->_ptr, _441
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _441
	jne	.L1851	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _442
	jmp	.L1852	#
.L1851:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-464(%rbp), %rax	# this, tmp409
	movq	(%rax), %rax	# this_440->_ptr, _442
.L1852:
# ./core/cowdata.h:117: 		return (T *)_get_data();
	nop	
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	movl	-396(%rbp), %edx	# p_index, tmp410
	movslq	%edx, %rdx	# tmp410, _450
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	salq	$3, %rdx	#, _451
# ./core/vector.h:51: 		return ((Vector<T> *)(this))->_cowdata.ptrw()[p_index];
	leaq	(%rax,%rdx), %rsi	#, D.58462
	movq	%rbx, -472(%rbp)	# _17, this
	movl	-44(%rbp), %eax	# j, tmp411
	movl	%eax, -476(%rbp)	# tmp411, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-472(%rbp), %rax	# this, tmp412
	addq	$8, %rax	#, _455
	movq	%rax, -488(%rbp)	# _455, this
	movl	-476(%rbp), %eax	# p_index, tmp413
	movl	%eax, -492(%rbp)	# tmp413, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-492(%rbp), %eax	# p_index, tmp415
	shrl	$31, %eax	#, tmp414
	movzbl	%al, %eax	# _458, _459
	testq	%rax, %rax	# _460
	jne	.L1855	#,
	movq	-488(%rbp), %rax	# this, tmp416
	movq	%rax, -504(%rbp)	# tmp416, this
	movq	-504(%rbp), %rax	# this, tmp417
	movq	%rax, -512(%rbp)	# tmp417, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-512(%rbp), %rax	# this, tmp418
	movq	(%rax), %rax	# this_462->_ptr, _463
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _463
	jne	.L1856	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _464
	jmp	.L1857	#
.L1856:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-512(%rbp), %rax	# this, tmp419
	movq	(%rax), %rax	# this_462->_ptr, _465
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _464
.L1857:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -520(%rbp)	# _464, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -520(%rbp)	#, size
	je	.L1858	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-520(%rbp), %rax	# size, tmp420
	movl	(%rax), %eax	# *size_469, _470
	jmp	.L1859	#
.L1858:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _471
.L1859:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -492(%rbp)	# _471, p_index
	setge	%al	#, _477
	movzbl	%al, %eax	# _477, _478
	testq	%rax, %rax	# _479
	je	.L1860	#,
.L1855:
	movl	$1, %eax	#, iftmp.12_480
	jmp	.L1861	#
.L1860:
	movl	$0, %eax	#, iftmp.12_480
.L1861:
	movzbl	%al, %eax	# iftmp.12_480, _483
	testq	%rax, %rax	# _483
	setne	%al	#, retval.11_484
	testb	%al, %al	# retval.11_484
	je	.L1862	#,
	movq	-488(%rbp), %rax	# this, tmp421
	movq	%rax, -528(%rbp)	# tmp421, this
	movq	-528(%rbp), %rax	# this, tmp422
	movq	%rax, -536(%rbp)	# tmp422, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-536(%rbp), %rax	# this, tmp423
	movq	(%rax), %rax	# this_486->_ptr, _487
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _487
	jne	.L1863	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _488
	jmp	.L1864	#
.L1863:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-536(%rbp), %rax	# this, tmp424
	movq	(%rax), %rax	# this_486->_ptr, _489
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _488
.L1864:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -544(%rbp)	# _488, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -544(%rbp)	#, size
	je	.L1865	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-544(%rbp), %rax	# size, tmp425
	movl	(%rax), %eax	# *size_493, _494
	jmp	.L1866	#
.L1865:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _495
.L1866:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _495, _501
	movl	-492(%rbp), %eax	# p_index, tmp426
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _501,
	movq	%rax, %rcx	# _502,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L1862:
	movq	-488(%rbp), %rax	# this, tmp427
	movq	%rax, -552(%rbp)	# tmp427, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-552(%rbp), %rax	# this, tmp428
	movq	(%rax), %rax	# this_503->_ptr, _504
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _504
	jne	.L1867	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _505
	jmp	.L1868	#
.L1867:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-552(%rbp), %rax	# this, tmp429
	movq	(%rax), %rcx	# this_503->_ptr, _505
.L1868:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-492(%rbp), %eax	# p_index, tmp430
	movslq	%eax, %rdx	# tmp430, _510
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _510, tmp431
	addq	%rax, %rax	# tmp431
	addq	%rdx, %rax	# _510, tmp431
	salq	$3, %rax	#, tmp432
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	addq	%rcx, %rax	# _505, D.58499
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:1222: 				bind_mem.write[p_argcount + j] = &c.binds[j];
	movq	%rax, (%rsi)	# D.58499, *_19
# core/object.cpp:1221: 			for (int j = 0; j < c.binds.size(); j++) {
	addl	$1, -44(%rbp)	#, j
	jmp	.L1871	#
.L1838:
# ./core/vector.h:76: 	_FORCE_INLINE_ const T *ptr() const { return _cowdata.ptr(); }
	leaq	-800(%rbp), %rax	#, tmp433
	addq	$8, %rax	#, _516
	movq	%rax, -560(%rbp)	# _516, this
	movq	-560(%rbp), %rax	# this, tmp434
	movq	%rax, -568(%rbp)	# tmp434, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-568(%rbp), %rax	# this, tmp435
	movq	(%rax), %rax	# this_518->_ptr, _519
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _519
	jne	.L1872	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, D.58524
	jmp	.L1873	#
.L1872:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-568(%rbp), %rax	# this, tmp436
	movq	(%rax), %rax	# this_518->_ptr, D.58524
.L1873:
# ./core/cowdata.h:121: 		return _get_data();
	nop	
# ./core/vector.h:76: 	_FORCE_INLINE_ const T *ptr() const { return _cowdata.ptr(); }
	nop	
# core/object.cpp:1225: 			args = (const Variant **)bind_mem.ptr();
	movq	%rax, -32(%rbp)	# D.58524, args
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	leaq	-800(%rbp), %rax	#, tmp437
	addq	$8, %rax	#, _528
	movq	%rax, -576(%rbp)	# _528, this
	movq	-576(%rbp), %rax	# this, tmp438
	movq	%rax, -584(%rbp)	# tmp438, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-584(%rbp), %rax	# this, tmp439
	movq	(%rax), %rax	# this_530->_ptr, _531
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _531
	jne	.L1876	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _532
	jmp	.L1877	#
.L1876:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-584(%rbp), %rax	# this, tmp440
	movq	(%rax), %rax	# this_530->_ptr, _533
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _532
.L1877:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -592(%rbp)	# _532, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -592(%rbp)	#, size
	je	.L1878	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-592(%rbp), %rax	# size, tmp441
	movl	(%rax), %eax	# *size_537, _538
	jmp	.L1879	#
.L1878:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58538
.L1879:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1226: 			argc = bind_mem.size();
	movl	%eax, -36(%rbp)	# D.58538, argc
.L1809:
# core/object.cpp:1229: 		if (c.flags & CONNECT_DEFERRED) {
	movq	-72(%rbp), %rax	# c, tmp442
	movl	32(%rax), %eax	# c_92->flags, _21
# core/object.cpp:1229: 		if (c.flags & CONNECT_DEFERRED) {
	andl	$1, %eax	#, _22
# core/object.cpp:1229: 		if (c.flags & CONNECT_DEFERRED) {
	testl	%eax, %eax	# _22
	je	.L1881	#,
	.cfi_escape 0x2e,0
# core/object.cpp:1230: 			MessageQueue::get_singleton()->push_call(target->get_instance_id(), c.method, args, argc, true);
	call	_ZN12MessageQueue13get_singletonEv	#
	movq	%rax, %rdi	#, _23
# core/object.cpp:1230: 			MessageQueue::get_singleton()->push_call(target->get_instance_id(), c.method, args, argc, true);
	movq	-72(%rbp), %rax	# c, tmp443
	leaq	24(%rax), %rsi	#, _24
	movq	-80(%rbp), %rax	# target, tmp444
	movq	%rax, -600(%rbp)	# tmp444, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-600(%rbp), %rax	# this, tmp445
	movq	64(%rax), %rax	# this_545->_instance_id, D.58547
# core/object.cpp:1230: 			MessageQueue::get_singleton()->push_call(target->get_instance_id(), c.method, args, argc, true);
	movl	-36(%rbp), %ecx	# argc, tmp446
	movq	-32(%rbp), %rdx	# args, tmp447
	movl	$1, %r9d	#,
	movl	%ecx, %r8d	# tmp446,
	movq	%rdx, %rcx	# tmp447,
	movq	%rsi, %rdx	# _24,
	movq	%rax, %rsi	# D.58547,
	call	_ZN12MessageQueue9push_callEmRK10StringNamePPK7Variantib	#
	jmp	.L1883	#
.L1881:
# core/object.cpp:1233: 			target->call(c.method, args, argc, ce);
	movq	-80(%rbp), %rax	# target, tmp448
	movq	(%rax), %rax	# target_93->_vptr.Object, _26
	addq	$96, %rax	#, _27
	movq	(%rax), %r10	# *_27, _28
# core/object.cpp:1233: 			target->call(c.method, args, argc, ce);
	movq	-72(%rbp), %rax	# c, tmp449
	leaq	24(%rax), %rdi	#, _29
# core/object.cpp:1233: 			target->call(c.method, args, argc, ce);
	leaq	-768(%rbp), %rax	#, tmp450
	leaq	-812(%rbp), %r8	#, tmp451
	movl	-36(%rbp), %ecx	# argc, tmp452
	movq	-32(%rbp), %rdx	# args, tmp453
	movq	-80(%rbp), %rsi	# target, tmp454
	movq	%r8, %r9	# tmp451,
	movl	%ecx, %r8d	# tmp452,
	movq	%rdx, %rcx	# tmp453,
	movq	%rdi, %rdx	# _29,
	movq	%rax, %rdi	# tmp450,
	call	*%r10	# _28
.LEHE438:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-768(%rbp), %eax	# D.40187.type, _547
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _547
	je	.L1932	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-768(%rbp), %rax	#, tmp455
	movq	%rax, %rdi	# tmp455,
	call	_ZN7Variant5clearEv	#
.L1932:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1235: 			if (ce.error != Variant::CallError::CALL_OK) {
	movl	-812(%rbp), %eax	# ce.error, _30
# core/object.cpp:1235: 			if (ce.error != Variant::CallError::CALL_OK) {
	testl	%eax, %eax	# _30
	je	.L1883	#,
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	movl	-812(%rbp), %eax	# ce.error, _31
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	cmpl	$1, %eax	#, _31
	jne	.L1886	#,
	movq	-80(%rbp), %rax	# target, tmp456
	movq	%rax, -608(%rbp)	# tmp456, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-608(%rbp), %rax	# this, tmp457
	movq	112(%rax), %rax	# this_548->_class_ptr, _549
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _549
	jne	.L1887	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-608(%rbp), %rax	# this, tmp458
	movq	(%rax), %rax	# this_548->_vptr.Object, _550
	addq	$48, %rax	#, _551
	movq	(%rax), %rdx	# *_551, _552
# core/object.h:647: 			return *_get_class_namev();
	movq	-608(%rbp), %rax	# this, tmp459
	movq	%rax, %rdi	# tmp459,
.LEHB439:
	call	*%rdx	# _552
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L1888	#
.L1887:
# core/object.h:649: 			return *_class_ptr;
	movq	-608(%rbp), %rax	# this, tmp460
	movq	112(%rax), %rax	# this_548->_class_ptr, D.58552
.L1888:
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	movq	%rax, %rdi	# D.58552,
	call	_ZN7ClassDB12class_existsERK10StringName	#
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	xorl	$1, %eax	#, _34
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	testb	%al, %al	# _34
	je	.L1886	#,
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	movl	$1, %eax	#, iftmp.207_54
	jmp	.L1889	#
.L1886:
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	movl	$0, %eax	#, iftmp.207_54
.L1889:
# core/object.cpp:1240: 				if (ce.error == Variant::CallError::CALL_ERROR_INVALID_METHOD && !ClassDB::class_exists(target->get_class_name())) {
	testb	%al, %al	# iftmp.207_54
	jne	.L1883	#,
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	movq	-72(%rbp), %rax	# c, tmp461
	leaq	24(%rax), %rdi	#, _35
	leaq	-728(%rbp), %rax	#, tmp462
	leaq	-812(%rbp), %r8	#, tmp463
	movl	-36(%rbp), %ecx	# argc, tmp464
	movq	-32(%rbp), %rdx	# args, tmp465
	movq	-80(%rbp), %rsi	# target, tmp466
	movq	%r8, %r9	# tmp463,
	movl	%ecx, %r8d	# tmp464,
	movq	%rdx, %rcx	# tmp465,
	movq	%rdi, %rdx	# _35,
	movq	%rax, %rdi	# tmp462,
	call	_ZN7Variant19get_call_error_textEP6ObjectRK10StringNamePPKS_iRKNS_9CallErrorE	#
.LEHE439:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-712(%rbp), %rax	#, tmp467
	movl	$.LC50, %esi	#,
	movq	%rax, %rdi	# tmp467,
.LEHB440:
	call	_ZN6StringC1EPKc	#
.LEHE440:
	movq	-864(%rbp), %rax	# p_name, tmp468
	movq	%rax, -616(%rbp)	# tmp468, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-616(%rbp), %rax	# this, tmp469
	movq	(%rax), %rax	# this_557->_data, _558
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _558
	je	.L1890	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-616(%rbp), %rax	# this, tmp470
	movq	(%rax), %rax	# this_557->_data, _559
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _559->cname, _560
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _560
	je	.L1891	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-616(%rbp), %rax	# this, tmp471
	movq	(%rax), %rax	# this_557->_data, _561
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _561->cname, _562
	leaq	-696(%rbp), %rax	#, tmp472
	movq	%rdx, %rsi	# _562,
	movq	%rax, %rdi	# tmp472,
.LEHB441:
	call	_ZN6StringC1EPKc	#
.LEHE441:
	jmp	.L1892	#
.L1891:
# ./core/string_name.h:128: 				return _data->name;
	movq	-616(%rbp), %rax	# this, tmp473
	movq	(%rax), %rax	# this_557->_data, _563
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _564
	leaq	-696(%rbp), %rax	#, tmp474
	movq	%rax, -624(%rbp)	# tmp474, this
	movq	%rdx, -632(%rbp)	# _564, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-624(%rbp), %rax	# this, _567
	movq	%rax, -640(%rbp)	# _567, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-640(%rbp), %rax	# this, tmp475
	movq	$0, (%rax)	#, this_568->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-624(%rbp), %rax	# this, _569
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-632(%rbp), %rdx	# p_str, _570
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _570,
	movq	%rax, %rdi	# _569,
.LEHB442:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE442:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L1930	#
.L1926:
	movq	%rax, %rbx	#, tmp479
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-624(%rbp), %rax	# this, _571
	movq	%rax, -648(%rbp)	# _571, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-648(%rbp), %rax	# this, tmp476
	movq	(%rax), %rdx	# this_572->_ptr, _573
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-648(%rbp), %rax	# this, tmp477
	movq	%rdx, %rsi	# _573,
	movq	%rax, %rdi	# tmp477,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	jmp	.L1895	#
.L1930:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L1892	#
.L1890:
	leaq	-696(%rbp), %rax	#, tmp482
	movq	%rax, -656(%rbp)	# tmp482, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-656(%rbp), %rax	# this, _575
	movq	%rax, -664(%rbp)	# _575, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-664(%rbp), %rax	# this, tmp483
	movq	$0, (%rax)	#, this_576->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L1892:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-704(%rbp), %rax	#, tmp484
	leaq	-696(%rbp), %rdx	#, tmp485
	movl	$.LC51, %esi	#,
	movq	%rax, %rdi	# tmp484,
.LEHB443:
	call	_ZplPKcRK6String	#
.LEHE443:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-720(%rbp), %rax	#, tmp486
	leaq	-712(%rbp), %rdx	#, tmp487
	leaq	-704(%rbp), %rcx	#, tmp488
	movq	%rcx, %rsi	# tmp488,
	movq	%rax, %rdi	# tmp486,
.LEHB444:
	call	_ZNK6StringplERKS_	#
.LEHE444:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-736(%rbp), %rax	#, tmp489
	leaq	-728(%rbp), %rdx	#, tmp490
	leaq	-720(%rbp), %rcx	#, tmp491
	movq	%rcx, %rsi	# tmp491,
	movq	%rax, %rdi	# tmp489,
.LEHB445:
	call	_ZNK6StringplERKS_	#
.LEHE445:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-744(%rbp), %rax	#, tmp492
	leaq	-736(%rbp), %rdx	#, tmp493
	movq	%rdx, %rsi	# tmp493,
	movq	%rax, %rdi	# tmp492,
.LEHB446:
	call	_ZNK6String4utf8Ev	#
.LEHE446:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-744(%rbp), %rax	#, tmp494
	movq	%rax, %rdi	# tmp494,
.LEHB447:
	call	_ZNK10CharString8get_dataEv	#
	movl	$0, %r8d	#,
	movq	%rax, %rcx	# _36,
	movl	$1243, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC52, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
.LEHE447:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-744(%rbp), %rax	#, tmp495
	movq	%rax, %rdi	# tmp495,
	call	_ZN10CharStringD1Ev	#
	leaq	-736(%rbp), %rax	#, tmp496
	movq	%rax, %rdi	# tmp496,
	call	_ZN6StringD1Ev	#
	leaq	-720(%rbp), %rax	#, tmp497
	movq	%rax, %rdi	# tmp497,
	call	_ZN6StringD1Ev	#
	leaq	-704(%rbp), %rax	#, tmp498
	movq	%rax, %rdi	# tmp498,
	call	_ZN6StringD1Ev	#
	leaq	-696(%rbp), %rax	#, tmp499
	movq	%rax, %rdi	# tmp499,
	call	_ZN6StringD1Ev	#
	leaq	-712(%rbp), %rax	#, tmp500
	movq	%rax, %rdi	# tmp500,
	call	_ZN6StringD1Ev	#
	leaq	-728(%rbp), %rax	#, tmp501
	movq	%rax, %rdi	# tmp501,
	call	_ZN6StringD1Ev	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1244: 					err = ERR_METHOD_NOT_FOUND;
	movl	$37, -20(%rbp)	#, err
.L1883:
# core/object.cpp:1249: 		bool disconnect = c.flags & CONNECT_ONESHOT;
	movq	-72(%rbp), %rax	# c, tmp502
	movl	32(%rax), %eax	# c_92->flags, _37
# core/object.cpp:1249: 		bool disconnect = c.flags & CONNECT_ONESHOT;
	andl	$4, %eax	#, _38
# core/object.cpp:1249: 		bool disconnect = c.flags & CONNECT_ONESHOT;
	testl	%eax, %eax	# _38
	setne	%al	#, tmp503
	movb	%al, -81(%rbp)	# tmp503, disconnect
# core/object.cpp:1256: 		if (disconnect) {
	cmpb	$0, -81(%rbp)	#, disconnect
	je	.L1896	#,
# core/object.cpp:1258: 			_ObjectSignalDisconnectData dd;
	leaq	-848(%rbp), %rax	#, tmp504
	movq	%rax, %rdi	# tmp504,
.LEHB448:
	call	_ZN27_ObjectSignalDisconnectDataC1Ev	#
.LEHE448:
# core/object.cpp:1259: 			dd.signal = p_name;
	movq	-864(%rbp), %rdx	# p_name, tmp505
	leaq	-848(%rbp), %rax	#, tmp506
	movq	%rdx, %rsi	# tmp505,
	movq	%rax, %rdi	# tmp506,
.LEHB449:
	call	_ZN10StringNameaSERKS_	#
# core/object.cpp:1260: 			dd.target = target;
	movq	-80(%rbp), %rax	# target, tmp507
	movq	%rax, -840(%rbp)	# tmp507, dd.target
# core/object.cpp:1261: 			dd.method = c.method;
	movq	-72(%rbp), %rax	# c, tmp508
	leaq	24(%rax), %rdx	#, _39
# core/object.cpp:1261: 			dd.method = c.method;
	leaq	-848(%rbp), %rax	#, tmp509
	addq	$16, %rax	#, tmp510
	movq	%rdx, %rsi	# _39,
	movq	%rax, %rdi	# tmp510,
	call	_ZN10StringNameaSERKS_	#
# core/object.cpp:1262: 			disconnect_data.push_back(dd);
	leaq	-848(%rbp), %rdx	#, tmp511
	leaq	-776(%rbp), %rax	#, tmp512
	movq	%rdx, %rsi	# tmp511,
	movq	%rax, %rdi	# tmp512,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_	#
.LEHE449:
# core/object.cpp:1258: 			_ObjectSignalDisconnectData dd;
	leaq	-848(%rbp), %rax	#, tmp513
	movq	%rax, %rdi	# tmp513,
	call	_ZN27_ObjectSignalDisconnectDataD1Ev	#
.L1896:
# core/object.cpp:1199: 	for (int i = 0; i < ssize; i++) {
	addl	$1, -24(%rbp)	#, i
	jmp	.L1897	#
.L1803:
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	movq	-776(%rbp), %rax	# disconnect_data._data, _577
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	testq	%rax, %rax	# _577
	je	.L1898	#,
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	movq	-776(%rbp), %rax	# disconnect_data._data, _578
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	movl	16(%rax), %eax	# _578->size_cache, _579
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	testl	%eax, %eax	# _579
	jne	.L1899	#,
.L1898:
	movl	$1, %eax	#, D.58566
	jmp	.L1900	#
.L1899:
	movl	$0, %eax	#, D.58566
.L1900:
# ./core/list.h:395: 		return (!_data || !_data->size_cache);
	nop	
# core/object.cpp:1266: 	while (!disconnect_data.empty()) {
	xorl	$1, %eax	#, retval.208_180
	testb	%al, %al	# retval.208_180
	je	.L1902	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-776(%rbp), %rax	# disconnect_data._data, _586
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _586
	je	.L1903	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-776(%rbp), %rax	# disconnect_data._data, _587
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _587->first, D.58575
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L1928	#
.L1903:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.58575
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L1928:
	movq	%rax, -672(%rbp)	# D.58575, this
# ./core/list.h:121: 			return value;
	movq	-672(%rbp), %rax	# this, D.58571
# core/object.cpp:1268: 		const _ObjectSignalDisconnectData &dd = disconnect_data.front()->get();
	movq	%rax, -96(%rbp)	# D.58571, dd
# core/object.cpp:1269: 		disconnect(dd.signal, dd.target, dd.method);
	movq	-96(%rbp), %rax	# dd, tmp514
	leaq	16(%rax), %rcx	#, _42
# core/object.cpp:1269: 		disconnect(dd.signal, dd.target, dd.method);
	movq	-96(%rbp), %rax	# dd, tmp515
	movq	8(%rax), %rdx	# dd_184->target, _43
# core/object.cpp:1269: 		disconnect(dd.signal, dd.target, dd.method);
	movq	-96(%rbp), %rsi	# dd, _44
# core/object.cpp:1269: 		disconnect(dd.signal, dd.target, dd.method);
	movq	-856(%rbp), %rax	# this, tmp516
	movq	%rax, %rdi	# tmp516,
.LEHB450:
	call	_ZN6Object10disconnectERK10StringNamePS_S2_	#
# core/object.cpp:1270: 		disconnect_data.pop_front();
	leaq	-776(%rbp), %rax	#, tmp517
	movq	%rax, %rdi	# tmp517,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv	#
.LEHE450:
# core/object.cpp:1266: 	while (!disconnect_data.empty()) {
	jmp	.L1803	#
.L1902:
# core/object.cpp:1273: 	return err;
	movl	-20(%rbp), %ebx	# err, _53
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-800(%rbp), %rax	#, tmp518
	addq	$8, %rax	#, _592
	movq	%rax, -680(%rbp)	# _592, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-680(%rbp), %rax	# this, tmp519
	movq	(%rax), %rdx	# this_593->_ptr, _594
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-680(%rbp), %rax	# this, tmp520
	movq	%rdx, %rsi	# _594,
	movq	%rax, %rdi	# tmp520,
	call	_ZN7CowDataIPK7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:1189: 	VMap<Signal::Target, Signal::Slot> slot_map = s->slot_map;
	leaq	-784(%rbp), %rax	#, tmp521
	movq	%rax, %rdi	# tmp521,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED1Ev	#
# core/object.cpp:1184: 	List<_ObjectSignalDisconnectData> disconnect_data;
	leaq	-776(%rbp), %rax	#, tmp522
	movq	%rax, %rdi	# tmp522,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED1Ev	#
.L1907:
	movl	%ebx, %eax	# _53, <retval>
	jmp	.L1931	#
.L1923:
	movq	%rax, %rbx	#, tmp526
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-744(%rbp), %rax	#, tmp524
	movq	%rax, %rdi	# tmp524,
	call	_ZN10CharStringD1Ev	#
	jmp	.L1909	#
.L1922:
	movq	%rax, %rbx	#, tmp525
.L1909:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-736(%rbp), %rax	#, tmp529
	movq	%rax, %rdi	# tmp529,
	call	_ZN6StringD1Ev	#
	jmp	.L1910	#
.L1921:
	movq	%rax, %rbx	#, tmp530
.L1910:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-720(%rbp), %rax	#, tmp532
	movq	%rax, %rdi	# tmp532,
	call	_ZN6StringD1Ev	#
	jmp	.L1911	#
.L1920:
	movq	%rax, %rbx	#, tmp533
.L1911:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-704(%rbp), %rax	#, tmp535
	movq	%rax, %rdi	# tmp535,
	call	_ZN6StringD1Ev	#
	jmp	.L1912	#
.L1919:
	movq	%rax, %rbx	#, tmp536
.L1912:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-696(%rbp), %rax	#, tmp538
	movq	%rax, %rdi	# tmp538,
	call	_ZN6StringD1Ev	#
	jmp	.L1895	#
.L1918:
	movq	%rax, %rbx	#, tmp478
.L1895:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-712(%rbp), %rax	#, tmp539
	movq	%rax, %rdi	# tmp539,
	call	_ZN6StringD1Ev	#
	jmp	.L1913	#
.L1917:
	movq	%rax, %rbx	#, tmp540
.L1913:
# core/object.cpp:1243: 					ERR_PRINTS("Error calling method from signal '" + String(p_name) + "': " + Variant::get_call_error_text(target, c.method, args, argc, ce));
	leaq	-728(%rbp), %rax	#, tmp542
	movq	%rax, %rdi	# tmp542,
	call	_ZN6StringD1Ev	#
	jmp	.L1914	#
.L1924:
	movq	%rax, %rbx	#, tmp546
# core/object.cpp:1258: 			_ObjectSignalDisconnectData dd;
	leaq	-848(%rbp), %rax	#, tmp545
	movq	%rax, %rdi	# tmp545,
	call	_ZN27_ObjectSignalDisconnectDataD1Ev	#
	jmp	.L1914	#
.L1916:
	movq	%rax, %rbx	#, tmp543
.L1914:
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-800(%rbp), %rax	#, tmp548
	addq	$8, %rax	#, _595
	movq	%rax, -688(%rbp)	# _595, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-688(%rbp), %rax	# this, tmp549
	movq	(%rax), %rdx	# this_596->_ptr, _597
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-688(%rbp), %rax	# this, tmp550
	movq	%rdx, %rsi	# _597,
	movq	%rax, %rdi	# tmp550,
	call	_ZN7CowDataIPK7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:1189: 	VMap<Signal::Target, Signal::Slot> slot_map = s->slot_map;
	leaq	-784(%rbp), %rax	#, tmp553
	movq	%rax, %rdi	# tmp553,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEED1Ev	#
.L1797:
# core/object.cpp:1184: 	List<_ObjectSignalDisconnectData> disconnect_data;
	leaq	-776(%rbp), %rax	#, tmp554
	movq	%rax, %rdi	# tmp554,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp328, D.61952
	movq	%rax, %rdi	# D.61952,
.LEHB451:
	call	_Unwind_Resume	#
.LEHE451:
.L1931:
# core/object.cpp:1274: }
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2548:
	.section	.gcc_except_table
.LLSDA2548:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2548-.LLSDACSB2548
.LLSDACSB2548:
	.uleb128 .LEHB437-.LFB2548
	.uleb128 .LEHE437-.LEHB437
	.uleb128 .L1925-.LFB2548
	.uleb128 0
	.uleb128 .LEHB438-.LFB2548
	.uleb128 .LEHE438-.LEHB438
	.uleb128 .L1916-.LFB2548
	.uleb128 0
	.uleb128 .LEHB439-.LFB2548
	.uleb128 .LEHE439-.LEHB439
	.uleb128 .L1916-.LFB2548
	.uleb128 0
	.uleb128 .LEHB440-.LFB2548
	.uleb128 .LEHE440-.LEHB440
	.uleb128 .L1917-.LFB2548
	.uleb128 0
	.uleb128 .LEHB441-.LFB2548
	.uleb128 .LEHE441-.LEHB441
	.uleb128 .L1918-.LFB2548
	.uleb128 0
	.uleb128 .LEHB442-.LFB2548
	.uleb128 .LEHE442-.LEHB442
	.uleb128 .L1926-.LFB2548
	.uleb128 0
	.uleb128 .LEHB443-.LFB2548
	.uleb128 .LEHE443-.LEHB443
	.uleb128 .L1919-.LFB2548
	.uleb128 0
	.uleb128 .LEHB444-.LFB2548
	.uleb128 .LEHE444-.LEHB444
	.uleb128 .L1920-.LFB2548
	.uleb128 0
	.uleb128 .LEHB445-.LFB2548
	.uleb128 .LEHE445-.LEHB445
	.uleb128 .L1921-.LFB2548
	.uleb128 0
	.uleb128 .LEHB446-.LFB2548
	.uleb128 .LEHE446-.LEHB446
	.uleb128 .L1922-.LFB2548
	.uleb128 0
	.uleb128 .LEHB447-.LFB2548
	.uleb128 .LEHE447-.LEHB447
	.uleb128 .L1923-.LFB2548
	.uleb128 0
	.uleb128 .LEHB448-.LFB2548
	.uleb128 .LEHE448-.LEHB448
	.uleb128 .L1916-.LFB2548
	.uleb128 0
	.uleb128 .LEHB449-.LFB2548
	.uleb128 .LEHE449-.LEHB449
	.uleb128 .L1924-.LFB2548
	.uleb128 0
	.uleb128 .LEHB450-.LFB2548
	.uleb128 .LEHE450-.LEHB450
	.uleb128 .L1916-.LFB2548
	.uleb128 0
	.uleb128 .LEHB451-.LFB2548
	.uleb128 .LEHE451-.LEHB451
	.uleb128 0
	.uleb128 0
.LLSDACSE2548:
	.text
	.size	_ZN6Object11emit_signalERK10StringNamePPK7Varianti, .-_ZN6Object11emit_signalERK10StringNamePPK7Varianti
	.align 2
	.globl	_ZN6Object11emit_signalERK10StringNameRK7VariantS5_S5_S5_S5_
	.type	_ZN6Object11emit_signalERK10StringNameRK7VariantS5_S5_S5_S5_, @function
_ZN6Object11emit_signalERK10StringNameRK7VariantS5_S5_S5_S5_:
.LFB2555:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$112, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_name, p_name
	movq	%rdx, -88(%rbp)	# p_arg1, p_arg1
	movq	%rcx, -96(%rbp)	# p_arg2, p_arg2
	movq	%r8, -104(%rbp)	# p_arg3, p_arg3
	movq	%r9, -112(%rbp)	# p_arg4, p_arg4
# core/object.cpp:1278: 	VARIANT_ARGPTRS;
	movq	-88(%rbp), %rax	# p_arg1, tmp87
	movq	%rax, -64(%rbp)	# tmp87, argptr
	movq	-96(%rbp), %rax	# p_arg2, tmp88
	movq	%rax, -56(%rbp)	# tmp88, argptr
	movq	-104(%rbp), %rax	# p_arg3, tmp89
	movq	%rax, -48(%rbp)	# tmp89, argptr
	movq	-112(%rbp), %rax	# p_arg4, tmp90
	movq	%rax, -40(%rbp)	# tmp90, argptr
	movq	16(%rbp), %rax	# p_arg5, tmp91
	movq	%rax, -32(%rbp)	# tmp91, argptr
# core/object.cpp:1280: 	int argc = 0;
	movl	$0, -4(%rbp)	#, argc
# core/object.cpp:1282: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	movl	$0, -8(%rbp)	#, i
.L1937:
# core/object.cpp:1282: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	cmpl	$4, -8(%rbp)	#, i
	jg	.L1934	#,
# core/object.cpp:1284: 		if (argptr[i]->get_type() == Variant::NIL)
	movl	-8(%rbp), %eax	# i, tmp93
	cltq
	movq	-64(%rbp,%rax,8), %rax	# argptr, _1
	movq	%rax, -16(%rbp)	# _1, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-16(%rbp), %rax	# this, tmp94
	movl	(%rax), %eax	# this_30->type, D.58595
# core/object.cpp:1284: 		if (argptr[i]->get_type() == Variant::NIL)
	testl	%eax, %eax	# D.58595
	sete	%al	#, retval.235_20
# core/object.cpp:1284: 		if (argptr[i]->get_type() == Variant::NIL)
	testb	%al, %al	# retval.235_20
	jne	.L1939	#,
# core/object.cpp:1286: 		argc++;
	addl	$1, -4(%rbp)	#, argc
# core/object.cpp:1282: 	for (int i = 0; i < VARIANT_ARG_MAX; i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L1937	#
.L1939:
# core/object.cpp:1285: 			break;
	nop	
.L1934:
# core/object.cpp:1289: 	return emit_signal(p_name, argptr, argc);
	movl	-4(%rbp), %ecx	# argc, tmp95
	leaq	-64(%rbp), %rdx	#, tmp96
	movq	-80(%rbp), %rsi	# p_name, tmp97
	movq	-72(%rbp), %rax	# this, tmp98
	movq	%rax, %rdi	# tmp98,
	call	_ZN6Object11emit_signalERK10StringNamePPK7Varianti	#
# core/object.cpp:1290: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2555:
	.size	_ZN6Object11emit_signalERK10StringNameRK7VariantS5_S5_S5_S5_, .-_ZN6Object11emit_signalERK10StringNameRK7VariantS5_S5_S5_S5_
	.align 2
	.globl	_ZN6Object16_add_user_signalERK6StringRK5Array
	.type	_ZN6Object16_add_user_signalERK6StringRK5Array, @function
_ZN6Object16_add_user_signalERK6StringRK5Array:
.LFB2556:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2556
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$344, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -328(%rbp)	# this, this
	movq	%rsi, -336(%rbp)	# p_name, p_name
	movq	%rdx, -344(%rbp)	# p_args, p_args
# core/object.cpp:1298: 	MethodInfo mi;
	leaq	-256(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
.LEHB452:
	call	_ZN10MethodInfoC1Ev	#
.LEHE452:
# core/object.cpp:1299: 	mi.name = p_name;
	leaq	-168(%rbp), %rax	#, tmp101
	movq	-336(%rbp), %rdx	# p_name, tmp102
	leaq	-256(%rbp), %rcx	#, tmp103
	movq	%rcx, %rsi	# tmp103,
	movq	%rax, %rdi	# tmp101,
.LEHB453:
	call	_ZN6StringaSERKS_	#
# core/object.cpp:1299: 	mi.name = p_name;
	leaq	-168(%rbp), %rax	#, tmp104
	movq	%rax, %rdi	# tmp104,
	call	_ZN6StringD1Ev	#
# core/object.cpp:1301: 	for (int i = 0; i < p_args.size(); i++) {
	movl	$0, -20(%rbp)	#, i
.L1948:
# core/object.cpp:1301: 	for (int i = 0; i < p_args.size(); i++) {
	movq	-344(%rbp), %rax	# p_args, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZNK5Array4sizeEv	#
# core/object.cpp:1301: 	for (int i = 0; i < p_args.size(); i++) {
	cmpl	%eax, -20(%rbp)	# _1, i
	setl	%al	#, retval.236_28
	testb	%al, %al	# retval.236_28
	je	.L1941	#,
# core/object.cpp:1303: 		Dictionary d = p_args[i];
	movl	-20(%rbp), %edx	# i, tmp106
	movq	-344(%rbp), %rax	# p_args, tmp107
	movl	%edx, %esi	# tmp106,
	movq	%rax, %rdi	# tmp107,
	call	_ZNK5ArrayixEi	#
	movq	%rax, %rdx	#, _2
	leaq	-264(%rbp), %rax	#, tmp108
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# tmp108,
	call	_ZNK7Variantcv10DictionaryEv	#
.LEHE453:
# core/object.cpp:1304: 		PropertyInfo param;
	leaq	-320(%rbp), %rax	#, tmp109
	movq	%rax, %rdi	# tmp109,
.LEHB454:
	call	_ZN12PropertyInfoC1Ev	#
.LEHE454:
# core/object.cpp:1306: 		if (d.has("name"))
	leaq	-160(%rbp), %rax	#, tmp110
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp110,
.LEHB455:
	call	_ZN7VariantC1EPKc	#
.LEHE455:
# core/object.cpp:1306: 		if (d.has("name"))
	leaq	-160(%rbp), %rdx	#, tmp111
	leaq	-264(%rbp), %rax	#, tmp112
	movq	%rdx, %rsi	# tmp111,
	movq	%rax, %rdi	# tmp112,
.LEHB456:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE456:
	movl	%eax, %ebx	#, _39
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.40315.type, _82
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _82
	je	.L1976	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN7Variant5clearEv	#
.L1976:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1306: 		if (d.has("name"))
	testb	%bl, %bl	# _39
	je	.L1943	#,
# core/object.cpp:1307: 			param.name = d["name"];
	leaq	-112(%rbp), %rax	#, tmp114
	movl	$.LC1, %esi	#,
	movq	%rax, %rdi	# tmp114,
.LEHB457:
	call	_ZN7VariantC1EPKc	#
.LEHE457:
# core/object.cpp:1307: 			param.name = d["name"];
	leaq	-112(%rbp), %rdx	#, tmp115
	leaq	-264(%rbp), %rax	#, tmp116
	movq	%rdx, %rsi	# tmp115,
	movq	%rax, %rdi	# tmp116,
.LEHB458:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _3
# core/object.cpp:1307: 			param.name = d["name"];
	leaq	-120(%rbp), %rax	#, tmp117
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp117,
	call	_ZNK7Variantcv6StringEv	#
.LEHE458:
# core/object.cpp:1307: 			param.name = d["name"];
	leaq	-128(%rbp), %rax	#, tmp118
	leaq	-120(%rbp), %rdx	#, tmp119
	leaq	-320(%rbp), %rcx	#, tmp120
	addq	$8, %rcx	#, tmp121
	movq	%rcx, %rsi	# tmp121,
	movq	%rax, %rdi	# tmp118,
.LEHB459:
	call	_ZN6StringaSERKS_	#
.LEHE459:
# core/object.cpp:1307: 			param.name = d["name"];
	leaq	-128(%rbp), %rax	#, tmp122
	movq	%rax, %rdi	# tmp122,
	call	_ZN6StringD1Ev	#
	leaq	-120(%rbp), %rax	#, tmp123
	movq	%rax, %rdi	# tmp123,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.40316.type, _83
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _83
	je	.L1977	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp124
	movq	%rax, %rdi	# tmp124,
	call	_ZN7Variant5clearEv	#
.L1977:
# ./core/variant.h:423: 	}
	nop	
.L1943:
# core/object.cpp:1308: 		if (d.has("type"))
	leaq	-80(%rbp), %rax	#, tmp125
	movl	$.LC3, %esi	#,
	movq	%rax, %rdi	# tmp125,
.LEHB460:
	call	_ZN7VariantC1EPKc	#
.LEHE460:
# core/object.cpp:1308: 		if (d.has("type"))
	leaq	-80(%rbp), %rdx	#, tmp126
	leaq	-264(%rbp), %rax	#, tmp127
	movq	%rdx, %rsi	# tmp126,
	movq	%rax, %rdi	# tmp127,
.LEHB461:
	call	_ZNK10Dictionary3hasERK7Variant	#
.LEHE461:
	movl	%eax, %ebx	#, _57
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40319.type, _84
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _84
	je	.L1978	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp128
	movq	%rax, %rdi	# tmp128,
	call	_ZN7Variant5clearEv	#
.L1978:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1308: 		if (d.has("type"))
	testb	%bl, %bl	# _57
	je	.L1946	#,
# core/object.cpp:1309: 			param.type = (Variant::Type)(int)d["type"];
	leaq	-48(%rbp), %rax	#, tmp129
	movl	$.LC3, %esi	#,
	movq	%rax, %rdi	# tmp129,
.LEHB462:
	call	_ZN7VariantC1EPKc	#
.LEHE462:
# core/object.cpp:1309: 			param.type = (Variant::Type)(int)d["type"];
	leaq	-48(%rbp), %rdx	#, tmp130
	leaq	-264(%rbp), %rax	#, tmp131
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# tmp131,
.LEHB463:
	call	_ZN10DictionaryixERK7Variant	#
# core/object.cpp:1309: 			param.type = (Variant::Type)(int)d["type"];
	movq	%rax, %rdi	# _4,
	call	_ZNK7VariantcviEv	#
.LEHE463:
# core/object.cpp:1309: 			param.type = (Variant::Type)(int)d["type"];
	movl	%eax, -320(%rbp)	# _6, param.type
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.40320.type, _85
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _85
	je	.L1979	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp132
	movq	%rax, %rdi	# tmp132,
	call	_ZN7Variant5clearEv	#
.L1979:
# ./core/variant.h:423: 	}
	nop	
.L1946:
# core/object.cpp:1311: 		mi.arguments.push_back(param);
	leaq	-320(%rbp), %rax	#, tmp133
	leaq	-256(%rbp), %rdx	#, tmp134
	addq	$64, %rdx	#, tmp135
	movq	%rax, %rsi	# tmp133,
	movq	%rdx, %rdi	# tmp135,
.LEHB464:
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE464:
# core/object.cpp:1304: 		PropertyInfo param;
	leaq	-320(%rbp), %rax	#, tmp136
	movq	%rax, %rdi	# tmp136,
	call	_ZN12PropertyInfoD1Ev	#
# core/object.cpp:1303: 		Dictionary d = p_args[i];
	leaq	-264(%rbp), %rax	#, tmp137
	movq	%rax, %rdi	# tmp137,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:1301: 	for (int i = 0; i < p_args.size(); i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L1948	#
.L1941:
# core/object.cpp:1314: 	add_user_signal(mi);
	leaq	-256(%rbp), %rdx	#, tmp138
	movq	-328(%rbp), %rax	# this, tmp139
	movq	%rdx, %rsi	# tmp138,
	movq	%rax, %rdi	# tmp139,
.LEHB465:
	call	_ZN6Object15add_user_signalERK10MethodInfo	#
.LEHE465:
# core/object.cpp:1298: 	MethodInfo mi;
	leaq	-256(%rbp), %rax	#, tmp140
	movq	%rax, %rdi	# tmp140,
	call	_ZN10MethodInfoD1Ev	#
# core/object.cpp:1315: }
	jmp	.L1975	#
.L1964:
	movq	%rax, %rbx	#, tmp143
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.40315.type, _86
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _86
	je	.L1980	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp141
	movq	%rax, %rdi	# tmp141,
	call	_ZN7Variant5clearEv	#
.L1980:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1951	#
.L1966:
	movq	%rax, %rbx	#, tmp148
# core/object.cpp:1307: 			param.name = d["name"];
	leaq	-120(%rbp), %rax	#, tmp146
	movq	%rax, %rdi	# tmp146,
	call	_ZN6StringD1Ev	#
	jmp	.L1953	#
.L1965:
	movq	%rax, %rbx	#, tmp147
.L1953:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.40316.type, _87
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _87
	je	.L1981	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp151
	movq	%rax, %rdi	# tmp151,
	call	_ZN7Variant5clearEv	#
.L1981:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1951	#
.L1967:
	movq	%rax, %rbx	#, tmp153
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40319.type, _88
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _88
	je	.L1982	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp152
	movq	%rax, %rdi	# tmp152,
	call	_ZN7Variant5clearEv	#
.L1982:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1951	#
.L1968:
	movq	%rax, %rbx	#, tmp156
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# D.40320.type, _89
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _89
	je	.L1983	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp155
	movq	%rax, %rdi	# tmp155,
	call	_ZN7Variant5clearEv	#
.L1983:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1951	#
.L1963:
	movq	%rax, %rbx	#, tmp142
.L1951:
# core/object.cpp:1304: 		PropertyInfo param;
	leaq	-320(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L1959	#
.L1962:
	movq	%rax, %rbx	#, tmp159
.L1959:
# core/object.cpp:1303: 		Dictionary d = p_args[i];
	leaq	-264(%rbp), %rax	#, tmp161
	movq	%rax, %rdi	# tmp161,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L1960	#
.L1961:
	movq	%rax, %rbx	#, tmp162
.L1960:
# core/object.cpp:1298: 	MethodInfo mi;
	leaq	-256(%rbp), %rax	#, tmp164
	movq	%rax, %rdi	# tmp164,
	call	_ZN10MethodInfoD1Ev	#
	movq	%rbx, %rax	# tmp162, D.61965
	movq	%rax, %rdi	# D.61965,
.LEHB466:
	call	_Unwind_Resume	#
.LEHE466:
.L1975:
# core/object.cpp:1315: }
	addq	$344, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2556:
	.section	.gcc_except_table
.LLSDA2556:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2556-.LLSDACSB2556
.LLSDACSB2556:
	.uleb128 .LEHB452-.LFB2556
	.uleb128 .LEHE452-.LEHB452
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB453-.LFB2556
	.uleb128 .LEHE453-.LEHB453
	.uleb128 .L1961-.LFB2556
	.uleb128 0
	.uleb128 .LEHB454-.LFB2556
	.uleb128 .LEHE454-.LEHB454
	.uleb128 .L1962-.LFB2556
	.uleb128 0
	.uleb128 .LEHB455-.LFB2556
	.uleb128 .LEHE455-.LEHB455
	.uleb128 .L1963-.LFB2556
	.uleb128 0
	.uleb128 .LEHB456-.LFB2556
	.uleb128 .LEHE456-.LEHB456
	.uleb128 .L1964-.LFB2556
	.uleb128 0
	.uleb128 .LEHB457-.LFB2556
	.uleb128 .LEHE457-.LEHB457
	.uleb128 .L1963-.LFB2556
	.uleb128 0
	.uleb128 .LEHB458-.LFB2556
	.uleb128 .LEHE458-.LEHB458
	.uleb128 .L1965-.LFB2556
	.uleb128 0
	.uleb128 .LEHB459-.LFB2556
	.uleb128 .LEHE459-.LEHB459
	.uleb128 .L1966-.LFB2556
	.uleb128 0
	.uleb128 .LEHB460-.LFB2556
	.uleb128 .LEHE460-.LEHB460
	.uleb128 .L1963-.LFB2556
	.uleb128 0
	.uleb128 .LEHB461-.LFB2556
	.uleb128 .LEHE461-.LEHB461
	.uleb128 .L1967-.LFB2556
	.uleb128 0
	.uleb128 .LEHB462-.LFB2556
	.uleb128 .LEHE462-.LEHB462
	.uleb128 .L1963-.LFB2556
	.uleb128 0
	.uleb128 .LEHB463-.LFB2556
	.uleb128 .LEHE463-.LEHB463
	.uleb128 .L1968-.LFB2556
	.uleb128 0
	.uleb128 .LEHB464-.LFB2556
	.uleb128 .LEHE464-.LEHB464
	.uleb128 .L1963-.LFB2556
	.uleb128 0
	.uleb128 .LEHB465-.LFB2556
	.uleb128 .LEHE465-.LEHB465
	.uleb128 .L1961-.LFB2556
	.uleb128 0
	.uleb128 .LEHB466-.LFB2556
	.uleb128 .LEHE466-.LEHB466
	.uleb128 0
	.uleb128 0
.LLSDACSE2556:
	.text
	.size	_ZN6Object16_add_user_signalERK6StringRK5Array, .-_ZN6Object16_add_user_signalERK6StringRK5Array
	.align 2
	.globl	_ZNK6Object16_get_signal_listEv
	.type	_ZNK6Object16_get_signal_listEv, @function
_ZNK6Object16_get_signal_listEv:
.LFB2557:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2557
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -112(%rbp)	# this, this
# core/object.cpp:1319: 	List<MethodInfo> signal_list;
	leaq	-88(%rbp), %rax	#, tmp90
	movq	%rax, %rdi	# tmp90,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorEC1Ev	#
# core/object.cpp:1320: 	get_signal_list(&signal_list);
	leaq	-88(%rbp), %rdx	#, tmp91
	movq	-112(%rbp), %rax	# this, tmp92
	movq	%rdx, %rsi	# tmp91,
	movq	%rax, %rdi	# tmp92,
.LEHB467:
	call	_ZNK6Object15get_signal_listEP4ListI10MethodInfo16DefaultAllocatorE	#
# core/object.cpp:1322: 	Array ret;
	movq	-104(%rbp), %rax	# <retval>, tmp93
	movq	%rax, %rdi	# tmp93,
	call	_ZN5ArrayC1Ev	#
.LEHE467:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-88(%rbp), %rax	# signal_list._data, _29
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _29
	je	.L1985	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-88(%rbp), %rax	# signal_list._data, _30
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _30->first, D.59523
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L2003	#
.L1985:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59523
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L2003:
# core/object.cpp:1323: 	for (List<MethodInfo>::Element *E = signal_list.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59523, E
.L1992:
# core/object.cpp:1323: 	for (List<MethodInfo>::Element *E = signal_list.front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L2008	#,
	movq	-24(%rbp), %rax	# E, tmp94
	movq	%rax, -32(%rbp)	# tmp94, this
# ./core/list.h:121: 			return value;
	movq	-32(%rbp), %rdx	# this, D.59528
# core/object.cpp:1325: 		ret.push_back(Dictionary(E->get()));
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rdx, %rsi	# D.59528,
	movq	%rax, %rdi	# tmp95,
.LEHB468:
	call	_ZNK10MethodInfocv10DictionaryEv	#
.LEHE468:
# core/object.cpp:1325: 		ret.push_back(Dictionary(E->get()));
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-80(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB469:
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE469:
# core/object.cpp:1325: 		ret.push_back(Dictionary(E->get()));
	leaq	-80(%rbp), %rdx	#, tmp98
	movq	-104(%rbp), %rax	# <retval>, tmp99
	movq	%rdx, %rsi	# tmp98,
	movq	%rax, %rdi	# tmp99,
.LEHB470:
	call	_ZN5Array9push_backERK7Variant	#
.LEHE470:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40330.type, _39
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _39
	je	.L2009	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN7Variant5clearEv	#
.L2009:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1325: 		ret.push_back(Dictionary(E->get()));
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN10DictionaryD1Ev	#
	movq	-24(%rbp), %rax	# E, tmp102
	movq	%rax, -40(%rbp)	# tmp102, this
# ./core/list.h:73: 			return next_ptr;
	movq	-40(%rbp), %rax	# this, tmp103
	movq	88(%rax), %rax	# this_37->next_ptr, D.59532
# core/object.cpp:1323: 	for (List<MethodInfo>::Element *E = signal_list.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59532, E
# core/object.cpp:1323: 	for (List<MethodInfo>::Element *E = signal_list.front(); E; E = E->next()) {
	jmp	.L1992	#
.L2008:
# core/object.cpp:1328: 	return ret;
	nop	
# core/object.cpp:1319: 	List<MethodInfo> signal_list;
	leaq	-88(%rbp), %rax	#, tmp104
	movq	%rax, %rdi	# tmp104,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorED1Ev	#
# core/object.cpp:1328: 	return ret;
	jmp	.L2007	#
.L2002:
	movq	%rax, %rbx	#, tmp107
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40330.type, _40
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _40
	je	.L2010	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN7Variant5clearEv	#
.L2010:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L1996	#
.L2001:
	movq	%rax, %rbx	#, tmp106
.L1996:
# core/object.cpp:1325: 		ret.push_back(Dictionary(E->get()));
	leaq	-48(%rbp), %rax	#, tmp110
	movq	%rax, %rdi	# tmp110,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L1997	#
.L2000:
	movq	%rax, %rbx	#, tmp111
.L1997:
	movq	-104(%rbp), %rax	# <retval>, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN5ArrayD1Ev	#
	jmp	.L1998	#
.L1999:
	movq	%rax, %rbx	#, tmp114
.L1998:
# core/object.cpp:1319: 	List<MethodInfo> signal_list;
	leaq	-88(%rbp), %rax	#, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp114, D.61970
	movq	%rax, %rdi	# D.61970,
.LEHB471:
	call	_Unwind_Resume	#
.LEHE471:
.L2007:
# core/object.cpp:1329: }
	movq	-104(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2557:
	.section	.gcc_except_table
.LLSDA2557:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2557-.LLSDACSB2557
.LLSDACSB2557:
	.uleb128 .LEHB467-.LFB2557
	.uleb128 .LEHE467-.LEHB467
	.uleb128 .L1999-.LFB2557
	.uleb128 0
	.uleb128 .LEHB468-.LFB2557
	.uleb128 .LEHE468-.LEHB468
	.uleb128 .L2000-.LFB2557
	.uleb128 0
	.uleb128 .LEHB469-.LFB2557
	.uleb128 .LEHE469-.LEHB469
	.uleb128 .L2001-.LFB2557
	.uleb128 0
	.uleb128 .LEHB470-.LFB2557
	.uleb128 .LEHE470-.LEHB470
	.uleb128 .L2002-.LFB2557
	.uleb128 0
	.uleb128 .LEHB471-.LFB2557
	.uleb128 .LEHE471-.LEHB471
	.uleb128 0
	.uleb128 0
.LLSDACSE2557:
	.text
	.size	_ZNK6Object16_get_signal_listEv, .-_ZNK6Object16_get_signal_listEv
	.align 2
	.globl	_ZNK6Object27_get_signal_connection_listERK6String
	.type	_ZNK6Object27_get_signal_connection_listERK6String, @function
_ZNK6Object27_get_signal_connection_listERK6String:
.LFB2558:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2558
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$504, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -488(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -496(%rbp)	# this, this
	movq	%rdx, -504(%rbp)	# p_signal, p_signal
# core/object.cpp:1333: 	List<Connection> conns;
	leaq	-472(%rbp), %rax	#, tmp128
	movq	%rax, %rdi	# tmp128,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC1Ev	#
# core/object.cpp:1334: 	get_all_signal_connections(&conns);
	leaq	-472(%rbp), %rdx	#, tmp129
	movq	-496(%rbp), %rax	# this, tmp130
	movq	%rdx, %rsi	# tmp129,
	movq	%rax, %rdi	# tmp130,
.LEHB472:
	call	_ZNK6Object26get_all_signal_connectionsEP4ListINS_10ConnectionE16DefaultAllocatorE	#
# core/object.cpp:1336: 	Array ret;
	movq	-488(%rbp), %rax	# <retval>, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_ZN5ArrayC1Ev	#
.LEHE472:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-472(%rbp), %rax	# conns._data, _114
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _114
	je	.L2012	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-472(%rbp), %rax	# conns._data, _115
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _115->first, D.56998
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L2079	#
.L2012:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.56998
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L2079:
# core/object.cpp:1338: 	for (List<Connection>::Element *E = conns.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.56998, E
.L2032:
# core/object.cpp:1338: 	for (List<Connection>::Element *E = conns.front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L2108	#,
	movq	-24(%rbp), %rax	# E, tmp132
	movq	%rax, -40(%rbp)	# tmp132, this
# ./core/list.h:121: 			return value;
	movq	-40(%rbp), %rax	# this, D.57003
# core/object.cpp:1340: 		Connection &c = E->get();
	movq	%rax, -32(%rbp)	# D.57003, c
# core/object.cpp:1341: 		if (c.signal == p_signal) {
	movq	-32(%rbp), %rax	# c, tmp133
	leaq	8(%rax), %rdx	#, _1
	movq	-504(%rbp), %rax	# p_signal, tmp134
	movq	%rax, %rsi	# tmp134,
	movq	%rdx, %rdi	# _1,
.LEHB473:
	call	_ZNK10StringNameeqERK6String	#
# core/object.cpp:1341: 		if (c.signal == p_signal) {
	testb	%al, %al	# _43
	je	.L2017	#,
# core/object.cpp:1342: 			Dictionary rc;
	leaq	-480(%rbp), %rax	#, tmp135
	movq	%rax, %rdi	# tmp135,
	call	_ZN10DictionaryC1Ev	#
.LEHE473:
# core/object.cpp:1343: 			rc["signal"] = c.signal;
	movq	-32(%rbp), %rax	# c, tmp136
	leaq	8(%rax), %rdx	#, _2
# core/object.cpp:1343: 			rc["signal"] = c.signal;
	leaq	-464(%rbp), %rax	#, tmp137
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# tmp137,
.LEHB474:
	call	_ZN7VariantC1ERK10StringName	#
.LEHE474:
# core/object.cpp:1343: 			rc["signal"] = c.signal;
	leaq	-432(%rbp), %rax	#, tmp138
	movl	$.LC17, %esi	#,
	movq	%rax, %rdi	# tmp138,
.LEHB475:
	call	_ZN7VariantC1EPKc	#
.LEHE475:
# core/object.cpp:1343: 			rc["signal"] = c.signal;
	leaq	-432(%rbp), %rdx	#, tmp139
	leaq	-480(%rbp), %rax	#, tmp140
	movq	%rdx, %rsi	# tmp139,
	movq	%rax, %rdi	# tmp140,
.LEHB476:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _3
# core/object.cpp:1343: 			rc["signal"] = c.signal;
	leaq	-464(%rbp), %rax	#, tmp141
	movq	%rax, %rsi	# tmp141,
	movq	%rdx, %rdi	# _3,
	call	_ZN7VariantaSERKS_	#
.LEHE476:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.40383.type, _123
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _123
	je	.L2109	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp142
	movq	%rax, %rdi	# tmp142,
	call	_ZN7Variant5clearEv	#
.L2109:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.40384.type, _122
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _122
	je	.L2110	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp143
	movq	%rax, %rdi	# tmp143,
	call	_ZN7Variant5clearEv	#
.L2110:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1344: 			rc["method"] = c.method;
	movq	-32(%rbp), %rax	# c, tmp144
	leaq	24(%rax), %rdx	#, _4
# core/object.cpp:1344: 			rc["method"] = c.method;
	leaq	-400(%rbp), %rax	#, tmp145
	movq	%rdx, %rsi	# _4,
	movq	%rax, %rdi	# tmp145,
.LEHB477:
	call	_ZN7VariantC1ERK10StringName	#
.LEHE477:
# core/object.cpp:1344: 			rc["method"] = c.method;
	leaq	-368(%rbp), %rax	#, tmp146
	movl	$.LC19, %esi	#,
	movq	%rax, %rdi	# tmp146,
.LEHB478:
	call	_ZN7VariantC1EPKc	#
.LEHE478:
# core/object.cpp:1344: 			rc["method"] = c.method;
	leaq	-368(%rbp), %rdx	#, tmp147
	leaq	-480(%rbp), %rax	#, tmp148
	movq	%rdx, %rsi	# tmp147,
	movq	%rax, %rdi	# tmp148,
.LEHB479:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _5
# core/object.cpp:1344: 			rc["method"] = c.method;
	leaq	-400(%rbp), %rax	#, tmp149
	movq	%rax, %rsi	# tmp149,
	movq	%rdx, %rdi	# _5,
	call	_ZN7VariantaSERKS_	#
.LEHE479:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.40385.type, _125
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _125
	je	.L2111	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN7Variant5clearEv	#
.L2111:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.40386.type, _124
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _124
	je	.L2112	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp151
	movq	%rax, %rdi	# tmp151,
	call	_ZN7Variant5clearEv	#
.L2112:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1345: 			rc["source"] = c.source;
	movq	-32(%rbp), %rax	# c, tmp152
	movq	(%rax), %rdx	# c_40->source, _6
# core/object.cpp:1345: 			rc["source"] = c.source;
	leaq	-336(%rbp), %rax	#, tmp153
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# tmp153,
.LEHB480:
	call	_ZN7VariantC1EPK6Object	#
.LEHE480:
# core/object.cpp:1345: 			rc["source"] = c.source;
	leaq	-304(%rbp), %rax	#, tmp154
	movl	$.LC16, %esi	#,
	movq	%rax, %rdi	# tmp154,
.LEHB481:
	call	_ZN7VariantC1EPKc	#
.LEHE481:
# core/object.cpp:1345: 			rc["source"] = c.source;
	leaq	-304(%rbp), %rdx	#, tmp155
	leaq	-480(%rbp), %rax	#, tmp156
	movq	%rdx, %rsi	# tmp155,
	movq	%rax, %rdi	# tmp156,
.LEHB482:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _7
# core/object.cpp:1345: 			rc["source"] = c.source;
	leaq	-336(%rbp), %rax	#, tmp157
	movq	%rax, %rsi	# tmp157,
	movq	%rdx, %rdi	# _7,
	call	_ZN7VariantaSERKS_	#
.LEHE482:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.40387.type, _127
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _127
	je	.L2113	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN7Variant5clearEv	#
.L2113:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.40388.type, _126
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _126
	je	.L2114	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp159
	movq	%rax, %rdi	# tmp159,
	call	_ZN7Variant5clearEv	#
.L2114:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1346: 			rc["target"] = c.target;
	movq	-32(%rbp), %rax	# c, tmp160
	movq	16(%rax), %rdx	# c_40->target, _8
# core/object.cpp:1346: 			rc["target"] = c.target;
	leaq	-272(%rbp), %rax	#, tmp161
	movq	%rdx, %rsi	# _8,
	movq	%rax, %rdi	# tmp161,
.LEHB483:
	call	_ZN7VariantC1EPK6Object	#
.LEHE483:
# core/object.cpp:1346: 			rc["target"] = c.target;
	leaq	-240(%rbp), %rax	#, tmp162
	movl	$.LC18, %esi	#,
	movq	%rax, %rdi	# tmp162,
.LEHB484:
	call	_ZN7VariantC1EPKc	#
.LEHE484:
# core/object.cpp:1346: 			rc["target"] = c.target;
	leaq	-240(%rbp), %rdx	#, tmp163
	leaq	-480(%rbp), %rax	#, tmp164
	movq	%rdx, %rsi	# tmp163,
	movq	%rax, %rdi	# tmp164,
.LEHB485:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _9
# core/object.cpp:1346: 			rc["target"] = c.target;
	leaq	-272(%rbp), %rax	#, tmp165
	movq	%rax, %rsi	# tmp165,
	movq	%rdx, %rdi	# _9,
	call	_ZN7VariantaSERKS_	#
.LEHE485:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.40389.type, _129
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _129
	je	.L2115	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp166
	movq	%rax, %rdi	# tmp166,
	call	_ZN7Variant5clearEv	#
.L2115:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.40390.type, _128
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _128
	je	.L2116	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp167
	movq	%rax, %rdi	# tmp167,
	call	_ZN7Variant5clearEv	#
.L2116:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1347: 			rc["binds"] = c.binds;
	movq	-32(%rbp), %rax	# c, tmp168
	leaq	40(%rax), %rdx	#, _10
# core/object.cpp:1347: 			rc["binds"] = c.binds;
	leaq	-208(%rbp), %rax	#, tmp169
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp169,
.LEHB486:
	call	_ZN7VariantC1ERK6VectorIS_E	#
.LEHE486:
# core/object.cpp:1347: 			rc["binds"] = c.binds;
	leaq	-176(%rbp), %rax	#, tmp170
	movl	$.LC20, %esi	#,
	movq	%rax, %rdi	# tmp170,
.LEHB487:
	call	_ZN7VariantC1EPKc	#
.LEHE487:
# core/object.cpp:1347: 			rc["binds"] = c.binds;
	leaq	-176(%rbp), %rdx	#, tmp171
	leaq	-480(%rbp), %rax	#, tmp172
	movq	%rdx, %rsi	# tmp171,
	movq	%rax, %rdi	# tmp172,
.LEHB488:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _11
# core/object.cpp:1347: 			rc["binds"] = c.binds;
	leaq	-208(%rbp), %rax	#, tmp173
	movq	%rax, %rsi	# tmp173,
	movq	%rdx, %rdi	# _11,
	call	_ZN7VariantaSERKS_	#
.LEHE488:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.40391.type, _131
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _131
	je	.L2117	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp174
	movq	%rax, %rdi	# tmp174,
	call	_ZN7Variant5clearEv	#
.L2117:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.40392.type, _130
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _130
	je	.L2118	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp175
	movq	%rax, %rdi	# tmp175,
	call	_ZN7Variant5clearEv	#
.L2118:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1348: 			rc["flags"] = c.flags;
	movq	-32(%rbp), %rax	# c, tmp176
	movl	32(%rax), %edx	# c_40->flags, _12
	leaq	-144(%rbp), %rax	#, tmp177
	movl	%edx, %esi	# _12,
	movq	%rax, %rdi	# tmp177,
.LEHB489:
	call	_ZN7VariantC1Ej	#
.LEHE489:
# core/object.cpp:1348: 			rc["flags"] = c.flags;
	leaq	-112(%rbp), %rax	#, tmp178
	movl	$.LC13, %esi	#,
	movq	%rax, %rdi	# tmp178,
.LEHB490:
	call	_ZN7VariantC1EPKc	#
.LEHE490:
# core/object.cpp:1348: 			rc["flags"] = c.flags;
	leaq	-112(%rbp), %rdx	#, tmp179
	leaq	-480(%rbp), %rax	#, tmp180
	movq	%rdx, %rsi	# tmp179,
	movq	%rax, %rdi	# tmp180,
.LEHB491:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _13
# core/object.cpp:1348: 			rc["flags"] = c.flags;
	leaq	-144(%rbp), %rax	#, tmp181
	movq	%rax, %rsi	# tmp181,
	movq	%rdx, %rdi	# _13,
	call	_ZN7VariantaSERKS_	#
.LEHE491:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.40393.type, _133
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _133
	je	.L2119	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp182
	movq	%rax, %rdi	# tmp182,
	call	_ZN7Variant5clearEv	#
.L2119:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.40394.type, _132
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _132
	je	.L2120	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp183
	movq	%rax, %rdi	# tmp183,
	call	_ZN7Variant5clearEv	#
.L2120:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1349: 			ret.push_back(rc);
	leaq	-480(%rbp), %rdx	#, tmp184
	leaq	-80(%rbp), %rax	#, tmp185
	movq	%rdx, %rsi	# tmp184,
	movq	%rax, %rdi	# tmp185,
.LEHB492:
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE492:
# core/object.cpp:1349: 			ret.push_back(rc);
	leaq	-80(%rbp), %rdx	#, tmp186
	movq	-488(%rbp), %rax	# <retval>, tmp187
	movq	%rdx, %rsi	# tmp186,
	movq	%rax, %rdi	# tmp187,
.LEHB493:
	call	_ZN5Array9push_backERK7Variant	#
.LEHE493:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40395.type, _134
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _134
	je	.L2121	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp188
	movq	%rax, %rdi	# tmp188,
	call	_ZN7Variant5clearEv	#
.L2121:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1342: 			Dictionary rc;
	leaq	-480(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN10DictionaryD1Ev	#
.L2017:
	movq	-24(%rbp), %rax	# E, tmp190
	movq	%rax, -48(%rbp)	# tmp190, this
# ./core/list.h:73: 			return next_ptr;
	movq	-48(%rbp), %rax	# this, tmp191
	movq	56(%rax), %rax	# this_135->next_ptr, D.57020
# core/object.cpp:1338: 	for (List<Connection>::Element *E = conns.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.57020, E
# core/object.cpp:1338: 	for (List<Connection>::Element *E = conns.front(); E; E = E->next()) {
	jmp	.L2032	#
.L2108:
# core/object.cpp:1353: 	return ret;
	nop	
# core/object.cpp:1333: 	List<Connection> conns;
	leaq	-472(%rbp), %rax	#, tmp192
	movq	%rax, %rdi	# tmp192,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED1Ev	#
# core/object.cpp:1353: 	return ret;
	jmp	.L2107	#
.L2067:
	movq	%rax, %rbx	#, tmp195
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-432(%rbp), %eax	# D.40383.type, _137
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _137
	je	.L2122	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-432(%rbp), %rax	#, tmp193
	movq	%rax, %rdi	# tmp193,
	call	_ZN7Variant5clearEv	#
.L2122:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2036	#
.L2066:
	movq	%rax, %rbx	#, tmp194
.L2036:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-464(%rbp), %eax	# D.40384.type, _138
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _138
	je	.L2123	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-464(%rbp), %rax	#, tmp198
	movq	%rax, %rdi	# tmp198,
	call	_ZN7Variant5clearEv	#
.L2123:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2038	#
.L2069:
	movq	%rax, %rbx	#, tmp203
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.40385.type, _139
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _139
	je	.L2124	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp201
	movq	%rax, %rdi	# tmp201,
	call	_ZN7Variant5clearEv	#
.L2124:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2041	#
.L2068:
	movq	%rax, %rbx	#, tmp202
.L2041:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.40386.type, _140
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _140
	je	.L2125	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp206
	movq	%rax, %rdi	# tmp206,
	call	_ZN7Variant5clearEv	#
.L2125:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2038	#
.L2071:
	movq	%rax, %rbx	#, tmp209
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-304(%rbp), %eax	# D.40387.type, _141
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _141
	je	.L2126	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-304(%rbp), %rax	#, tmp207
	movq	%rax, %rdi	# tmp207,
	call	_ZN7Variant5clearEv	#
.L2126:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2045	#
.L2070:
	movq	%rax, %rbx	#, tmp208
.L2045:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.40388.type, _142
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _142
	je	.L2127	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp212
	movq	%rax, %rdi	# tmp212,
	call	_ZN7Variant5clearEv	#
.L2127:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2038	#
.L2073:
	movq	%rax, %rbx	#, tmp215
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# D.40389.type, _143
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _143
	je	.L2128	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp213
	movq	%rax, %rdi	# tmp213,
	call	_ZN7Variant5clearEv	#
.L2128:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2049	#
.L2072:
	movq	%rax, %rbx	#, tmp214
.L2049:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-272(%rbp), %eax	# D.40390.type, _144
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _144
	je	.L2129	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-272(%rbp), %rax	#, tmp218
	movq	%rax, %rdi	# tmp218,
	call	_ZN7Variant5clearEv	#
.L2129:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2038	#
.L2075:
	movq	%rax, %rbx	#, tmp221
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-176(%rbp), %eax	# D.40391.type, _145
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _145
	je	.L2130	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-176(%rbp), %rax	#, tmp219
	movq	%rax, %rdi	# tmp219,
	call	_ZN7Variant5clearEv	#
.L2130:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2053	#
.L2074:
	movq	%rax, %rbx	#, tmp220
.L2053:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.40392.type, _146
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _146
	je	.L2131	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp224
	movq	%rax, %rdi	# tmp224,
	call	_ZN7Variant5clearEv	#
.L2131:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2038	#
.L2077:
	movq	%rax, %rbx	#, tmp227
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-112(%rbp), %eax	# D.40393.type, _147
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _147
	je	.L2132	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-112(%rbp), %rax	#, tmp225
	movq	%rax, %rdi	# tmp225,
	call	_ZN7Variant5clearEv	#
.L2132:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2057	#
.L2076:
	movq	%rax, %rbx	#, tmp226
.L2057:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-144(%rbp), %eax	# D.40394.type, _148
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _148
	je	.L2133	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-144(%rbp), %rax	#, tmp230
	movq	%rax, %rdi	# tmp230,
	call	_ZN7Variant5clearEv	#
.L2133:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2038	#
.L2078:
	movq	%rax, %rbx	#, tmp232
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40395.type, _149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _149
	je	.L2134	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp231
	movq	%rax, %rdi	# tmp231,
	call	_ZN7Variant5clearEv	#
.L2134:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2038	#
.L2065:
	movq	%rax, %rbx	#, tmp199
.L2038:
# core/object.cpp:1342: 			Dictionary rc;
	leaq	-480(%rbp), %rax	#, tmp234
	movq	%rax, %rdi	# tmp234,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L2061	#
.L2064:
	movq	%rax, %rbx	#, tmp235
.L2061:
	movq	-488(%rbp), %rax	# <retval>, tmp237
	movq	%rax, %rdi	# tmp237,
	call	_ZN5ArrayD1Ev	#
	jmp	.L2062	#
.L2063:
	movq	%rax, %rbx	#, tmp238
.L2062:
# core/object.cpp:1333: 	List<Connection> conns;
	leaq	-472(%rbp), %rax	#, tmp240
	movq	%rax, %rdi	# tmp240,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp238, D.61973
	movq	%rax, %rdi	# D.61973,
.LEHB494:
	call	_Unwind_Resume	#
.LEHE494:
.L2107:
# core/object.cpp:1354: }
	movq	-488(%rbp), %rax	# <retval>,
	addq	$504, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2558:
	.section	.gcc_except_table
.LLSDA2558:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2558-.LLSDACSB2558
.LLSDACSB2558:
	.uleb128 .LEHB472-.LFB2558
	.uleb128 .LEHE472-.LEHB472
	.uleb128 .L2063-.LFB2558
	.uleb128 0
	.uleb128 .LEHB473-.LFB2558
	.uleb128 .LEHE473-.LEHB473
	.uleb128 .L2064-.LFB2558
	.uleb128 0
	.uleb128 .LEHB474-.LFB2558
	.uleb128 .LEHE474-.LEHB474
	.uleb128 .L2065-.LFB2558
	.uleb128 0
	.uleb128 .LEHB475-.LFB2558
	.uleb128 .LEHE475-.LEHB475
	.uleb128 .L2066-.LFB2558
	.uleb128 0
	.uleb128 .LEHB476-.LFB2558
	.uleb128 .LEHE476-.LEHB476
	.uleb128 .L2067-.LFB2558
	.uleb128 0
	.uleb128 .LEHB477-.LFB2558
	.uleb128 .LEHE477-.LEHB477
	.uleb128 .L2065-.LFB2558
	.uleb128 0
	.uleb128 .LEHB478-.LFB2558
	.uleb128 .LEHE478-.LEHB478
	.uleb128 .L2068-.LFB2558
	.uleb128 0
	.uleb128 .LEHB479-.LFB2558
	.uleb128 .LEHE479-.LEHB479
	.uleb128 .L2069-.LFB2558
	.uleb128 0
	.uleb128 .LEHB480-.LFB2558
	.uleb128 .LEHE480-.LEHB480
	.uleb128 .L2065-.LFB2558
	.uleb128 0
	.uleb128 .LEHB481-.LFB2558
	.uleb128 .LEHE481-.LEHB481
	.uleb128 .L2070-.LFB2558
	.uleb128 0
	.uleb128 .LEHB482-.LFB2558
	.uleb128 .LEHE482-.LEHB482
	.uleb128 .L2071-.LFB2558
	.uleb128 0
	.uleb128 .LEHB483-.LFB2558
	.uleb128 .LEHE483-.LEHB483
	.uleb128 .L2065-.LFB2558
	.uleb128 0
	.uleb128 .LEHB484-.LFB2558
	.uleb128 .LEHE484-.LEHB484
	.uleb128 .L2072-.LFB2558
	.uleb128 0
	.uleb128 .LEHB485-.LFB2558
	.uleb128 .LEHE485-.LEHB485
	.uleb128 .L2073-.LFB2558
	.uleb128 0
	.uleb128 .LEHB486-.LFB2558
	.uleb128 .LEHE486-.LEHB486
	.uleb128 .L2065-.LFB2558
	.uleb128 0
	.uleb128 .LEHB487-.LFB2558
	.uleb128 .LEHE487-.LEHB487
	.uleb128 .L2074-.LFB2558
	.uleb128 0
	.uleb128 .LEHB488-.LFB2558
	.uleb128 .LEHE488-.LEHB488
	.uleb128 .L2075-.LFB2558
	.uleb128 0
	.uleb128 .LEHB489-.LFB2558
	.uleb128 .LEHE489-.LEHB489
	.uleb128 .L2065-.LFB2558
	.uleb128 0
	.uleb128 .LEHB490-.LFB2558
	.uleb128 .LEHE490-.LEHB490
	.uleb128 .L2076-.LFB2558
	.uleb128 0
	.uleb128 .LEHB491-.LFB2558
	.uleb128 .LEHE491-.LEHB491
	.uleb128 .L2077-.LFB2558
	.uleb128 0
	.uleb128 .LEHB492-.LFB2558
	.uleb128 .LEHE492-.LEHB492
	.uleb128 .L2065-.LFB2558
	.uleb128 0
	.uleb128 .LEHB493-.LFB2558
	.uleb128 .LEHE493-.LEHB493
	.uleb128 .L2078-.LFB2558
	.uleb128 0
	.uleb128 .LEHB494-.LFB2558
	.uleb128 .LEHE494-.LEHB494
	.uleb128 0
	.uleb128 0
.LLSDACSE2558:
	.text
	.size	_ZNK6Object27_get_signal_connection_listERK6String, .-_ZNK6Object27_get_signal_connection_listERK6String
	.section	.rodata
.LC53:
	.string	"signal_name"
.LC54:
	.string	"method_name"
	.text
	.align 2
	.globl	_ZNK6Object25_get_incoming_connectionsEv
	.type	_ZNK6Object25_get_incoming_connectionsEv, @function
_ZNK6Object25_get_incoming_connectionsEv:
.LFB2559:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2559
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$280, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -280(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -288(%rbp)	# this, this
# core/object.cpp:1358: 	Array ret;
	movq	-280(%rbp), %rax	# <retval>, tmp113
	movq	%rax, %rdi	# tmp113,
.LEHB495:
	call	_ZN5ArrayC1Ev	#
.LEHE495:
# core/object.cpp:1359: 	int connections_amount = connections.size();
	movq	-288(%rbp), %rax	# this, tmp114
	addq	$24, %rax	#, _1
	movq	%rax, -32(%rbp)	# _1, this
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-32(%rbp), %rax	# this, tmp115
	movq	(%rax), %rax	# this_74->_data, _75
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	testq	%rax, %rax	# _75
	je	.L2136	#,
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-32(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_74->_data, _76
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	16(%rax), %eax	# _76->size_cache, D.55226
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	jmp	.L2174	#
.L2136:
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	$0, %eax	#, D.55226
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	nop	
.L2174:
# core/object.cpp:1359: 	int connections_amount = connections.size();
	movl	%eax, -24(%rbp)	# D.55226, connections_amount
# core/object.cpp:1360: 	for (int idx_conn = 0; idx_conn < connections_amount; idx_conn++) {
	movl	$0, -20(%rbp)	#, idx_conn
.L2147:
# core/object.cpp:1360: 	for (int idx_conn = 0; idx_conn < connections_amount; idx_conn++) {
	movl	-20(%rbp), %eax	# idx_conn, tmp117
	cmpl	-24(%rbp), %eax	# connections_amount, tmp117
	jge	.L2189	#,
# core/object.cpp:1361: 		Dictionary conn_data;
	leaq	-264(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
.LEHB496:
	call	_ZN10DictionaryC1Ev	#
.LEHE496:
# core/object.cpp:1362: 		conn_data["source"] = connections[idx_conn].source;
	movq	-288(%rbp), %rax	# this, tmp119
	leaq	24(%rax), %rdx	#, _2
	movl	-20(%rbp), %eax	# idx_conn, tmp120
	movl	%eax, %esi	# tmp120,
	movq	%rdx, %rdi	# _2,
.LEHB497:
	call	_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi	#
# core/object.cpp:1362: 		conn_data["source"] = connections[idx_conn].source;
	movq	(%rax), %rdx	# _3->source, _4
# core/object.cpp:1362: 		conn_data["source"] = connections[idx_conn].source;
	leaq	-256(%rbp), %rax	#, tmp121
	movq	%rdx, %rsi	# _4,
	movq	%rax, %rdi	# tmp121,
	call	_ZN7VariantC1EPK6Object	#
.LEHE497:
# core/object.cpp:1362: 		conn_data["source"] = connections[idx_conn].source;
	leaq	-224(%rbp), %rax	#, tmp122
	movl	$.LC16, %esi	#,
	movq	%rax, %rdi	# tmp122,
.LEHB498:
	call	_ZN7VariantC1EPKc	#
.LEHE498:
# core/object.cpp:1362: 		conn_data["source"] = connections[idx_conn].source;
	leaq	-224(%rbp), %rdx	#, tmp123
	leaq	-264(%rbp), %rax	#, tmp124
	movq	%rdx, %rsi	# tmp123,
	movq	%rax, %rdi	# tmp124,
.LEHB499:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _5
# core/object.cpp:1362: 		conn_data["source"] = connections[idx_conn].source;
	leaq	-256(%rbp), %rax	#, tmp125
	movq	%rax, %rsi	# tmp125,
	movq	%rdx, %rdi	# _5,
	call	_ZN7VariantaSERKS_	#
.LEHE499:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# D.40406.type, _82
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _82
	je	.L2190	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp126
	movq	%rax, %rdi	# tmp126,
	call	_ZN7Variant5clearEv	#
.L2190:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-256(%rbp), %eax	# D.40407.type, _81
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _81
	je	.L2191	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-256(%rbp), %rax	#, tmp127
	movq	%rax, %rdi	# tmp127,
	call	_ZN7Variant5clearEv	#
.L2191:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1363: 		conn_data["signal_name"] = connections[idx_conn].signal;
	movq	-288(%rbp), %rax	# this, tmp128
	leaq	24(%rax), %rdx	#, _6
	movl	-20(%rbp), %eax	# idx_conn, tmp129
	movl	%eax, %esi	# tmp129,
	movq	%rdx, %rdi	# _6,
.LEHB500:
	call	_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi	#
# core/object.cpp:1363: 		conn_data["signal_name"] = connections[idx_conn].signal;
	leaq	8(%rax), %rdx	#, _8
# core/object.cpp:1363: 		conn_data["signal_name"] = connections[idx_conn].signal;
	leaq	-192(%rbp), %rax	#, tmp130
	movq	%rdx, %rsi	# _8,
	movq	%rax, %rdi	# tmp130,
	call	_ZN7VariantC1ERK10StringName	#
.LEHE500:
# core/object.cpp:1363: 		conn_data["signal_name"] = connections[idx_conn].signal;
	leaq	-160(%rbp), %rax	#, tmp131
	movl	$.LC53, %esi	#,
	movq	%rax, %rdi	# tmp131,
.LEHB501:
	call	_ZN7VariantC1EPKc	#
.LEHE501:
# core/object.cpp:1363: 		conn_data["signal_name"] = connections[idx_conn].signal;
	leaq	-160(%rbp), %rdx	#, tmp132
	leaq	-264(%rbp), %rax	#, tmp133
	movq	%rdx, %rsi	# tmp132,
	movq	%rax, %rdi	# tmp133,
.LEHB502:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _9
# core/object.cpp:1363: 		conn_data["signal_name"] = connections[idx_conn].signal;
	leaq	-192(%rbp), %rax	#, tmp134
	movq	%rax, %rsi	# tmp134,
	movq	%rdx, %rdi	# _9,
	call	_ZN7VariantaSERKS_	#
.LEHE502:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.40408.type, _84
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _84
	je	.L2192	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp135
	movq	%rax, %rdi	# tmp135,
	call	_ZN7Variant5clearEv	#
.L2192:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.40409.type, _83
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _83
	je	.L2193	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp136
	movq	%rax, %rdi	# tmp136,
	call	_ZN7Variant5clearEv	#
.L2193:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1364: 		conn_data["method_name"] = connections[idx_conn].method;
	movq	-288(%rbp), %rax	# this, tmp137
	leaq	24(%rax), %rdx	#, _10
	movl	-20(%rbp), %eax	# idx_conn, tmp138
	movl	%eax, %esi	# tmp138,
	movq	%rdx, %rdi	# _10,
.LEHB503:
	call	_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi	#
# core/object.cpp:1364: 		conn_data["method_name"] = connections[idx_conn].method;
	leaq	24(%rax), %rdx	#, _12
# core/object.cpp:1364: 		conn_data["method_name"] = connections[idx_conn].method;
	leaq	-128(%rbp), %rax	#, tmp139
	movq	%rdx, %rsi	# _12,
	movq	%rax, %rdi	# tmp139,
	call	_ZN7VariantC1ERK10StringName	#
.LEHE503:
# core/object.cpp:1364: 		conn_data["method_name"] = connections[idx_conn].method;
	leaq	-96(%rbp), %rax	#, tmp140
	movl	$.LC54, %esi	#,
	movq	%rax, %rdi	# tmp140,
.LEHB504:
	call	_ZN7VariantC1EPKc	#
.LEHE504:
# core/object.cpp:1364: 		conn_data["method_name"] = connections[idx_conn].method;
	leaq	-96(%rbp), %rdx	#, tmp141
	leaq	-264(%rbp), %rax	#, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
.LEHB505:
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _13
# core/object.cpp:1364: 		conn_data["method_name"] = connections[idx_conn].method;
	leaq	-128(%rbp), %rax	#, tmp143
	movq	%rax, %rsi	# tmp143,
	movq	%rdx, %rdi	# _13,
	call	_ZN7VariantaSERKS_	#
.LEHE505:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.40410.type, _86
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _86
	je	.L2194	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp144
	movq	%rax, %rdi	# tmp144,
	call	_ZN7Variant5clearEv	#
.L2194:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.40411.type, _85
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _85
	je	.L2195	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp145
	movq	%rax, %rdi	# tmp145,
	call	_ZN7Variant5clearEv	#
.L2195:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1365: 		ret.push_back(conn_data);
	leaq	-264(%rbp), %rdx	#, tmp146
	leaq	-64(%rbp), %rax	#, tmp147
	movq	%rdx, %rsi	# tmp146,
	movq	%rax, %rdi	# tmp147,
.LEHB506:
	call	_ZN7VariantC1ERK10Dictionary	#
.LEHE506:
# core/object.cpp:1365: 		ret.push_back(conn_data);
	leaq	-64(%rbp), %rdx	#, tmp148
	movq	-280(%rbp), %rax	# <retval>, tmp149
	movq	%rdx, %rsi	# tmp148,
	movq	%rax, %rdi	# tmp149,
.LEHB507:
	call	_ZN5Array9push_backERK7Variant	#
.LEHE507:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# D.40412.type, _87
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _87
	je	.L2196	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN7Variant5clearEv	#
.L2196:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1361: 		Dictionary conn_data;
	leaq	-264(%rbp), %rax	#, tmp151
	movq	%rax, %rdi	# tmp151,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:1360: 	for (int idx_conn = 0; idx_conn < connections_amount; idx_conn++) {
	addl	$1, -20(%rbp)	#, idx_conn
	jmp	.L2147	#
.L2168:
	movq	%rax, %rbx	#, tmp154
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# D.40406.type, _88
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _88
	je	.L2197	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp152
	movq	%rax, %rdi	# tmp152,
	call	_ZN7Variant5clearEv	#
.L2197:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2151	#
.L2167:
	movq	%rax, %rbx	#, tmp153
.L2151:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-256(%rbp), %eax	# D.40407.type, _89
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _89
	je	.L2198	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-256(%rbp), %rax	#, tmp157
	movq	%rax, %rdi	# tmp157,
	call	_ZN7Variant5clearEv	#
.L2198:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2153	#
.L2170:
	movq	%rax, %rbx	#, tmp162
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.40408.type, _90
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _90
	je	.L2199	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp160
	movq	%rax, %rdi	# tmp160,
	call	_ZN7Variant5clearEv	#
.L2199:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2156	#
.L2169:
	movq	%rax, %rbx	#, tmp161
.L2156:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.40409.type, _91
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _91
	je	.L2200	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp165
	movq	%rax, %rdi	# tmp165,
	call	_ZN7Variant5clearEv	#
.L2200:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2153	#
.L2172:
	movq	%rax, %rbx	#, tmp168
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-96(%rbp), %eax	# D.40410.type, _92
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _92
	je	.L2201	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-96(%rbp), %rax	#, tmp166
	movq	%rax, %rdi	# tmp166,
	call	_ZN7Variant5clearEv	#
.L2201:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2160	#
.L2171:
	movq	%rax, %rbx	#, tmp167
.L2160:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.40411.type, _93
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _93
	je	.L2202	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp171
	movq	%rax, %rdi	# tmp171,
	call	_ZN7Variant5clearEv	#
.L2202:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2153	#
.L2173:
	movq	%rax, %rbx	#, tmp173
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# D.40412.type, _94
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _94
	je	.L2203	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp172
	movq	%rax, %rdi	# tmp172,
	call	_ZN7Variant5clearEv	#
.L2203:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2153	#
.L2166:
	movq	%rax, %rbx	#, tmp158
.L2153:
# core/object.cpp:1361: 		Dictionary conn_data;
	leaq	-264(%rbp), %rax	#, tmp175
	movq	%rax, %rdi	# tmp175,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L2164	#
.L2165:
	movq	%rax, %rbx	#, tmp176
.L2164:
	movq	-280(%rbp), %rax	# <retval>, tmp178
	movq	%rax, %rdi	# tmp178,
	call	_ZN5ArrayD1Ev	#
	movq	%rbx, %rax	# tmp176, D.61975
	movq	%rax, %rdi	# D.61975,
.LEHB508:
	call	_Unwind_Resume	#
.LEHE508:
.L2189:
# core/object.cpp:1368: 	return ret;
	nop	
# core/object.cpp:1369: }
	movq	-280(%rbp), %rax	# <retval>,
	addq	$280, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2559:
	.section	.gcc_except_table
.LLSDA2559:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2559-.LLSDACSB2559
.LLSDACSB2559:
	.uleb128 .LEHB495-.LFB2559
	.uleb128 .LEHE495-.LEHB495
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB496-.LFB2559
	.uleb128 .LEHE496-.LEHB496
	.uleb128 .L2165-.LFB2559
	.uleb128 0
	.uleb128 .LEHB497-.LFB2559
	.uleb128 .LEHE497-.LEHB497
	.uleb128 .L2166-.LFB2559
	.uleb128 0
	.uleb128 .LEHB498-.LFB2559
	.uleb128 .LEHE498-.LEHB498
	.uleb128 .L2167-.LFB2559
	.uleb128 0
	.uleb128 .LEHB499-.LFB2559
	.uleb128 .LEHE499-.LEHB499
	.uleb128 .L2168-.LFB2559
	.uleb128 0
	.uleb128 .LEHB500-.LFB2559
	.uleb128 .LEHE500-.LEHB500
	.uleb128 .L2166-.LFB2559
	.uleb128 0
	.uleb128 .LEHB501-.LFB2559
	.uleb128 .LEHE501-.LEHB501
	.uleb128 .L2169-.LFB2559
	.uleb128 0
	.uleb128 .LEHB502-.LFB2559
	.uleb128 .LEHE502-.LEHB502
	.uleb128 .L2170-.LFB2559
	.uleb128 0
	.uleb128 .LEHB503-.LFB2559
	.uleb128 .LEHE503-.LEHB503
	.uleb128 .L2166-.LFB2559
	.uleb128 0
	.uleb128 .LEHB504-.LFB2559
	.uleb128 .LEHE504-.LEHB504
	.uleb128 .L2171-.LFB2559
	.uleb128 0
	.uleb128 .LEHB505-.LFB2559
	.uleb128 .LEHE505-.LEHB505
	.uleb128 .L2172-.LFB2559
	.uleb128 0
	.uleb128 .LEHB506-.LFB2559
	.uleb128 .LEHE506-.LEHB506
	.uleb128 .L2166-.LFB2559
	.uleb128 0
	.uleb128 .LEHB507-.LFB2559
	.uleb128 .LEHE507-.LEHB507
	.uleb128 .L2173-.LFB2559
	.uleb128 0
	.uleb128 .LEHB508-.LFB2559
	.uleb128 .LEHE508-.LEHB508
	.uleb128 0
	.uleb128 0
.LLSDACSE2559:
	.text
	.size	_ZNK6Object25_get_incoming_connectionsEv, .-_ZNK6Object25_get_incoming_connectionsEv
	.align 2
	.globl	_ZNK6Object15get_signal_listEP4ListI10MethodInfo16DefaultAllocatorE
	.type	_ZNK6Object15get_signal_listEP4ListI10MethodInfo16DefaultAllocatorE, @function
_ZNK6Object15get_signal_listEP4ListI10MethodInfo16DefaultAllocatorE:
.LFB2560:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2560
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_signals, p_signals
# core/object.cpp:1373: 	if (!script.is_null()) {
	movq	-56(%rbp), %rax	# this, tmp108
	addq	$88, %rax	#, _1
	movq	%rax, %rdi	# _1,
.LEHB509:
	call	_ZNK6RefPtr7is_nullEv	#
# core/object.cpp:1373: 	if (!script.is_null()) {
	xorl	$1, %eax	#, retval.248_25
# core/object.cpp:1373: 	if (!script.is_null()) {
	testb	%al, %al	# retval.248_25
	je	.L2205	#,
# core/object.cpp:1374: 		Ref<Script> scr = script;
	movq	-56(%rbp), %rax	# this, tmp109
	leaq	88(%rax), %rdx	#, _3
	leaq	-48(%rbp), %rax	#, tmp110
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp110,
	call	_ZN3RefI6ScriptEC1ERK6RefPtr	#
.LEHE509:
# core/object.cpp:1375: 		if (scr.is_valid()) {
	leaq	-48(%rbp), %rax	#, tmp111
	movq	%rax, %rdi	# tmp111,
	call	_ZNK3RefI6ScriptE8is_validEv	#
# core/object.cpp:1375: 		if (scr.is_valid()) {
	testb	%al, %al	# retval.249_28
	je	.L2206	#,
# ./core/reference.h:112: 		return reference;
	movq	-48(%rbp), %rax	# scr.reference, D.59239
# core/object.cpp:1376: 			scr->get_script_signal_list(p_signals);
	movq	(%rax), %rdx	# _29->D.33053.D.27638.D.26671._vptr.Object, _4
	addq	$376, %rdx	#, _5
	movq	(%rdx), %rcx	# *_5, _6
# core/object.cpp:1376: 			scr->get_script_signal_list(p_signals);
	movq	-64(%rbp), %rdx	# p_signals, tmp112
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# D.59239,
.LEHB510:
	call	*%rcx	# _6
.LEHE510:
.L2206:
# core/object.cpp:1374: 		Ref<Script> scr = script;
	leaq	-48(%rbp), %rax	#, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN3RefI6ScriptED1Ev	#
.L2205:
	movq	-56(%rbp), %rax	# this, tmp114
	movq	%rax, -32(%rbp)	# tmp114, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-32(%rbp), %rax	# this, tmp115
	movq	112(%rax), %rax	# this_57->_class_ptr, _58
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _58
	jne	.L2208	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-32(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_57->_vptr.Object, _59
	addq	$48, %rax	#, _60
	movq	(%rax), %rdx	# *_60, _61
# core/object.h:647: 			return *_get_class_namev();
	movq	-32(%rbp), %rax	# this, tmp117
	movq	%rax, %rdi	# tmp117,
.LEHB511:
	call	*%rdx	# _61
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L2209	#
.L2208:
# core/object.h:649: 			return *_class_ptr;
	movq	-32(%rbp), %rax	# this, tmp118
	movq	112(%rax), %rax	# this_57->_class_ptr, D.59243
.L2209:
# core/object.cpp:1380: 	ClassDB::get_signal_list(get_class_name(), p_signals);
	leaq	-40(%rbp), %rdx	#, tmp119
	movq	%rax, %rsi	# D.59243,
	movq	%rdx, %rdi	# tmp119,
	call	_ZN10StringNameC1ERKS_	#
.LEHE511:
	movq	-64(%rbp), %rcx	# p_signals, tmp120
	leaq	-40(%rbp), %rax	#, tmp121
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp120,
	movq	%rax, %rdi	# tmp121,
.LEHB512:
	call	_ZN7ClassDB15get_signal_listE10StringNameP4ListI10MethodInfo16DefaultAllocatorEb	#
.LEHE512:
# core/object.cpp:1380: 	ClassDB::get_signal_list(get_class_name(), p_signals);
	leaq	-40(%rbp), %rax	#, tmp122
	movq	%rax, %rdi	# tmp122,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1382: 	const StringName *S = NULL;
	movq	$0, -24(%rbp)	#, S
.L2212:
# core/object.cpp:1384: 	while ((S = signal_map.next(S))) {
	movq	-56(%rbp), %rax	# this, tmp123
	leaq	8(%rax), %rdx	#, _8
	movq	-24(%rbp), %rax	# S, tmp124
	movq	%rax, %rsi	# tmp124,
	movq	%rdx, %rdi	# _8,
.LEHB513:
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_	#
	movq	%rax, -24(%rbp)	# _43, S
# core/object.cpp:1384: 	while ((S = signal_map.next(S))) {
	cmpq	$0, -24(%rbp)	#, S
	setne	%al	#, retval.250_45
	testb	%al, %al	# retval.250_45
	je	.L2217	#,
# core/object.cpp:1386: 		if (signal_map[*S].user.name != "") {
	movq	-56(%rbp), %rax	# this, tmp125
	leaq	8(%rax), %rdx	#, _9
	movq	-24(%rbp), %rax	# S, tmp126
	movq	%rax, %rsi	# tmp126,
	movq	%rdx, %rdi	# _9,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
# core/object.cpp:1386: 		if (signal_map[*S].user.name != "") {
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# _11,
	call	_ZNK6StringneEPKc	#
# core/object.cpp:1386: 		if (signal_map[*S].user.name != "") {
	testb	%al, %al	# _49
	je	.L2212	#,
# core/object.cpp:1388: 			p_signals->push_back(signal_map[*S].user);
	movq	-56(%rbp), %rax	# this, tmp127
	leaq	8(%rax), %rdx	#, _12
	movq	-24(%rbp), %rax	# S, tmp128
	movq	%rax, %rsi	# tmp128,
	movq	%rdx, %rdi	# _12,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
# core/object.cpp:1388: 			p_signals->push_back(signal_map[*S].user);
	movq	%rax, %rdx	# _13, _14
# core/object.cpp:1388: 			p_signals->push_back(signal_map[*S].user);
	movq	-64(%rbp), %rax	# p_signals, tmp129
	movq	%rdx, %rsi	# _14,
	movq	%rax, %rdi	# tmp129,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_	#
# core/object.cpp:1384: 	while ((S = signal_map.next(S))) {
	jmp	.L2212	#
.L2215:
	movq	%rax, %rbx	#, tmp131
# core/object.cpp:1374: 		Ref<Script> scr = script;
	leaq	-48(%rbp), %rax	#, tmp130
	movq	%rax, %rdi	# tmp130,
	call	_ZN3RefI6ScriptED1Ev	#
	movq	%rbx, %rax	# tmp131, D.61979
	movq	%rax, %rdi	# D.61979,
	call	_Unwind_Resume	#
.L2216:
	movq	%rax, %rbx	#, tmp133
# core/object.cpp:1380: 	ClassDB::get_signal_list(get_class_name(), p_signals);
	leaq	-40(%rbp), %rax	#, tmp132
	movq	%rax, %rdi	# tmp132,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp133, D.61980
	movq	%rax, %rdi	# D.61980,
	call	_Unwind_Resume	#
.LEHE513:
.L2217:
# core/object.cpp:1391: }
	nop	
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2560:
	.section	.gcc_except_table
.LLSDA2560:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2560-.LLSDACSB2560
.LLSDACSB2560:
	.uleb128 .LEHB509-.LFB2560
	.uleb128 .LEHE509-.LEHB509
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB510-.LFB2560
	.uleb128 .LEHE510-.LEHB510
	.uleb128 .L2215-.LFB2560
	.uleb128 0
	.uleb128 .LEHB511-.LFB2560
	.uleb128 .LEHE511-.LEHB511
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB512-.LFB2560
	.uleb128 .LEHE512-.LEHB512
	.uleb128 .L2216-.LFB2560
	.uleb128 0
	.uleb128 .LEHB513-.LFB2560
	.uleb128 .LEHE513-.LEHB513
	.uleb128 0
	.uleb128 0
.LLSDACSE2560:
	.text
	.size	_ZNK6Object15get_signal_listEP4ListI10MethodInfo16DefaultAllocatorE, .-_ZNK6Object15get_signal_listEP4ListI10MethodInfo16DefaultAllocatorE
	.align 2
	.globl	_ZNK6Object26get_all_signal_connectionsEP4ListINS_10ConnectionE16DefaultAllocatorE
	.type	_ZNK6Object26get_all_signal_connectionsEP4ListINS_10ConnectionE16DefaultAllocatorE, @function
_ZNK6Object26get_all_signal_connectionsEP4ListINS_10ConnectionE16DefaultAllocatorE:
.LFB2561:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_connections, p_connections
# core/object.cpp:1395: 	const StringName *S = NULL;
	movq	$0, -8(%rbp)	#, S
.L2227:
# core/object.cpp:1397: 	while ((S = signal_map.next(S))) {
	movq	-72(%rbp), %rax	# this, tmp98
	leaq	8(%rax), %rdx	#, _1
	movq	-8(%rbp), %rax	# S, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_	#
	movq	%rax, -8(%rbp)	# _16, S
# core/object.cpp:1397: 	while ((S = signal_map.next(S))) {
	cmpq	$0, -8(%rbp)	#, S
	setne	%al	#, retval.252_18
	testb	%al, %al	# retval.252_18
	je	.L2228	#,
# core/object.cpp:1399: 		const Signal *s = &signal_map[*S];
	movq	-72(%rbp), %rax	# this, tmp100
	leaq	8(%rax), %rdx	#, _2
	movq	-8(%rbp), %rax	# S, tmp101
	movq	%rax, %rsi	# tmp101,
	movq	%rdx, %rdi	# _2,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
	movq	%rax, -24(%rbp)	# _20, s
# core/object.cpp:1401: 		for (int i = 0; i < s->slot_map.size(); i++) {
	movl	$0, -12(%rbp)	#, i
.L2226:
# core/object.cpp:1401: 		for (int i = 0; i < s->slot_map.size(); i++) {
	movq	-24(%rbp), %rax	# s, tmp102
	addq	$88, %rax	#, _3
	movq	%rax, -32(%rbp)	# _3, this
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-32(%rbp), %rax	# this, _31
	movq	%rax, -40(%rbp)	# _31, this
	movq	-40(%rbp), %rax	# this, tmp103
	movq	%rax, -48(%rbp)	# tmp103, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_33->_ptr, _34
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _34
	jne	.L2220	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _35
	jmp	.L2221	#
.L2220:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-48(%rbp), %rax	# this, tmp105
	movq	(%rax), %rax	# this_33->_ptr, _36
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _35
.L2221:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -56(%rbp)	# _35, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -56(%rbp)	#, size
	je	.L2222	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-56(%rbp), %rax	# size, tmp106
	movl	(%rax), %eax	# *size_40, _41
	jmp	.L2223	#
.L2222:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.56517
.L2223:
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1401: 		for (int i = 0; i < s->slot_map.size(); i++) {
	cmpl	%eax, -12(%rbp)	# D.56517, i
	setl	%al	#, retval.253_24
	testb	%al, %al	# retval.253_24
	je	.L2227	#,
# core/object.cpp:1403: 			p_connections->push_back(s->slot_map.getv(i).conn);
	movq	-24(%rbp), %rax	# s, tmp107
	leaq	88(%rax), %rdx	#, _5
	movl	-12(%rbp), %eax	# i, tmp108
	movl	%eax, %esi	# tmp108,
	movq	%rdx, %rdi	# _5,
	call	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi	#
# core/object.cpp:1403: 			p_connections->push_back(s->slot_map.getv(i).conn);
	leaq	8(%rax), %rdx	#, _7
# core/object.cpp:1403: 			p_connections->push_back(s->slot_map.getv(i).conn);
	movq	-80(%rbp), %rax	# p_connections, tmp109
	movq	%rdx, %rsi	# _7,
	movq	%rax, %rdi	# tmp109,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_	#
# core/object.cpp:1401: 		for (int i = 0; i < s->slot_map.size(); i++) {
	addl	$1, -12(%rbp)	#, i
	jmp	.L2226	#
.L2228:
# core/object.cpp:1406: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2561:
	.size	_ZNK6Object26get_all_signal_connectionsEP4ListINS_10ConnectionE16DefaultAllocatorE, .-_ZNK6Object26get_all_signal_connectionsEP4ListINS_10ConnectionE16DefaultAllocatorE
	.align 2
	.globl	_ZNK6Object26get_signal_connection_listERK10StringNameP4ListINS_10ConnectionE16DefaultAllocatorE
	.type	_ZNK6Object26get_signal_connection_listERK10StringNameP4ListINS_10ConnectionE16DefaultAllocatorE, @function
_ZNK6Object26get_signal_connection_listERK10StringNameP4ListINS_10ConnectionE16DefaultAllocatorE:
.LFB2562:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$160, %rsp	#,
	movq	%rdi, -136(%rbp)	# this, this
	movq	%rsi, -144(%rbp)	# p_signal, p_signal
	movq	%rdx, -152(%rbp)	# p_connections, p_connections
# core/object.cpp:1410: 	const Signal *s = signal_map.getptr(p_signal);
	movq	-136(%rbp), %rax	# this, tmp116
	addq	$8, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
	movq	-144(%rbp), %rax	# p_signal, tmp117
	movq	%rax, -32(%rbp)	# tmp117, p_key
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	movq	-24(%rbp), %rax	# this, tmp118
	movq	(%rax), %rax	# this_23->hash_table, _25
	testq	%rax, %rax	# _25
	sete	%al	#, _26
	movzbl	%al, %eax	# _26, _27
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _28
	je	.L2230	#,
# ./core/hash_map.h:335: 			return NULL;
	movl	$0, %eax	#, D.56538
	jmp	.L2231	#
.L2230:
	movq	-24(%rbp), %rax	# this, tmp119
	movq	%rax, -40(%rbp)	# tmp119, this
	movq	-32(%rbp), %rax	# p_key, tmp120
	movq	%rax, -48(%rbp)	# tmp120, p_key
	movq	-48(%rbp), %rax	# p_key, tmp121
	movq	%rax, -56(%rbp)	# tmp121, p_string_name
	movq	-56(%rbp), %rax	# p_string_name, tmp122
	movq	%rax, -64(%rbp)	# tmp122, this
# ./core/string_name.h:112: 		if (_data)
	movq	-64(%rbp), %rax	# this, tmp123
	movq	(%rax), %rax	# this_33->_data, _34
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _34
	je	.L2232	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-64(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_33->_data, _35
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _35->hash, _36
	jmp	.L2233	#
.L2232:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _36
.L2233:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -68(%rbp)	# _36, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-40(%rbp), %rax	# this, tmp125
	movzbl	8(%rax), %eax	# this_30->hash_table_power, _43
	movzbl	%al, %eax	# _43, _44
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp126
	movl	%eax, %ecx	# _44, tmp146
	sall	%cl, %edx	# tmp146, tmp126
	movl	%edx, %eax	# tmp126, _45
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _46
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-68(%rbp), %eax	# hash, tmp128
	movl	%eax, -72(%rbp)	# tmp128, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-40(%rbp), %rax	# this, tmp129
	movq	(%rax), %rax	# this_30->hash_table, _49
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-72(%rbp), %edx	# index, _50
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _51
	addq	%rdx, %rax	# _51, _52
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_52, tmp130
	movq	%rax, -80(%rbp)	# tmp130, e
.L2240:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -80(%rbp)	#, e
	je	.L2235	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-80(%rbp), %rax	# e, tmp131
	movl	(%rax), %eax	# e_54->hash, _55
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -68(%rbp)	# _55, hash
	jne	.L2236	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-80(%rbp), %rax	# e, tmp132
	leaq	16(%rax), %rdx	#, _56
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-48(%rbp), %rax	# p_key, tmp133
	movq	%rax, %rsi	# tmp133,
	movq	%rdx, %rdi	# _56,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _57
	je	.L2236	#,
	movl	$1, %eax	#, iftmp.197_58
	jmp	.L2237	#
.L2236:
	movl	$0, %eax	#, iftmp.197_58
.L2237:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_58
	je	.L2238	#,
# ./core/hash_map.h:198: 				return e;
	movq	-80(%rbp), %rax	# e, _62
	jmp	.L2239	#
.L2238:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-80(%rbp), %rax	# e, tmp134
	movq	8(%rax), %rax	# e_54->next, tmp135
	movq	%rax, -80(%rbp)	# tmp135, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L2240	#
.L2235:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _62
.L2239:
# ./core/hash_map.h:337: 		const Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -88(%rbp)	# _62, e
# ./core/hash_map.h:339: 		if (e)
	cmpq	$0, -88(%rbp)	#, e
	je	.L2241	#,
# ./core/hash_map.h:340: 			return &e->pair.data;
	movq	-88(%rbp), %rax	# e, tmp136
	addq	$24, %rax	#, D.56538
	jmp	.L2231	#
.L2241:
# ./core/hash_map.h:342: 		return NULL;
	movl	$0, %eax	#, D.56538
.L2231:
# core/object.cpp:1410: 	const Signal *s = signal_map.getptr(p_signal);
	movq	%rax, -16(%rbp)	# D.56538, s
# core/object.cpp:1411: 	if (!s)
	cmpq	$0, -16(%rbp)	#, s
	je	.L2250	#,
# core/object.cpp:1414: 	for (int i = 0; i < s->slot_map.size(); i++)
	movl	$0, -4(%rbp)	#, i
.L2249:
# core/object.cpp:1414: 	for (int i = 0; i < s->slot_map.size(); i++)
	movq	-16(%rbp), %rax	# s, tmp137
	addq	$88, %rax	#, _2
	movq	%rax, -96(%rbp)	# _2, this
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-96(%rbp), %rax	# this, _73
	movq	%rax, -104(%rbp)	# _73, this
	movq	-104(%rbp), %rax	# this, tmp138
	movq	%rax, -112(%rbp)	# tmp138, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-112(%rbp), %rax	# this, tmp139
	movq	(%rax), %rax	# this_75->_ptr, _76
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _76
	jne	.L2244	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _77
	jmp	.L2245	#
.L2244:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-112(%rbp), %rax	# this, tmp140
	movq	(%rax), %rax	# this_75->_ptr, _78
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _77
.L2245:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -120(%rbp)	# _77, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -120(%rbp)	#, size
	je	.L2246	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-120(%rbp), %rax	# size, tmp141
	movl	(%rax), %eax	# *size_82, _83
	jmp	.L2247	#
.L2246:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.56556
.L2247:
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1414: 	for (int i = 0; i < s->slot_map.size(); i++)
	cmpl	%eax, -4(%rbp)	# D.56556, i
	setl	%al	#, retval.256_17
	testb	%al, %al	# retval.256_17
	je	.L2229	#,
# core/object.cpp:1415: 		p_connections->push_back(s->slot_map.getv(i).conn);
	movq	-16(%rbp), %rax	# s, tmp142
	leaq	88(%rax), %rdx	#, _4
	movl	-4(%rbp), %eax	# i, tmp143
	movl	%eax, %esi	# tmp143,
	movq	%rdx, %rdi	# _4,
	call	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi	#
# core/object.cpp:1415: 		p_connections->push_back(s->slot_map.getv(i).conn);
	leaq	8(%rax), %rdx	#, _6
# core/object.cpp:1415: 		p_connections->push_back(s->slot_map.getv(i).conn);
	movq	-152(%rbp), %rax	# p_connections, tmp144
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# tmp144,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_	#
# core/object.cpp:1414: 	for (int i = 0; i < s->slot_map.size(); i++)
	addl	$1, -4(%rbp)	#, i
	jmp	.L2249	#
.L2250:
# core/object.cpp:1412: 		return; //nothing
	nop	
.L2229:
# core/object.cpp:1416: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2562:
	.size	_ZNK6Object26get_signal_connection_listERK10StringNameP4ListINS_10ConnectionE16DefaultAllocatorE, .-_ZNK6Object26get_signal_connection_listERK10StringNameP4ListINS_10ConnectionE16DefaultAllocatorE
	.align 2
	.globl	_ZNK6Object33has_persistent_signal_connectionsEv
	.type	_ZNK6Object33has_persistent_signal_connectionsEv, @function
_ZNK6Object33has_persistent_signal_connectionsEv:
.LFB2563:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
# core/object.cpp:1420: 	const StringName *S = NULL;
	movq	$0, -8(%rbp)	#, S
.L2262:
# core/object.cpp:1422: 	while ((S = signal_map.next(S))) {
	movq	-72(%rbp), %rax	# this, tmp102
	leaq	8(%rax), %rdx	#, _1
	movq	-8(%rbp), %rax	# S, tmp103
	movq	%rax, %rsi	# tmp103,
	movq	%rdx, %rdi	# _1,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_	#
	movq	%rax, -8(%rbp)	# _19, S
# core/object.cpp:1422: 	while ((S = signal_map.next(S))) {
	cmpq	$0, -8(%rbp)	#, S
	setne	%al	#, retval.257_21
	testb	%al, %al	# retval.257_21
	je	.L2252	#,
# core/object.cpp:1424: 		const Signal *s = &signal_map[*S];
	movq	-72(%rbp), %rax	# this, tmp104
	leaq	8(%rax), %rdx	#, _2
	movq	-8(%rbp), %rax	# S, tmp105
	movq	%rax, %rsi	# tmp105,
	movq	%rdx, %rdi	# _2,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
	movq	%rax, -24(%rbp)	# _24, s
# core/object.cpp:1426: 		for (int i = 0; i < s->slot_map.size(); i++) {
	movl	$0, -12(%rbp)	#, i
.L2261:
# core/object.cpp:1426: 		for (int i = 0; i < s->slot_map.size(); i++) {
	movq	-24(%rbp), %rax	# s, tmp106
	addq	$88, %rax	#, _3
	movq	%rax, -32(%rbp)	# _3, this
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-32(%rbp), %rax	# this, _35
	movq	%rax, -40(%rbp)	# _35, this
	movq	-40(%rbp), %rax	# this, tmp107
	movq	%rax, -48(%rbp)	# tmp107, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_37->_ptr, _38
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _38
	jne	.L2253	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _39
	jmp	.L2254	#
.L2253:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-48(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_37->_ptr, _40
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _39
.L2254:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -56(%rbp)	# _39, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -56(%rbp)	#, size
	je	.L2255	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-56(%rbp), %rax	# size, tmp110
	movl	(%rax), %eax	# *size_44, _45
	jmp	.L2256	#
.L2255:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.56570
.L2256:
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1426: 		for (int i = 0; i < s->slot_map.size(); i++) {
	cmpl	%eax, -12(%rbp)	# D.56570, i
	setl	%al	#, retval.258_28
	testb	%al, %al	# retval.258_28
	je	.L2262	#,
# core/object.cpp:1428: 			if (s->slot_map.getv(i).conn.flags & CONNECT_PERSIST)
	movq	-24(%rbp), %rax	# s, tmp111
	leaq	88(%rax), %rdx	#, _5
	movl	-12(%rbp), %eax	# i, tmp112
	movl	%eax, %esi	# tmp112,
	movq	%rdx, %rdi	# _5,
	call	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi	#
# core/object.cpp:1428: 			if (s->slot_map.getv(i).conn.flags & CONNECT_PERSIST)
	movl	40(%rax), %eax	# _6->conn.flags, _7
# core/object.cpp:1428: 			if (s->slot_map.getv(i).conn.flags & CONNECT_PERSIST)
	andl	$2, %eax	#, _8
# core/object.cpp:1428: 			if (s->slot_map.getv(i).conn.flags & CONNECT_PERSIST)
	testl	%eax, %eax	# _8
	setne	%al	#, retval.259_31
# core/object.cpp:1428: 			if (s->slot_map.getv(i).conn.flags & CONNECT_PERSIST)
	testb	%al, %al	# retval.259_31
	je	.L2259	#,
# core/object.cpp:1429: 				return true;
	movl	$1, %eax	#, _11
	jmp	.L2260	#
.L2259:
# core/object.cpp:1426: 		for (int i = 0; i < s->slot_map.size(); i++) {
	addl	$1, -12(%rbp)	#, i
	jmp	.L2261	#
.L2252:
# core/object.cpp:1433: 	return false;
	movl	$0, %eax	#, _11
.L2260:
# core/object.cpp:1434: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2563:
	.size	_ZNK6Object33has_persistent_signal_connectionsEv, .-_ZNK6Object33has_persistent_signal_connectionsEv
	.align 2
	.globl	_ZNK6Object29get_signals_connected_to_thisEP4ListINS_10ConnectionE16DefaultAllocatorE
	.type	_ZNK6Object29get_signals_connected_to_thisEP4ListINS_10ConnectionE16DefaultAllocatorE, @function
_ZNK6Object29get_signals_connected_to_thisEP4ListINS_10ConnectionE16DefaultAllocatorE:
.LFB2564:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_connections, p_connections
# core/object.cpp:1438: 	for (const List<Connection>::Element *E = connections.front(); E; E = E->next()) {
	movq	-40(%rbp), %rax	# this, tmp88
	addq	$24, %rax	#, _1
	movq	%rax, -16(%rbp)	# _1, this
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_11->_data, _12
# ./core/list.h:188: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _12
	je	.L2264	#,
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11->_data, _13
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _13->first, D.56117
# ./core/list.h:188: 		return _data ? _data->first : 0;
	jmp	.L2271	#
.L2264:
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.56117
# ./core/list.h:188: 		return _data ? _data->first : 0;
	nop	
.L2271:
# core/object.cpp:1438: 	for (const List<Connection>::Element *E = connections.front(); E; E = E->next()) {
	movq	%rax, -8(%rbp)	# D.56117, E
.L2270:
# core/object.cpp:1438: 	for (const List<Connection>::Element *E = connections.front(); E; E = E->next()) {
	cmpq	$0, -8(%rbp)	#, E
	je	.L2272	#,
	movq	-8(%rbp), %rax	# E, tmp91
	movq	%rax, -32(%rbp)	# tmp91, this
# ./core/list.h:127: 			return value;
	movq	-32(%rbp), %rdx	# this, D.56126
# core/object.cpp:1439: 		p_connections->push_back(E->get());
	movq	-48(%rbp), %rax	# p_connections, tmp92
	movq	%rdx, %rsi	# D.56126,
	movq	%rax, %rdi	# tmp92,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_	#
	movq	-8(%rbp), %rax	# E, tmp93
	movq	%rax, -24(%rbp)	# tmp93, this
# ./core/list.h:66: 			return next_ptr;
	movq	-24(%rbp), %rax	# this, tmp94
	movq	56(%rax), %rax	# this_18->next_ptr, D.56122
# core/object.cpp:1438: 	for (const List<Connection>::Element *E = connections.front(); E; E = E->next()) {
	movq	%rax, -8(%rbp)	# D.56122, E
# core/object.cpp:1438: 	for (const List<Connection>::Element *E = connections.front(); E; E = E->next()) {
	jmp	.L2270	#
.L2272:
# core/object.cpp:1441: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2564:
	.size	_ZNK6Object29get_signals_connected_to_thisEP4ListINS_10ConnectionE16DefaultAllocatorE, .-_ZNK6Object29get_signals_connected_to_thisEP4ListINS_10ConnectionE16DefaultAllocatorE
	.section	.text._ZN10MethodInfoaSEOS_,"axG",@progbits,_ZN10MethodInfoaSEOS_,comdat
	.align 2
	.weak	_ZN10MethodInfoaSEOS_
	.type	_ZN10MethodInfoaSEOS_, @function
_ZN10MethodInfoaSEOS_:
.LFB2567:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# D.39823, D.39823
# core/object.h:200: struct MethodInfo {
	movq	-32(%rbp), %rdx	# D.39823, _1
	movq	-24(%rbp), %rcx	# this, _2
	leaq	-8(%rbp), %rax	#, tmp94
	movq	%rcx, %rsi	# _2,
	movq	%rax, %rdi	# tmp94,
	call	_ZN6StringaSERKS_	#
	leaq	-8(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6StringD1Ev	#
	movq	-32(%rbp), %rax	# D.39823, tmp96
	leaq	8(%rax), %rdx	#, _3
	movq	-24(%rbp), %rax	# this, tmp97
	addq	$8, %rax	#, _4
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _4,
	call	_ZN12PropertyInfoaSEOS_	#
	movq	-32(%rbp), %rax	# D.39823, tmp98
	movl	56(%rax), %edx	# _11(D)->flags, _5
	movq	-24(%rbp), %rax	# this, tmp99
	movl	%edx, 56(%rax)	# _5, this_12(D)->flags
	movq	-32(%rbp), %rax	# D.39823, tmp100
	movl	60(%rax), %edx	# _11(D)->id, _6
	movq	-24(%rbp), %rax	# this, tmp101
	movl	%edx, 60(%rax)	# _6, this_12(D)->id
	movq	-32(%rbp), %rax	# D.39823, tmp102
	leaq	64(%rax), %rdx	#, _7
	movq	-24(%rbp), %rax	# this, tmp103
	addq	$64, %rax	#, _8
	movq	%rdx, %rsi	# _7,
	movq	%rax, %rdi	# _8,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_	#
	movq	-32(%rbp), %rax	# D.39823, tmp104
	leaq	72(%rax), %rdx	#, _9
	movq	-24(%rbp), %rax	# this, tmp105
	addq	$72, %rax	#, _10
	movq	%rdx, %rsi	# _9,
	movq	%rax, %rdi	# _10,
	call	_ZN6VectorI7VariantEaSERKS1_	#
	movq	-24(%rbp), %rax	# this, _22
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2567:
	.size	_ZN10MethodInfoaSEOS_, .-_ZN10MethodInfoaSEOS_
	.section	.text._ZN6Object6SignalaSEOS0_,"axG",@progbits,_ZN6Object6SignalaSEOS0_,comdat
	.align 2
	.weak	_ZN6Object6SignalaSEOS0_
	.type	_ZN6Object6SignalaSEOS0_, @function
_ZN6Object6SignalaSEOS0_:
.LFB2566:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.39835, D.39835
# core/object.h:442: 	struct Signal {
	movq	-16(%rbp), %rdx	# D.39835, _1
	movq	-8(%rbp), %rax	# this, _2
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# _2,
	call	_ZN10MethodInfoaSEOS_	#
	movq	-16(%rbp), %rax	# D.39835, tmp89
	leaq	88(%rax), %rdx	#, _3
	movq	-8(%rbp), %rax	# this, tmp90
	addq	$88, %rax	#, _4
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _4,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_	#
	movq	-16(%rbp), %rax	# D.39835, tmp91
	movl	96(%rax), %edx	# _6(D)->lock, _5
	movq	-8(%rbp), %rax	# this, tmp92
	movl	%edx, 96(%rax)	# _5, this_7(D)->lock
	movq	-8(%rbp), %rax	# this, _12
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2566:
	.size	_ZN6Object6SignalaSEOS0_, .-_ZN6Object6SignalaSEOS0_
	.section	.text._ZN6Object6Signal6TargetD2Ev,"axG",@progbits,_ZN6Object6Signal6TargetD5Ev,comdat
	.align 2
	.weak	_ZN6Object6Signal6TargetD2Ev
	.type	_ZN6Object6Signal6TargetD2Ev, @function
_ZN6Object6Signal6TargetD2Ev:
.LFB2569:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:444: 		struct Target {
	movq	-8(%rbp), %rax	# this, tmp83
	addq	$8, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10StringNameD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2569:
	.size	_ZN6Object6Signal6TargetD2Ev, .-_ZN6Object6Signal6TargetD2Ev
	.weak	_ZN6Object6Signal6TargetD1Ev
	.set	_ZN6Object6Signal6TargetD1Ev,_ZN6Object6Signal6TargetD2Ev
	.section	.text._ZN6Object6Signal4SlotD2Ev,"axG",@progbits,_ZN6Object6Signal4SlotD5Ev,comdat
	.align 2
	.weak	_ZN6Object6Signal4SlotD2Ev
	.type	_ZN6Object6Signal4SlotD2Ev, @function
_ZN6Object6Signal4SlotD2Ev:
.LFB2572:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.h:458: 		struct Slot {
	movq	-8(%rbp), %rax	# this, tmp83
	addq	$8, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN6Object10ConnectionD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2572:
	.size	_ZN6Object6Signal4SlotD2Ev, .-_ZN6Object6Signal4SlotD2Ev
	.weak	_ZN6Object6Signal4SlotD1Ev
	.set	_ZN6Object6Signal4SlotD1Ev,_ZN6Object6Signal4SlotD2Ev
	.section	.text._ZN6Object10ConnectionaSERKS0_,"axG",@progbits,_ZN6Object10ConnectionaSERKS0_,comdat
	.align 2
	.weak	_ZN6Object10ConnectionaSERKS0_
	.type	_ZN6Object10ConnectionaSERKS0_, @function
_ZN6Object10ConnectionaSERKS0_:
.LFB2574:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.40554, D.40554
# core/object.h:412: 	struct Connection {
	movq	-16(%rbp), %rax	# D.40554, tmp93
	movq	(%rax), %rdx	# _11(D)->source, _1
	movq	-8(%rbp), %rax	# this, tmp94
	movq	%rdx, (%rax)	# _1, this_12(D)->source
	movq	-16(%rbp), %rax	# D.40554, tmp95
	leaq	8(%rax), %rdx	#, _2
	movq	-8(%rbp), %rax	# this, tmp96
	addq	$8, %rax	#, _3
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# _3,
	call	_ZN10StringNameaSERKS_	#
	movq	-16(%rbp), %rax	# D.40554, tmp97
	movq	16(%rax), %rdx	# _11(D)->target, _4
	movq	-8(%rbp), %rax	# this, tmp98
	movq	%rdx, 16(%rax)	# _4, this_12(D)->target
	movq	-16(%rbp), %rax	# D.40554, tmp99
	leaq	24(%rax), %rdx	#, _5
	movq	-8(%rbp), %rax	# this, tmp100
	addq	$24, %rax	#, _6
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameaSERKS_	#
	movq	-16(%rbp), %rax	# D.40554, tmp101
	movl	32(%rax), %edx	# _11(D)->flags, _7
	movq	-8(%rbp), %rax	# this, tmp102
	movl	%edx, 32(%rax)	# _7, this_12(D)->flags
	movq	-16(%rbp), %rax	# D.40554, tmp103
	leaq	40(%rax), %rdx	#, _8
	movq	-8(%rbp), %rax	# this, tmp104
	addq	$40, %rax	#, _9
	movq	%rdx, %rsi	# _8,
	movq	%rax, %rdi	# _9,
	call	_ZN6VectorI7VariantEaSERKS1_	#
	movq	-8(%rbp), %rax	# this, _19
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2574:
	.size	_ZN6Object10ConnectionaSERKS0_, .-_ZN6Object10ConnectionaSERKS0_
	.section	.text._ZN6Object6Signal4SlotaSERKS1_,"axG",@progbits,_ZN6Object6Signal4SlotaSERKS1_,comdat
	.align 2
	.weak	_ZN6Object6Signal4SlotaSERKS1_
	.type	_ZN6Object6Signal4SlotaSERKS1_, @function
_ZN6Object6Signal4SlotaSERKS1_:
.LFB2575:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.40561, D.40561
# core/object.h:458: 		struct Slot {
	movq	-16(%rbp), %rax	# D.40561, tmp88
	movl	(%rax), %edx	# _6(D)->reference_count, _1
	movq	-8(%rbp), %rax	# this, tmp89
	movl	%edx, (%rax)	# _1, this_7(D)->reference_count
	movq	-16(%rbp), %rax	# D.40561, tmp90
	leaq	8(%rax), %rdx	#, _2
	movq	-8(%rbp), %rax	# this, tmp91
	addq	$8, %rax	#, _3
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# _3,
	call	_ZN6Object10ConnectionaSERKS0_	#
	movq	-16(%rbp), %rax	# D.40561, tmp92
	movq	64(%rax), %rdx	# _6(D)->cE, _4
	movq	-8(%rbp), %rax	# this, tmp93
	movq	%rdx, 64(%rax)	# _4, this_7(D)->cE
	movq	-8(%rbp), %rax	# this, _11
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2575:
	.size	_ZN6Object6Signal4SlotaSERKS1_, .-_ZN6Object6Signal4SlotaSERKS1_
	.section	.rodata
	.align 8
.LC55:
	.string	"Parameter ' p_to_object ' is null."
.LC56:
	.string	"connect"
	.align 8
.LC57:
	.string	"Method/Function Failed, returning: ERR_INVALID_PARAMETER"
	.text
	.align 2
	.globl	_ZN6Object7connectERK10StringNamePS_S2_RK6VectorI7VariantEj
	.type	_ZN6Object7connectERK10StringNamePS_S2_RK6VectorI7VariantEj, @function
_ZN6Object7connectERK10StringNamePS_S2_RK6VectorI7VariantEj:
.LFB2565:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2565
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$472, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -440(%rbp)	# this, this
	movq	%rsi, -448(%rbp)	# p_signal, p_signal
	movq	%rdx, -456(%rbp)	# p_to_object, p_to_object
	movq	%rcx, -464(%rbp)	# p_to_method, p_to_method
	movq	%r8, -472(%rbp)	# p_binds, p_binds
	movl	%r9d, -476(%rbp)	# p_flags, p_flags
# core/object.cpp:1445: 	ERR_FAIL_NULL_V(p_to_object, ERR_INVALID_PARAMETER);
	cmpq	$0, -456(%rbp)	#, p_to_object
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L2284	#,
# core/object.cpp:1445: 	ERR_FAIL_NULL_V(p_to_object, ERR_INVALID_PARAMETER);
	movl	$0, %r8d	#,
	movl	$.LC55, %ecx	#,
	movl	$1445, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC56, %edi	#,
.LEHB514:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$31, %ebx	#, _32
	jmp	.L2311	#
.L2284:
# core/object.cpp:1445: 	ERR_FAIL_NULL_V(p_to_object, ERR_INVALID_PARAMETER);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1447: 	Signal *s = signal_map.getptr(p_signal);
	movq	-440(%rbp), %rax	# this, tmp149
	addq	$8, %rax	#, _4
	movq	%rax, -40(%rbp)	# _4, this
	movq	-448(%rbp), %rax	# p_signal, tmp150
	movq	%rax, -48(%rbp)	# tmp150, p_key
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	movq	-40(%rbp), %rax	# this, tmp151
	movq	(%rax), %rax	# this_146->hash_table, _148
	testq	%rax, %rax	# _148
	sete	%al	#, _149
	movzbl	%al, %eax	# _149, _150
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _151
	je	.L2286	#,
# ./core/hash_map.h:322: 			return NULL;
	movl	$0, %eax	#, D.59260
	jmp	.L2287	#
.L2286:
	movq	-40(%rbp), %rax	# this, tmp152
	movq	%rax, -56(%rbp)	# tmp152, this
	movq	-48(%rbp), %rax	# p_key, tmp153
	movq	%rax, -64(%rbp)	# tmp153, p_key
	movq	-64(%rbp), %rax	# p_key, tmp154
	movq	%rax, -72(%rbp)	# tmp154, p_string_name
	movq	-72(%rbp), %rax	# p_string_name, tmp155
	movq	%rax, -80(%rbp)	# tmp155, this
# ./core/string_name.h:112: 		if (_data)
	movq	-80(%rbp), %rax	# this, tmp156
	movq	(%rax), %rax	# this_156->_data, _157
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _157
	je	.L2288	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-80(%rbp), %rax	# this, tmp157
	movq	(%rax), %rax	# this_156->_data, _158
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _158->hash, _159
	jmp	.L2289	#
.L2288:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _159
.L2289:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -84(%rbp)	# _159, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-56(%rbp), %rax	# this, tmp158
	movzbl	8(%rax), %eax	# this_153->hash_table_power, _166
	movzbl	%al, %eax	# _166, _167
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp159
	movl	%eax, %ecx	# _167, tmp253
	sall	%cl, %edx	# tmp253, tmp159
	movl	%edx, %eax	# tmp159, _168
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _169
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-84(%rbp), %eax	# hash, tmp161
	movl	%eax, -88(%rbp)	# tmp161, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-56(%rbp), %rax	# this, tmp162
	movq	(%rax), %rax	# this_153->hash_table, _172
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-88(%rbp), %edx	# index, _173
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _174
	addq	%rdx, %rax	# _174, _175
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_175, tmp163
	movq	%rax, -96(%rbp)	# tmp163, e
.L2296:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -96(%rbp)	#, e
	je	.L2291	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-96(%rbp), %rax	# e, tmp164
	movl	(%rax), %eax	# e_177->hash, _178
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -84(%rbp)	# _178, hash
	jne	.L2292	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-96(%rbp), %rax	# e, tmp165
	leaq	16(%rax), %rdx	#, _179
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# p_key, tmp166
	movq	%rax, %rsi	# tmp166,
	movq	%rdx, %rdi	# _179,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _180
	je	.L2292	#,
	movl	$1, %eax	#, iftmp.197_181
	jmp	.L2293	#
.L2292:
	movl	$0, %eax	#, iftmp.197_181
.L2293:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_181
	je	.L2294	#,
# ./core/hash_map.h:198: 				return e;
	movq	-96(%rbp), %rax	# e, _185
	jmp	.L2295	#
.L2294:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-96(%rbp), %rax	# e, tmp167
	movq	8(%rax), %rax	# e_177->next, tmp168
	movq	%rax, -96(%rbp)	# tmp168, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L2296	#
.L2291:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _185
.L2295:
# ./core/hash_map.h:324: 		Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -104(%rbp)	# _185, e
# ./core/hash_map.h:326: 		if (e)
	cmpq	$0, -104(%rbp)	#, e
	je	.L2297	#,
# ./core/hash_map.h:327: 			return &e->pair.data;
	movq	-104(%rbp), %rax	# e, tmp169
	addq	$24, %rax	#, D.59260
	jmp	.L2287	#
.L2297:
# ./core/hash_map.h:329: 		return NULL;
	movl	$0, %eax	#, D.59260
.L2287:
# core/object.cpp:1447: 	Signal *s = signal_map.getptr(p_signal);
	movq	%rax, -24(%rbp)	# D.59260, s
# core/object.cpp:1448: 	if (!s) {
	cmpq	$0, -24(%rbp)	#, s
	jne	.L2298	#,
# core/object.cpp:1449: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	movq	-448(%rbp), %rdx	# p_signal, tmp170
	leaq	-264(%rbp), %rax	#, tmp171
	movq	%rdx, %rsi	# tmp170,
	movq	%rax, %rdi	# tmp171,
	call	_ZN10StringNameC1ERKS_	#
.LEHE514:
	movq	-440(%rbp), %rax	# this, tmp172
	movq	%rax, -112(%rbp)	# tmp172, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-112(%rbp), %rax	# this, tmp173
	movq	112(%rax), %rax	# this_195->_class_ptr, _196
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _196
	jne	.L2299	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-112(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_195->_vptr.Object, _197
	addq	$48, %rax	#, _198
	movq	(%rax), %rdx	# *_198, _199
# core/object.h:647: 			return *_get_class_namev();
	movq	-112(%rbp), %rax	# this, tmp175
	movq	%rax, %rdi	# tmp175,
.LEHB515:
	call	*%rdx	# _199
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L2300	#
.L2299:
# core/object.h:649: 			return *_class_ptr;
	movq	-112(%rbp), %rax	# this, tmp176
	movq	112(%rax), %rax	# this_195->_class_ptr, D.59273
.L2300:
# core/object.cpp:1449: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-256(%rbp), %rdx	#, tmp177
	movq	%rax, %rsi	# D.59273,
	movq	%rdx, %rdi	# tmp177,
	call	_ZN10StringNameC1ERKS_	#
.LEHE515:
# core/object.cpp:1449: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-264(%rbp), %rdx	#, tmp178
	leaq	-256(%rbp), %rax	#, tmp179
	movq	%rdx, %rsi	# tmp178,
	movq	%rax, %rdi	# tmp179,
.LEHB516:
	call	_ZN7ClassDB10has_signalE10StringNameS0_	#
.LEHE516:
	movb	%al, -25(%rbp)	# _59, signal_is_valid
	leaq	-256(%rbp), %rax	#, tmp180
	movq	%rax, %rdi	# tmp180,
	call	_ZN10StringNameD1Ev	#
	leaq	-264(%rbp), %rax	#, tmp181
	movq	%rax, %rdi	# tmp181,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	movzbl	-25(%rbp), %eax	# signal_is_valid, tmp182
	xorl	$1, %eax	#, _6
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	testb	%al, %al	# _6
	je	.L2301	#,
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	movq	-440(%rbp), %rax	# this, tmp183
	addq	$88, %rax	#, _7
	movq	%rax, %rdi	# _7,
.LEHB517:
	call	_ZNK6RefPtr7is_nullEv	#
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	xorl	$1, %eax	#, _9
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	testb	%al, %al	# _9
	je	.L2301	#,
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	movl	$1, %eax	#, iftmp.261_34
	jmp	.L2302	#
.L2301:
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	movl	$0, %eax	#, iftmp.261_34
.L2302:
# core/object.cpp:1451: 		if (!signal_is_valid && !script.is_null()) {
	testb	%al, %al	# iftmp.261_34
	je	.L2303	#,
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	movq	-440(%rbp), %rax	# this, tmp184
	leaq	88(%rax), %rdx	#, _10
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	leaq	-248(%rbp), %rax	#, tmp185
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp185,
	call	_ZN3RefI6ScriptEC1ERK6RefPtr	#
.LEHE517:
# ./core/reference.h:112: 		return reference;
	movq	-248(%rbp), %rax	# D.40476.reference, D.59278
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	movq	(%rax), %rdx	# _71->D.33053.D.27638.D.26671._vptr.Object, _11
	addq	$368, %rdx	#, _12
	movq	(%rdx), %rcx	# *_12, _13
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	movq	-448(%rbp), %rdx	# p_signal, tmp186
	movq	%rdx, %rsi	# tmp186,
	movq	%rax, %rdi	# D.59278,
.LEHB518:
	call	*%rcx	# _13
.LEHE518:
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	movl	%eax, %ebx	#, _73
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	leaq	-248(%rbp), %rax	#, tmp187
	movq	%rax, %rdi	# tmp187,
	call	_ZN3RefI6ScriptED1Ev	#
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	testb	%bl, %bl	# _73
	je	.L2303	#,
# core/object.cpp:1454: 				signal_is_valid = true;
	movb	$1, -25(%rbp)	#, signal_is_valid
.L2303:
# core/object.cpp:1466: 		if (!signal_is_valid) {
	movzbl	-25(%rbp), %eax	# signal_is_valid, tmp188
	xorl	$1, %eax	#, _14
# core/object.cpp:1466: 		if (!signal_is_valid) {
	testb	%al, %al	# _14
	je	.L2305	#,
# core/object.cpp:1468: 			ERR_FAIL_V(ERR_INVALID_PARAMETER);
	movl	$0, %r8d	#,
	movl	$.LC57, %ecx	#,
	movl	$1468, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC56, %edi	#,
.LEHB519:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$31, %ebx	#, _32
	jmp	.L2311	#
.L2305:
# core/object.cpp:1470: 		signal_map[p_signal] = Signal();
	leaq	-240(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN6Object6SignalC1Ev	#
.LEHE519:
# core/object.cpp:1470: 		signal_map[p_signal] = Signal();
	movq	-440(%rbp), %rax	# this, tmp190
	leaq	8(%rax), %rdx	#, _15
	movq	-448(%rbp), %rax	# p_signal, tmp191
	movq	%rax, %rsi	# tmp191,
	movq	%rdx, %rdi	# _15,
.LEHB520:
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
	movq	%rax, %rdx	#, _16
# core/object.cpp:1470: 		signal_map[p_signal] = Signal();
	leaq	-240(%rbp), %rax	#, tmp192
	movq	%rax, %rsi	# tmp192,
	movq	%rdx, %rdi	# _16,
	call	_ZN6Object6SignalaSEOS0_	#
.LEHE520:
# core/object.cpp:1470: 		signal_map[p_signal] = Signal();
	leaq	-240(%rbp), %rax	#, tmp193
	movq	%rax, %rdi	# tmp193,
	call	_ZN6Object6SignalD1Ev	#
# core/object.cpp:1471: 		s = &signal_map[p_signal];
	movq	-440(%rbp), %rax	# this, tmp194
	leaq	8(%rax), %rdx	#, _17
	movq	-448(%rbp), %rax	# p_signal, tmp195
	movq	%rax, %rsi	# tmp195,
	movq	%rdx, %rdi	# _17,
.LEHB521:
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
	movq	%rax, -24(%rbp)	# _87, s
.L2298:
	movq	-456(%rbp), %rax	# p_to_object, tmp196
	movq	%rax, -120(%rbp)	# tmp196, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-120(%rbp), %rax	# this, tmp197
	movq	64(%rax), %rax	# this_205->_instance_id, D.59282
# core/object.cpp:1474: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	movq	%rax, -128(%rbp)	# D.59282, D.40500
# core/object.cpp:1474: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	movq	-464(%rbp), %rdx	# p_to_method, tmp198
	leaq	-128(%rbp), %rcx	#, tmp199
	leaq	-288(%rbp), %rax	#, tmp200
	movq	%rcx, %rsi	# tmp199,
	movq	%rax, %rdi	# tmp200,
	call	_ZN6Object6Signal6TargetC1ERKmRK10StringName	#
.LEHE521:
# core/object.cpp:1475: 	if (s->slot_map.has(target)) {
	movq	-24(%rbp), %rax	# s, tmp201
	leaq	88(%rax), %rdx	#, _19
	leaq	-288(%rbp), %rax	#, tmp202
	movq	%rax, %rsi	# tmp202,
	movq	%rdx, %rdi	# _19,
.LEHB522:
	call	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_	#
# core/object.cpp:1475: 	if (s->slot_map.has(target)) {
	testb	%al, %al	# _103
	je	.L2307	#,
# core/object.cpp:1476: 		if (p_flags & CONNECT_REFERENCE_COUNTED) {
	movl	-476(%rbp), %eax	# p_flags, tmp203
	andl	$8, %eax	#, _20
# core/object.cpp:1476: 		if (p_flags & CONNECT_REFERENCE_COUNTED) {
	testl	%eax, %eax	# _20
	je	.L2308	#,
# core/object.cpp:1477: 			s->slot_map[target].reference_count++;
	movq	-24(%rbp), %rax	# s, tmp204
	leaq	88(%rax), %rdx	#, _21
	leaq	-288(%rbp), %rax	#, tmp205
	movq	%rax, %rsi	# tmp205,
	movq	%rdx, %rdi	# _21,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_	#
# core/object.cpp:1477: 			s->slot_map[target].reference_count++;
	movl	(%rax), %edx	# _22->reference_count, _23
# core/object.cpp:1477: 			s->slot_map[target].reference_count++;
	addl	$1, %edx	#, _24
	movl	%edx, (%rax)	# _24, _22->reference_count
# core/object.cpp:1478: 			return OK;
	movl	$0, %ebx	#, _32
	jmp	.L2309	#
.L2308:
# core/object.cpp:1481: 			ERR_FAIL_V(ERR_INVALID_PARAMETER);
	movl	$0, %r8d	#,
	movl	$.LC57, %ecx	#,
	movl	$1481, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC56, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# core/object.cpp:1481: 			ERR_FAIL_V(ERR_INVALID_PARAMETER);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$31, %ebx	#, _32
	jmp	.L2309	#
.L2307:
# core/object.cpp:1485: 	Signal::Slot slot;
	leaq	-368(%rbp), %rax	#, tmp206
	movq	%rax, %rdi	# tmp206,
	call	_ZN6Object6Signal4SlotC1Ev	#
.LEHE522:
# core/object.cpp:1487: 	Connection conn;
	leaq	-432(%rbp), %rax	#, tmp207
	movq	%rax, %rdi	# tmp207,
.LEHB523:
	call	_ZN6Object10ConnectionC1Ev	#
.LEHE523:
# core/object.cpp:1488: 	conn.source = this;
	movq	-440(%rbp), %rax	# this, tmp208
	movq	%rax, -432(%rbp)	# tmp208, conn.source
# core/object.cpp:1489: 	conn.target = p_to_object;
	movq	-456(%rbp), %rax	# p_to_object, tmp209
	movq	%rax, -416(%rbp)	# tmp209, conn.target
# core/object.cpp:1490: 	conn.method = p_to_method;
	movq	-464(%rbp), %rax	# p_to_method, tmp210
	leaq	-432(%rbp), %rdx	#, tmp211
	addq	$24, %rdx	#, tmp212
	movq	%rax, %rsi	# tmp210,
	movq	%rdx, %rdi	# tmp212,
.LEHB524:
	call	_ZN10StringNameaSERKS_	#
# core/object.cpp:1491: 	conn.signal = p_signal;
	movq	-448(%rbp), %rax	# p_signal, tmp213
	leaq	-432(%rbp), %rdx	#, tmp214
	addq	$8, %rdx	#, tmp215
	movq	%rax, %rsi	# tmp213,
	movq	%rdx, %rdi	# tmp215,
	call	_ZN10StringNameaSERKS_	#
# core/object.cpp:1492: 	conn.flags = p_flags;
	movl	-476(%rbp), %eax	# p_flags, tmp216
	movl	%eax, -400(%rbp)	# tmp216, conn.flags
# core/object.cpp:1493: 	conn.binds = p_binds;
	movq	-472(%rbp), %rax	# p_binds, tmp217
	leaq	-432(%rbp), %rdx	#, tmp218
	addq	$40, %rdx	#, tmp219
	movq	%rax, %rsi	# tmp217,
	movq	%rdx, %rdi	# tmp219,
	call	_ZN6VectorI7VariantEaSERKS1_	#
# core/object.cpp:1494: 	slot.conn = conn;
	leaq	-432(%rbp), %rax	#, tmp220
	leaq	-368(%rbp), %rdx	#, tmp221
	addq	$8, %rdx	#, tmp222
	movq	%rax, %rsi	# tmp220,
	movq	%rdx, %rdi	# tmp222,
	call	_ZN6Object10ConnectionaSERKS0_	#
# core/object.cpp:1495: 	slot.cE = p_to_object->connections.push_back(conn);
	movq	-456(%rbp), %rax	# p_to_object, tmp223
	leaq	24(%rax), %rdx	#, _25
	leaq	-432(%rbp), %rax	#, tmp224
	movq	%rax, %rsi	# tmp224,
	movq	%rdx, %rdi	# _25,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_	#
# core/object.cpp:1495: 	slot.cE = p_to_object->connections.push_back(conn);
	movq	%rax, -304(%rbp)	# _26, slot.cE
# core/object.cpp:1496: 	if (p_flags & CONNECT_REFERENCE_COUNTED) {
	movl	-476(%rbp), %eax	# p_flags, tmp225
	andl	$8, %eax	#, _27
# core/object.cpp:1496: 	if (p_flags & CONNECT_REFERENCE_COUNTED) {
	testl	%eax, %eax	# _27
	je	.L2310	#,
# core/object.cpp:1497: 		slot.reference_count = 1;
	movl	$1, -368(%rbp)	#, slot.reference_count
.L2310:
# core/object.cpp:1500: 	s->slot_map[target] = slot;
	movq	-24(%rbp), %rax	# s, tmp226
	leaq	88(%rax), %rdx	#, _28
	leaq	-288(%rbp), %rax	#, tmp227
	movq	%rax, %rsi	# tmp227,
	movq	%rdx, %rdi	# _28,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_	#
	movq	%rax, %rdx	#, _29
# core/object.cpp:1500: 	s->slot_map[target] = slot;
	leaq	-368(%rbp), %rax	#, tmp228
	movq	%rax, %rsi	# tmp228,
	movq	%rdx, %rdi	# _29,
	call	_ZN6Object6Signal4SlotaSERKS1_	#
.LEHE524:
# core/object.cpp:1502: 	return OK;
	movl	$0, %ebx	#, _32
# core/object.cpp:1487: 	Connection conn;
	leaq	-432(%rbp), %rax	#, tmp229
	movq	%rax, %rdi	# tmp229,
	call	_ZN6Object10ConnectionD1Ev	#
# core/object.cpp:1485: 	Signal::Slot slot;
	leaq	-368(%rbp), %rax	#, tmp230
	movq	%rax, %rdi	# tmp230,
	call	_ZN6Object6Signal4SlotD1Ev	#
.L2309:
# core/object.cpp:1474: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	leaq	-288(%rbp), %rax	#, tmp231
	movq	%rax, %rdi	# tmp231,
	call	_ZN6Object6Signal6TargetD1Ev	#
.L2311:
	movl	%ebx, %eax	# _32, <retval>
	jmp	.L2326	#
.L2320:
	movq	%rax, %rbx	#, tmp235
# core/object.cpp:1449: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-256(%rbp), %rax	#, tmp233
	movq	%rax, %rdi	# tmp233,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2313	#
.L2319:
	movq	%rax, %rbx	#, tmp234
.L2313:
# core/object.cpp:1449: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-264(%rbp), %rax	#, tmp238
	movq	%rax, %rdi	# tmp238,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp234, D.61982
	movq	%rax, %rdi	# D.61982,
.LEHB525:
	call	_Unwind_Resume	#
.L2321:
	movq	%rax, %rbx	#, tmp240
# core/object.cpp:1453: 			if (Ref<Script>(script)->has_script_signal(p_signal)) {
	leaq	-248(%rbp), %rax	#, tmp239
	movq	%rax, %rdi	# tmp239,
	call	_ZN3RefI6ScriptED1Ev	#
	movq	%rbx, %rax	# tmp240, D.61983
	movq	%rax, %rdi	# D.61983,
	call	_Unwind_Resume	#
.L2322:
	movq	%rax, %rbx	#, tmp242
# core/object.cpp:1470: 		signal_map[p_signal] = Signal();
	leaq	-240(%rbp), %rax	#, tmp241
	movq	%rax, %rdi	# tmp241,
	call	_ZN6Object6SignalD1Ev	#
	movq	%rbx, %rax	# tmp242, D.61984
	movq	%rax, %rdi	# D.61984,
	call	_Unwind_Resume	#
.L2325:
	movq	%rax, %rbx	#, tmp245
# core/object.cpp:1487: 	Connection conn;
	leaq	-432(%rbp), %rax	#, tmp243
	movq	%rax, %rdi	# tmp243,
	call	_ZN6Object10ConnectionD1Ev	#
	jmp	.L2317	#
.L2324:
	movq	%rax, %rbx	#, tmp244
.L2317:
# core/object.cpp:1485: 	Signal::Slot slot;
	leaq	-368(%rbp), %rax	#, tmp248
	movq	%rax, %rdi	# tmp248,
	call	_ZN6Object6Signal4SlotD1Ev	#
	jmp	.L2318	#
.L2323:
	movq	%rax, %rbx	#, tmp249
.L2318:
# core/object.cpp:1474: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	leaq	-288(%rbp), %rax	#, tmp251
	movq	%rax, %rdi	# tmp251,
	call	_ZN6Object6Signal6TargetD1Ev	#
	movq	%rbx, %rax	# tmp249, D.61985
	movq	%rax, %rdi	# D.61985,
	call	_Unwind_Resume	#
.LEHE525:
.L2326:
# core/object.cpp:1503: }
	addq	$472, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2565:
	.section	.gcc_except_table
.LLSDA2565:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2565-.LLSDACSB2565
.LLSDACSB2565:
	.uleb128 .LEHB514-.LFB2565
	.uleb128 .LEHE514-.LEHB514
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB515-.LFB2565
	.uleb128 .LEHE515-.LEHB515
	.uleb128 .L2319-.LFB2565
	.uleb128 0
	.uleb128 .LEHB516-.LFB2565
	.uleb128 .LEHE516-.LEHB516
	.uleb128 .L2320-.LFB2565
	.uleb128 0
	.uleb128 .LEHB517-.LFB2565
	.uleb128 .LEHE517-.LEHB517
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB518-.LFB2565
	.uleb128 .LEHE518-.LEHB518
	.uleb128 .L2321-.LFB2565
	.uleb128 0
	.uleb128 .LEHB519-.LFB2565
	.uleb128 .LEHE519-.LEHB519
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB520-.LFB2565
	.uleb128 .LEHE520-.LEHB520
	.uleb128 .L2322-.LFB2565
	.uleb128 0
	.uleb128 .LEHB521-.LFB2565
	.uleb128 .LEHE521-.LEHB521
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB522-.LFB2565
	.uleb128 .LEHE522-.LEHB522
	.uleb128 .L2323-.LFB2565
	.uleb128 0
	.uleb128 .LEHB523-.LFB2565
	.uleb128 .LEHE523-.LEHB523
	.uleb128 .L2324-.LFB2565
	.uleb128 0
	.uleb128 .LEHB524-.LFB2565
	.uleb128 .LEHE524-.LEHB524
	.uleb128 .L2325-.LFB2565
	.uleb128 0
	.uleb128 .LEHB525-.LFB2565
	.uleb128 .LEHE525-.LEHB525
	.uleb128 0
	.uleb128 0
.LLSDACSE2565:
	.text
	.size	_ZN6Object7connectERK10StringNamePS_S2_RK6VectorI7VariantEj, .-_ZN6Object7connectERK10StringNamePS_S2_RK6VectorI7VariantEj
	.section	.rodata
.LC58:
	.string	"is_connected"
	.align 8
.LC59:
	.string	"Method/Function Failed, returning: false"
	.text
	.align 2
	.globl	_ZNK6Object12is_connectedERK10StringNamePS_S2_
	.type	_ZNK6Object12is_connectedERK10StringNamePS_S2_, @function
_ZNK6Object12is_connectedERK10StringNamePS_S2_:
.LFB2576:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2576
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$192, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -184(%rbp)	# this, this
	movq	%rsi, -192(%rbp)	# p_signal, p_signal
	movq	%rdx, -200(%rbp)	# p_to_object, p_to_object
	movq	%rcx, -208(%rbp)	# p_to_method, p_to_method
# core/object.cpp:1507: 	ERR_FAIL_NULL_V(p_to_object, false);
	cmpq	$0, -200(%rbp)	#, p_to_object
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L2328	#,
# core/object.cpp:1507: 	ERR_FAIL_NULL_V(p_to_object, false);
	movl	$0, %r8d	#,
	movl	$.LC55, %ecx	#,
	movl	$1507, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC58, %edi	#,
.LEHB526:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %ebx	#, _16
	jmp	.L2352	#
.L2328:
# core/object.cpp:1507: 	ERR_FAIL_NULL_V(p_to_object, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1508: 	const Signal *s = signal_map.getptr(p_signal);
	movq	-184(%rbp), %rax	# this, tmp132
	addq	$8, %rax	#, _4
	movq	%rax, -40(%rbp)	# _4, this
	movq	-192(%rbp), %rax	# p_signal, tmp133
	movq	%rax, -48(%rbp)	# tmp133, p_key
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	movq	-40(%rbp), %rax	# this, tmp134
	movq	(%rax), %rax	# this_84->hash_table, _86
	testq	%rax, %rax	# _86
	sete	%al	#, _87
	movzbl	%al, %eax	# _87, _88
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _89
	je	.L2330	#,
# ./core/hash_map.h:335: 			return NULL;
	movl	$0, %eax	#, D.56800
	jmp	.L2331	#
.L2330:
	movq	-40(%rbp), %rax	# this, tmp135
	movq	%rax, -56(%rbp)	# tmp135, this
	movq	-48(%rbp), %rax	# p_key, tmp136
	movq	%rax, -64(%rbp)	# tmp136, p_key
	movq	-64(%rbp), %rax	# p_key, tmp137
	movq	%rax, -72(%rbp)	# tmp137, p_string_name
	movq	-72(%rbp), %rax	# p_string_name, tmp138
	movq	%rax, -80(%rbp)	# tmp138, this
# ./core/string_name.h:112: 		if (_data)
	movq	-80(%rbp), %rax	# this, tmp139
	movq	(%rax), %rax	# this_94->_data, _95
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _95
	je	.L2332	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-80(%rbp), %rax	# this, tmp140
	movq	(%rax), %rax	# this_94->_data, _96
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _96->hash, _97
	jmp	.L2333	#
.L2332:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _97
.L2333:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -84(%rbp)	# _97, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-56(%rbp), %rax	# this, tmp141
	movzbl	8(%rax), %eax	# this_91->hash_table_power, _104
	movzbl	%al, %eax	# _104, _105
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp142
	movl	%eax, %ecx	# _105, tmp190
	sall	%cl, %edx	# tmp190, tmp142
	movl	%edx, %eax	# tmp142, _106
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _107
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-84(%rbp), %eax	# hash, tmp144
	movl	%eax, -88(%rbp)	# tmp144, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-56(%rbp), %rax	# this, tmp145
	movq	(%rax), %rax	# this_91->hash_table, _110
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-88(%rbp), %edx	# index, _111
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _112
	addq	%rdx, %rax	# _112, _113
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_113, tmp146
	movq	%rax, -96(%rbp)	# tmp146, e
.L2340:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -96(%rbp)	#, e
	je	.L2335	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-96(%rbp), %rax	# e, tmp147
	movl	(%rax), %eax	# e_115->hash, _116
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -84(%rbp)	# _116, hash
	jne	.L2336	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-96(%rbp), %rax	# e, tmp148
	leaq	16(%rax), %rdx	#, _117
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# p_key, tmp149
	movq	%rax, %rsi	# tmp149,
	movq	%rdx, %rdi	# _117,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _118
	je	.L2336	#,
	movl	$1, %eax	#, iftmp.197_119
	jmp	.L2337	#
.L2336:
	movl	$0, %eax	#, iftmp.197_119
.L2337:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_119
	je	.L2338	#,
# ./core/hash_map.h:198: 				return e;
	movq	-96(%rbp), %rax	# e, _123
	jmp	.L2339	#
.L2338:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-96(%rbp), %rax	# e, tmp150
	movq	8(%rax), %rax	# e_115->next, tmp151
	movq	%rax, -96(%rbp)	# tmp151, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L2340	#
.L2335:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _123
.L2339:
# ./core/hash_map.h:337: 		const Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -104(%rbp)	# _123, e
# ./core/hash_map.h:339: 		if (e)
	cmpq	$0, -104(%rbp)	#, e
	je	.L2341	#,
# ./core/hash_map.h:340: 			return &e->pair.data;
	movq	-104(%rbp), %rax	# e, tmp152
	addq	$24, %rax	#, D.56800
	jmp	.L2331	#
.L2341:
# ./core/hash_map.h:342: 		return NULL;
	movl	$0, %eax	#, D.56800
.L2331:
# core/object.cpp:1508: 	const Signal *s = signal_map.getptr(p_signal);
	movq	%rax, -24(%rbp)	# D.56800, s
# core/object.cpp:1509: 	if (!s) {
	cmpq	$0, -24(%rbp)	#, s
	jne	.L2342	#,
# core/object.cpp:1510: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	movq	-192(%rbp), %rdx	# p_signal, tmp153
	leaq	-152(%rbp), %rax	#, tmp154
	movq	%rdx, %rsi	# tmp153,
	movq	%rax, %rdi	# tmp154,
	call	_ZN10StringNameC1ERKS_	#
.LEHE526:
	movq	-184(%rbp), %rax	# this, tmp155
	movq	%rax, -112(%rbp)	# tmp155, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-112(%rbp), %rax	# this, tmp156
	movq	112(%rax), %rax	# this_133->_class_ptr, _134
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _134
	jne	.L2343	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-112(%rbp), %rax	# this, tmp157
	movq	(%rax), %rax	# this_133->_vptr.Object, _135
	addq	$48, %rax	#, _136
	movq	(%rax), %rdx	# *_136, _137
# core/object.h:647: 			return *_get_class_namev();
	movq	-112(%rbp), %rax	# this, tmp158
	movq	%rax, %rdi	# tmp158,
.LEHB527:
	call	*%rdx	# _137
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L2344	#
.L2343:
# core/object.h:649: 			return *_class_ptr;
	movq	-112(%rbp), %rax	# this, tmp159
	movq	112(%rax), %rax	# this_133->_class_ptr, D.56813
.L2344:
# core/object.cpp:1510: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-144(%rbp), %rdx	#, tmp160
	movq	%rax, %rsi	# D.56813,
	movq	%rdx, %rdi	# tmp160,
	call	_ZN10StringNameC1ERKS_	#
.LEHE527:
# core/object.cpp:1510: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-152(%rbp), %rdx	#, tmp161
	leaq	-144(%rbp), %rax	#, tmp162
	movq	%rdx, %rsi	# tmp161,
	movq	%rax, %rdi	# tmp162,
.LEHB528:
	call	_ZN7ClassDB10has_signalE10StringNameS0_	#
.LEHE528:
	movb	%al, -25(%rbp)	# _50, signal_is_valid
	leaq	-144(%rbp), %rax	#, tmp163
	movq	%rax, %rdi	# tmp163,
	call	_ZN10StringNameD1Ev	#
	leaq	-152(%rbp), %rax	#, tmp164
	movq	%rax, %rdi	# tmp164,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1511: 		if (signal_is_valid)
	cmpb	$0, -25(%rbp)	#, signal_is_valid
	je	.L2345	#,
# core/object.cpp:1512: 			return false;
	movl	$0, %ebx	#, _16
	jmp	.L2352	#
.L2345:
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movl	$0, %ebx	#, cleanup.294_20
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movq	-184(%rbp), %rax	# this, tmp165
	addq	$88, %rax	#, _6
	movq	%rax, %rdi	# _6,
.LEHB529:
	call	_ZNK6RefPtr7is_nullEv	#
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	xorl	$1, %eax	#, _8
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	testb	%al, %al	# _8
	je	.L2346	#,
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movq	-184(%rbp), %rax	# this, tmp166
	leaq	88(%rax), %rdx	#, _9
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	leaq	-136(%rbp), %rax	#, tmp167
	movq	%rdx, %rsi	# _9,
	movq	%rax, %rdi	# tmp167,
	call	_ZN3RefI6ScriptEC1ERK6RefPtr	#
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movl	$1, %ebx	#, cleanup.294_20
# ./core/reference.h:112: 		return reference;
	movq	-136(%rbp), %rax	# D.40578.reference, D.56818
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movq	(%rax), %rdx	# _61->D.33053.D.27638.D.26671._vptr.Object, _10
	addq	$368, %rdx	#, _11
	movq	(%rdx), %rcx	# *_11, _12
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movq	-192(%rbp), %rdx	# p_signal, tmp168
	movq	%rdx, %rsi	# tmp168,
	movq	%rax, %rdi	# D.56818,
	call	*%rcx	# _12
.LEHE529:
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	testb	%al, %al	# _13
	je	.L2346	#,
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movl	$1, %r12d	#, iftmp.293_17
	jmp	.L2348	#
.L2346:
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	movl	$0, %r12d	#, iftmp.293_17
.L2348:
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	testb	%bl, %bl	# cleanup.294_20
	je	.L2349	#,
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	leaq	-136(%rbp), %rax	#, tmp169
	movq	%rax, %rdi	# tmp169,
	call	_ZN3RefI6ScriptED1Ev	#
.L2349:
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	testb	%r12b, %r12b	# iftmp.293_17
	je	.L2350	#,
# core/object.cpp:1515: 			return false;
	movl	$0, %ebx	#, _16
	jmp	.L2352	#
.L2350:
# core/object.cpp:1518: 		ERR_FAIL_V(false);
	movl	$0, %r8d	#,
	movl	$.LC59, %ecx	#,
	movl	$1518, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC58, %edi	#,
.LEHB530:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %ebx	#, _16
	jmp	.L2352	#
.L2342:
	movq	-200(%rbp), %rax	# p_to_object, tmp170
	movq	%rax, -120(%rbp)	# tmp170, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-120(%rbp), %rax	# this, tmp171
	movq	64(%rax), %rax	# this_143->_instance_id, D.56822
# core/object.cpp:1521: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	movq	%rax, -128(%rbp)	# D.56822, D.40580
# core/object.cpp:1521: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	movq	-208(%rbp), %rdx	# p_to_method, tmp172
	leaq	-128(%rbp), %rcx	#, tmp173
	leaq	-176(%rbp), %rax	#, tmp174
	movq	%rcx, %rsi	# tmp173,
	movq	%rax, %rdi	# tmp174,
	call	_ZN6Object6Signal6TargetC1ERKmRK10StringName	#
.LEHE530:
# core/object.cpp:1523: 	return s->slot_map.has(target);
	movq	-24(%rbp), %rax	# s, tmp175
	leaq	88(%rax), %rdx	#, _15
	leaq	-176(%rbp), %rax	#, tmp176
	movq	%rax, %rsi	# tmp176,
	movq	%rdx, %rdi	# _15,
.LEHB531:
	call	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_	#
.LEHE531:
	movl	%eax, %ebx	#, _16
# core/object.cpp:1523: 	return s->slot_map.has(target);
	nop	
# core/object.cpp:1521: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	leaq	-176(%rbp), %rax	#, tmp177
	movq	%rax, %rdi	# tmp177,
	call	_ZN6Object6Signal6TargetD1Ev	#
.L2352:
	movl	%ebx, %eax	# _16, <retval>
	jmp	.L2362	#
.L2359:
	movq	%rax, %rbx	#, tmp181
# core/object.cpp:1510: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-144(%rbp), %rax	#, tmp179
	movq	%rax, %rdi	# tmp179,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2354	#
.L2358:
	movq	%rax, %rbx	#, tmp180
.L2354:
# core/object.cpp:1510: 		bool signal_is_valid = ClassDB::has_signal(get_class_name(), p_signal);
	leaq	-152(%rbp), %rax	#, tmp184
	movq	%rax, %rdi	# tmp184,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp180, D.61989
	movq	%rax, %rdi	# D.61989,
.LEHB532:
	call	_Unwind_Resume	#
.L2360:
	movq	%rax, %r12	#, tmp186
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	testb	%bl, %bl	# cleanup.294_20
	je	.L2356	#,
# core/object.cpp:1514: 		if (!script.is_null() && Ref<Script>(script)->has_script_signal(p_signal))
	leaq	-136(%rbp), %rax	#, tmp185
	movq	%rax, %rdi	# tmp185,
	call	_ZN3RefI6ScriptED1Ev	#
.L2356:
	movq	%r12, %rax	# tmp186, D.61990
	movq	%rax, %rdi	# D.61990,
	call	_Unwind_Resume	#
.L2361:
	movq	%rax, %rbx	#, tmp188
# core/object.cpp:1521: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	leaq	-176(%rbp), %rax	#, tmp187
	movq	%rax, %rdi	# tmp187,
	call	_ZN6Object6Signal6TargetD1Ev	#
	movq	%rbx, %rax	# tmp188, D.61991
	movq	%rax, %rdi	# D.61991,
	call	_Unwind_Resume	#
.LEHE532:
.L2362:
# core/object.cpp:1526: }
	addq	$192, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2576:
	.section	.gcc_except_table
.LLSDA2576:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2576-.LLSDACSB2576
.LLSDACSB2576:
	.uleb128 .LEHB526-.LFB2576
	.uleb128 .LEHE526-.LEHB526
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB527-.LFB2576
	.uleb128 .LEHE527-.LEHB527
	.uleb128 .L2358-.LFB2576
	.uleb128 0
	.uleb128 .LEHB528-.LFB2576
	.uleb128 .LEHE528-.LEHB528
	.uleb128 .L2359-.LFB2576
	.uleb128 0
	.uleb128 .LEHB529-.LFB2576
	.uleb128 .LEHE529-.LEHB529
	.uleb128 .L2360-.LFB2576
	.uleb128 0
	.uleb128 .LEHB530-.LFB2576
	.uleb128 .LEHE530-.LEHB530
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB531-.LFB2576
	.uleb128 .LEHE531-.LEHB531
	.uleb128 .L2361-.LFB2576
	.uleb128 0
	.uleb128 .LEHB532-.LFB2576
	.uleb128 .LEHE532-.LEHB532
	.uleb128 0
	.uleb128 0
.LLSDACSE2576:
	.text
	.size	_ZNK6Object12is_connectedERK10StringNamePS_S2_, .-_ZNK6Object12is_connectedERK10StringNamePS_S2_
	.align 2
	.globl	_ZN6Object10disconnectERK10StringNamePS_S2_
	.type	_ZN6Object10disconnectERK10StringNamePS_S2_, @function
_ZN6Object10disconnectERK10StringNamePS_S2_:
.LFB2577:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_signal, p_signal
	movq	%rdx, -24(%rbp)	# p_to_object, p_to_object
	movq	%rcx, -32(%rbp)	# p_to_method, p_to_method
# core/object.cpp:1530: 	_disconnect(p_signal, p_to_object, p_to_method);
	movq	-32(%rbp), %rcx	# p_to_method, tmp82
	movq	-24(%rbp), %rdx	# p_to_object, tmp83
	movq	-16(%rbp), %rsi	# p_signal, tmp84
	movq	-8(%rbp), %rax	# this, tmp85
	movl	$0, %r8d	#,
	movq	%rax, %rdi	# tmp85,
	call	_ZN6Object11_disconnectERK10StringNamePS_S2_b	#
# core/object.cpp:1531: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2577:
	.size	_ZN6Object10disconnectERK10StringNamePS_S2_, .-_ZN6Object10disconnectERK10StringNamePS_S2_
	.section	.rodata
.LC60:
	.string	"_disconnect"
.LC61:
	.string	"Method/Function Failed."
	.text
	.align 2
	.globl	_ZN6Object11_disconnectERK10StringNamePS_S2_b
	.type	_ZN6Object11_disconnectERK10StringNamePS_S2_b, @function
_ZN6Object11_disconnectERK10StringNamePS_S2_b:
.LFB2578:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2578
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$216, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -200(%rbp)	# this, this
	movq	%rsi, -208(%rbp)	# p_signal, p_signal
	movq	%rdx, -216(%rbp)	# p_to_object, p_to_object
	movq	%rcx, -224(%rbp)	# p_to_method, p_to_method
	movl	%r8d, %eax	# p_force, tmp138
	movb	%al, -228(%rbp)	# tmp139, p_force
# core/object.cpp:1534: 	ERR_FAIL_NULL(p_to_object);
	cmpq	$0, -216(%rbp)	#, p_to_object
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L2365	#,
# core/object.cpp:1534: 	ERR_FAIL_NULL(p_to_object);
	movl	$0, %r8d	#,
	movl	$.LC55, %ecx	#,
	movl	$1534, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC60, %edi	#,
.LEHB533:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L2364	#
.L2365:
# core/object.cpp:1534: 	ERR_FAIL_NULL(p_to_object);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:1535: 	Signal *s = signal_map.getptr(p_signal);
	movq	-200(%rbp), %rax	# this, tmp140
	addq	$8, %rax	#, _4
	movq	%rax, -56(%rbp)	# _4, this
	movq	-208(%rbp), %rax	# p_signal, tmp141
	movq	%rax, -64(%rbp)	# tmp141, p_key
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	movq	-56(%rbp), %rax	# this, tmp142
	movq	(%rax), %rax	# this_103->hash_table, _105
	testq	%rax, %rax	# _105
	sete	%al	#, _106
	movzbl	%al, %eax	# _106, _107
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _108
	je	.L2367	#,
# ./core/hash_map.h:322: 			return NULL;
	movl	$0, %eax	#, D.58293
	jmp	.L2368	#
.L2367:
	movq	-56(%rbp), %rax	# this, tmp143
	movq	%rax, -72(%rbp)	# tmp143, this
	movq	-64(%rbp), %rax	# p_key, tmp144
	movq	%rax, -80(%rbp)	# tmp144, p_key
	movq	-80(%rbp), %rax	# p_key, tmp145
	movq	%rax, -88(%rbp)	# tmp145, p_string_name
	movq	-88(%rbp), %rax	# p_string_name, tmp146
	movq	%rax, -96(%rbp)	# tmp146, this
# ./core/string_name.h:112: 		if (_data)
	movq	-96(%rbp), %rax	# this, tmp147
	movq	(%rax), %rax	# this_113->_data, _114
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _114
	je	.L2369	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-96(%rbp), %rax	# this, tmp148
	movq	(%rax), %rax	# this_113->_data, _115
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _115->hash, _116
	jmp	.L2370	#
.L2369:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _116
.L2370:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -100(%rbp)	# _116, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-72(%rbp), %rax	# this, tmp149
	movzbl	8(%rax), %eax	# this_110->hash_table_power, _123
	movzbl	%al, %eax	# _123, _124
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp150
	movl	%eax, %ecx	# _124, tmp206
	sall	%cl, %edx	# tmp206, tmp150
	movl	%edx, %eax	# tmp150, _125
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _126
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-100(%rbp), %eax	# hash, tmp152
	movl	%eax, -104(%rbp)	# tmp152, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-72(%rbp), %rax	# this, tmp153
	movq	(%rax), %rax	# this_110->hash_table, _129
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-104(%rbp), %edx	# index, _130
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _131
	addq	%rdx, %rax	# _131, _132
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_132, tmp154
	movq	%rax, -112(%rbp)	# tmp154, e
.L2377:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -112(%rbp)	#, e
	je	.L2372	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-112(%rbp), %rax	# e, tmp155
	movl	(%rax), %eax	# e_134->hash, _135
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -100(%rbp)	# _135, hash
	jne	.L2373	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-112(%rbp), %rax	# e, tmp156
	leaq	16(%rax), %rdx	#, _136
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-80(%rbp), %rax	# p_key, tmp157
	movq	%rax, %rsi	# tmp157,
	movq	%rdx, %rdi	# _136,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _137
	je	.L2373	#,
	movl	$1, %eax	#, iftmp.197_138
	jmp	.L2374	#
.L2373:
	movl	$0, %eax	#, iftmp.197_138
.L2374:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_138
	je	.L2375	#,
# ./core/hash_map.h:198: 				return e;
	movq	-112(%rbp), %rax	# e, _142
	jmp	.L2376	#
.L2375:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-112(%rbp), %rax	# e, tmp158
	movq	8(%rax), %rax	# e_134->next, tmp159
	movq	%rax, -112(%rbp)	# tmp159, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L2377	#
.L2372:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _142
.L2376:
# ./core/hash_map.h:324: 		Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -120(%rbp)	# _142, e
# ./core/hash_map.h:326: 		if (e)
	cmpq	$0, -120(%rbp)	#, e
	je	.L2378	#,
# ./core/hash_map.h:327: 			return &e->pair.data;
	movq	-120(%rbp), %rax	# e, tmp160
	addq	$24, %rax	#, D.58293
	jmp	.L2368	#
.L2378:
# ./core/hash_map.h:329: 		return NULL;
	movl	$0, %eax	#, D.58293
.L2368:
# core/object.cpp:1535: 	Signal *s = signal_map.getptr(p_signal);
	movq	%rax, -40(%rbp)	# D.58293, s
# core/object.cpp:1536: 	if (!s) {
	cmpq	$0, -40(%rbp)	#, s
	jne	.L2379	#,
# core/object.cpp:1538: 		ERR_FAIL();
	movl	$0, %r8d	#,
	movl	$.LC61, %ecx	#,
	movl	$1538, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC60, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	jmp	.L2364	#
.L2379:
# core/object.cpp:1540: 	if (s->lock > 0) {
	movq	-40(%rbp), %rax	# s, tmp161
	movl	96(%rax), %eax	# s_50->lock, _5
# core/object.cpp:1540: 	if (s->lock > 0) {
	testl	%eax, %eax	# _5
	jle	.L2380	#,
# core/object.cpp:1542: 		ERR_FAIL();
	movl	$0, %r8d	#,
	movl	$.LC61, %ecx	#,
	movl	$1542, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC60, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	jmp	.L2364	#
.L2380:
	movq	-216(%rbp), %rax	# p_to_object, tmp162
	movq	%rax, -128(%rbp)	# tmp162, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-128(%rbp), %rax	# this, tmp163
	movq	64(%rax), %rax	# this_152->_instance_id, D.58306
# core/object.cpp:1545: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	movq	%rax, -176(%rbp)	# D.58306, D.40597
# core/object.cpp:1545: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	movq	-224(%rbp), %rdx	# p_to_method, tmp164
	leaq	-176(%rbp), %rcx	#, tmp165
	leaq	-192(%rbp), %rax	#, tmp166
	movq	%rcx, %rsi	# tmp165,
	movq	%rax, %rdi	# tmp166,
	call	_ZN6Object6Signal6TargetC1ERKmRK10StringName	#
.LEHE533:
# core/object.cpp:1547: 	if (!s->slot_map.has(target)) {
	movq	-40(%rbp), %rax	# s, tmp167
	leaq	88(%rax), %rdx	#, _7
	leaq	-192(%rbp), %rax	#, tmp168
	movq	%rax, %rsi	# tmp168,
	movq	%rdx, %rdi	# _7,
.LEHB534:
	call	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_	#
# core/object.cpp:1547: 	if (!s->slot_map.has(target)) {
	xorl	$1, %eax	#, retval.295_57
# core/object.cpp:1547: 	if (!s->slot_map.has(target)) {
	testb	%al, %al	# retval.295_57
	je	.L2382	#,
# core/object.cpp:1549: 		ERR_FAIL();
	movl	$0, %r8d	#,
	movl	$.LC61, %ecx	#,
	movl	$1549, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC60, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# core/object.cpp:1549: 		ERR_FAIL();
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %ebx	#, finally_tmp.300_29
	jmp	.L2383	#
.L2382:
# core/object.cpp:1552: 	Signal::Slot *slot = &s->slot_map[target];
	movq	-40(%rbp), %rax	# s, tmp169
	leaq	88(%rax), %rdx	#, _9
	leaq	-192(%rbp), %rax	#, tmp170
	movq	%rax, %rsi	# tmp170,
	movq	%rdx, %rdi	# _9,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_	#
	movq	%rax, -48(%rbp)	# _59, slot
# core/object.cpp:1554: 	if (!p_force) {
	movzbl	-228(%rbp), %eax	# p_force, tmp171
	xorl	$1, %eax	#, _10
# core/object.cpp:1554: 	if (!p_force) {
	testb	%al, %al	# _10
	je	.L2384	#,
# core/object.cpp:1555: 		slot->reference_count--; // by default is zero, if it was not referenced it will go below it
	movq	-48(%rbp), %rax	# slot, tmp172
	movl	(%rax), %eax	# slot_60->reference_count, _11
# core/object.cpp:1555: 		slot->reference_count--; // by default is zero, if it was not referenced it will go below it
	leal	-1(%rax), %edx	#, _12
	movq	-48(%rbp), %rax	# slot, tmp173
	movl	%edx, (%rax)	# _12, slot_60->reference_count
# core/object.cpp:1556: 		if (slot->reference_count >= 0) {
	movq	-48(%rbp), %rax	# slot, tmp174
	movl	(%rax), %eax	# slot_60->reference_count, _13
# core/object.cpp:1556: 		if (slot->reference_count >= 0) {
	testl	%eax, %eax	# _13
	js	.L2384	#,
	movl	$0, %ebx	#, finally_tmp.300_29
# core/object.cpp:1557: 			return;
	jmp	.L2383	#
.L2384:
# core/object.cpp:1561: 	p_to_object->connections.erase(slot->cE);
	movq	-216(%rbp), %rax	# p_to_object, tmp175
	leaq	24(%rax), %rdx	#, _14
# core/object.cpp:1561: 	p_to_object->connections.erase(slot->cE);
	movq	-48(%rbp), %rax	# slot, tmp176
	movq	64(%rax), %rax	# slot_60->cE, _15
# core/object.cpp:1561: 	p_to_object->connections.erase(slot->cE);
	movq	%rax, %rsi	# _15,
	movq	%rdx, %rdi	# _14,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE	#
# core/object.cpp:1562: 	s->slot_map.erase(target);
	movq	-40(%rbp), %rax	# s, tmp177
	leaq	88(%rax), %rdx	#, _16
	leaq	-192(%rbp), %rax	#, tmp178
	movq	%rax, %rsi	# tmp178,
	movq	%rdx, %rdi	# _16,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_	#
.LEHE534:
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	movl	$0, %ebx	#, cleanup.298_25
	movl	$0, %r12d	#, cleanup.299_28
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	movq	-40(%rbp), %rax	# s, tmp179
	addq	$88, %rax	#, _17
	movq	%rax, -136(%rbp)	# _17, this
# ./core/vmap.h:154: 	_FORCE_INLINE_ bool empty() const { return _cowdata.empty(); }
	movq	-136(%rbp), %rax	# this, _155
	movq	%rax, -144(%rbp)	# _155, this
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	movq	-144(%rbp), %rax	# this, tmp180
	movq	(%rax), %rax	# this_156->_ptr, _157
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	testq	%rax, %rax	# _157
	sete	%al	#, D.58312
# ./core/vmap.h:154: 	_FORCE_INLINE_ bool empty() const { return _cowdata.empty(); }
	nop	
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	testb	%al, %al	# D.58312
	je	.L2387	#,
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	movq	-208(%rbp), %rdx	# p_signal, tmp181
	leaq	-168(%rbp), %rax	#, tmp182
	movq	%rdx, %rsi	# tmp181,
	movq	%rax, %rdi	# tmp182,
.LEHB535:
	call	_ZN10StringNameC1ERKS_	#
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	movl	$1, %ebx	#, cleanup.298_25
	movq	-200(%rbp), %rax	# this, tmp183
	movq	%rax, -152(%rbp)	# tmp183, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-152(%rbp), %rax	# this, tmp184
	movq	112(%rax), %rax	# this_161->_class_ptr, _162
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _162
	jne	.L2388	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-152(%rbp), %rax	# this, tmp185
	movq	(%rax), %rax	# this_161->_vptr.Object, _163
	addq	$48, %rax	#, _164
	movq	(%rax), %rdx	# *_164, _165
# core/object.h:647: 			return *_get_class_namev();
	movq	-152(%rbp), %rax	# this, tmp186
	movq	%rax, %rdi	# tmp186,
	call	*%rdx	# _165
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L2389	#
.L2388:
# core/object.h:649: 			return *_class_ptr;
	movq	-152(%rbp), %rax	# this, tmp187
	movq	112(%rax), %rax	# this_161->_class_ptr, D.58318
.L2389:
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	leaq	-160(%rbp), %rdx	#, tmp188
	movq	%rax, %rsi	# D.58318,
	movq	%rdx, %rdi	# tmp188,
	call	_ZN10StringNameC1ERKS_	#
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	movl	$1, %r12d	#, cleanup.299_28
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	leaq	-168(%rbp), %rdx	#, tmp189
	leaq	-160(%rbp), %rax	#, tmp190
	movq	%rdx, %rsi	# tmp189,
	movq	%rax, %rdi	# tmp190,
	call	_ZN7ClassDB10has_signalE10StringNameS0_	#
.LEHE535:
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	testb	%al, %al	# _20
	je	.L2387	#,
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	movl	$1, %r13d	#, iftmp.297_22
	jmp	.L2390	#
.L2387:
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	movl	$0, %r13d	#, iftmp.297_22
.L2390:
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	testb	%r12b, %r12b	# cleanup.299_28
	je	.L2391	#,
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	leaq	-160(%rbp), %rax	#, tmp191
	movq	%rax, %rdi	# tmp191,
	call	_ZN10StringNameD1Ev	#
.L2391:
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	testb	%bl, %bl	# cleanup.298_25
	je	.L2392	#,
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	leaq	-168(%rbp), %rax	#, tmp192
	movq	%rax, %rdi	# tmp192,
	call	_ZN10StringNameD1Ev	#
.L2392:
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	testb	%r13b, %r13b	# iftmp.297_22
	je	.L2393	#,
# core/object.cpp:1566: 		signal_map.erase(p_signal);
	movq	-200(%rbp), %rax	# this, tmp193
	leaq	8(%rax), %rdx	#, _21
	movq	-208(%rbp), %rax	# p_signal, tmp194
	movq	%rax, %rsi	# tmp194,
	movq	%rdx, %rdi	# _21,
.LEHB536:
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_	#
.LEHE536:
.L2393:
	movl	$1, %ebx	#, finally_tmp.300_29
.L2383:
	leaq	-192(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN6Object6Signal6TargetD1Ev	#
	cmpl	$1, %ebx	#, finally_tmp.300_29
	jmp	.L2364	#
.L2400:
	movq	%rax, %r13	#, tmp198
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	testb	%r12b, %r12b	# cleanup.299_28
	je	.L2396	#,
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	leaq	-160(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN10StringNameD1Ev	#
.L2396:
	movq	%r13, %r12	# tmp198, tmp197
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	testb	%bl, %bl	# cleanup.298_25
	je	.L2397	#,
# core/object.cpp:1564: 	if (s->slot_map.empty() && ClassDB::has_signal(get_class_name(), p_signal)) {
	leaq	-168(%rbp), %rax	#, tmp201
	movq	%rax, %rdi	# tmp201,
	call	_ZN10StringNameD1Ev	#
.L2397:
	movq	%r12, %rbx	# tmp197, tmp202
	jmp	.L2398	#
.L2399:
	movq	%rax, %rbx	#, tmp202
.L2398:
# core/object.cpp:1545: 	Signal::Target target(p_to_object->get_instance_id(), p_to_method);
	leaq	-192(%rbp), %rax	#, tmp204
	movq	%rax, %rdi	# tmp204,
	call	_ZN6Object6Signal6TargetD1Ev	#
	movq	%rbx, %rax	# tmp202, D.61994
	movq	%rax, %rdi	# D.61994,
.LEHB537:
	call	_Unwind_Resume	#
.LEHE537:
.L2364:
# core/object.cpp:1568: }
	addq	$216, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2578:
	.section	.gcc_except_table
.LLSDA2578:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2578-.LLSDACSB2578
.LLSDACSB2578:
	.uleb128 .LEHB533-.LFB2578
	.uleb128 .LEHE533-.LEHB533
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB534-.LFB2578
	.uleb128 .LEHE534-.LEHB534
	.uleb128 .L2399-.LFB2578
	.uleb128 0
	.uleb128 .LEHB535-.LFB2578
	.uleb128 .LEHE535-.LEHB535
	.uleb128 .L2400-.LFB2578
	.uleb128 0
	.uleb128 .LEHB536-.LFB2578
	.uleb128 .LEHE536-.LEHB536
	.uleb128 .L2399-.LFB2578
	.uleb128 0
	.uleb128 .LEHB537-.LFB2578
	.uleb128 .LEHE537-.LEHB537
	.uleb128 0
	.uleb128 0
.LLSDACSE2578:
	.text
	.size	_ZN6Object11_disconnectERK10StringNamePS_S2_b, .-_ZN6Object11_disconnectERK10StringNamePS_S2_b
	.align 2
	.globl	_ZN6Object9_set_bindERK6StringRK7Variant
	.type	_ZN6Object9_set_bindERK6StringRK7Variant, @function
_ZN6Object9_set_bindERK6StringRK7Variant:
.LFB2579:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2579
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_set, p_set
	movq	%rdx, -56(%rbp)	# p_value, p_value
# core/object.cpp:1572: 	set(p_set, p_value);
	movq	-48(%rbp), %rdx	# p_set, tmp83
	leaq	-24(%rbp), %rax	#, tmp84
	movq	%rdx, %rsi	# tmp83,
	movq	%rax, %rdi	# tmp84,
.LEHB538:
	call	_ZN10StringNameC1ERK6String	#
.LEHE538:
	movq	-56(%rbp), %rdx	# p_value, tmp85
	leaq	-24(%rbp), %rsi	#, tmp86
	movq	-40(%rbp), %rax	# this, tmp87
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp87,
.LEHB539:
	call	_ZN6Object3setERK10StringNameRK7VariantPb	#
.LEHE539:
# core/object.cpp:1572: 	set(p_set, p_value);
	leaq	-24(%rbp), %rax	#, tmp88
	movq	%rax, %rdi	# tmp88,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1573: }
	jmp	.L2404	#
.L2403:
	movq	%rax, %rbx	#, tmp90
# core/object.cpp:1572: 	set(p_set, p_value);
	leaq	-24(%rbp), %rax	#, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp90, D.61997
	movq	%rax, %rdi	# D.61997,
.LEHB540:
	call	_Unwind_Resume	#
.LEHE540:
.L2404:
# core/object.cpp:1573: }
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2579:
	.section	.gcc_except_table
.LLSDA2579:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2579-.LLSDACSB2579
.LLSDACSB2579:
	.uleb128 .LEHB538-.LFB2579
	.uleb128 .LEHE538-.LEHB538
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB539-.LFB2579
	.uleb128 .LEHE539-.LEHB539
	.uleb128 .L2403-.LFB2579
	.uleb128 0
	.uleb128 .LEHB540-.LFB2579
	.uleb128 .LEHE540-.LEHB540
	.uleb128 0
	.uleb128 0
.LLSDACSE2579:
	.text
	.size	_ZN6Object9_set_bindERK6StringRK7Variant, .-_ZN6Object9_set_bindERK6StringRK7Variant
	.align 2
	.globl	_ZNK6Object9_get_bindERK6String
	.type	_ZNK6Object9_get_bindERK6String, @function
_ZNK6Object9_get_bindERK6String:
.LFB2580:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2580
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -48(%rbp)	# this, this
	movq	%rdx, -56(%rbp)	# p_name, p_name
# core/object.cpp:1577: 	return get(p_name);
	movq	-56(%rbp), %rdx	# p_name, tmp83
	leaq	-24(%rbp), %rax	#, tmp84
	movq	%rdx, %rsi	# tmp83,
	movq	%rax, %rdi	# tmp84,
.LEHB541:
	call	_ZN10StringNameC1ERK6String	#
.LEHE541:
	movq	-40(%rbp), %rax	# <retval>, tmp85
	leaq	-24(%rbp), %rdx	#, tmp86
	movq	-48(%rbp), %rsi	# this, tmp87
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp85,
.LEHB542:
	call	_ZNK6Object3getERK10StringNamePb	#
.LEHE542:
	leaq	-24(%rbp), %rax	#, tmp88
	movq	%rax, %rdi	# tmp88,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2409	#
.L2408:
	movq	%rax, %rbx	#, tmp90
	leaq	-24(%rbp), %rax	#, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp90, D.61998
	movq	%rax, %rdi	# D.61998,
.LEHB543:
	call	_Unwind_Resume	#
.LEHE543:
.L2409:
# core/object.cpp:1578: }
	movq	-40(%rbp), %rax	# <retval>,
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2580:
	.section	.gcc_except_table
.LLSDA2580:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2580-.LLSDACSB2580
.LLSDACSB2580:
	.uleb128 .LEHB541-.LFB2580
	.uleb128 .LEHE541-.LEHB541
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB542-.LFB2580
	.uleb128 .LEHE542-.LEHB542
	.uleb128 .L2408-.LFB2580
	.uleb128 0
	.uleb128 .LEHB543-.LFB2580
	.uleb128 .LEHE543-.LEHB543
	.uleb128 0
	.uleb128 0
.LLSDACSE2580:
	.text
	.size	_ZNK6Object9_get_bindERK6String, .-_ZNK6Object9_get_bindERK6String
	.align 2
	.globl	_ZN6Object17_set_indexed_bindERK8NodePathRK7Variant
	.type	_ZN6Object17_set_indexed_bindERK8NodePathRK7Variant, @function
_ZN6Object17_set_indexed_bindERK8NodePathRK7Variant:
.LFB2581:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2581
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_name, p_name
	movq	%rdx, -88(%rbp)	# p_value, p_value
# core/object.cpp:1582: 	set_indexed(p_name.get_as_property_path().get_subnames(), p_value);
	leaq	-40(%rbp), %rax	#, tmp87
	movq	-80(%rbp), %rdx	# p_name, tmp88
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp87,
.LEHB544:
	call	_ZNK8NodePath20get_as_property_pathEv	#
.LEHE544:
# core/object.cpp:1582: 	set_indexed(p_name.get_as_property_path().get_subnames(), p_value);
	leaq	-64(%rbp), %rax	#, tmp89
	leaq	-40(%rbp), %rdx	#, tmp90
	movq	%rdx, %rsi	# tmp90,
	movq	%rax, %rdi	# tmp89,
.LEHB545:
	call	_ZNK8NodePath12get_subnamesEv	#
.LEHE545:
# core/object.cpp:1582: 	set_indexed(p_name.get_as_property_path().get_subnames(), p_value);
	movq	-88(%rbp), %rdx	# p_value, tmp91
	leaq	-64(%rbp), %rsi	#, tmp92
	movq	-72(%rbp), %rax	# this, tmp93
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp93,
.LEHB546:
	call	_ZN6Object11set_indexedERK6VectorI10StringNameERK7VariantPb	#
.LEHE546:
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-64(%rbp), %rax	#, tmp94
	addq	$8, %rax	#, _15
	movq	%rax, -24(%rbp)	# _15, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-24(%rbp), %rax	# this, tmp95
	movq	(%rax), %rdx	# this_16->_ptr, _17
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-24(%rbp), %rax	# this, tmp96
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp96,
	call	_ZN7CowDataI10StringNameE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:1582: 	set_indexed(p_name.get_as_property_path().get_subnames(), p_value);
	leaq	-40(%rbp), %rax	#, tmp97
	movq	%rax, %rdi	# tmp97,
	call	_ZN8NodePathD1Ev	#
# core/object.cpp:1583: }
	jmp	.L2415	#
.L2414:
	movq	%rax, %rbx	#, tmp102
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-64(%rbp), %rax	#, tmp98
	addq	$8, %rax	#, _18
	movq	%rax, -32(%rbp)	# _18, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-32(%rbp), %rax	# this, tmp99
	movq	(%rax), %rdx	# this_19->_ptr, _20
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-32(%rbp), %rax	# this, tmp100
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp100,
	call	_ZN7CowDataI10StringNameE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
	jmp	.L2412	#
.L2413:
	movq	%rax, %rbx	#, tmp101
.L2412:
# core/object.cpp:1582: 	set_indexed(p_name.get_as_property_path().get_subnames(), p_value);
	leaq	-40(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN8NodePathD1Ev	#
	movq	%rbx, %rax	# tmp101, D.62001
	movq	%rax, %rdi	# D.62001,
.LEHB547:
	call	_Unwind_Resume	#
.LEHE547:
.L2415:
# core/object.cpp:1583: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2581:
	.section	.gcc_except_table
.LLSDA2581:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2581-.LLSDACSB2581
.LLSDACSB2581:
	.uleb128 .LEHB544-.LFB2581
	.uleb128 .LEHE544-.LEHB544
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB545-.LFB2581
	.uleb128 .LEHE545-.LEHB545
	.uleb128 .L2413-.LFB2581
	.uleb128 0
	.uleb128 .LEHB546-.LFB2581
	.uleb128 .LEHE546-.LEHB546
	.uleb128 .L2414-.LFB2581
	.uleb128 0
	.uleb128 .LEHB547-.LFB2581
	.uleb128 .LEHE547-.LEHB547
	.uleb128 0
	.uleb128 0
.LLSDACSE2581:
	.text
	.size	_ZN6Object17_set_indexed_bindERK8NodePathRK7Variant, .-_ZN6Object17_set_indexed_bindERK8NodePathRK7Variant
	.align 2
	.globl	_ZNK6Object17_get_indexed_bindERK8NodePath
	.type	_ZNK6Object17_get_indexed_bindERK8NodePath, @function
_ZNK6Object17_get_indexed_bindERK8NodePath:
.LFB2582:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2582
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
	movq	%rdx, -88(%rbp)	# p_name, p_name
# core/object.cpp:1587: 	return get_indexed(p_name.get_as_property_path().get_subnames());
	leaq	-40(%rbp), %rax	#, tmp87
	movq	-88(%rbp), %rdx	# p_name, tmp88
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp87,
.LEHB548:
	call	_ZNK8NodePath20get_as_property_pathEv	#
.LEHE548:
# core/object.cpp:1587: 	return get_indexed(p_name.get_as_property_path().get_subnames());
	leaq	-64(%rbp), %rax	#, tmp89
	leaq	-40(%rbp), %rdx	#, tmp90
	movq	%rdx, %rsi	# tmp90,
	movq	%rax, %rdi	# tmp89,
.LEHB549:
	call	_ZNK8NodePath12get_subnamesEv	#
.LEHE549:
# core/object.cpp:1587: 	return get_indexed(p_name.get_as_property_path().get_subnames());
	movq	-72(%rbp), %rax	# <retval>, tmp91
	leaq	-64(%rbp), %rdx	#, tmp92
	movq	-80(%rbp), %rsi	# this, tmp93
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp91,
.LEHB550:
	call	_ZNK6Object11get_indexedERK6VectorI10StringNameEPb	#
.LEHE550:
# core/object.cpp:1587: 	return get_indexed(p_name.get_as_property_path().get_subnames());
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-64(%rbp), %rax	#, tmp94
	addq	$8, %rax	#, _15
	movq	%rax, -24(%rbp)	# _15, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-24(%rbp), %rax	# this, tmp95
	movq	(%rax), %rdx	# this_16->_ptr, _17
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-24(%rbp), %rax	# this, tmp96
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp96,
	call	_ZN7CowDataI10StringNameE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:1587: 	return get_indexed(p_name.get_as_property_path().get_subnames());
	leaq	-40(%rbp), %rax	#, tmp97
	movq	%rax, %rdi	# tmp97,
	call	_ZN8NodePathD1Ev	#
# core/object.cpp:1587: 	return get_indexed(p_name.get_as_property_path().get_subnames());
	jmp	.L2422	#
.L2421:
	movq	%rax, %rbx	#, tmp102
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-64(%rbp), %rax	#, tmp98
	addq	$8, %rax	#, _18
	movq	%rax, -32(%rbp)	# _18, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-32(%rbp), %rax	# this, tmp99
	movq	(%rax), %rdx	# this_19->_ptr, _20
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-32(%rbp), %rax	# this, tmp100
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp100,
	call	_ZN7CowDataI10StringNameE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
	jmp	.L2419	#
.L2420:
	movq	%rax, %rbx	#, tmp101
.L2419:
# core/object.cpp:1587: 	return get_indexed(p_name.get_as_property_path().get_subnames());
	leaq	-40(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN8NodePathD1Ev	#
	movq	%rbx, %rax	# tmp101, D.62004
	movq	%rax, %rdi	# D.62004,
.LEHB551:
	call	_Unwind_Resume	#
.LEHE551:
.L2422:
# core/object.cpp:1588: }
	movq	-72(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2582:
	.section	.gcc_except_table
.LLSDA2582:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2582-.LLSDACSB2582
.LLSDACSB2582:
	.uleb128 .LEHB548-.LFB2582
	.uleb128 .LEHE548-.LEHB548
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB549-.LFB2582
	.uleb128 .LEHE549-.LEHB549
	.uleb128 .L2420-.LFB2582
	.uleb128 0
	.uleb128 .LEHB550-.LFB2582
	.uleb128 .LEHE550-.LEHB550
	.uleb128 .L2421-.LFB2582
	.uleb128 0
	.uleb128 .LEHB551-.LFB2582
	.uleb128 .LEHE551-.LEHB551
	.uleb128 0
	.uleb128 0
.LLSDACSE2582:
	.text
	.size	_ZNK6Object17_get_indexed_bindERK8NodePath, .-_ZNK6Object17_get_indexed_bindERK8NodePath
	.local	_ZZN6Object16initialize_classEvE11initialized
	.comm	_ZZN6Object16initialize_classEvE11initialized,1,1
	.align 2
	.globl	_ZN6Object16initialize_classEv
	.type	_ZN6Object16initialize_classEv, @function
_ZN6Object16initialize_classEv:
.LFB2583:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
# core/object.cpp:1593: 	if (initialized)
	movzbl	_ZZN6Object16initialize_classEvE11initialized(%rip), %eax	# initialized, initialized.307_1
	testb	%al, %al	# initialized.307_1
	jne	.L2426	#,
# core/object.cpp:1595: 	ClassDB::_add_class<Object>();
	call	_ZN7ClassDB10_add_classI6ObjectEEvv	#
# core/object.cpp:1596: 	_bind_methods();
	call	_ZN6Object13_bind_methodsEv	#
# core/object.cpp:1597: 	initialized = true;
	movb	$1, _ZZN6Object16initialize_classEvE11initialized(%rip)	#, initialized
	jmp	.L2423	#
.L2426:
# core/object.cpp:1594: 		return;
	nop	
.L2423:
# core/object.cpp:1598: }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2583:
	.size	_ZN6Object16initialize_classEv, .-_ZN6Object16initialize_classEv
	.align 2
	.globl	_ZNK6Object2trERK10StringName
	.type	_ZNK6Object2trERK10StringName, @function
_ZNK6Object2trERK10StringName:
.LFB2584:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -16(%rbp)	# this, this
	movq	%rdx, -24(%rbp)	# p_message, p_message
# core/object.cpp:1602: 	if (!_can_translate || !TranslationServer::get_singleton())
	movq	-16(%rbp), %rax	# this, tmp87
	movzbl	72(%rax), %eax	# this_10(D)->_can_translate, _1
# core/object.cpp:1602: 	if (!_can_translate || !TranslationServer::get_singleton())
	xorl	$1, %eax	#, _2
# core/object.cpp:1602: 	if (!_can_translate || !TranslationServer::get_singleton())
	testb	%al, %al	# _2
	jne	.L2428	#,
# ./core/translation.h:87: 	_FORCE_INLINE_ static TranslationServer *get_singleton() { return singleton; }
	movq	_ZN17TranslationServer9singletonE(%rip), %rax	# singleton, D.54735
# core/object.cpp:1602: 	if (!_can_translate || !TranslationServer::get_singleton())
	testq	%rax, %rax	# D.54735
	jne	.L2430	#,
.L2428:
# core/object.cpp:1602: 	if (!_can_translate || !TranslationServer::get_singleton())
	movl	$1, %eax	#, iftmp.309_5
	jmp	.L2431	#
.L2430:
# core/object.cpp:1602: 	if (!_can_translate || !TranslationServer::get_singleton())
	movl	$0, %eax	#, iftmp.309_5
.L2431:
# core/object.cpp:1602: 	if (!_can_translate || !TranslationServer::get_singleton())
	testb	%al, %al	# iftmp.309_5
	je	.L2432	#,
# core/object.cpp:1603: 		return p_message;
	movq	-24(%rbp), %rdx	# p_message, tmp88
	movq	-8(%rbp), %rax	# <retval>, tmp89
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp89,
	call	_ZN10StringNameC1ERKS_	#
	jmp	.L2427	#
.L2432:
# ./core/translation.h:87: 	_FORCE_INLINE_ static TranslationServer *get_singleton() { return singleton; }
	movq	_ZN17TranslationServer9singletonE(%rip), %rcx	# singleton, D.54738
# core/object.cpp:1605: 	return TranslationServer::get_singleton()->translate(p_message);
	movq	-8(%rbp), %rax	# <retval>, tmp90
	movq	-24(%rbp), %rdx	# p_message, tmp91
	movq	%rcx, %rsi	# D.54738,
	movq	%rax, %rdi	# tmp90,
	call	_ZNK17TranslationServer9translateERK10StringName	#
.L2427:
# core/object.cpp:1606: }
	movq	-8(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2584:
	.size	_ZNK6Object2trERK10StringName, .-_ZNK6Object2trERK10StringName
	.section	.rodata
.LC62:
	.string	"res://"
.LC63:
	.string	"::"
	.text
	.align 2
	.globl	_ZN6Object30_clear_internal_resource_pathsERK7Variant
	.type	_ZN6Object30_clear_internal_resource_pathsERK7Variant, @function
_ZN6Object30_clear_internal_resource_pathsERK7Variant:
.LFB2585:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2585
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$136, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -152(%rbp)	# this, this
	movq	%rsi, -160(%rbp)	# p_var, p_var
	movq	-160(%rbp), %rax	# p_var, tmp115
	movq	%rax, -64(%rbp)	# tmp115, this
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movq	-64(%rbp), %rax	# this, tmp116
	movl	(%rax), %eax	# this_121->type, D.59146
# core/object.cpp:1610: 	switch (p_var.get_type()) {
	cmpl	$19, %eax	#, retval.310_45
	je	.L2437	#,
	cmpl	$19, %eax	#, retval.310_45
	jg	.L2435	#,
	cmpl	$17, %eax	#, retval.310_45
	je	.L2439	#,
	cmpl	$18, %eax	#, retval.310_45
	je	.L2440	#,
	jmp	.L2435	#
.L2439:
# core/object.cpp:1614: 			RES r = p_var;
	movq	-160(%rbp), %rdx	# p_var, tmp117
	leaq	-120(%rbp), %rax	#, tmp118
	movq	%rdx, %rsi	# tmp117,
	movq	%rax, %rdi	# tmp118,
.LEHB552:
	call	_ZN3RefI8ResourceEC1ERK7Variant	#
.LEHE552:
# core/object.cpp:1615: 			if (!r.is_valid())
	leaq	-120(%rbp), %rax	#, tmp119
	movq	%rax, %rdi	# tmp119,
	call	_ZNK3RefI8ResourceE8is_validEv	#
# core/object.cpp:1615: 			if (!r.is_valid())
	xorl	$1, %eax	#, retval.311_79
# core/object.cpp:1615: 			if (!r.is_valid())
	testb	%al, %al	# retval.311_79
	je	.L2441	#,
	movl	$0, %ebx	#, finally_tmp.317_25
# core/object.cpp:1616: 				return;
	jmp	.L2442	#
.L2441:
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	movl	$0, %ebx	#, cleanup.314_21
	movl	$0, %r12d	#, cleanup.315_24
# ./core/reference.h:112: 		return reference;
	movq	-120(%rbp), %rdx	# r.reference, D.59150
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-112(%rbp), %rax	#, tmp120
	movq	%rdx, %rsi	# D.59150,
	movq	%rax, %rdi	# tmp120,
.LEHB553:
	call	_ZNK8Resource8get_pathEv	#
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	movl	$1, %ebx	#, cleanup.314_21
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-112(%rbp), %rax	#, tmp121
	movl	$.LC62, %esi	#,
	movq	%rax, %rdi	# tmp121,
	call	_ZNK6String11begins_withEPKc	#
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	xorl	$1, %eax	#, _5
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	testb	%al, %al	# _5
	jne	.L2444	#,
# ./core/reference.h:112: 		return reference;
	movq	-120(%rbp), %rdx	# r.reference, D.59154
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-104(%rbp), %rax	#, tmp122
	movq	%rdx, %rsi	# D.59154,
	movq	%rax, %rdi	# tmp122,
	call	_ZNK8Resource8get_pathEv	#
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	movl	$1, %r12d	#, cleanup.315_24
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-104(%rbp), %rax	#, tmp123
	movl	$0, %edx	#,
	movl	$.LC63, %esi	#,
	movq	%rax, %rdi	# tmp123,
	call	_ZNK6String4findEPKci	#
.LEHE553:
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	cmpl	$-1, %eax	#, _7
	jne	.L2446	#,
.L2444:
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	movl	$1, %r13d	#, iftmp.313_20
	jmp	.L2447	#
.L2446:
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	movl	$0, %r13d	#, iftmp.313_20
.L2447:
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	testb	%r12b, %r12b	# cleanup.315_24
	je	.L2448	#,
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-104(%rbp), %rax	#, tmp124
	movq	%rax, %rdi	# tmp124,
	call	_ZN6StringD1Ev	#
.L2448:
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	testb	%bl, %bl	# cleanup.314_21
	je	.L2449	#,
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-112(%rbp), %rax	#, tmp125
	movq	%rax, %rdi	# tmp125,
	call	_ZN6StringD1Ev	#
.L2449:
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	testb	%r13b, %r13b	# iftmp.313_20
	je	.L2450	#,
	movl	$0, %ebx	#, finally_tmp.317_25
# core/object.cpp:1619: 				return; //not an internal resource
	jmp	.L2442	#
.L2450:
# core/object.cpp:1621: 			Object *object = p_var;
	movq	-160(%rbp), %rax	# p_var, tmp126
	movq	%rax, %rdi	# tmp126,
.LEHB554:
	call	_ZNK7VariantcvP6ObjectEv	#
	movq	%rax, -56(%rbp)	# _98, object
# core/object.cpp:1622: 			if (!object)
	cmpq	$0, -56(%rbp)	#, object
	jne	.L2451	#,
	movl	$0, %ebx	#, finally_tmp.317_25
# core/object.cpp:1623: 				return;
	jmp	.L2442	#
.L2451:
# ./core/reference.h:112: 		return reference;
	movq	-120(%rbp), %rbx	# r.reference, D.59158
# core/object.cpp:1625: 			r->set_path("");
	movq	(%rbx), %rax	# _100->D.27638.D.26671._vptr.Object, _8
	addq	$208, %rax	#, _9
	movq	(%rax), %r12	# *_9, _10
# core/object.cpp:1625: 			r->set_path("");
	leaq	-96(%rbp), %rax	#, tmp127
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# tmp127,
	call	_ZN6StringC1EPKc	#
.LEHE554:
# core/object.cpp:1625: 			r->set_path("");
	leaq	-96(%rbp), %rax	#, tmp128
	movl	$0, %edx	#,
	movq	%rax, %rsi	# tmp128,
	movq	%rbx, %rdi	# D.59158,
.LEHB555:
	call	*%r12	# _10
.LEHE555:
# core/object.cpp:1625: 			r->set_path("");
	leaq	-96(%rbp), %rax	#, tmp129
	movq	%rax, %rdi	# tmp129,
	call	_ZN6StringD1Ev	#
# ./core/reference.h:112: 		return reference;
	movq	-120(%rbp), %rax	# r.reference, D.59162
# core/object.cpp:1626: 			r->clear_internal_resource_paths();
	movq	%rax, %rdi	# _12,
.LEHB556:
	call	_ZN6Object29clear_internal_resource_pathsEv	#
.LEHE556:
	movl	$1, %ebx	#, finally_tmp.317_25
.L2442:
	leaq	-120(%rbp), %rax	#, tmp130
	movq	%rax, %rdi	# tmp130,
	call	_ZN3RefI8ResourceED1Ev	#
	cmpl	$1, %ebx	#, finally_tmp.317_25
	jmp	.L2435	#
.L2437:
# core/object.cpp:1630: 			Array a = p_var;
	leaq	-128(%rbp), %rax	#, tmp131
	movq	-160(%rbp), %rdx	# p_var, tmp132
	movq	%rdx, %rsi	# tmp132,
	movq	%rax, %rdi	# tmp131,
.LEHB557:
	call	_ZNK7Variantcv5ArrayEv	#
.LEHE557:
# core/object.cpp:1631: 			for (int i = 0; i < a.size(); i++) {
	movl	$0, -36(%rbp)	#, i
.L2456:
# core/object.cpp:1631: 			for (int i = 0; i < a.size(); i++) {
	leaq	-128(%rbp), %rax	#, tmp133
	movq	%rax, %rdi	# tmp133,
.LEHB558:
	call	_ZNK5Array4sizeEv	#
# core/object.cpp:1631: 			for (int i = 0; i < a.size(); i++) {
	cmpl	%eax, -36(%rbp)	# _13, i
	setl	%al	#, retval.316_50
	testb	%al, %al	# retval.316_50
	je	.L2455	#,
# core/object.cpp:1632: 				_clear_internal_resource_paths(a[i]);
	movl	-36(%rbp), %edx	# i, tmp134
	leaq	-128(%rbp), %rax	#, tmp135
	movl	%edx, %esi	# tmp134,
	movq	%rax, %rdi	# tmp135,
	call	_ZN5ArrayixEi	#
	movq	%rax, %rdx	#, _14
# core/object.cpp:1632: 				_clear_internal_resource_paths(a[i]);
	movq	-152(%rbp), %rax	# this, tmp136
	movq	%rdx, %rsi	# _14,
	movq	%rax, %rdi	# tmp136,
	call	_ZN6Object30_clear_internal_resource_pathsERK7Variant	#
.LEHE558:
# core/object.cpp:1631: 			for (int i = 0; i < a.size(); i++) {
	addl	$1, -36(%rbp)	#, i
	jmp	.L2456	#
.L2455:
# core/object.cpp:1630: 			Array a = p_var;
	leaq	-128(%rbp), %rax	#, tmp137
	movq	%rax, %rdi	# tmp137,
	call	_ZN5ArrayD1Ev	#
# core/object.cpp:1635: 		} break;
	jmp	.L2435	#
.L2440:
# core/object.cpp:1638: 			Dictionary d = p_var;
	leaq	-136(%rbp), %rax	#, tmp138
	movq	-160(%rbp), %rdx	# p_var, tmp139
	movq	%rdx, %rsi	# tmp139,
	movq	%rax, %rdi	# tmp138,
.LEHB559:
	call	_ZNK7Variantcv10DictionaryEv	#
.LEHE559:
# core/object.cpp:1639: 			List<Variant> keys;
	leaq	-144(%rbp), %rax	#, tmp140
	movq	%rax, %rdi	# tmp140,
	call	_ZN4ListI7Variant16DefaultAllocatorEC1Ev	#
# core/object.cpp:1640: 			d.get_key_list(&keys);
	leaq	-144(%rbp), %rdx	#, tmp141
	leaq	-136(%rbp), %rax	#, tmp142
	movq	%rdx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
.LEHB560:
	call	_ZNK10Dictionary12get_key_listEP4ListI7Variant16DefaultAllocatorE	#
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-144(%rbp), %rax	# keys._data, _127
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _127
	je	.L2457	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-144(%rbp), %rax	# keys._data, _128
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _128->first, D.59166
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L2477	#
.L2457:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59166
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L2477:
# core/object.cpp:1642: 			for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	movq	%rax, -48(%rbp)	# D.59166, E
.L2464:
# core/object.cpp:1642: 			for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	cmpq	$0, -48(%rbp)	#, E
	je	.L2460	#,
	movq	-48(%rbp), %rax	# E, tmp143
	movq	%rax, -72(%rbp)	# tmp143, this
# ./core/list.h:121: 			return value;
	movq	-72(%rbp), %rdx	# this, D.59171
# core/object.cpp:1644: 				_clear_internal_resource_paths(E->get());
	movq	-152(%rbp), %rax	# this, tmp144
	movq	%rdx, %rsi	# D.59171,
	movq	%rax, %rdi	# tmp144,
	call	_ZN6Object30_clear_internal_resource_pathsERK7Variant	#
	movq	-48(%rbp), %rax	# E, tmp145
	movq	%rax, -80(%rbp)	# tmp145, this
# ./core/list.h:121: 			return value;
	movq	-80(%rbp), %rdx	# this, D.59175
# core/object.cpp:1645: 				_clear_internal_resource_paths(d[E->get()]);
	leaq	-136(%rbp), %rax	#, tmp146
	movq	%rdx, %rsi	# D.59175,
	movq	%rax, %rdi	# tmp146,
	call	_ZN10DictionaryixERK7Variant	#
	movq	%rax, %rdx	#, _17
# core/object.cpp:1645: 				_clear_internal_resource_paths(d[E->get()]);
	movq	-152(%rbp), %rax	# this, tmp147
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp147,
	call	_ZN6Object30_clear_internal_resource_pathsERK7Variant	#
.LEHE560:
	movq	-48(%rbp), %rax	# E, tmp148
	movq	%rax, -88(%rbp)	# tmp148, this
# ./core/list.h:73: 			return next_ptr;
	movq	-88(%rbp), %rax	# this, tmp149
	movq	24(%rax), %rax	# this_137->next_ptr, D.59179
# core/object.cpp:1642: 			for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	movq	%rax, -48(%rbp)	# D.59179, E
# core/object.cpp:1642: 			for (List<Variant>::Element *E = keys.front(); E; E = E->next()) {
	jmp	.L2464	#
.L2460:
# core/object.cpp:1639: 			List<Variant> keys;
	leaq	-144(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
# core/object.cpp:1638: 			Dictionary d = p_var;
	leaq	-136(%rbp), %rax	#, tmp151
	movq	%rax, %rdi	# tmp151,
	call	_ZN10DictionaryD1Ev	#
# core/object.cpp:1647: 		} break;
	jmp	.L2435	#
.L2472:
	movq	%rax, %r13	#, tmp154
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	testb	%r12b, %r12b	# cleanup.315_24
	je	.L2466	#,
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-104(%rbp), %rax	#, tmp152
	movq	%rax, %rdi	# tmp152,
	call	_ZN6StringD1Ev	#
.L2466:
	movq	%r13, %r12	# tmp154, tmp153
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	testb	%bl, %bl	# cleanup.314_21
	je	.L2467	#,
# core/object.cpp:1618: 			if (!r->get_path().begins_with("res://") || r->get_path().find("::") == -1)
	leaq	-112(%rbp), %rax	#, tmp157
	movq	%rax, %rdi	# tmp157,
	call	_ZN6StringD1Ev	#
.L2467:
	movq	%r12, %rbx	# tmp153, tmp158
	jmp	.L2468	#
.L2474:
	movq	%rax, %rbx	#, tmp161
# core/object.cpp:1625: 			r->set_path("");
	leaq	-96(%rbp), %rax	#, tmp160
	movq	%rax, %rdi	# tmp160,
	call	_ZN6StringD1Ev	#
	jmp	.L2468	#
.L2473:
	movq	%rax, %rbx	#, tmp158
.L2468:
# core/object.cpp:1614: 			RES r = p_var;
	leaq	-120(%rbp), %rax	#, tmp163
	movq	%rax, %rdi	# tmp163,
	call	_ZN3RefI8ResourceED1Ev	#
	movq	%rbx, %rax	# tmp158, D.62011
	movq	%rax, %rdi	# D.62011,
.LEHB561:
	call	_Unwind_Resume	#
.L2475:
	movq	%rax, %rbx	#, tmp165
# core/object.cpp:1630: 			Array a = p_var;
	leaq	-128(%rbp), %rax	#, tmp164
	movq	%rax, %rdi	# tmp164,
	call	_ZN5ArrayD1Ev	#
	movq	%rbx, %rax	# tmp165, D.62012
	movq	%rax, %rdi	# D.62012,
	call	_Unwind_Resume	#
.L2476:
	movq	%rax, %rbx	#, tmp168
# core/object.cpp:1639: 			List<Variant> keys;
	leaq	-144(%rbp), %rax	#, tmp166
	movq	%rax, %rdi	# tmp166,
	call	_ZN4ListI7Variant16DefaultAllocatorED1Ev	#
# core/object.cpp:1638: 			Dictionary d = p_var;
	leaq	-136(%rbp), %rax	#, tmp171
	movq	%rax, %rdi	# tmp171,
	call	_ZN10DictionaryD1Ev	#
	movq	%rbx, %rax	# tmp167, D.62013
	movq	%rax, %rdi	# D.62013,
	call	_Unwind_Resume	#
.LEHE561:
.L2435:
# core/object.cpp:1651: }
	addq	$136, %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2585:
	.section	.gcc_except_table
.LLSDA2585:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2585-.LLSDACSB2585
.LLSDACSB2585:
	.uleb128 .LEHB552-.LFB2585
	.uleb128 .LEHE552-.LEHB552
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB553-.LFB2585
	.uleb128 .LEHE553-.LEHB553
	.uleb128 .L2472-.LFB2585
	.uleb128 0
	.uleb128 .LEHB554-.LFB2585
	.uleb128 .LEHE554-.LEHB554
	.uleb128 .L2473-.LFB2585
	.uleb128 0
	.uleb128 .LEHB555-.LFB2585
	.uleb128 .LEHE555-.LEHB555
	.uleb128 .L2474-.LFB2585
	.uleb128 0
	.uleb128 .LEHB556-.LFB2585
	.uleb128 .LEHE556-.LEHB556
	.uleb128 .L2473-.LFB2585
	.uleb128 0
	.uleb128 .LEHB557-.LFB2585
	.uleb128 .LEHE557-.LEHB557
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB558-.LFB2585
	.uleb128 .LEHE558-.LEHB558
	.uleb128 .L2475-.LFB2585
	.uleb128 0
	.uleb128 .LEHB559-.LFB2585
	.uleb128 .LEHE559-.LEHB559
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB560-.LFB2585
	.uleb128 .LEHE560-.LEHB560
	.uleb128 .L2476-.LFB2585
	.uleb128 0
	.uleb128 .LEHB561-.LFB2585
	.uleb128 .LEHE561-.LEHB561
	.uleb128 0
	.uleb128 0
.LLSDACSE2585:
	.text
	.size	_ZN6Object30_clear_internal_resource_pathsERK7Variant, .-_ZN6Object30_clear_internal_resource_pathsERK7Variant
	.align 2
	.globl	_ZN6Object29clear_internal_resource_pathsEv
	.type	_ZN6Object29clear_internal_resource_pathsEv, @function
_ZN6Object29clear_internal_resource_pathsEv:
.LFB2586:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2586
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# this, this
# core/object.cpp:1672: 	List<PropertyInfo> pinfo;
	leaq	-88(%rbp), %rax	#, tmp91
	movq	%rax, %rdi	# tmp91,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
# core/object.cpp:1674: 	get_property_list(&pinfo);
	leaq	-88(%rbp), %rcx	#, tmp92
	movq	-104(%rbp), %rax	# this, tmp93
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp92,
	movq	%rax, %rdi	# tmp93,
.LEHB562:
	call	_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb	#
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-88(%rbp), %rax	# pinfo._data, _26
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _26
	je	.L2479	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-88(%rbp), %rax	# pinfo._data, _27
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _27->first, D.59131
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L2494	#
.L2479:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59131
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L2494:
# core/object.cpp:1676: 	for (List<PropertyInfo>::Element *E = pinfo.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59131, E
.L2486:
# core/object.cpp:1676: 	for (List<PropertyInfo>::Element *E = pinfo.front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L2482	#,
	movq	-24(%rbp), %rax	# E, tmp94
	movq	%rax, -32(%rbp)	# tmp94, this
# ./core/list.h:121: 			return value;
	movq	-32(%rbp), %rax	# this, D.59136
# core/object.cpp:1678: 		_clear_internal_resource_paths(get(E->get().name));
	leaq	8(%rax), %rdx	#, _2
# core/object.cpp:1678: 		_clear_internal_resource_paths(get(E->get().name));
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# tmp95,
	call	_ZN10StringNameC1ERK6String	#
.LEHE562:
# core/object.cpp:1678: 		_clear_internal_resource_paths(get(E->get().name));
	leaq	-80(%rbp), %rax	#, tmp96
	leaq	-48(%rbp), %rdx	#, tmp97
	movq	-104(%rbp), %rsi	# this, tmp98
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp96,
.LEHB563:
	call	_ZNK6Object3getERK10StringNamePb	#
.LEHE563:
# core/object.cpp:1678: 		_clear_internal_resource_paths(get(E->get().name));
	leaq	-80(%rbp), %rdx	#, tmp99
	movq	-104(%rbp), %rax	# this, tmp100
	movq	%rdx, %rsi	# tmp99,
	movq	%rax, %rdi	# tmp100,
.LEHB564:
	call	_ZN6Object30_clear_internal_resource_pathsERK7Variant	#
.LEHE564:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40688.type, _36
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _36
	je	.L2498	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN7Variant5clearEv	#
.L2498:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1678: 		_clear_internal_resource_paths(get(E->get().name));
	leaq	-48(%rbp), %rax	#, tmp102
	movq	%rax, %rdi	# tmp102,
	call	_ZN10StringNameD1Ev	#
	movq	-24(%rbp), %rax	# E, tmp103
	movq	%rax, -40(%rbp)	# tmp103, this
# ./core/list.h:73: 			return next_ptr;
	movq	-40(%rbp), %rax	# this, tmp104
	movq	48(%rax), %rax	# this_34->next_ptr, D.59140
# core/object.cpp:1676: 	for (List<PropertyInfo>::Element *E = pinfo.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59140, E
# core/object.cpp:1676: 	for (List<PropertyInfo>::Element *E = pinfo.front(); E; E = E->next()) {
	jmp	.L2486	#
.L2482:
# core/object.cpp:1672: 	List<PropertyInfo> pinfo;
	leaq	-88(%rbp), %rax	#, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
# core/object.cpp:1680: }
	jmp	.L2497	#
.L2493:
	movq	%rax, %rbx	#, tmp108
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40688.type, _37
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _37
	je	.L2499	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp106
	movq	%rax, %rdi	# tmp106,
	call	_ZN7Variant5clearEv	#
.L2499:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2489	#
.L2492:
	movq	%rax, %rbx	#, tmp107
.L2489:
# core/object.cpp:1678: 		_clear_internal_resource_paths(get(E->get().name));
	leaq	-48(%rbp), %rax	#, tmp111
	movq	%rax, %rdi	# tmp111,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2490	#
.L2491:
	movq	%rax, %rbx	#, tmp112
.L2490:
# core/object.cpp:1672: 	List<PropertyInfo> pinfo;
	leaq	-88(%rbp), %rax	#, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp112, D.62020
	movq	%rax, %rdi	# D.62020,
.LEHB565:
	call	_Unwind_Resume	#
.LEHE565:
.L2497:
# core/object.cpp:1680: }
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2586:
	.section	.gcc_except_table
.LLSDA2586:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2586-.LLSDACSB2586
.LLSDACSB2586:
	.uleb128 .LEHB562-.LFB2586
	.uleb128 .LEHE562-.LEHB562
	.uleb128 .L2491-.LFB2586
	.uleb128 0
	.uleb128 .LEHB563-.LFB2586
	.uleb128 .LEHE563-.LEHB563
	.uleb128 .L2492-.LFB2586
	.uleb128 0
	.uleb128 .LEHB564-.LFB2586
	.uleb128 .LEHE564-.LEHB564
	.uleb128 .L2493-.LFB2586
	.uleb128 0
	.uleb128 .LEHB565-.LFB2586
	.uleb128 .LEHE565-.LEHB565
	.uleb128 0
	.uleb128 0
.LLSDACSE2586:
	.text
	.size	_ZN6Object29clear_internal_resource_pathsEv, .-_ZN6Object29clear_internal_resource_pathsEv
	.section	.rodata
.LC64:
	.string	"get_class"
.LC65:
	.string	"is_class"
.LC66:
	.string	"set"
.LC67:
	.string	"get_indexed"
.LC68:
	.string	"get_property_list"
.LC69:
	.string	"get_method_list"
.LC70:
	.string	"notification"
.LC71:
	.string	"to_string"
.LC72:
	.string	"get_instance_id"
.LC73:
	.string	"set_script"
.LC74:
	.string	"get_script"
.LC75:
	.string	"set_meta"
.LC76:
	.string	"remove_meta"
.LC77:
	.string	"has_meta"
.LC78:
	.string	"get_meta_list"
.LC79:
	.string	"has_user_signal"
.LC80:
	.string	"call"
.LC81:
	.string	"call_deferred"
.LC82:
	.string	"set_deferred"
.LC83:
	.string	"has_method"
.LC84:
	.string	"get_signal_list"
.LC85:
	.string	"get_signal_connection_list"
.LC86:
	.string	"get_incoming_connections"
.LC87:
	.string	"disconnect"
.LC88:
	.string	"set_block_signals"
.LC89:
	.string	"is_blocking_signals"
.LC90:
	.string	"property_list_changed_notify"
.LC91:
	.string	"set_message_translation"
.LC92:
	.string	"can_translate_messages"
.LC93:
	.string	"tr"
.LC94:
	.string	"is_queued_for_deletion"
.LC95:
	.string	"free"
.LC96:
	.string	"script_changed"
.LC97:
	.string	"NOTIFICATION_POSTINITIALIZE"
.LC98:
	.string	"NOTIFICATION_PREDELETE"
.LC99:
	.string	"CONNECT_DEFERRED"
.LC100:
	.string	"CONNECT_PERSIST"
.LC101:
	.string	"CONNECT_ONESHOT"
.LC102:
	.string	"CONNECT_REFERENCE_COUNTED"
	.text
	.align 2
	.globl	_ZN6Object13_bind_methodsEv
	.type	_ZN6Object13_bind_methodsEv, @function
_ZN6Object13_bind_methodsEv:
.LFB2587:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2587
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$1640, %rsp	#,
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
# core/object.cpp:1684: 	ClassDB::bind_method(D_METHOD("get_class"), &Object::get_class);
	movl	$65, %eax	#, D.51904
	movl	$0, %edx	#, D.51904
	movq	%rax, %rcx	# D.51904, tmp158
	movq	%rdx, %rbx	# D.51904,
	movq	%rdx, %rax	#, tmp161
	movq	%rcx, %rsi	# tmp160,
	movq	%rax, %rdx	# tmp161,
	movl	$.LC64, %edi	#,
.LEHB566:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_	#
# core/object.cpp:1685: 	ClassDB::bind_method(D_METHOD("is_class", "class"), &Object::is_class);
	movl	$81, %r12d	#, D.51905
	movl	$0, %r13d	#, D.51905
	movq	%r12, %rcx	# D.51905, tmp162
	movq	%r13, %rbx	# D.51905,
	movq	%r12, %rax	# D.51905, tmp163
	movq	%r13, %rdx	# D.51905,
	movq	%rdx, %rax	#, tmp165
	movq	%rcx, %rsi	# tmp164,
	movq	%rax, %rdx	# tmp165,
	movl	$.LC65, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_	#
# core/object.cpp:1686: 	ClassDB::bind_method(D_METHOD("set", "property", "value"), &Object::_set_bind);
	movl	$_ZN6Object9_set_bindERK6StringRK7Variant, %r14d	#, D.51906
	movl	$0, %r15d	#, D.51906
	movq	%r14, %rcx	# D.51906, tmp166
	movq	%r15, %rbx	# D.51906,
	movq	%r14, %rax	# D.51906, tmp167
	movq	%r15, %rdx	# D.51906,
	movq	%rdx, %rax	#, tmp169
	movq	%rcx, %rsi	# tmp168,
	movq	%rax, %rdx	# tmp169,
	movl	$.LC66, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_	#
# core/object.cpp:1687: 	ClassDB::bind_method(D_METHOD("get", "property"), &Object::_get_bind);
	movq	$_ZNK6Object9_get_bindERK6String, -1680(%rbp)	#, %sfp
	movq	$0, -1672(%rbp)	#, %sfp
	movq	-1680(%rbp), %rax	# %sfp, D.51907
	movq	-1672(%rbp), %rdx	# %sfp, D.51907
	movq	%rax, %rcx	# D.51907, tmp170
	movq	%rdx, %rbx	# D.51907,
	movq	%rdx, %rax	#, tmp173
	movq	%rcx, %rsi	# tmp172,
	movq	%rax, %rdx	# tmp173,
	movl	$.LC10, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_	#
# core/object.cpp:1688: 	ClassDB::bind_method(D_METHOD("set_indexed", "property", "value"), &Object::_set_indexed_bind);
	movq	$_ZN6Object17_set_indexed_bindERK8NodePathRK7Variant, -1664(%rbp)	#, %sfp
	movq	$0, -1656(%rbp)	#, %sfp
	movq	-1664(%rbp), %rax	# %sfp, D.51908
	movq	-1656(%rbp), %rdx	# %sfp, D.51908
	movq	%rax, %rcx	# D.51908, tmp174
	movq	%rdx, %rbx	# D.51908,
	movq	%rdx, %rax	#, tmp177
	movq	%rcx, %rsi	# tmp176,
	movq	%rax, %rdx	# tmp177,
	movl	$.LC23, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_	#
# core/object.cpp:1689: 	ClassDB::bind_method(D_METHOD("get_indexed", "property"), &Object::_get_indexed_bind);
	movq	$_ZNK6Object17_get_indexed_bindERK8NodePath, -1648(%rbp)	#, %sfp
	movq	$0, -1640(%rbp)	#, %sfp
	movq	-1648(%rbp), %rax	# %sfp, D.51909
	movq	-1640(%rbp), %rdx	# %sfp, D.51909
	movq	%rax, %rcx	# D.51909, tmp178
	movq	%rdx, %rbx	# D.51909,
	movq	%rdx, %rax	#, tmp181
	movq	%rcx, %rsi	# tmp180,
	movq	%rax, %rdx	# tmp181,
	movl	$.LC67, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_	#
# core/object.cpp:1690: 	ClassDB::bind_method(D_METHOD("get_property_list"), &Object::_get_property_list_bind);
	movq	$_ZNK6Object23_get_property_list_bindEv, -1632(%rbp)	#, %sfp
	movq	$0, -1624(%rbp)	#, %sfp
	movq	-1632(%rbp), %rax	# %sfp, D.51910
	movq	-1624(%rbp), %rdx	# %sfp, D.51910
	movq	%rax, %rcx	# D.51910, tmp182
	movq	%rdx, %rbx	# D.51910,
	movq	%rdx, %rax	#, tmp185
	movq	%rcx, %rsi	# tmp184,
	movq	%rax, %rdx	# tmp185,
	movl	$.LC68, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_	#
# core/object.cpp:1691: 	ClassDB::bind_method(D_METHOD("get_method_list"), &Object::_get_method_list_bind);
	movq	$_ZNK6Object21_get_method_list_bindEv, -1616(%rbp)	#, %sfp
	movq	$0, -1608(%rbp)	#, %sfp
	movq	-1616(%rbp), %rax	# %sfp, D.51911
	movq	-1608(%rbp), %rdx	# %sfp, D.51911
	movq	%rax, %rcx	# D.51911, tmp186
	movq	%rdx, %rbx	# D.51911,
	movq	%rdx, %rax	#, tmp189
	movq	%rcx, %rsi	# tmp188,
	movq	%rax, %rdx	# tmp189,
	movl	$.LC69, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_	#
# core/object.cpp:1692: 	ClassDB::bind_method(D_METHOD("notification", "what", "reversed"), &Object::notification, DEFVAL(false));
	leaq	-1008(%rbp), %rax	#, tmp190
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp190,
	call	_ZN7VariantC1Eb	#
.LEHE566:
	movq	$_ZN6Object12notificationEib, -1600(%rbp)	#, %sfp
	movq	$0, -1592(%rbp)	#, %sfp
	leaq	-1008(%rbp), %rdi	#, tmp191
	movq	-1600(%rbp), %rax	# %sfp, D.51912
	movq	-1592(%rbp), %rdx	# %sfp, D.51912
	movq	%rax, %rcx	# D.51912, tmp192
	movq	%rdx, %rbx	# D.51912,
	movq	%rcx, %rsi	# tmp192, tmp194
	movq	%rdx, %rax	#, tmp195
	movq	%rdi, %rcx	# tmp191,
	movq	%rax, %rdx	# tmp195,
	movl	$.LC70, %edi	#,
.LEHB567:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant	#
.LEHE567:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-1008(%rbp), %eax	# D.40746.type, _450
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _450
	je	.L2634	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-1008(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN7Variant5clearEv	#
.L2634:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1693: 	ClassDB::bind_method(D_METHOD("to_string"), &Object::to_string);
	movq	$_ZN6Object9to_stringEv, -1584(%rbp)	#, %sfp
	movq	$0, -1576(%rbp)	#, %sfp
	movq	-1584(%rbp), %rax	# %sfp, D.51913
	movq	-1576(%rbp), %rdx	# %sfp, D.51913
	movq	%rax, %rcx	# D.51913, tmp197
	movq	%rdx, %rbx	# D.51913,
	movq	%rdx, %rax	#, tmp200
	movq	%rcx, %rsi	# tmp199,
	movq	%rax, %rdx	# tmp200,
	movl	$.LC71, %edi	#,
.LEHB568:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_	#
# core/object.cpp:1694: 	ClassDB::bind_method(D_METHOD("get_instance_id"), &Object::get_instance_id);
	movq	$_ZNK6Object15get_instance_idEv, -1568(%rbp)	#, %sfp
	movq	$0, -1560(%rbp)	#, %sfp
	movq	-1568(%rbp), %rax	# %sfp, D.51914
	movq	-1560(%rbp), %rdx	# %sfp, D.51914
	movq	%rax, %rcx	# D.51914, tmp201
	movq	%rdx, %rbx	# D.51914,
	movq	%rdx, %rax	#, tmp204
	movq	%rcx, %rsi	# tmp203,
	movq	%rax, %rdx	# tmp204,
	movl	$.LC72, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_	#
# core/object.cpp:1696: 	ClassDB::bind_method(D_METHOD("set_script", "script"), &Object::set_script);
	movq	$_ZN6Object10set_scriptERK6RefPtr, -1552(%rbp)	#, %sfp
	movq	$0, -1544(%rbp)	#, %sfp
	movq	-1552(%rbp), %rax	# %sfp, D.51915
	movq	-1544(%rbp), %rdx	# %sfp, D.51915
	movq	%rax, %rcx	# D.51915, tmp205
	movq	%rdx, %rbx	# D.51915,
	movq	%rdx, %rax	#, tmp208
	movq	%rcx, %rsi	# tmp207,
	movq	%rax, %rdx	# tmp208,
	movl	$.LC73, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_	#
# core/object.cpp:1697: 	ClassDB::bind_method(D_METHOD("get_script"), &Object::get_script);
	movq	$_ZNK6Object10get_scriptEv, -1536(%rbp)	#, %sfp
	movq	$0, -1528(%rbp)	#, %sfp
	movq	-1536(%rbp), %rax	# %sfp, D.51916
	movq	-1528(%rbp), %rdx	# %sfp, D.51916
	movq	%rax, %rcx	# D.51916, tmp209
	movq	%rdx, %rbx	# D.51916,
	movq	%rdx, %rax	#, tmp212
	movq	%rcx, %rsi	# tmp211,
	movq	%rax, %rdx	# tmp212,
	movl	$.LC74, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_	#
# core/object.cpp:1699: 	ClassDB::bind_method(D_METHOD("set_meta", "name", "value"), &Object::set_meta);
	movq	$_ZN6Object8set_metaERK6StringRK7Variant, -1520(%rbp)	#, %sfp
	movq	$0, -1512(%rbp)	#, %sfp
	movq	-1520(%rbp), %rax	# %sfp, D.51917
	movq	-1512(%rbp), %rdx	# %sfp, D.51917
	movq	%rax, %rcx	# D.51917, tmp213
	movq	%rdx, %rbx	# D.51917,
	movq	%rdx, %rax	#, tmp216
	movq	%rcx, %rsi	# tmp215,
	movq	%rax, %rdx	# tmp216,
	movl	$.LC75, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_	#
# core/object.cpp:1700: 	ClassDB::bind_method(D_METHOD("remove_meta", "name"), &Object::remove_meta);
	movq	$_ZN6Object11remove_metaERK6String, -1504(%rbp)	#, %sfp
	movq	$0, -1496(%rbp)	#, %sfp
	movq	-1504(%rbp), %rax	# %sfp, D.51918
	movq	-1496(%rbp), %rdx	# %sfp, D.51918
	movq	%rax, %rcx	# D.51918, tmp217
	movq	%rdx, %rbx	# D.51918,
	movq	%rdx, %rax	#, tmp220
	movq	%rcx, %rsi	# tmp219,
	movq	%rax, %rdx	# tmp220,
	movl	$.LC76, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_	#
# core/object.cpp:1701: 	ClassDB::bind_method(D_METHOD("get_meta", "name"), &Object::get_meta);
	movq	$_ZNK6Object8get_metaERK6String, -1488(%rbp)	#, %sfp
	movq	$0, -1480(%rbp)	#, %sfp
	movq	-1488(%rbp), %rax	# %sfp, D.51919
	movq	-1480(%rbp), %rdx	# %sfp, D.51919
	movq	%rax, %rcx	# D.51919, tmp221
	movq	%rdx, %rbx	# D.51919,
	movq	%rdx, %rax	#, tmp224
	movq	%rcx, %rsi	# tmp223,
	movq	%rax, %rdx	# tmp224,
	movl	$.LC39, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_	#
# core/object.cpp:1702: 	ClassDB::bind_method(D_METHOD("has_meta", "name"), &Object::has_meta);
	movq	$_ZNK6Object8has_metaERK6String, -1472(%rbp)	#, %sfp
	movq	$0, -1464(%rbp)	#, %sfp
	movq	-1472(%rbp), %rax	# %sfp, D.51920
	movq	-1464(%rbp), %rdx	# %sfp, D.51920
	movq	%rax, %rcx	# D.51920, tmp225
	movq	%rdx, %rbx	# D.51920,
	movq	%rdx, %rax	#, tmp228
	movq	%rcx, %rsi	# tmp227,
	movq	%rax, %rdx	# tmp228,
	movl	$.LC77, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_	#
# core/object.cpp:1703: 	ClassDB::bind_method(D_METHOD("get_meta_list"), &Object::_get_meta_list_bind);
	movq	$_ZNK6Object19_get_meta_list_bindEv, -1456(%rbp)	#, %sfp
	movq	$0, -1448(%rbp)	#, %sfp
	movq	-1456(%rbp), %rax	# %sfp, D.51921
	movq	-1448(%rbp), %rdx	# %sfp, D.51921
	movq	%rax, %rcx	# D.51921, tmp229
	movq	%rdx, %rbx	# D.51921,
	movq	%rdx, %rax	#, tmp232
	movq	%rcx, %rsi	# tmp231,
	movq	%rax, %rdx	# tmp232,
	movl	$.LC78, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_	#
# core/object.cpp:1705: 	ClassDB::bind_method(D_METHOD("add_user_signal", "signal", "arguments"), &Object::_add_user_signal, DEFVAL(Array()));
	leaq	-952(%rbp), %rax	#, tmp233
	movq	%rax, %rdi	# tmp233,
	call	_ZN5ArrayC1Ev	#
.LEHE568:
# core/object.cpp:1705: 	ClassDB::bind_method(D_METHOD("add_user_signal", "signal", "arguments"), &Object::_add_user_signal, DEFVAL(Array()));
	leaq	-952(%rbp), %rdx	#, tmp234
	leaq	-976(%rbp), %rax	#, tmp235
	movq	%rdx, %rsi	# tmp234,
	movq	%rax, %rdi	# tmp235,
.LEHB569:
	call	_ZN7VariantC1ERK5Array	#
.LEHE569:
# core/object.cpp:1705: 	ClassDB::bind_method(D_METHOD("add_user_signal", "signal", "arguments"), &Object::_add_user_signal, DEFVAL(Array()));
	movq	$_ZN6Object16_add_user_signalERK6StringRK5Array, -1440(%rbp)	#, %sfp
	movq	$0, -1432(%rbp)	#, %sfp
	leaq	-976(%rbp), %rdi	#, tmp236
	movq	-1440(%rbp), %rax	# %sfp, D.51922
	movq	-1432(%rbp), %rdx	# %sfp, D.51922
	movq	%rax, %rcx	# D.51922, tmp237
	movq	%rdx, %rbx	# D.51922,
	movq	%rcx, %rsi	# tmp237, tmp239
	movq	%rdx, %rax	#, tmp240
	movq	%rdi, %rcx	# tmp236,
	movq	%rax, %rdx	# tmp240,
	movl	$.LC41, %edi	#,
.LEHB570:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant	#
.LEHE570:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-976(%rbp), %eax	# D.40797.type, _451
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _451
	je	.L2635	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-976(%rbp), %rax	#, tmp241
	movq	%rax, %rdi	# tmp241,
	call	_ZN7Variant5clearEv	#
.L2635:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1705: 	ClassDB::bind_method(D_METHOD("add_user_signal", "signal", "arguments"), &Object::_add_user_signal, DEFVAL(Array()));
	leaq	-952(%rbp), %rax	#, tmp242
	movq	%rax, %rdi	# tmp242,
	call	_ZN5ArrayD1Ev	#
# core/object.cpp:1706: 	ClassDB::bind_method(D_METHOD("has_user_signal", "signal"), &Object::_has_user_signal);
	movq	$_ZNK6Object16_has_user_signalERK10StringName, -1424(%rbp)	#, %sfp
	movq	$0, -1416(%rbp)	#, %sfp
	movq	-1424(%rbp), %rax	# %sfp, D.51923
	movq	-1416(%rbp), %rdx	# %sfp, D.51923
	movq	%rax, %rcx	# D.51923, tmp243
	movq	%rdx, %rbx	# D.51923,
	movq	%rdx, %rax	#, tmp246
	movq	%rcx, %rsi	# tmp245,
	movq	%rax, %rdx	# tmp246,
	movl	$.LC79, %edi	#,
.LEHB571:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_	#
# core/object.cpp:1709: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp247
	movq	%rax, %rdi	# tmp247,
	call	_ZN10MethodInfoC1Ev	#
.LEHE571:
# core/object.cpp:1710: 		mi.name = "emit_signal";
	leaq	-1104(%rbp), %rax	#, tmp248
	movl	$.LC52, %esi	#,
	movq	%rax, %rdi	# tmp248,
.LEHB572:
	call	_ZN6StringaSEPKc	#
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-888(%rbp), %rax	#, tmp249
	movq	%rax, %rdi	# tmp249,
	call	_ZN10StringNameC1Ev	#
.LEHE572:
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-880(%rbp), %rax	#, tmp250
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# tmp250,
.LEHB573:
	call	_ZN6StringC1EPKc	#
.LEHE573:
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-872(%rbp), %rax	#, tmp251
	movl	$.LC17, %esi	#,
	movq	%rax, %rdi	# tmp251,
.LEHB574:
	call	_ZN6StringC1EPKc	#
.LEHE574:
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-880(%rbp), %rcx	#, tmp252
	leaq	-872(%rbp), %rdx	#, tmp253
	leaq	-944(%rbp), %rdi	#, tmp254
	subq	$8, %rsp	#,
	leaq	-888(%rbp), %rax	#, tmp255
	pushq	%rax	# tmp255
	movl	$7, %r9d	#,
	movq	%rcx, %r8	# tmp252,
	movl	$0, %ecx	#,
	movl	$4, %esi	#,
.LEHB575:
	.cfi_escape 0x2e,0x10
	call	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName	#
.LEHE575:
	addq	$16, %rsp	#,
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-944(%rbp), %rdx	#, tmp256
	leaq	-1104(%rbp), %rax	#, tmp257
	addq	$64, %rax	#, tmp258
	movq	%rdx, %rsi	# tmp256,
	movq	%rax, %rdi	# tmp258,
.LEHB576:
	.cfi_escape 0x2e,0
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE576:
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-944(%rbp), %rax	#, tmp259
	movq	%rax, %rdi	# tmp259,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-872(%rbp), %rax	#, tmp260
	movq	%rax, %rdi	# tmp260,
	call	_ZN6StringD1Ev	#
	leaq	-880(%rbp), %rax	#, tmp261
	movq	%rax, %rdi	# tmp261,
	call	_ZN6StringD1Ev	#
	leaq	-888(%rbp), %rax	#, tmp262
	movq	%rax, %rdi	# tmp262,
	call	_ZN10StringNameD1Ev	#
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	leaq	-864(%rbp), %rax	#, tmp263
	addq	$8, %rax	#, _452
	movq	%rax, -56(%rbp)	# _452, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-56(%rbp), %rax	# this, tmp264
	movq	$0, (%rax)	#, this_453->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:1713: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "emit_signal", &Object::_emit_signal, mi);
	movq	$_ZN6Object12_emit_signalEPPK7VariantiRNS0_9CallErrorE, -1408(%rbp)	#, %sfp
	movq	$0, -1400(%rbp)	#, %sfp
	leaq	-840(%rbp), %rax	#, tmp265
	movl	$.LC52, %esi	#,
	movq	%rax, %rdi	# tmp265,
.LEHB577:
	call	_ZN10StringNameC1EPKc	#
.LEHE577:
# core/object.cpp:1713: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "emit_signal", &Object::_emit_signal, mi);
	leaq	-864(%rbp), %rdx	#, tmp266
	leaq	-1104(%rbp), %rax	#, tmp267
	leaq	-840(%rbp), %rsi	#, tmp268
	movq	%rdx, %r9	# tmp266,
	movq	%rax, %r8	# tmp267,
	movq	-1408(%rbp), %rdx	# %sfp,
	movq	-1400(%rbp), %rcx	# %sfp,
	movl	$1, %edi	#,
.LEHB578:
	call	_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E	#
.LEHE578:
# core/object.cpp:1713: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "emit_signal", &Object::_emit_signal, mi);
	leaq	-840(%rbp), %rax	#, tmp269
	movq	%rax, %rdi	# tmp269,
	call	_ZN10StringNameD1Ev	#
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-864(%rbp), %rax	#, tmp270
	addq	$8, %rax	#, _454
	movq	%rax, -64(%rbp)	# _454, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-64(%rbp), %rax	# this, tmp271
	movq	(%rax), %rdx	# this_455->_ptr, _456
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-64(%rbp), %rax	# this, tmp272
	movq	%rdx, %rsi	# _456,
	movq	%rax, %rdi	# tmp272,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:1709: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp273
	movq	%rax, %rdi	# tmp273,
	call	_ZN10MethodInfoD1Ev	#
# core/object.cpp:1717: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp274
	movq	%rax, %rdi	# tmp274,
.LEHB579:
	call	_ZN10MethodInfoC1Ev	#
.LEHE579:
# core/object.cpp:1718: 		mi.name = "call";
	leaq	-1104(%rbp), %rax	#, tmp275
	movl	$.LC80, %esi	#,
	movq	%rax, %rdi	# tmp275,
.LEHB580:
	call	_ZN6StringaSEPKc	#
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-776(%rbp), %rax	#, tmp276
	movq	%rax, %rdi	# tmp276,
	call	_ZN10StringNameC1Ev	#
.LEHE580:
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-768(%rbp), %rax	#, tmp277
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# tmp277,
.LEHB581:
	call	_ZN6StringC1EPKc	#
.LEHE581:
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-760(%rbp), %rax	#, tmp278
	movl	$.LC19, %esi	#,
	movq	%rax, %rdi	# tmp278,
.LEHB582:
	call	_ZN6StringC1EPKc	#
.LEHE582:
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-768(%rbp), %rcx	#, tmp279
	leaq	-760(%rbp), %rdx	#, tmp280
	leaq	-832(%rbp), %rdi	#, tmp281
	subq	$8, %rsp	#,
	leaq	-776(%rbp), %rax	#, tmp282
	pushq	%rax	# tmp282
	movl	$7, %r9d	#,
	movq	%rcx, %r8	# tmp279,
	movl	$0, %ecx	#,
	movl	$4, %esi	#,
.LEHB583:
	.cfi_escape 0x2e,0x10
	call	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName	#
.LEHE583:
	addq	$16, %rsp	#,
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-832(%rbp), %rdx	#, tmp283
	leaq	-1104(%rbp), %rax	#, tmp284
	addq	$64, %rax	#, tmp285
	movq	%rdx, %rsi	# tmp283,
	movq	%rax, %rdi	# tmp285,
.LEHB584:
	.cfi_escape 0x2e,0
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE584:
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-832(%rbp), %rax	#, tmp286
	movq	%rax, %rdi	# tmp286,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-760(%rbp), %rax	#, tmp287
	movq	%rax, %rdi	# tmp287,
	call	_ZN6StringD1Ev	#
	leaq	-768(%rbp), %rax	#, tmp288
	movq	%rax, %rdi	# tmp288,
	call	_ZN6StringD1Ev	#
	leaq	-776(%rbp), %rax	#, tmp289
	movq	%rax, %rdi	# tmp289,
	call	_ZN10StringNameD1Ev	#
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	leaq	-752(%rbp), %rax	#, tmp290
	addq	$8, %rax	#, _457
	movq	%rax, -72(%rbp)	# _457, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp291
	movq	$0, (%rax)	#, this_458->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:1721: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call", &Object::_call_bind, mi);
	movq	$_ZN6Object10_call_bindEPPK7VariantiRNS0_9CallErrorE, -1392(%rbp)	#, %sfp
	movq	$0, -1384(%rbp)	#, %sfp
	leaq	-728(%rbp), %rax	#, tmp292
	movl	$.LC80, %esi	#,
	movq	%rax, %rdi	# tmp292,
.LEHB585:
	call	_ZN10StringNameC1EPKc	#
.LEHE585:
# core/object.cpp:1721: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call", &Object::_call_bind, mi);
	leaq	-752(%rbp), %rdx	#, tmp293
	leaq	-1104(%rbp), %rax	#, tmp294
	leaq	-728(%rbp), %rsi	#, tmp295
	movq	%rdx, %r9	# tmp293,
	movq	%rax, %r8	# tmp294,
	movq	-1392(%rbp), %rdx	# %sfp,
	movq	-1384(%rbp), %rcx	# %sfp,
	movl	$1, %edi	#,
.LEHB586:
	call	_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E	#
.LEHE586:
# core/object.cpp:1721: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call", &Object::_call_bind, mi);
	leaq	-728(%rbp), %rax	#, tmp296
	movq	%rax, %rdi	# tmp296,
	call	_ZN10StringNameD1Ev	#
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-752(%rbp), %rax	#, tmp297
	addq	$8, %rax	#, _459
	movq	%rax, -80(%rbp)	# _459, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp298
	movq	(%rax), %rdx	# this_460->_ptr, _461
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-80(%rbp), %rax	# this, tmp299
	movq	%rdx, %rsi	# _461,
	movq	%rax, %rdi	# tmp299,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:1717: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp300
	movq	%rax, %rdi	# tmp300,
	call	_ZN10MethodInfoD1Ev	#
# core/object.cpp:1725: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp301
	movq	%rax, %rdi	# tmp301,
.LEHB587:
	call	_ZN10MethodInfoC1Ev	#
.LEHE587:
# core/object.cpp:1726: 		mi.name = "call_deferred";
	leaq	-1104(%rbp), %rax	#, tmp302
	movl	$.LC81, %esi	#,
	movq	%rax, %rdi	# tmp302,
.LEHB588:
	call	_ZN6StringaSEPKc	#
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-664(%rbp), %rax	#, tmp303
	movq	%rax, %rdi	# tmp303,
	call	_ZN10StringNameC1Ev	#
.LEHE588:
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-656(%rbp), %rax	#, tmp304
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# tmp304,
.LEHB589:
	call	_ZN6StringC1EPKc	#
.LEHE589:
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-648(%rbp), %rax	#, tmp305
	movl	$.LC19, %esi	#,
	movq	%rax, %rdi	# tmp305,
.LEHB590:
	call	_ZN6StringC1EPKc	#
.LEHE590:
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-656(%rbp), %rcx	#, tmp306
	leaq	-648(%rbp), %rdx	#, tmp307
	leaq	-720(%rbp), %rdi	#, tmp308
	subq	$8, %rsp	#,
	leaq	-664(%rbp), %rax	#, tmp309
	pushq	%rax	# tmp309
	movl	$7, %r9d	#,
	movq	%rcx, %r8	# tmp306,
	movl	$0, %ecx	#,
	movl	$4, %esi	#,
.LEHB591:
	.cfi_escape 0x2e,0x10
	call	_ZN12PropertyInfoC1EN7Variant4TypeE6String12PropertyHintRKS2_jRK10StringName	#
.LEHE591:
	addq	$16, %rsp	#,
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-720(%rbp), %rdx	#, tmp310
	leaq	-1104(%rbp), %rax	#, tmp311
	addq	$64, %rax	#, tmp312
	movq	%rdx, %rsi	# tmp310,
	movq	%rax, %rdi	# tmp312,
.LEHB592:
	.cfi_escape 0x2e,0
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
.LEHE592:
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-720(%rbp), %rax	#, tmp313
	movq	%rax, %rdi	# tmp313,
	call	_ZN12PropertyInfoD1Ev	#
	leaq	-648(%rbp), %rax	#, tmp314
	movq	%rax, %rdi	# tmp314,
	call	_ZN6StringD1Ev	#
	leaq	-656(%rbp), %rax	#, tmp315
	movq	%rax, %rdi	# tmp315,
	call	_ZN6StringD1Ev	#
	leaq	-664(%rbp), %rax	#, tmp316
	movq	%rax, %rdi	# tmp316,
	call	_ZN10StringNameD1Ev	#
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	leaq	-640(%rbp), %rax	#, tmp317
	addq	$8, %rax	#, _462
	movq	%rax, -88(%rbp)	# _462, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-88(%rbp), %rax	# this, tmp318
	movq	$0, (%rax)	#, this_463->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:119: 	_FORCE_INLINE_ Vector() {}
	nop	
# core/object.cpp:1729: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call_deferred", &Object::_call_deferred_bind, mi);
	movq	$_ZN6Object19_call_deferred_bindEPPK7VariantiRNS0_9CallErrorE, -1376(%rbp)	#, %sfp
	movq	$0, -1368(%rbp)	#, %sfp
	leaq	-616(%rbp), %rax	#, tmp319
	movl	$.LC81, %esi	#,
	movq	%rax, %rdi	# tmp319,
.LEHB593:
	call	_ZN10StringNameC1EPKc	#
.LEHE593:
# core/object.cpp:1729: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call_deferred", &Object::_call_deferred_bind, mi);
	leaq	-640(%rbp), %rdx	#, tmp320
	leaq	-1104(%rbp), %rax	#, tmp321
	leaq	-616(%rbp), %rsi	#, tmp322
	movq	%rdx, %r9	# tmp320,
	movq	%rax, %r8	# tmp321,
	movq	-1376(%rbp), %rdx	# %sfp,
	movq	-1368(%rbp), %rcx	# %sfp,
	movl	$1, %edi	#,
.LEHB594:
	call	_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E	#
.LEHE594:
# core/object.cpp:1729: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call_deferred", &Object::_call_deferred_bind, mi);
	leaq	-616(%rbp), %rax	#, tmp323
	movq	%rax, %rdi	# tmp323,
	call	_ZN10StringNameD1Ev	#
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-640(%rbp), %rax	#, tmp324
	addq	$8, %rax	#, _464
	movq	%rax, -96(%rbp)	# _464, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-96(%rbp), %rax	# this, tmp325
	movq	(%rax), %rdx	# this_465->_ptr, _466
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-96(%rbp), %rax	# this, tmp326
	movq	%rdx, %rsi	# _466,
	movq	%rax, %rdi	# tmp326,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# core/object.cpp:1725: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp327
	movq	%rax, %rdi	# tmp327,
	call	_ZN10MethodInfoD1Ev	#
# core/object.cpp:1732: 	ClassDB::bind_method(D_METHOD("set_deferred", "property", "value"), &Object::set_deferred);
	movq	$_ZN6Object12set_deferredERK10StringNameRK7Variant, -1360(%rbp)	#, %sfp
	movq	$0, -1352(%rbp)	#, %sfp
	movq	-1360(%rbp), %rax	# %sfp, D.51927
	movq	-1352(%rbp), %rdx	# %sfp, D.51927
	movq	%rax, %rcx	# D.51927, tmp328
	movq	%rdx, %rbx	# D.51927,
	movq	%rdx, %rax	#, tmp331
	movq	%rcx, %rsi	# tmp330,
	movq	%rax, %rdx	# tmp331,
	movl	$.LC82, %edi	#,
.LEHB595:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_	#
# core/object.cpp:1734: 	ClassDB::bind_method(D_METHOD("callv", "method", "arg_array"), &Object::callv);
	movq	$_ZN6Object5callvERK10StringNameRK5Array, -1344(%rbp)	#, %sfp
	movq	$0, -1336(%rbp)	#, %sfp
	movq	-1344(%rbp), %rax	# %sfp, D.51928
	movq	-1336(%rbp), %rdx	# %sfp, D.51928
	movq	%rax, %rcx	# D.51928, tmp332
	movq	%rdx, %rbx	# D.51928,
	movq	%rdx, %rax	#, tmp335
	movq	%rcx, %rsi	# tmp334,
	movq	%rax, %rdx	# tmp335,
	movl	$.LC30, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_	#
# core/object.cpp:1736: 	ClassDB::bind_method(D_METHOD("has_method", "method"), &Object::has_method);
	movq	$_ZNK6Object10has_methodERK10StringName, -1328(%rbp)	#, %sfp
	movq	$0, -1320(%rbp)	#, %sfp
	movq	-1328(%rbp), %rax	# %sfp, D.51929
	movq	-1320(%rbp), %rdx	# %sfp, D.51929
	movq	%rax, %rcx	# D.51929, tmp336
	movq	%rdx, %rbx	# D.51929,
	movq	%rdx, %rax	#, tmp339
	movq	%rcx, %rsi	# tmp338,
	movq	%rax, %rdx	# tmp339,
	movl	$.LC83, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_	#
# core/object.cpp:1738: 	ClassDB::bind_method(D_METHOD("get_signal_list"), &Object::_get_signal_list);
	movq	$_ZNK6Object16_get_signal_listEv, -1312(%rbp)	#, %sfp
	movq	$0, -1304(%rbp)	#, %sfp
	movq	-1312(%rbp), %rax	# %sfp, D.51930
	movq	-1304(%rbp), %rdx	# %sfp, D.51930
	movq	%rax, %rcx	# D.51930, tmp340
	movq	%rdx, %rbx	# D.51930,
	movq	%rdx, %rax	#, tmp343
	movq	%rcx, %rsi	# tmp342,
	movq	%rax, %rdx	# tmp343,
	movl	$.LC84, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_	#
# core/object.cpp:1739: 	ClassDB::bind_method(D_METHOD("get_signal_connection_list", "signal"), &Object::_get_signal_connection_list);
	movq	$_ZNK6Object27_get_signal_connection_listERK6String, -1296(%rbp)	#, %sfp
	movq	$0, -1288(%rbp)	#, %sfp
	movq	-1296(%rbp), %rax	# %sfp, D.51931
	movq	-1288(%rbp), %rdx	# %sfp, D.51931
	movq	%rax, %rcx	# D.51931, tmp344
	movq	%rdx, %rbx	# D.51931,
	movq	%rdx, %rax	#, tmp347
	movq	%rcx, %rsi	# tmp346,
	movq	%rax, %rdx	# tmp347,
	movl	$.LC85, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_	#
# core/object.cpp:1740: 	ClassDB::bind_method(D_METHOD("get_incoming_connections"), &Object::_get_incoming_connections);
	movq	$_ZNK6Object25_get_incoming_connectionsEv, -1280(%rbp)	#, %sfp
	movq	$0, -1272(%rbp)	#, %sfp
	movq	-1280(%rbp), %rax	# %sfp, D.51932
	movq	-1272(%rbp), %rdx	# %sfp, D.51932
	movq	%rax, %rcx	# D.51932, tmp348
	movq	%rdx, %rbx	# D.51932,
	movq	%rdx, %rax	#, tmp351
	movq	%rcx, %rsi	# tmp350,
	movq	%rax, %rdx	# tmp351,
	movl	$.LC86, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_	#
# core/object.cpp:1742: 	ClassDB::bind_method(D_METHOD("connect", "signal", "target", "method", "binds", "flags"), &Object::connect, DEFVAL(Array()), DEFVAL(0));
	leaq	-608(%rbp), %rax	#, tmp352
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp352,
	call	_ZN7VariantC1Ei	#
.LEHE595:
# core/object.cpp:1742: 	ClassDB::bind_method(D_METHOD("connect", "signal", "target", "method", "binds", "flags"), &Object::connect, DEFVAL(Array()), DEFVAL(0));
	leaq	-552(%rbp), %rax	#, tmp353
	movq	%rax, %rdi	# tmp353,
.LEHB596:
	call	_ZN5ArrayC1Ev	#
.LEHE596:
# core/object.cpp:1742: 	ClassDB::bind_method(D_METHOD("connect", "signal", "target", "method", "binds", "flags"), &Object::connect, DEFVAL(Array()), DEFVAL(0));
	leaq	-552(%rbp), %rdx	#, tmp354
	leaq	-576(%rbp), %rax	#, tmp355
	movq	%rdx, %rsi	# tmp354,
	movq	%rax, %rdi	# tmp355,
.LEHB597:
	call	_ZN7VariantC1ERK5Array	#
.LEHE597:
# core/object.cpp:1742: 	ClassDB::bind_method(D_METHOD("connect", "signal", "target", "method", "binds", "flags"), &Object::connect, DEFVAL(Array()), DEFVAL(0));
	movq	$_ZN6Object7connectERK10StringNamePS_S2_RK6VectorI7VariantEj, -1264(%rbp)	#, %sfp
	movq	$0, -1256(%rbp)	#, %sfp
	leaq	-608(%rbp), %r8	#, tmp356
	leaq	-576(%rbp), %rsi	#, tmp357
	movq	-1264(%rbp), %rax	# %sfp, D.51933
	movq	-1256(%rbp), %rdx	# %sfp, D.51933
	movq	%rax, %rcx	# D.51933, tmp358
	movq	%rdx, %rbx	# D.51933,
	movq	%rcx, %rdi	# tmp358, tmp360
	movq	%rdx, %rax	#, tmp361
	movq	%rsi, %rcx	# tmp357,
	movq	%rdi, %rsi	# tmp360,
	movq	%rax, %rdx	# tmp361,
	movl	$.LC56, %edi	#,
.LEHB598:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_	#
.LEHE598:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-576(%rbp), %eax	# D.40868.type, _468
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _468
	je	.L2636	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-576(%rbp), %rax	#, tmp362
	movq	%rax, %rdi	# tmp362,
	call	_ZN7Variant5clearEv	#
.L2636:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1742: 	ClassDB::bind_method(D_METHOD("connect", "signal", "target", "method", "binds", "flags"), &Object::connect, DEFVAL(Array()), DEFVAL(0));
	leaq	-552(%rbp), %rax	#, tmp363
	movq	%rax, %rdi	# tmp363,
	call	_ZN5ArrayD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-608(%rbp), %eax	# D.40869.type, _467
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _467
	je	.L2637	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-608(%rbp), %rax	#, tmp364
	movq	%rax, %rdi	# tmp364,
	call	_ZN7Variant5clearEv	#
.L2637:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1743: 	ClassDB::bind_method(D_METHOD("disconnect", "signal", "target", "method"), &Object::disconnect);
	movq	$_ZN6Object10disconnectERK10StringNamePS_S2_, -1248(%rbp)	#, %sfp
	movq	$0, -1240(%rbp)	#, %sfp
	movq	-1248(%rbp), %rax	# %sfp, D.51934
	movq	-1240(%rbp), %rdx	# %sfp, D.51934
	movq	%rax, %rcx	# D.51934, tmp365
	movq	%rdx, %rbx	# D.51934,
	movq	%rdx, %rax	#, tmp368
	movq	%rcx, %rsi	# tmp367,
	movq	%rax, %rdx	# tmp368,
	movl	$.LC87, %edi	#,
.LEHB599:
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_	#
# core/object.cpp:1744: 	ClassDB::bind_method(D_METHOD("is_connected", "signal", "target", "method"), &Object::is_connected);
	movq	$_ZNK6Object12is_connectedERK10StringNamePS_S2_, -1232(%rbp)	#, %sfp
	movq	$0, -1224(%rbp)	#, %sfp
	movq	-1232(%rbp), %rax	# %sfp, D.51935
	movq	-1224(%rbp), %rdx	# %sfp, D.51935
	movq	%rax, %rcx	# D.51935, tmp369
	movq	%rdx, %rbx	# D.51935,
	movq	%rdx, %rax	#, tmp372
	movq	%rcx, %rsi	# tmp371,
	movq	%rax, %rdx	# tmp372,
	movl	$.LC58, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_	#
# core/object.cpp:1746: 	ClassDB::bind_method(D_METHOD("set_block_signals", "enable"), &Object::set_block_signals);
	movq	$_ZN6Object17set_block_signalsEb, -1216(%rbp)	#, %sfp
	movq	$0, -1208(%rbp)	#, %sfp
	movq	-1216(%rbp), %rax	# %sfp, D.51936
	movq	-1208(%rbp), %rdx	# %sfp, D.51936
	movq	%rax, %rcx	# D.51936, tmp373
	movq	%rdx, %rbx	# D.51936,
	movq	%rdx, %rax	#, tmp376
	movq	%rcx, %rsi	# tmp375,
	movq	%rax, %rdx	# tmp376,
	movl	$.LC88, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_	#
# core/object.cpp:1747: 	ClassDB::bind_method(D_METHOD("is_blocking_signals"), &Object::is_blocking_signals);
	movq	$_ZNK6Object19is_blocking_signalsEv, -1200(%rbp)	#, %sfp
	movq	$0, -1192(%rbp)	#, %sfp
	movq	-1200(%rbp), %rax	# %sfp, D.51937
	movq	-1192(%rbp), %rdx	# %sfp, D.51937
	movq	%rax, %rcx	# D.51937, tmp377
	movq	%rdx, %rbx	# D.51937,
	movq	%rdx, %rax	#, tmp380
	movq	%rcx, %rsi	# tmp379,
	movq	%rax, %rdx	# tmp380,
	movl	$.LC89, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_	#
# core/object.cpp:1748: 	ClassDB::bind_method(D_METHOD("property_list_changed_notify"), &Object::property_list_changed_notify);
	movq	$_ZN6Object28property_list_changed_notifyEv, -1184(%rbp)	#, %sfp
	movq	$0, -1176(%rbp)	#, %sfp
	movq	-1184(%rbp), %rax	# %sfp, D.51938
	movq	-1176(%rbp), %rdx	# %sfp, D.51938
	movq	%rax, %rcx	# D.51938, tmp381
	movq	%rdx, %rbx	# D.51938,
	movq	%rdx, %rax	#, tmp384
	movq	%rcx, %rsi	# tmp383,
	movq	%rax, %rdx	# tmp384,
	movl	$.LC90, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_	#
# core/object.cpp:1750: 	ClassDB::bind_method(D_METHOD("set_message_translation", "enable"), &Object::set_message_translation);
	movq	$_ZN6Object23set_message_translationEb, -1168(%rbp)	#, %sfp
	movq	$0, -1160(%rbp)	#, %sfp
	movq	-1168(%rbp), %rax	# %sfp, D.51939
	movq	-1160(%rbp), %rdx	# %sfp, D.51939
	movq	%rax, %rcx	# D.51939, tmp385
	movq	%rdx, %rbx	# D.51939,
	movq	%rdx, %rax	#, tmp388
	movq	%rcx, %rsi	# tmp387,
	movq	%rax, %rdx	# tmp388,
	movl	$.LC91, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_	#
# core/object.cpp:1751: 	ClassDB::bind_method(D_METHOD("can_translate_messages"), &Object::can_translate_messages);
	movq	$_ZNK6Object22can_translate_messagesEv, -1152(%rbp)	#, %sfp
	movq	$0, -1144(%rbp)	#, %sfp
	movq	-1152(%rbp), %rax	# %sfp, D.51940
	movq	-1144(%rbp), %rdx	# %sfp, D.51940
	movq	%rax, %rcx	# D.51940, tmp389
	movq	%rdx, %rbx	# D.51940,
	movq	%rdx, %rax	#, tmp392
	movq	%rcx, %rsi	# tmp391,
	movq	%rax, %rdx	# tmp392,
	movl	$.LC92, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_	#
# core/object.cpp:1752: 	ClassDB::bind_method(D_METHOD("tr", "message"), &Object::tr);
	movq	$_ZNK6Object2trERK10StringName, -1136(%rbp)	#, %sfp
	movq	$0, -1128(%rbp)	#, %sfp
	movq	-1136(%rbp), %rax	# %sfp, D.51941
	movq	-1128(%rbp), %rdx	# %sfp, D.51941
	movq	%rax, %rcx	# D.51941, tmp393
	movq	%rdx, %rbx	# D.51941,
	movq	%rdx, %rax	#, tmp396
	movq	%rcx, %rsi	# tmp395,
	movq	%rax, %rdx	# tmp396,
	movl	$.LC93, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_	#
# core/object.cpp:1754: 	ClassDB::bind_method(D_METHOD("is_queued_for_deletion"), &Object::is_queued_for_deletion);
	movq	$_ZNK6Object22is_queued_for_deletionEv, -1120(%rbp)	#, %sfp
	movq	$0, -1112(%rbp)	#, %sfp
	movq	-1120(%rbp), %rax	# %sfp, D.51942
	movq	-1112(%rbp), %rdx	# %sfp, D.51942
	movq	%rax, %rcx	# D.51942, tmp397
	movq	%rdx, %rbx	# D.51942,
	movq	%rdx, %rax	#, tmp400
	movq	%rcx, %rsi	# tmp399,
	movq	%rax, %rdx	# tmp400,
	movl	$.LC94, %edi	#,
	call	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_	#
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-448(%rbp), %rax	#, tmp401
	movl	$.LC95, %esi	#,
	movq	%rax, %rdi	# tmp401,
	call	_ZN6StringC1EPKc	#
.LEHE599:
	leaq	-448(%rbp), %rdx	#, tmp402
	leaq	-544(%rbp), %rax	#, tmp403
	movq	%rdx, %rsi	# tmp402,
	movq	%rax, %rdi	# tmp403,
.LEHB600:
	call	_ZN10MethodInfoC1ERK6String	#
.LEHE600:
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-440(%rbp), %rax	#, tmp404
	movl	$.LC0, %esi	#,
	movq	%rax, %rdi	# tmp404,
.LEHB601:
	call	_ZN10StringNameC1EPKc	#
.LEHE601:
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-544(%rbp), %rcx	#, tmp405
	leaq	-440(%rbp), %rax	#, tmp406
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp405,
	movq	%rax, %rdi	# tmp406,
.LEHB602:
	call	_ZN7ClassDB18add_virtual_methodERK10StringNameRK10MethodInfob	#
.LEHE602:
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-440(%rbp), %rax	#, tmp407
	movq	%rax, %rdi	# tmp407,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-544(%rbp), %rax	#, tmp408
	movq	%rax, %rdi	# tmp408,
	call	_ZN10MethodInfoD1Ev	#
	leaq	-448(%rbp), %rax	#, tmp409
	movq	%rax, %rdi	# tmp409,
	call	_ZN6StringD1Ev	#
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-336(%rbp), %rax	#, tmp410
	movl	$.LC96, %esi	#,
	movq	%rax, %rdi	# tmp410,
.LEHB603:
	call	_ZN6StringC1EPKc	#
.LEHE603:
	leaq	-336(%rbp), %rdx	#, tmp411
	leaq	-432(%rbp), %rax	#, tmp412
	movq	%rdx, %rsi	# tmp411,
	movq	%rax, %rdi	# tmp412,
.LEHB604:
	call	_ZN10MethodInfoC1ERK6String	#
.LEHE604:
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-320(%rbp), %rax	#, tmp413
	movq	%rax, %rdi	# tmp413,
.LEHB605:
	call	_ZN6Object16get_class_staticEv	#
.LEHE605:
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-320(%rbp), %rdx	#, tmp414
	leaq	-328(%rbp), %rax	#, tmp415
	movq	%rdx, %rsi	# tmp414,
	movq	%rax, %rdi	# tmp415,
.LEHB606:
	call	_ZN10StringNameC1ERK6String	#
.LEHE606:
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-432(%rbp), %rdx	#, tmp416
	leaq	-328(%rbp), %rax	#, tmp417
	movq	%rdx, %rsi	# tmp416,
	movq	%rax, %rdi	# tmp417,
.LEHB607:
	call	_ZN7ClassDB10add_signalE10StringNameRK10MethodInfo	#
.LEHE607:
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-328(%rbp), %rax	#, tmp418
	movq	%rax, %rdi	# tmp418,
	call	_ZN10StringNameD1Ev	#
	leaq	-320(%rbp), %rax	#, tmp419
	movq	%rax, %rdi	# tmp419,
	call	_ZN6StringD1Ev	#
	leaq	-432(%rbp), %rax	#, tmp420
	movq	%rax, %rdi	# tmp420,
	call	_ZN10MethodInfoD1Ev	#
	leaq	-336(%rbp), %rax	#, tmp421
	movq	%rax, %rdi	# tmp421,
	call	_ZN6StringD1Ev	#
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-312(%rbp), %rax	#, tmp422
	movl	$.LC97, %esi	#,
	movq	%rax, %rdi	# tmp422,
.LEHB608:
	call	_ZN10StringNameC1EPKc	#
.LEHE608:
	leaq	-304(%rbp), %rax	#, tmp423
	movq	%rax, %rdi	# tmp423,
.LEHB609:
	call	_ZN10StringNameC1Ev	#
.LEHE609:
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-288(%rbp), %rax	#, tmp424
	movq	%rax, %rdi	# tmp424,
.LEHB610:
	call	_ZN6Object16get_class_staticEv	#
.LEHE610:
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-288(%rbp), %rdx	#, tmp425
	leaq	-296(%rbp), %rax	#, tmp426
	movq	%rdx, %rsi	# tmp425,
	movq	%rax, %rdi	# tmp426,
.LEHB611:
	call	_ZN10StringNameC1ERK6String	#
.LEHE611:
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-312(%rbp), %rdx	#, tmp427
	leaq	-304(%rbp), %rsi	#, tmp428
	leaq	-296(%rbp), %rax	#, tmp429
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp429,
.LEHB612:
	call	_ZN7ClassDB21bind_integer_constantERK10StringNameS2_S2_i	#
.LEHE612:
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-296(%rbp), %rax	#, tmp430
	movq	%rax, %rdi	# tmp430,
	call	_ZN10StringNameD1Ev	#
	leaq	-288(%rbp), %rax	#, tmp431
	movq	%rax, %rdi	# tmp431,
	call	_ZN6StringD1Ev	#
	leaq	-304(%rbp), %rax	#, tmp432
	movq	%rax, %rdi	# tmp432,
	call	_ZN10StringNameD1Ev	#
	leaq	-312(%rbp), %rax	#, tmp433
	movq	%rax, %rdi	# tmp433,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-280(%rbp), %rax	#, tmp434
	movl	$.LC98, %esi	#,
	movq	%rax, %rdi	# tmp434,
.LEHB613:
	call	_ZN10StringNameC1EPKc	#
.LEHE613:
	leaq	-272(%rbp), %rax	#, tmp435
	movq	%rax, %rdi	# tmp435,
.LEHB614:
	call	_ZN10StringNameC1Ev	#
.LEHE614:
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-256(%rbp), %rax	#, tmp436
	movq	%rax, %rdi	# tmp436,
.LEHB615:
	call	_ZN6Object16get_class_staticEv	#
.LEHE615:
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-256(%rbp), %rdx	#, tmp437
	leaq	-264(%rbp), %rax	#, tmp438
	movq	%rdx, %rsi	# tmp437,
	movq	%rax, %rdi	# tmp438,
.LEHB616:
	call	_ZN10StringNameC1ERK6String	#
.LEHE616:
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-280(%rbp), %rdx	#, tmp439
	leaq	-272(%rbp), %rsi	#, tmp440
	leaq	-264(%rbp), %rax	#, tmp441
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp441,
.LEHB617:
	call	_ZN7ClassDB21bind_integer_constantERK10StringNameS2_S2_i	#
.LEHE617:
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-264(%rbp), %rax	#, tmp442
	movq	%rax, %rdi	# tmp442,
	call	_ZN10StringNameD1Ev	#
	leaq	-256(%rbp), %rax	#, tmp443
	movq	%rax, %rdi	# tmp443,
	call	_ZN6StringD1Ev	#
	leaq	-272(%rbp), %rax	#, tmp444
	movq	%rax, %rdi	# tmp444,
	call	_ZN10StringNameD1Ev	#
	leaq	-280(%rbp), %rax	#, tmp445
	movq	%rax, %rdi	# tmp445,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-248(%rbp), %rax	#, tmp446
	movl	$.LC99, %esi	#,
	movq	%rax, %rdi	# tmp446,
.LEHB618:
	call	_ZN10StringNameC1EPKc	#
.LEHE618:
	leaq	-240(%rbp), %rax	#, tmp447
	movq	%rax, %rdi	# tmp447,
.LEHB619:
	call	_ZN10StringNameC1Ev	#
.LEHE619:
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-224(%rbp), %rax	#, tmp448
	movq	%rax, %rdi	# tmp448,
.LEHB620:
	call	_ZN6Object16get_class_staticEv	#
.LEHE620:
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-224(%rbp), %rdx	#, tmp449
	leaq	-232(%rbp), %rax	#, tmp450
	movq	%rdx, %rsi	# tmp449,
	movq	%rax, %rdi	# tmp450,
.LEHB621:
	call	_ZN10StringNameC1ERK6String	#
.LEHE621:
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-248(%rbp), %rdx	#, tmp451
	leaq	-240(%rbp), %rsi	#, tmp452
	leaq	-232(%rbp), %rax	#, tmp453
	movl	$1, %ecx	#,
	movq	%rax, %rdi	# tmp453,
.LEHB622:
	call	_ZN7ClassDB21bind_integer_constantERK10StringNameS2_S2_i	#
.LEHE622:
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-232(%rbp), %rax	#, tmp454
	movq	%rax, %rdi	# tmp454,
	call	_ZN10StringNameD1Ev	#
	leaq	-224(%rbp), %rax	#, tmp455
	movq	%rax, %rdi	# tmp455,
	call	_ZN6StringD1Ev	#
	leaq	-240(%rbp), %rax	#, tmp456
	movq	%rax, %rdi	# tmp456,
	call	_ZN10StringNameD1Ev	#
	leaq	-248(%rbp), %rax	#, tmp457
	movq	%rax, %rdi	# tmp457,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-216(%rbp), %rax	#, tmp458
	movl	$.LC100, %esi	#,
	movq	%rax, %rdi	# tmp458,
.LEHB623:
	call	_ZN10StringNameC1EPKc	#
.LEHE623:
	leaq	-208(%rbp), %rax	#, tmp459
	movq	%rax, %rdi	# tmp459,
.LEHB624:
	call	_ZN10StringNameC1Ev	#
.LEHE624:
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-192(%rbp), %rax	#, tmp460
	movq	%rax, %rdi	# tmp460,
.LEHB625:
	call	_ZN6Object16get_class_staticEv	#
.LEHE625:
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-192(%rbp), %rdx	#, tmp461
	leaq	-200(%rbp), %rax	#, tmp462
	movq	%rdx, %rsi	# tmp461,
	movq	%rax, %rdi	# tmp462,
.LEHB626:
	call	_ZN10StringNameC1ERK6String	#
.LEHE626:
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-216(%rbp), %rdx	#, tmp463
	leaq	-208(%rbp), %rsi	#, tmp464
	leaq	-200(%rbp), %rax	#, tmp465
	movl	$2, %ecx	#,
	movq	%rax, %rdi	# tmp465,
.LEHB627:
	call	_ZN7ClassDB21bind_integer_constantERK10StringNameS2_S2_i	#
.LEHE627:
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-200(%rbp), %rax	#, tmp466
	movq	%rax, %rdi	# tmp466,
	call	_ZN10StringNameD1Ev	#
	leaq	-192(%rbp), %rax	#, tmp467
	movq	%rax, %rdi	# tmp467,
	call	_ZN6StringD1Ev	#
	leaq	-208(%rbp), %rax	#, tmp468
	movq	%rax, %rdi	# tmp468,
	call	_ZN10StringNameD1Ev	#
	leaq	-216(%rbp), %rax	#, tmp469
	movq	%rax, %rdi	# tmp469,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-184(%rbp), %rax	#, tmp470
	movl	$.LC101, %esi	#,
	movq	%rax, %rdi	# tmp470,
.LEHB628:
	call	_ZN10StringNameC1EPKc	#
.LEHE628:
	leaq	-176(%rbp), %rax	#, tmp471
	movq	%rax, %rdi	# tmp471,
.LEHB629:
	call	_ZN10StringNameC1Ev	#
.LEHE629:
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-160(%rbp), %rax	#, tmp472
	movq	%rax, %rdi	# tmp472,
.LEHB630:
	call	_ZN6Object16get_class_staticEv	#
.LEHE630:
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-160(%rbp), %rdx	#, tmp473
	leaq	-168(%rbp), %rax	#, tmp474
	movq	%rdx, %rsi	# tmp473,
	movq	%rax, %rdi	# tmp474,
.LEHB631:
	call	_ZN10StringNameC1ERK6String	#
.LEHE631:
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-184(%rbp), %rdx	#, tmp475
	leaq	-176(%rbp), %rsi	#, tmp476
	leaq	-168(%rbp), %rax	#, tmp477
	movl	$4, %ecx	#,
	movq	%rax, %rdi	# tmp477,
.LEHB632:
	call	_ZN7ClassDB21bind_integer_constantERK10StringNameS2_S2_i	#
.LEHE632:
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-168(%rbp), %rax	#, tmp478
	movq	%rax, %rdi	# tmp478,
	call	_ZN10StringNameD1Ev	#
	leaq	-160(%rbp), %rax	#, tmp479
	movq	%rax, %rdi	# tmp479,
	call	_ZN6StringD1Ev	#
	leaq	-176(%rbp), %rax	#, tmp480
	movq	%rax, %rdi	# tmp480,
	call	_ZN10StringNameD1Ev	#
	leaq	-184(%rbp), %rax	#, tmp481
	movq	%rax, %rdi	# tmp481,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-152(%rbp), %rax	#, tmp482
	movl	$.LC102, %esi	#,
	movq	%rax, %rdi	# tmp482,
.LEHB633:
	call	_ZN10StringNameC1EPKc	#
.LEHE633:
	leaq	-144(%rbp), %rax	#, tmp483
	movq	%rax, %rdi	# tmp483,
.LEHB634:
	call	_ZN10StringNameC1Ev	#
.LEHE634:
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-128(%rbp), %rax	#, tmp484
	movq	%rax, %rdi	# tmp484,
.LEHB635:
	call	_ZN6Object16get_class_staticEv	#
.LEHE635:
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-128(%rbp), %rdx	#, tmp485
	leaq	-136(%rbp), %rax	#, tmp486
	movq	%rdx, %rsi	# tmp485,
	movq	%rax, %rdi	# tmp486,
.LEHB636:
	call	_ZN10StringNameC1ERK6String	#
.LEHE636:
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-152(%rbp), %rdx	#, tmp487
	leaq	-144(%rbp), %rsi	#, tmp488
	leaq	-136(%rbp), %rax	#, tmp489
	movl	$8, %ecx	#,
	movq	%rax, %rdi	# tmp489,
.LEHB637:
	call	_ZN7ClassDB21bind_integer_constantERK10StringNameS2_S2_i	#
.LEHE637:
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-136(%rbp), %rax	#, tmp490
	movq	%rax, %rdi	# tmp490,
	call	_ZN10StringNameD1Ev	#
	leaq	-128(%rbp), %rax	#, tmp491
	movq	%rax, %rdi	# tmp491,
	call	_ZN6StringD1Ev	#
	leaq	-144(%rbp), %rax	#, tmp492
	movq	%rax, %rdi	# tmp492,
	call	_ZN10StringNameD1Ev	#
	leaq	-152(%rbp), %rax	#, tmp493
	movq	%rax, %rdi	# tmp493,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1784: }
	jmp	.L2633	#
.L2567:
	movq	%rax, %rbx	#, tmp495
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-1008(%rbp), %eax	# D.40746.type, _469
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _469
	je	.L2638	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-1008(%rbp), %rax	#, tmp494
	movq	%rax, %rdi	# tmp494,
	call	_ZN7Variant5clearEv	#
.L2638:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp495, D.62022
	movq	%rax, %rdi	# D.62022,
.LEHB638:
	call	_Unwind_Resume	#
.LEHE638:
.L2569:
	movq	%rax, %rbx	#, tmp498
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-976(%rbp), %eax	# D.40797.type, _470
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _470
	je	.L2639	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-976(%rbp), %rax	#, tmp496
	movq	%rax, %rdi	# tmp496,
	call	_ZN7Variant5clearEv	#
.L2639:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2509	#
.L2568:
	movq	%rax, %rbx	#, tmp497
.L2509:
# core/object.cpp:1705: 	ClassDB::bind_method(D_METHOD("add_user_signal", "signal", "arguments"), &Object::_add_user_signal, DEFVAL(Array()));
	leaq	-952(%rbp), %rax	#, tmp501
	movq	%rax, %rdi	# tmp501,
	call	_ZN5ArrayD1Ev	#
	movq	%rbx, %rax	# tmp497, D.62023
	movq	%rax, %rdi	# D.62023,
.LEHB639:
	call	_Unwind_Resume	#
.LEHE639:
.L2574:
	movq	%rax, %rbx	#, tmp504
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-944(%rbp), %rax	#, tmp502
	movq	%rax, %rdi	# tmp502,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L2511	#
.L2573:
	movq	%rax, %rbx	#, tmp503
.L2511:
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-872(%rbp), %rax	#, tmp507
	movq	%rax, %rdi	# tmp507,
	call	_ZN6StringD1Ev	#
	jmp	.L2512	#
.L2572:
	movq	%rax, %rbx	#, tmp508
.L2512:
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-880(%rbp), %rax	#, tmp510
	movq	%rax, %rdi	# tmp510,
	call	_ZN6StringD1Ev	#
	jmp	.L2513	#
.L2571:
	movq	%rax, %rbx	#, tmp511
.L2513:
# core/object.cpp:1711: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "signal"));
	leaq	-888(%rbp), %rax	#, tmp513
	movq	%rax, %rdi	# tmp513,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2514	#
.L2576:
	movq	%rax, %rbx	#, tmp518
# core/object.cpp:1713: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "emit_signal", &Object::_emit_signal, mi);
	leaq	-840(%rbp), %rax	#, tmp516
	movq	%rax, %rdi	# tmp516,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2516	#
.L2575:
	movq	%rax, %rbx	#, tmp517
.L2516:
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-864(%rbp), %rax	#, tmp521
	addq	$8, %rax	#, _471
	movq	%rax, -104(%rbp)	# _471, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-104(%rbp), %rax	# this, tmp522
	movq	(%rax), %rdx	# this_472->_ptr, _473
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-104(%rbp), %rax	# this, tmp523
	movq	%rdx, %rsi	# _473,
	movq	%rax, %rdi	# tmp523,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
	jmp	.L2514	#
.L2570:
	movq	%rax, %rbx	#, tmp514
.L2514:
# core/object.cpp:1709: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp524
	movq	%rax, %rdi	# tmp524,
	call	_ZN10MethodInfoD1Ev	#
	movq	%rbx, %rax	# tmp514, D.62024
	movq	%rax, %rdi	# D.62024,
.LEHB640:
	call	_Unwind_Resume	#
.LEHE640:
.L2581:
	movq	%rax, %rbx	#, tmp527
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-832(%rbp), %rax	#, tmp525
	movq	%rax, %rdi	# tmp525,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L2518	#
.L2580:
	movq	%rax, %rbx	#, tmp526
.L2518:
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-760(%rbp), %rax	#, tmp530
	movq	%rax, %rdi	# tmp530,
	call	_ZN6StringD1Ev	#
	jmp	.L2519	#
.L2579:
	movq	%rax, %rbx	#, tmp531
.L2519:
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-768(%rbp), %rax	#, tmp533
	movq	%rax, %rdi	# tmp533,
	call	_ZN6StringD1Ev	#
	jmp	.L2520	#
.L2578:
	movq	%rax, %rbx	#, tmp534
.L2520:
# core/object.cpp:1719: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-776(%rbp), %rax	#, tmp536
	movq	%rax, %rdi	# tmp536,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2521	#
.L2583:
	movq	%rax, %rbx	#, tmp541
# core/object.cpp:1721: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call", &Object::_call_bind, mi);
	leaq	-728(%rbp), %rax	#, tmp539
	movq	%rax, %rdi	# tmp539,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2523	#
.L2582:
	movq	%rax, %rbx	#, tmp540
.L2523:
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-752(%rbp), %rax	#, tmp544
	addq	$8, %rax	#, _474
	movq	%rax, -112(%rbp)	# _474, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-112(%rbp), %rax	# this, tmp545
	movq	(%rax), %rdx	# this_475->_ptr, _476
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-112(%rbp), %rax	# this, tmp546
	movq	%rdx, %rsi	# _476,
	movq	%rax, %rdi	# tmp546,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
	jmp	.L2521	#
.L2577:
	movq	%rax, %rbx	#, tmp537
.L2521:
# core/object.cpp:1717: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp547
	movq	%rax, %rdi	# tmp547,
	call	_ZN10MethodInfoD1Ev	#
	movq	%rbx, %rax	# tmp537, D.62025
	movq	%rax, %rdi	# D.62025,
.LEHB641:
	call	_Unwind_Resume	#
.LEHE641:
.L2588:
	movq	%rax, %rbx	#, tmp550
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-720(%rbp), %rax	#, tmp548
	movq	%rax, %rdi	# tmp548,
	call	_ZN12PropertyInfoD1Ev	#
	jmp	.L2525	#
.L2587:
	movq	%rax, %rbx	#, tmp549
.L2525:
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-648(%rbp), %rax	#, tmp553
	movq	%rax, %rdi	# tmp553,
	call	_ZN6StringD1Ev	#
	jmp	.L2526	#
.L2586:
	movq	%rax, %rbx	#, tmp554
.L2526:
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-656(%rbp), %rax	#, tmp556
	movq	%rax, %rdi	# tmp556,
	call	_ZN6StringD1Ev	#
	jmp	.L2527	#
.L2585:
	movq	%rax, %rbx	#, tmp557
.L2527:
# core/object.cpp:1727: 		mi.arguments.push_back(PropertyInfo(Variant::STRING, "method"));
	leaq	-664(%rbp), %rax	#, tmp559
	movq	%rax, %rdi	# tmp559,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2528	#
.L2590:
	movq	%rax, %rbx	#, tmp564
# core/object.cpp:1729: 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call_deferred", &Object::_call_deferred_bind, mi);
	leaq	-616(%rbp), %rax	#, tmp562
	movq	%rax, %rdi	# tmp562,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2530	#
.L2589:
	movq	%rax, %rbx	#, tmp563
.L2530:
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-640(%rbp), %rax	#, tmp567
	addq	$8, %rax	#, _477
	movq	%rax, -120(%rbp)	# _477, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-120(%rbp), %rax	# this, tmp568
	movq	(%rax), %rdx	# this_478->_ptr, _479
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-120(%rbp), %rax	# this, tmp569
	movq	%rdx, %rsi	# _479,
	movq	%rax, %rdi	# tmp569,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
	jmp	.L2528	#
.L2584:
	movq	%rax, %rbx	#, tmp560
.L2528:
# core/object.cpp:1725: 		MethodInfo mi;
	leaq	-1104(%rbp), %rax	#, tmp570
	movq	%rax, %rdi	# tmp570,
	call	_ZN10MethodInfoD1Ev	#
	movq	%rbx, %rax	# tmp560, D.62026
	movq	%rax, %rdi	# D.62026,
.LEHB642:
	call	_Unwind_Resume	#
.LEHE642:
.L2593:
	movq	%rax, %rbx	#, tmp573
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-576(%rbp), %eax	# D.40868.type, _480
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _480
	je	.L2640	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-576(%rbp), %rax	#, tmp571
	movq	%rax, %rdi	# tmp571,
	call	_ZN7Variant5clearEv	#
.L2640:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2533	#
.L2592:
	movq	%rax, %rbx	#, tmp572
.L2533:
# core/object.cpp:1742: 	ClassDB::bind_method(D_METHOD("connect", "signal", "target", "method", "binds", "flags"), &Object::connect, DEFVAL(Array()), DEFVAL(0));
	leaq	-552(%rbp), %rax	#, tmp576
	movq	%rax, %rdi	# tmp576,
	call	_ZN5ArrayD1Ev	#
	jmp	.L2534	#
.L2591:
	movq	%rax, %rbx	#, tmp577
.L2534:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-608(%rbp), %eax	# D.40869.type, _481
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _481
	je	.L2641	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-608(%rbp), %rax	#, tmp579
	movq	%rax, %rdi	# tmp579,
	call	_ZN7Variant5clearEv	#
.L2641:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp577, D.62027
	movq	%rax, %rdi	# D.62027,
.LEHB643:
	call	_Unwind_Resume	#
.L2596:
	movq	%rax, %rbx	#, tmp582
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-440(%rbp), %rax	#, tmp580
	movq	%rax, %rdi	# tmp580,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2537	#
.L2595:
	movq	%rax, %rbx	#, tmp581
.L2537:
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-544(%rbp), %rax	#, tmp585
	movq	%rax, %rdi	# tmp585,
	call	_ZN10MethodInfoD1Ev	#
	jmp	.L2538	#
.L2594:
	movq	%rax, %rbx	#, tmp586
.L2538:
# core/object.cpp:1756: 	ClassDB::add_virtual_method("Object", MethodInfo("free"), false);
	leaq	-448(%rbp), %rax	#, tmp588
	movq	%rax, %rdi	# tmp588,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp586, D.62028
	movq	%rax, %rdi	# D.62028,
	call	_Unwind_Resume	#
.L2600:
	movq	%rax, %rbx	#, tmp591
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-328(%rbp), %rax	#, tmp589
	movq	%rax, %rdi	# tmp589,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2540	#
.L2599:
	movq	%rax, %rbx	#, tmp590
.L2540:
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-320(%rbp), %rax	#, tmp594
	movq	%rax, %rdi	# tmp594,
	call	_ZN6StringD1Ev	#
	jmp	.L2541	#
.L2598:
	movq	%rax, %rbx	#, tmp595
.L2541:
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-432(%rbp), %rax	#, tmp597
	movq	%rax, %rdi	# tmp597,
	call	_ZN10MethodInfoD1Ev	#
	jmp	.L2542	#
.L2597:
	movq	%rax, %rbx	#, tmp598
.L2542:
# core/object.cpp:1758: 	ADD_SIGNAL(MethodInfo("script_changed"));
	leaq	-336(%rbp), %rax	#, tmp600
	movq	%rax, %rdi	# tmp600,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp598, D.62029
	movq	%rax, %rdi	# D.62029,
	call	_Unwind_Resume	#
.L2604:
	movq	%rax, %rbx	#, tmp603
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-296(%rbp), %rax	#, tmp601
	movq	%rax, %rdi	# tmp601,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2544	#
.L2603:
	movq	%rax, %rbx	#, tmp602
.L2544:
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-288(%rbp), %rax	#, tmp606
	movq	%rax, %rdi	# tmp606,
	call	_ZN6StringD1Ev	#
	jmp	.L2545	#
.L2602:
	movq	%rax, %rbx	#, tmp607
.L2545:
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-304(%rbp), %rax	#, tmp609
	movq	%rax, %rdi	# tmp609,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2546	#
.L2601:
	movq	%rax, %rbx	#, tmp610
.L2546:
# core/object.cpp:1777: 	BIND_CONSTANT(NOTIFICATION_POSTINITIALIZE);
	leaq	-312(%rbp), %rax	#, tmp612
	movq	%rax, %rdi	# tmp612,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp610, D.62030
	movq	%rax, %rdi	# D.62030,
	call	_Unwind_Resume	#
.L2608:
	movq	%rax, %rbx	#, tmp615
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-264(%rbp), %rax	#, tmp613
	movq	%rax, %rdi	# tmp613,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2548	#
.L2607:
	movq	%rax, %rbx	#, tmp614
.L2548:
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-256(%rbp), %rax	#, tmp618
	movq	%rax, %rdi	# tmp618,
	call	_ZN6StringD1Ev	#
	jmp	.L2549	#
.L2606:
	movq	%rax, %rbx	#, tmp619
.L2549:
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-272(%rbp), %rax	#, tmp621
	movq	%rax, %rdi	# tmp621,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2550	#
.L2605:
	movq	%rax, %rbx	#, tmp622
.L2550:
# core/object.cpp:1778: 	BIND_CONSTANT(NOTIFICATION_PREDELETE);
	leaq	-280(%rbp), %rax	#, tmp624
	movq	%rax, %rdi	# tmp624,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp622, D.62031
	movq	%rax, %rdi	# D.62031,
	call	_Unwind_Resume	#
.L2612:
	movq	%rax, %rbx	#, tmp627
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-232(%rbp), %rax	#, tmp625
	movq	%rax, %rdi	# tmp625,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2552	#
.L2611:
	movq	%rax, %rbx	#, tmp626
.L2552:
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-224(%rbp), %rax	#, tmp630
	movq	%rax, %rdi	# tmp630,
	call	_ZN6StringD1Ev	#
	jmp	.L2553	#
.L2610:
	movq	%rax, %rbx	#, tmp631
.L2553:
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-240(%rbp), %rax	#, tmp633
	movq	%rax, %rdi	# tmp633,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2554	#
.L2609:
	movq	%rax, %rbx	#, tmp634
.L2554:
# core/object.cpp:1780: 	BIND_ENUM_CONSTANT(CONNECT_DEFERRED);
	leaq	-248(%rbp), %rax	#, tmp636
	movq	%rax, %rdi	# tmp636,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp634, D.62032
	movq	%rax, %rdi	# D.62032,
	call	_Unwind_Resume	#
.L2616:
	movq	%rax, %rbx	#, tmp639
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-200(%rbp), %rax	#, tmp637
	movq	%rax, %rdi	# tmp637,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2556	#
.L2615:
	movq	%rax, %rbx	#, tmp638
.L2556:
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-192(%rbp), %rax	#, tmp642
	movq	%rax, %rdi	# tmp642,
	call	_ZN6StringD1Ev	#
	jmp	.L2557	#
.L2614:
	movq	%rax, %rbx	#, tmp643
.L2557:
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-208(%rbp), %rax	#, tmp645
	movq	%rax, %rdi	# tmp645,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2558	#
.L2613:
	movq	%rax, %rbx	#, tmp646
.L2558:
# core/object.cpp:1781: 	BIND_ENUM_CONSTANT(CONNECT_PERSIST);
	leaq	-216(%rbp), %rax	#, tmp648
	movq	%rax, %rdi	# tmp648,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp646, D.62033
	movq	%rax, %rdi	# D.62033,
	call	_Unwind_Resume	#
.L2620:
	movq	%rax, %rbx	#, tmp651
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-168(%rbp), %rax	#, tmp649
	movq	%rax, %rdi	# tmp649,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2560	#
.L2619:
	movq	%rax, %rbx	#, tmp650
.L2560:
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-160(%rbp), %rax	#, tmp654
	movq	%rax, %rdi	# tmp654,
	call	_ZN6StringD1Ev	#
	jmp	.L2561	#
.L2618:
	movq	%rax, %rbx	#, tmp655
.L2561:
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-176(%rbp), %rax	#, tmp657
	movq	%rax, %rdi	# tmp657,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2562	#
.L2617:
	movq	%rax, %rbx	#, tmp658
.L2562:
# core/object.cpp:1782: 	BIND_ENUM_CONSTANT(CONNECT_ONESHOT);
	leaq	-184(%rbp), %rax	#, tmp660
	movq	%rax, %rdi	# tmp660,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp658, D.62034
	movq	%rax, %rdi	# D.62034,
	call	_Unwind_Resume	#
.L2624:
	movq	%rax, %rbx	#, tmp663
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-136(%rbp), %rax	#, tmp661
	movq	%rax, %rdi	# tmp661,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2564	#
.L2623:
	movq	%rax, %rbx	#, tmp662
.L2564:
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-128(%rbp), %rax	#, tmp666
	movq	%rax, %rdi	# tmp666,
	call	_ZN6StringD1Ev	#
	jmp	.L2565	#
.L2622:
	movq	%rax, %rbx	#, tmp667
.L2565:
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-144(%rbp), %rax	#, tmp669
	movq	%rax, %rdi	# tmp669,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2566	#
.L2621:
	movq	%rax, %rbx	#, tmp670
.L2566:
# core/object.cpp:1783: 	BIND_ENUM_CONSTANT(CONNECT_REFERENCE_COUNTED);
	leaq	-152(%rbp), %rax	#, tmp672
	movq	%rax, %rdi	# tmp672,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp670, D.62035
	movq	%rax, %rdi	# D.62035,
	call	_Unwind_Resume	#
.LEHE643:
.L2633:
# core/object.cpp:1784: }
	leaq	-40(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2587:
	.section	.gcc_except_table
.LLSDA2587:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2587-.LLSDACSB2587
.LLSDACSB2587:
	.uleb128 .LEHB566-.LFB2587
	.uleb128 .LEHE566-.LEHB566
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB567-.LFB2587
	.uleb128 .LEHE567-.LEHB567
	.uleb128 .L2567-.LFB2587
	.uleb128 0
	.uleb128 .LEHB568-.LFB2587
	.uleb128 .LEHE568-.LEHB568
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB569-.LFB2587
	.uleb128 .LEHE569-.LEHB569
	.uleb128 .L2568-.LFB2587
	.uleb128 0
	.uleb128 .LEHB570-.LFB2587
	.uleb128 .LEHE570-.LEHB570
	.uleb128 .L2569-.LFB2587
	.uleb128 0
	.uleb128 .LEHB571-.LFB2587
	.uleb128 .LEHE571-.LEHB571
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB572-.LFB2587
	.uleb128 .LEHE572-.LEHB572
	.uleb128 .L2570-.LFB2587
	.uleb128 0
	.uleb128 .LEHB573-.LFB2587
	.uleb128 .LEHE573-.LEHB573
	.uleb128 .L2571-.LFB2587
	.uleb128 0
	.uleb128 .LEHB574-.LFB2587
	.uleb128 .LEHE574-.LEHB574
	.uleb128 .L2572-.LFB2587
	.uleb128 0
	.uleb128 .LEHB575-.LFB2587
	.uleb128 .LEHE575-.LEHB575
	.uleb128 .L2573-.LFB2587
	.uleb128 0
	.uleb128 .LEHB576-.LFB2587
	.uleb128 .LEHE576-.LEHB576
	.uleb128 .L2574-.LFB2587
	.uleb128 0
	.uleb128 .LEHB577-.LFB2587
	.uleb128 .LEHE577-.LEHB577
	.uleb128 .L2575-.LFB2587
	.uleb128 0
	.uleb128 .LEHB578-.LFB2587
	.uleb128 .LEHE578-.LEHB578
	.uleb128 .L2576-.LFB2587
	.uleb128 0
	.uleb128 .LEHB579-.LFB2587
	.uleb128 .LEHE579-.LEHB579
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB580-.LFB2587
	.uleb128 .LEHE580-.LEHB580
	.uleb128 .L2577-.LFB2587
	.uleb128 0
	.uleb128 .LEHB581-.LFB2587
	.uleb128 .LEHE581-.LEHB581
	.uleb128 .L2578-.LFB2587
	.uleb128 0
	.uleb128 .LEHB582-.LFB2587
	.uleb128 .LEHE582-.LEHB582
	.uleb128 .L2579-.LFB2587
	.uleb128 0
	.uleb128 .LEHB583-.LFB2587
	.uleb128 .LEHE583-.LEHB583
	.uleb128 .L2580-.LFB2587
	.uleb128 0
	.uleb128 .LEHB584-.LFB2587
	.uleb128 .LEHE584-.LEHB584
	.uleb128 .L2581-.LFB2587
	.uleb128 0
	.uleb128 .LEHB585-.LFB2587
	.uleb128 .LEHE585-.LEHB585
	.uleb128 .L2582-.LFB2587
	.uleb128 0
	.uleb128 .LEHB586-.LFB2587
	.uleb128 .LEHE586-.LEHB586
	.uleb128 .L2583-.LFB2587
	.uleb128 0
	.uleb128 .LEHB587-.LFB2587
	.uleb128 .LEHE587-.LEHB587
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB588-.LFB2587
	.uleb128 .LEHE588-.LEHB588
	.uleb128 .L2584-.LFB2587
	.uleb128 0
	.uleb128 .LEHB589-.LFB2587
	.uleb128 .LEHE589-.LEHB589
	.uleb128 .L2585-.LFB2587
	.uleb128 0
	.uleb128 .LEHB590-.LFB2587
	.uleb128 .LEHE590-.LEHB590
	.uleb128 .L2586-.LFB2587
	.uleb128 0
	.uleb128 .LEHB591-.LFB2587
	.uleb128 .LEHE591-.LEHB591
	.uleb128 .L2587-.LFB2587
	.uleb128 0
	.uleb128 .LEHB592-.LFB2587
	.uleb128 .LEHE592-.LEHB592
	.uleb128 .L2588-.LFB2587
	.uleb128 0
	.uleb128 .LEHB593-.LFB2587
	.uleb128 .LEHE593-.LEHB593
	.uleb128 .L2589-.LFB2587
	.uleb128 0
	.uleb128 .LEHB594-.LFB2587
	.uleb128 .LEHE594-.LEHB594
	.uleb128 .L2590-.LFB2587
	.uleb128 0
	.uleb128 .LEHB595-.LFB2587
	.uleb128 .LEHE595-.LEHB595
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB596-.LFB2587
	.uleb128 .LEHE596-.LEHB596
	.uleb128 .L2591-.LFB2587
	.uleb128 0
	.uleb128 .LEHB597-.LFB2587
	.uleb128 .LEHE597-.LEHB597
	.uleb128 .L2592-.LFB2587
	.uleb128 0
	.uleb128 .LEHB598-.LFB2587
	.uleb128 .LEHE598-.LEHB598
	.uleb128 .L2593-.LFB2587
	.uleb128 0
	.uleb128 .LEHB599-.LFB2587
	.uleb128 .LEHE599-.LEHB599
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB600-.LFB2587
	.uleb128 .LEHE600-.LEHB600
	.uleb128 .L2594-.LFB2587
	.uleb128 0
	.uleb128 .LEHB601-.LFB2587
	.uleb128 .LEHE601-.LEHB601
	.uleb128 .L2595-.LFB2587
	.uleb128 0
	.uleb128 .LEHB602-.LFB2587
	.uleb128 .LEHE602-.LEHB602
	.uleb128 .L2596-.LFB2587
	.uleb128 0
	.uleb128 .LEHB603-.LFB2587
	.uleb128 .LEHE603-.LEHB603
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB604-.LFB2587
	.uleb128 .LEHE604-.LEHB604
	.uleb128 .L2597-.LFB2587
	.uleb128 0
	.uleb128 .LEHB605-.LFB2587
	.uleb128 .LEHE605-.LEHB605
	.uleb128 .L2598-.LFB2587
	.uleb128 0
	.uleb128 .LEHB606-.LFB2587
	.uleb128 .LEHE606-.LEHB606
	.uleb128 .L2599-.LFB2587
	.uleb128 0
	.uleb128 .LEHB607-.LFB2587
	.uleb128 .LEHE607-.LEHB607
	.uleb128 .L2600-.LFB2587
	.uleb128 0
	.uleb128 .LEHB608-.LFB2587
	.uleb128 .LEHE608-.LEHB608
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB609-.LFB2587
	.uleb128 .LEHE609-.LEHB609
	.uleb128 .L2601-.LFB2587
	.uleb128 0
	.uleb128 .LEHB610-.LFB2587
	.uleb128 .LEHE610-.LEHB610
	.uleb128 .L2602-.LFB2587
	.uleb128 0
	.uleb128 .LEHB611-.LFB2587
	.uleb128 .LEHE611-.LEHB611
	.uleb128 .L2603-.LFB2587
	.uleb128 0
	.uleb128 .LEHB612-.LFB2587
	.uleb128 .LEHE612-.LEHB612
	.uleb128 .L2604-.LFB2587
	.uleb128 0
	.uleb128 .LEHB613-.LFB2587
	.uleb128 .LEHE613-.LEHB613
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB614-.LFB2587
	.uleb128 .LEHE614-.LEHB614
	.uleb128 .L2605-.LFB2587
	.uleb128 0
	.uleb128 .LEHB615-.LFB2587
	.uleb128 .LEHE615-.LEHB615
	.uleb128 .L2606-.LFB2587
	.uleb128 0
	.uleb128 .LEHB616-.LFB2587
	.uleb128 .LEHE616-.LEHB616
	.uleb128 .L2607-.LFB2587
	.uleb128 0
	.uleb128 .LEHB617-.LFB2587
	.uleb128 .LEHE617-.LEHB617
	.uleb128 .L2608-.LFB2587
	.uleb128 0
	.uleb128 .LEHB618-.LFB2587
	.uleb128 .LEHE618-.LEHB618
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB619-.LFB2587
	.uleb128 .LEHE619-.LEHB619
	.uleb128 .L2609-.LFB2587
	.uleb128 0
	.uleb128 .LEHB620-.LFB2587
	.uleb128 .LEHE620-.LEHB620
	.uleb128 .L2610-.LFB2587
	.uleb128 0
	.uleb128 .LEHB621-.LFB2587
	.uleb128 .LEHE621-.LEHB621
	.uleb128 .L2611-.LFB2587
	.uleb128 0
	.uleb128 .LEHB622-.LFB2587
	.uleb128 .LEHE622-.LEHB622
	.uleb128 .L2612-.LFB2587
	.uleb128 0
	.uleb128 .LEHB623-.LFB2587
	.uleb128 .LEHE623-.LEHB623
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB624-.LFB2587
	.uleb128 .LEHE624-.LEHB624
	.uleb128 .L2613-.LFB2587
	.uleb128 0
	.uleb128 .LEHB625-.LFB2587
	.uleb128 .LEHE625-.LEHB625
	.uleb128 .L2614-.LFB2587
	.uleb128 0
	.uleb128 .LEHB626-.LFB2587
	.uleb128 .LEHE626-.LEHB626
	.uleb128 .L2615-.LFB2587
	.uleb128 0
	.uleb128 .LEHB627-.LFB2587
	.uleb128 .LEHE627-.LEHB627
	.uleb128 .L2616-.LFB2587
	.uleb128 0
	.uleb128 .LEHB628-.LFB2587
	.uleb128 .LEHE628-.LEHB628
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB629-.LFB2587
	.uleb128 .LEHE629-.LEHB629
	.uleb128 .L2617-.LFB2587
	.uleb128 0
	.uleb128 .LEHB630-.LFB2587
	.uleb128 .LEHE630-.LEHB630
	.uleb128 .L2618-.LFB2587
	.uleb128 0
	.uleb128 .LEHB631-.LFB2587
	.uleb128 .LEHE631-.LEHB631
	.uleb128 .L2619-.LFB2587
	.uleb128 0
	.uleb128 .LEHB632-.LFB2587
	.uleb128 .LEHE632-.LEHB632
	.uleb128 .L2620-.LFB2587
	.uleb128 0
	.uleb128 .LEHB633-.LFB2587
	.uleb128 .LEHE633-.LEHB633
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB634-.LFB2587
	.uleb128 .LEHE634-.LEHB634
	.uleb128 .L2621-.LFB2587
	.uleb128 0
	.uleb128 .LEHB635-.LFB2587
	.uleb128 .LEHE635-.LEHB635
	.uleb128 .L2622-.LFB2587
	.uleb128 0
	.uleb128 .LEHB636-.LFB2587
	.uleb128 .LEHE636-.LEHB636
	.uleb128 .L2623-.LFB2587
	.uleb128 0
	.uleb128 .LEHB637-.LFB2587
	.uleb128 .LEHE637-.LEHB637
	.uleb128 .L2624-.LFB2587
	.uleb128 0
	.uleb128 .LEHB638-.LFB2587
	.uleb128 .LEHE638-.LEHB638
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB639-.LFB2587
	.uleb128 .LEHE639-.LEHB639
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB640-.LFB2587
	.uleb128 .LEHE640-.LEHB640
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB641-.LFB2587
	.uleb128 .LEHE641-.LEHB641
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB642-.LFB2587
	.uleb128 .LEHE642-.LEHB642
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB643-.LFB2587
	.uleb128 .LEHE643-.LEHB643
	.uleb128 0
	.uleb128 0
.LLSDACSE2587:
	.text
	.size	_ZN6Object13_bind_methodsEv, .-_ZN6Object13_bind_methodsEv
	.align 2
	.globl	_ZN6Object13call_deferredERK10StringNameRK7VariantS5_S5_S5_S5_
	.type	_ZN6Object13call_deferredERK10StringNameRK7VariantS5_S5_S5_S5_, @function
_ZN6Object13call_deferredERK10StringNameRK7VariantS5_S5_S5_S5_:
.LFB2588:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_method, p_method
	movq	%rdx, -24(%rbp)	# p_arg1, p_arg1
	movq	%rcx, -32(%rbp)	# p_arg2, p_arg2
	movq	%r8, -40(%rbp)	# p_arg3, p_arg3
	movq	%r9, -48(%rbp)	# p_arg4, p_arg4
# core/object.cpp:1788: 	MessageQueue::get_singleton()->push_call(this, p_method, VARIANT_ARG_PASS);
	call	_ZN12MessageQueue13get_singletonEv	#
	movq	%rax, %rdi	#, _1
	movq	-40(%rbp), %r8	# p_arg3, tmp83
	movq	-32(%rbp), %rsi	# p_arg2, tmp84
	movq	-24(%rbp), %rcx	# p_arg1, tmp85
	movq	-16(%rbp), %rdx	# p_method, tmp86
	movq	-8(%rbp), %rax	# this, tmp87
	pushq	16(%rbp)	# p_arg5
	pushq	-48(%rbp)	# p_arg4
	movq	%r8, %r9	# tmp83,
	movq	%rsi, %r8	# tmp84,
	movq	%rax, %rsi	# tmp87,
	call	_ZN12MessageQueue9push_callEP6ObjectRK10StringNameRK7VariantS7_S7_S7_S7_	#
	addq	$16, %rsp	#,
# core/object.cpp:1789: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2588:
	.size	_ZN6Object13call_deferredERK10StringNameRK7VariantS5_S5_S5_S5_, .-_ZN6Object13call_deferredERK10StringNameRK7VariantS5_S5_S5_S5_
	.align 2
	.globl	_ZN6Object12set_deferredERK10StringNameRK7Variant
	.type	_ZN6Object12set_deferredERK10StringNameRK7Variant, @function
_ZN6Object12set_deferredERK10StringNameRK7Variant:
.LFB2589:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_property, p_property
	movq	%rdx, -24(%rbp)	# p_value, p_value
# core/object.cpp:1792: 	MessageQueue::get_singleton()->push_set(this, p_property, p_value);
	call	_ZN12MessageQueue13get_singletonEv	#
	movq	%rax, %rdi	#, _1
	movq	-24(%rbp), %rcx	# p_value, tmp83
	movq	-16(%rbp), %rdx	# p_property, tmp84
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rax, %rsi	# tmp85,
	call	_ZN12MessageQueue8push_setEP6ObjectRK10StringNameRK7Variant	#
# core/object.cpp:1793: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2589:
	.size	_ZN6Object12set_deferredERK10StringNameRK7Variant, .-_ZN6Object12set_deferredERK10StringNameRK7Variant
	.align 2
	.globl	_ZN6Object17set_block_signalsEb
	.type	_ZN6Object17set_block_signalsEb, @function
_ZN6Object17set_block_signalsEb:
.LFB2590:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, %eax	# p_block, tmp82
	movb	%al, -12(%rbp)	# tmp83, p_block
# core/object.cpp:1797: 	_block_signals = p_block;
	movq	-8(%rbp), %rax	# this, tmp84
	movzbl	-12(%rbp), %edx	# p_block, tmp85
	movb	%dl, 32(%rax)	# tmp85, this_2(D)->_block_signals
# core/object.cpp:1798: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2590:
	.size	_ZN6Object17set_block_signalsEb, .-_ZN6Object17set_block_signalsEb
	.align 2
	.globl	_ZNK6Object19is_blocking_signalsEv
	.type	_ZNK6Object19is_blocking_signalsEv, @function
_ZNK6Object19is_blocking_signalsEv:
.LFB2591:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# core/object.cpp:1802: 	return _block_signals;
	movq	-8(%rbp), %rax	# this, tmp84
	movzbl	32(%rax), %eax	# this_2(D)->_block_signals, _3
# core/object.cpp:1803: }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2591:
	.size	_ZNK6Object19is_blocking_signalsEv, .-_ZNK6Object19is_blocking_signalsEv
	.align 2
	.globl	_ZNK6Object24get_translatable_stringsEP4ListI6String16DefaultAllocatorE
	.type	_ZNK6Object24get_translatable_stringsEP4ListI6String16DefaultAllocatorE, @function
_ZNK6Object24get_translatable_stringsEP4ListI6String16DefaultAllocatorE:
.LFB2592:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2592
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)	# this, this
	movq	%rsi, -112(%rbp)	# p_strings, p_strings
# core/object.cpp:1807: 	List<PropertyInfo> plist;
	leaq	-88(%rbp), %rax	#, tmp97
	movq	%rax, %rdi	# tmp97,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev	#
# core/object.cpp:1808: 	get_property_list(&plist);
	leaq	-88(%rbp), %rcx	#, tmp98
	movq	-104(%rbp), %rax	# this, tmp99
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp98,
	movq	%rax, %rdi	# tmp99,
.LEHB644:
	call	_ZNK6Object17get_property_listEP4ListI12PropertyInfo16DefaultAllocatorEb	#
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-88(%rbp), %rax	# plist._data, _48
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _48
	je	.L2648	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-88(%rbp), %rax	# plist._data, _49
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _49->first, D.59183
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L2671	#
.L2648:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59183
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L2671:
# core/object.cpp:1810: 	for (List<PropertyInfo>::Element *E = plist.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59183, E
.L2661:
# core/object.cpp:1810: 	for (List<PropertyInfo>::Element *E = plist.front(); E; E = E->next()) {
	cmpq	$0, -24(%rbp)	#, E
	je	.L2651	#,
	movq	-24(%rbp), %rax	# E, tmp100
	movq	%rax, -32(%rbp)	# tmp100, this
# ./core/list.h:121: 			return value;
	movq	-32(%rbp), %rax	# this, D.59188
# core/object.cpp:1812: 		if (!(E->get().usage & PROPERTY_USAGE_INTERNATIONALIZED))
	movl	40(%rax), %eax	# _1->usage, _2
# core/object.cpp:1812: 		if (!(E->get().usage & PROPERTY_USAGE_INTERNATIONALIZED))
	andl	$64, %eax	#, _3
# core/object.cpp:1812: 		if (!(E->get().usage & PROPERTY_USAGE_INTERNATIONALIZED))
	testl	%eax, %eax	# _3
	sete	%al	#, retval.360_21
# core/object.cpp:1812: 		if (!(E->get().usage & PROPERTY_USAGE_INTERNATIONALIZED))
	testb	%al, %al	# retval.360_21
	jne	.L2675	#,
	movq	-24(%rbp), %rax	# E, tmp101
	movq	%rax, -40(%rbp)	# tmp101, this
# ./core/list.h:121: 			return value;
	movq	-40(%rbp), %rax	# this, D.59192
# core/object.cpp:1815: 		String text = get(E->get().name);
	leaq	8(%rax), %rdx	#, _5
# core/object.cpp:1815: 		String text = get(E->get().name);
	leaq	-56(%rbp), %rax	#, tmp102
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp102,
	call	_ZN10StringNameC1ERK6String	#
.LEHE644:
# core/object.cpp:1815: 		String text = get(E->get().name);
	leaq	-80(%rbp), %rax	#, tmp103
	leaq	-56(%rbp), %rdx	#, tmp104
	movq	-104(%rbp), %rsi	# this, tmp105
	movl	$0, %ecx	#,
	movq	%rax, %rdi	# tmp103,
.LEHB645:
	call	_ZNK6Object3getERK10StringNamePb	#
.LEHE645:
# core/object.cpp:1815: 		String text = get(E->get().name);
	leaq	-96(%rbp), %rax	#, tmp106
	leaq	-80(%rbp), %rdx	#, tmp107
	movq	%rdx, %rsi	# tmp107,
	movq	%rax, %rdi	# tmp106,
.LEHB646:
	call	_ZNK7Variantcv6StringEv	#
.LEHE646:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40966.type, _58
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _58
	je	.L2676	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN7Variant5clearEv	#
.L2676:
# ./core/variant.h:423: 	}
	nop	
	leaq	-56(%rbp), %rax	#, tmp109
	movq	%rax, %rdi	# tmp109,
	call	_ZN10StringNameD1Ev	#
# core/object.cpp:1817: 		if (text == "")
	leaq	-96(%rbp), %rax	#, tmp110
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# tmp110,
.LEHB647:
	call	_ZNK6StringeqEPKc	#
# core/object.cpp:1817: 		if (text == "")
	testb	%al, %al	# _29
	je	.L2657	#,
	movl	$0, %ebx	#, finally_tmp.362_7
# core/object.cpp:1818: 			continue;
	jmp	.L2658	#
.L2657:
# core/object.cpp:1820: 		p_strings->push_back(text);
	leaq	-96(%rbp), %rdx	#, tmp111
	movq	-112(%rbp), %rax	# p_strings, tmp112
	movq	%rdx, %rsi	# tmp111,
	movq	%rax, %rdi	# tmp112,
	call	_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_	#
.LEHE647:
	movl	$1, %ebx	#, finally_tmp.362_7
.L2658:
	leaq	-96(%rbp), %rax	#, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN6StringD1Ev	#
	cmpl	$1, %ebx	#, finally_tmp.362_7
	jmp	.L2659	#
.L2675:
# core/object.cpp:1813: 			continue;
	nop	
.L2659:
	movq	-24(%rbp), %rax	# E, tmp114
	movq	%rax, -48(%rbp)	# tmp114, this
# ./core/list.h:73: 			return next_ptr;
	movq	-48(%rbp), %rax	# this, tmp115
	movq	48(%rax), %rax	# this_59->next_ptr, D.59197
# core/object.cpp:1810: 	for (List<PropertyInfo>::Element *E = plist.front(); E; E = E->next()) {
	movq	%rax, -24(%rbp)	# D.59197, E
# core/object.cpp:1810: 	for (List<PropertyInfo>::Element *E = plist.front(); E; E = E->next()) {
	jmp	.L2661	#
.L2651:
# core/object.cpp:1807: 	List<PropertyInfo> plist;
	leaq	-88(%rbp), %rax	#, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
# core/object.cpp:1822: }
	jmp	.L2674	#
.L2669:
	movq	%rax, %rbx	#, tmp119
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-80(%rbp), %eax	# D.40966.type, _61
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _61
	je	.L2677	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-80(%rbp), %rax	#, tmp117
	movq	%rax, %rdi	# tmp117,
	call	_ZN7Variant5clearEv	#
.L2677:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2664	#
.L2668:
	movq	%rax, %rbx	#, tmp118
.L2664:
	leaq	-56(%rbp), %rax	#, tmp122
	movq	%rax, %rdi	# tmp122,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2665	#
.L2670:
	movq	%rax, %rbx	#, tmp126
# core/object.cpp:1815: 		String text = get(E->get().name);
	leaq	-96(%rbp), %rax	#, tmp125
	movq	%rax, %rdi	# tmp125,
	call	_ZN6StringD1Ev	#
	jmp	.L2665	#
.L2667:
	movq	%rax, %rbx	#, tmp123
.L2665:
# core/object.cpp:1807: 	List<PropertyInfo> plist;
	leaq	-88(%rbp), %rax	#, tmp128
	movq	%rax, %rdi	# tmp128,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev	#
	movq	%rbx, %rax	# tmp123, D.62084
	movq	%rax, %rdi	# D.62084,
.LEHB648:
	call	_Unwind_Resume	#
.LEHE648:
.L2674:
# core/object.cpp:1822: }
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2592:
	.section	.gcc_except_table
.LLSDA2592:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2592-.LLSDACSB2592
.LLSDACSB2592:
	.uleb128 .LEHB644-.LFB2592
	.uleb128 .LEHE644-.LEHB644
	.uleb128 .L2667-.LFB2592
	.uleb128 0
	.uleb128 .LEHB645-.LFB2592
	.uleb128 .LEHE645-.LEHB645
	.uleb128 .L2668-.LFB2592
	.uleb128 0
	.uleb128 .LEHB646-.LFB2592
	.uleb128 .LEHE646-.LEHB646
	.uleb128 .L2669-.LFB2592
	.uleb128 0
	.uleb128 .LEHB647-.LFB2592
	.uleb128 .LEHE647-.LEHB647
	.uleb128 .L2670-.LFB2592
	.uleb128 0
	.uleb128 .LEHB648-.LFB2592
	.uleb128 .LEHE648-.LEHB648
	.uleb128 0
	.uleb128 0
.LLSDACSE2592:
	.text
	.size	_ZNK6Object24get_translatable_stringsEP4ListI6String16DefaultAllocatorE, .-_ZNK6Object24get_translatable_stringsEP4ListI6String16DefaultAllocatorE
	.align 2
	.globl	_ZNK6Object24get_static_property_typeERK10StringNamePb
	.type	_ZNK6Object24get_static_property_typeERK10StringNamePb, @function
_ZNK6Object24get_static_property_typeERK10StringNamePb:
.LFB2593:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_property, p_property
	movq	%rdx, -72(%rbp)	# r_valid, r_valid
	movq	-56(%rbp), %rax	# this, tmp97
	movq	%rax, -16(%rbp)	# tmp97, this
# core/object.h:646: 		if (!_class_ptr) {
	movq	-16(%rbp), %rax	# this, tmp98
	movq	112(%rax), %rax	# this_31->_class_ptr, _32
# core/object.h:646: 		if (!_class_ptr) {
	testq	%rax, %rax	# _32
	jne	.L2679	#,
# core/object.h:647: 			return *_get_class_namev();
	movq	-16(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_31->_vptr.Object, _33
	addq	$48, %rax	#, _34
	movq	(%rax), %rdx	# *_34, _35
# core/object.h:647: 			return *_get_class_namev();
	movq	-16(%rbp), %rax	# this, tmp100
	movq	%rax, %rdi	# tmp100,
	call	*%rdx	# _35
# core/object.h:647: 			return *_get_class_namev();
	jmp	.L2680	#
.L2679:
# core/object.h:649: 			return *_class_ptr;
	movq	-16(%rbp), %rax	# this, tmp101
	movq	112(%rax), %rax	# this_31->_class_ptr, D.54846
.L2680:
# core/object.cpp:1827: 	Variant::Type t = ClassDB::get_property_type(get_class_name(), p_property, &valid);
	leaq	-33(%rbp), %rdx	#, tmp102
	movq	-64(%rbp), %rcx	# p_property, tmp103
	movq	%rcx, %rsi	# tmp103,
	movq	%rax, %rdi	# D.54846,
	call	_ZN7ClassDB17get_property_typeERK10StringNameS2_Pb	#
	movl	%eax, -4(%rbp)	# _17, t
# core/object.cpp:1828: 	if (valid) {
	movzbl	-33(%rbp), %eax	# valid, valid.363_2
	testb	%al, %al	# valid.363_2
	je	.L2681	#,
# core/object.cpp:1829: 		if (r_valid)
	cmpq	$0, -72(%rbp)	#, r_valid
	je	.L2682	#,
# core/object.cpp:1830: 			*r_valid = true;
	movq	-72(%rbp), %rax	# r_valid, tmp104
	movb	$1, (%rax)	#, *r_valid_20(D)
.L2682:
# core/object.cpp:1831: 		return t;
	movl	-4(%rbp), %eax	# t, _7
	jmp	.L2688	#
.L2681:
	movq	-56(%rbp), %rax	# this, tmp105
	movq	%rax, -24(%rbp)	# tmp105, this
# core/object.h:700: 	_FORCE_INLINE_ ScriptInstance *get_script_instance() const { return script_instance; }
	movq	-24(%rbp), %rax	# this, tmp106
	movq	80(%rax), %rax	# this_40->script_instance, D.54851
# core/object.cpp:1834: 	if (get_script_instance()) {
	testq	%rax, %rax	# D.54851
	setne	%al	#, retval.364_19
# core/object.cpp:1834: 	if (get_script_instance()) {
	testb	%al, %al	# retval.364_19
	je	.L2685	#,
	movq	-56(%rbp), %rax	# this, tmp107
	movq	%rax, -32(%rbp)	# tmp107, this
# core/object.h:700: 	_FORCE_INLINE_ ScriptInstance *get_script_instance() const { return script_instance; }
	movq	-32(%rbp), %rax	# this, tmp108
	movq	80(%rax), %rax	# this_42->script_instance, D.54855
# core/object.cpp:1835: 		return get_script_instance()->get_property_type(p_property, r_valid);
	movq	(%rax), %rdx	# _23->_vptr.ScriptInstance, _4
	addq	$24, %rdx	#, _5
	movq	(%rdx), %r8	# *_5, _6
# core/object.cpp:1835: 		return get_script_instance()->get_property_type(p_property, r_valid);
	movq	-72(%rbp), %rdx	# r_valid, tmp109
	movq	-64(%rbp), %rcx	# p_property, tmp110
	movq	%rcx, %rsi	# tmp110,
	movq	%rax, %rdi	# D.54855,
	call	*%r8	# _6
# core/object.cpp:1835: 		return get_script_instance()->get_property_type(p_property, r_valid);
	jmp	.L2688	#
.L2685:
# core/object.cpp:1837: 	if (r_valid)
	cmpq	$0, -72(%rbp)	#, r_valid
	je	.L2687	#,
# core/object.cpp:1838: 		*r_valid = false;
	movq	-72(%rbp), %rax	# r_valid, tmp111
	movb	$0, (%rax)	#, *r_valid_20(D)
.L2687:
# core/object.cpp:1840: 	return Variant::NIL;
	movl	$0, %eax	#, _7
.L2688:
# core/object.cpp:1841: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2593:
	.size	_ZNK6Object24get_static_property_typeERK10StringNamePb, .-_ZNK6Object24get_static_property_typeERK10StringNamePb
	.align 2
	.globl	_ZNK6Object32get_static_property_type_indexedERK6VectorI10StringNameEPb
	.type	_ZNK6Object32get_static_property_type_indexedERK6VectorI10StringNameEPb, @function
_ZNK6Object32get_static_property_type_indexedERK6VectorI10StringNameEPb:
.LFB2594:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2594
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$360, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -344(%rbp)	# this, this
	movq	%rsi, -352(%rbp)	# p_path, p_path
	movq	%rdx, -360(%rbp)	# r_valid, r_valid
	movq	-352(%rbp), %rax	# p_path, tmp166
	movq	%rax, -32(%rbp)	# tmp166, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-32(%rbp), %rax	# this, tmp167
	addq	$8, %rax	#, _69
	movq	%rax, -40(%rbp)	# _69, this
	movq	-40(%rbp), %rax	# this, tmp168
	movq	%rax, -48(%rbp)	# tmp168, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_71->_ptr, _72
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _72
	jne	.L2690	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _73
	jmp	.L2691	#
.L2690:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-48(%rbp), %rax	# this, tmp170
	movq	(%rax), %rax	# this_71->_ptr, _74
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _73
.L2691:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -56(%rbp)	# _73, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -56(%rbp)	#, size
	je	.L2692	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-56(%rbp), %rax	# size, tmp171
	movl	(%rax), %eax	# *size_78, _79
	jmp	.L2693	#
.L2692:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.55886
.L2693:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1845: 	if (p_path.size() == 0) {
	testl	%eax, %eax	# D.55886
	sete	%al	#, retval.365_31
# core/object.cpp:1845: 	if (p_path.size() == 0) {
	testb	%al, %al	# retval.365_31
	je	.L2695	#,
# core/object.cpp:1846: 		if (r_valid)
	cmpq	$0, -360(%rbp)	#, r_valid
	je	.L2696	#,
# core/object.cpp:1847: 			*r_valid = false;
	movq	-360(%rbp), %rax	# r_valid, tmp172
	movb	$0, (%rax)	#, *r_valid_42(D)
.L2696:
# core/object.cpp:1849: 		return Variant::NIL;
	movl	$0, %ebx	#, D.55996
	jmp	.L2754	#
.L2695:
# core/object.cpp:1852: 	bool valid = false;
	movb	$0, -289(%rbp)	#, valid
	movq	-352(%rbp), %rax	# p_path, tmp173
	movq	%rax, -64(%rbp)	# tmp173, this
	movl	$0, -68(%rbp)	#, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-64(%rbp), %rax	# this, tmp174
	addq	$8, %rax	#, _88
	movq	%rax, -80(%rbp)	# _88, this
	movl	-68(%rbp), %eax	# p_index, tmp175
	movl	%eax, -84(%rbp)	# tmp175, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-84(%rbp), %eax	# p_index, tmp177
	shrl	$31, %eax	#, tmp176
	movzbl	%al, %eax	# _91, _92
	testq	%rax, %rax	# _93
	jne	.L2698	#,
	movq	-80(%rbp), %rax	# this, tmp178
	movq	%rax, -96(%rbp)	# tmp178, this
	movq	-96(%rbp), %rax	# this, tmp179
	movq	%rax, -104(%rbp)	# tmp179, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-104(%rbp), %rax	# this, tmp180
	movq	(%rax), %rax	# this_95->_ptr, _96
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _96
	jne	.L2699	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _97
	jmp	.L2700	#
.L2699:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-104(%rbp), %rax	# this, tmp181
	movq	(%rax), %rax	# this_95->_ptr, _98
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _97
.L2700:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -112(%rbp)	# _97, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -112(%rbp)	#, size
	je	.L2701	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-112(%rbp), %rax	# size, tmp182
	movl	(%rax), %eax	# *size_102, _103
	jmp	.L2702	#
.L2701:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _104
.L2702:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -84(%rbp)	# _104, p_index
	setge	%al	#, _110
	movzbl	%al, %eax	# _110, _111
	testq	%rax, %rax	# _112
	je	.L2703	#,
.L2698:
	movl	$1, %eax	#, iftmp.71_113
	jmp	.L2704	#
.L2703:
	movl	$0, %eax	#, iftmp.71_113
.L2704:
	movzbl	%al, %eax	# iftmp.71_113, _116
	testq	%rax, %rax	# _116
	setne	%al	#, retval.70_117
	testb	%al, %al	# retval.70_117
	je	.L2705	#,
	movq	-80(%rbp), %rax	# this, tmp183
	movq	%rax, -120(%rbp)	# tmp183, this
	movq	-120(%rbp), %rax	# this, tmp184
	movq	%rax, -128(%rbp)	# tmp184, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp185
	movq	(%rax), %rax	# this_119->_ptr, _120
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _120
	jne	.L2706	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _121
	jmp	.L2707	#
.L2706:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp186
	movq	(%rax), %rax	# this_119->_ptr, _122
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _121
.L2707:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _121, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L2708	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp187
	movl	(%rax), %eax	# *size_126, _127
	jmp	.L2709	#
.L2708:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _128
.L2709:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _128, _134
	movl	-84(%rbp), %eax	# p_index, tmp188
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _134,
	movq	%rax, %rcx	# _135,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB649:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L2705:
	movq	-80(%rbp), %rax	# this, tmp189
	movq	%rax, -144(%rbp)	# tmp189, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp190
	movq	(%rax), %rax	# this_136->_ptr, _137
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _137
	jne	.L2710	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _138
	jmp	.L2711	#
.L2710:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-144(%rbp), %rax	# this, tmp191
	movq	(%rax), %rax	# this_136->_ptr, _138
.L2711:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-84(%rbp), %edx	# p_index, tmp192
	movslq	%edx, %rdx	# tmp192, _143
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rdx	#, _144
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rdx), %rcx	#, D.55911
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:1853: 	Variant::Type t = get_static_property_type(p_path[0], &valid);
	leaq	-289(%rbp), %rdx	#, tmp193
	movq	-344(%rbp), %rax	# this, tmp194
	movq	%rcx, %rsi	# D.55911,
	movq	%rax, %rdi	# tmp194,
	call	_ZNK6Object24get_static_property_typeERK10StringNamePb	#
	movl	%eax, -24(%rbp)	# _36, t
# core/object.cpp:1854: 	if (!valid) {
	movzbl	-289(%rbp), %eax	# valid, valid.366_3
	xorl	$1, %eax	#, _4
# core/object.cpp:1854: 	if (!valid) {
	testb	%al, %al	# _4
	je	.L2714	#,
# core/object.cpp:1855: 		if (r_valid)
	cmpq	$0, -360(%rbp)	#, r_valid
	je	.L2715	#,
# core/object.cpp:1856: 			*r_valid = false;
	movq	-360(%rbp), %rax	# r_valid, tmp195
	movb	$0, (%rax)	#, *r_valid_42(D)
.L2715:
# core/object.cpp:1858: 		return Variant::NIL;
	movl	$0, %ebx	#, D.55996
	jmp	.L2754	#
.L2714:
# core/object.cpp:1862: 	Variant check = Variant::construct(t, NULL, 0, ce);
	leaq	-336(%rbp), %rax	#, tmp196
	leaq	-304(%rbp), %rdx	#, tmp197
	movl	-24(%rbp), %esi	# t, tmp198
	movl	$1, %r9d	#,
	movq	%rdx, %r8	# tmp197,
	movl	$0, %ecx	#,
	movl	$0, %edx	#,
	movq	%rax, %rdi	# tmp196,
	call	_ZN7Variant9constructENS_4TypeEPPKS_iRNS_9CallErrorEb	#
.LEHE649:
# core/object.cpp:1864: 	for (int i = 1; i < p_path.size(); i++) {
	movl	$1, -20(%rbp)	#, i
.L2750:
	movq	-352(%rbp), %rax	# p_path, tmp199
	movq	%rax, -152(%rbp)	# tmp199, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-152(%rbp), %rax	# this, tmp200
	addq	$8, %rax	#, _150
	movq	%rax, -160(%rbp)	# _150, this
	movq	-160(%rbp), %rax	# this, tmp201
	movq	%rax, -168(%rbp)	# tmp201, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp202
	movq	(%rax), %rax	# this_152->_ptr, _153
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _153
	jne	.L2716	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _154
	jmp	.L2717	#
.L2716:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp203
	movq	(%rax), %rax	# this_152->_ptr, _155
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _154
.L2717:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -176(%rbp)	# _154, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -176(%rbp)	#, size
	je	.L2718	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-176(%rbp), %rax	# size, tmp204
	movl	(%rax), %eax	# *size_159, _160
	jmp	.L2719	#
.L2718:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.55937
.L2719:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1864: 	for (int i = 1; i < p_path.size(); i++) {
	cmpl	%eax, -20(%rbp)	# D.55937, i
	setl	%al	#, retval.367_41
	testb	%al, %al	# retval.367_41
	je	.L2721	#,
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movl	-336(%rbp), %eax	# check.type, D.55946
# core/object.cpp:1865: 		if (check.get_type() == Variant::OBJECT || check.get_type() == Variant::DICTIONARY || check.get_type() == Variant::ARRAY) {
	cmpl	$17, %eax	#, D.55946
	je	.L2723	#,
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movl	-336(%rbp), %eax	# check.type, D.55950
# core/object.cpp:1865: 		if (check.get_type() == Variant::OBJECT || check.get_type() == Variant::DICTIONARY || check.get_type() == Variant::ARRAY) {
	cmpl	$18, %eax	#, D.55950
	je	.L2723	#,
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movl	-336(%rbp), %eax	# check.type, D.55954
# core/object.cpp:1865: 		if (check.get_type() == Variant::OBJECT || check.get_type() == Variant::DICTIONARY || check.get_type() == Variant::ARRAY) {
	cmpl	$19, %eax	#, D.55954
	jne	.L2726	#,
.L2723:
# core/object.cpp:1865: 		if (check.get_type() == Variant::OBJECT || check.get_type() == Variant::DICTIONARY || check.get_type() == Variant::ARRAY) {
	movl	$1, %eax	#, iftmp.369_15
	jmp	.L2727	#
.L2726:
# core/object.cpp:1865: 		if (check.get_type() == Variant::OBJECT || check.get_type() == Variant::DICTIONARY || check.get_type() == Variant::ARRAY) {
	movl	$0, %eax	#, iftmp.369_15
.L2727:
# core/object.cpp:1865: 		if (check.get_type() == Variant::OBJECT || check.get_type() == Variant::DICTIONARY || check.get_type() == Variant::ARRAY) {
	testb	%al, %al	# iftmp.369_15
	je	.L2728	#,
# core/object.cpp:1867: 			if (r_valid)
	cmpq	$0, -360(%rbp)	#, r_valid
	je	.L2729	#,
# core/object.cpp:1868: 				*r_valid = false;
	movq	-360(%rbp), %rax	# r_valid, tmp205
	movb	$0, (%rax)	#, *r_valid_42(D)
.L2729:
# core/object.cpp:1869: 			return Variant::NIL;
	movl	$0, %ebx	#, D.55996
	jmp	.L2730	#
.L2728:
	movq	-352(%rbp), %rax	# p_path, tmp206
	movq	%rax, -184(%rbp)	# tmp206, this
	movl	-20(%rbp), %eax	# i, tmp207
	movl	%eax, -188(%rbp)	# tmp207, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-184(%rbp), %rax	# this, tmp208
	addq	$8, %rax	#, _172
	movq	%rax, -200(%rbp)	# _172, this
	movl	-188(%rbp), %eax	# p_index, tmp209
	movl	%eax, -204(%rbp)	# tmp209, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-204(%rbp), %eax	# p_index, tmp211
	shrl	$31, %eax	#, tmp210
	movzbl	%al, %eax	# _175, _176
	testq	%rax, %rax	# _177
	jne	.L2731	#,
	movq	-200(%rbp), %rax	# this, tmp212
	movq	%rax, -216(%rbp)	# tmp212, this
	movq	-216(%rbp), %rax	# this, tmp213
	movq	%rax, -224(%rbp)	# tmp213, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-224(%rbp), %rax	# this, tmp214
	movq	(%rax), %rax	# this_179->_ptr, _180
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _180
	jne	.L2732	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _181
	jmp	.L2733	#
.L2732:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-224(%rbp), %rax	# this, tmp215
	movq	(%rax), %rax	# this_179->_ptr, _182
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _181
.L2733:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -232(%rbp)	# _181, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -232(%rbp)	#, size
	je	.L2734	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-232(%rbp), %rax	# size, tmp216
	movl	(%rax), %eax	# *size_186, _187
	jmp	.L2735	#
.L2734:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _188
.L2735:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -204(%rbp)	# _188, p_index
	setge	%al	#, _194
	movzbl	%al, %eax	# _194, _195
	testq	%rax, %rax	# _196
	je	.L2736	#,
.L2731:
	movl	$1, %eax	#, iftmp.71_197
	jmp	.L2737	#
.L2736:
	movl	$0, %eax	#, iftmp.71_197
.L2737:
	movzbl	%al, %eax	# iftmp.71_197, _200
	testq	%rax, %rax	# _200
	setne	%al	#, retval.70_201
	testb	%al, %al	# retval.70_201
	je	.L2738	#,
	movq	-200(%rbp), %rax	# this, tmp217
	movq	%rax, -240(%rbp)	# tmp217, this
	movq	-240(%rbp), %rax	# this, tmp218
	movq	%rax, -248(%rbp)	# tmp218, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-248(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_203->_ptr, _204
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _204
	jne	.L2739	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _205
	jmp	.L2740	#
.L2739:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-248(%rbp), %rax	# this, tmp220
	movq	(%rax), %rax	# this_203->_ptr, _206
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _205
.L2740:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -256(%rbp)	# _205, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -256(%rbp)	#, size
	je	.L2741	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-256(%rbp), %rax	# size, tmp221
	movl	(%rax), %eax	# *size_210, _211
	jmp	.L2742	#
.L2741:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _212
.L2742:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _212, _218
	movl	-204(%rbp), %eax	# p_index, tmp222
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _218,
	movq	%rax, %rcx	# _219,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB650:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L2738:
	movq	-200(%rbp), %rax	# this, tmp223
	movq	%rax, -264(%rbp)	# tmp223, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-264(%rbp), %rax	# this, tmp224
	movq	(%rax), %rax	# this_220->_ptr, _221
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _221
	jne	.L2743	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _222
	jmp	.L2744	#
.L2743:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-264(%rbp), %rax	# this, tmp225
	movq	(%rax), %rax	# this_220->_ptr, _222
.L2744:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-204(%rbp), %edx	# p_index, tmp226
	movslq	%edx, %rdx	# tmp226, _227
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	salq	$3, %rdx	#, _228
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rax,%rdx), %rdi	#, D.55974
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# core/object.cpp:1872: 		check = check.get_named(p_path[i], &valid);
	leaq	-288(%rbp), %rax	#, tmp227
	leaq	-289(%rbp), %rdx	#, tmp228
	leaq	-336(%rbp), %rsi	#, tmp229
	movq	%rdx, %rcx	# tmp228,
	movq	%rdi, %rdx	# D.55974,
	movq	%rax, %rdi	# tmp227,
	.cfi_escape 0x2e,0
	call	_ZNK7Variant9get_namedERK10StringNamePb	#
.LEHE650:
# core/object.cpp:1872: 		check = check.get_named(p_path[i], &valid);
	leaq	-288(%rbp), %rdx	#, tmp230
	leaq	-336(%rbp), %rax	#, tmp231
	movq	%rdx, %rsi	# tmp230,
	movq	%rax, %rdi	# tmp231,
.LEHB651:
	call	_ZN7VariantaSERKS_	#
.LEHE651:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.40988.type, _233
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _233
	je	.L2765	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp232
	movq	%rax, %rdi	# tmp232,
	call	_ZN7Variant5clearEv	#
.L2765:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:1874: 		if (!valid) {
	movzbl	-289(%rbp), %eax	# valid, valid.370_10
	xorl	$1, %eax	#, _11
# core/object.cpp:1874: 		if (!valid) {
	testb	%al, %al	# _11
	je	.L2748	#,
# core/object.cpp:1875: 			if (r_valid)
	cmpq	$0, -360(%rbp)	#, r_valid
	je	.L2749	#,
# core/object.cpp:1876: 				*r_valid = false;
	movq	-360(%rbp), %rax	# r_valid, tmp233
	movb	$0, (%rax)	#, *r_valid_42(D)
.L2749:
# core/object.cpp:1877: 			return Variant::NIL;
	movl	$0, %ebx	#, D.55996
	jmp	.L2730	#
.L2748:
# core/object.cpp:1864: 	for (int i = 1; i < p_path.size(); i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L2750	#
.L2721:
# core/object.cpp:1881: 	if (r_valid)
	cmpq	$0, -360(%rbp)	#, r_valid
	je	.L2751	#,
# core/object.cpp:1882: 		*r_valid = true;
	movq	-360(%rbp), %rax	# r_valid, tmp234
	movb	$1, (%rax)	#, *r_valid_42(D)
.L2751:
# ./core/variant.h:157: 	_FORCE_INLINE_ Type get_type() const { return type; }
	movl	-336(%rbp), %ebx	# check.type, D.55996
# core/object.cpp:1884: 	return check.get_type();
	nop	
.L2730:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# check.type, _235
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _235
	je	.L2766	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp235
	movq	%rax, %rdi	# tmp235,
	call	_ZN7Variant5clearEv	#
.L2766:
# ./core/variant.h:423: 	}
	nop	
.L2754:
	movl	%ebx, %eax	# D.55996, <retval>
	jmp	.L2764	#
.L2760:
	movq	%rax, %rbx	#, tmp239
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.40988.type, _236
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _236
	je	.L2767	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp237
	movq	%rax, %rdi	# tmp237,
	call	_ZN7Variant5clearEv	#
.L2767:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2757	#
.L2759:
	movq	%rax, %rbx	#, tmp238
.L2757:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# check.type, _237
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _237
	je	.L2768	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp242
	movq	%rax, %rdi	# tmp242,
	call	_ZN7Variant5clearEv	#
.L2768:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp238, D.62087
	movq	%rax, %rdi	# D.62087,
.LEHB652:
	call	_Unwind_Resume	#
.LEHE652:
.L2764:
# core/object.cpp:1885: }
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2594:
	.section	.gcc_except_table
.LLSDA2594:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2594-.LLSDACSB2594
.LLSDACSB2594:
	.uleb128 .LEHB649-.LFB2594
	.uleb128 .LEHE649-.LEHB649
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB650-.LFB2594
	.uleb128 .LEHE650-.LEHB650
	.uleb128 .L2759-.LFB2594
	.uleb128 0
	.uleb128 .LEHB651-.LFB2594
	.uleb128 .LEHE651-.LEHB651
	.uleb128 .L2760-.LFB2594
	.uleb128 0
	.uleb128 .LEHB652-.LFB2594
	.uleb128 .LEHE652-.LEHB652
	.uleb128 0
	.uleb128 0
.LLSDACSE2594:
	.text
	.size	_ZNK6Object32get_static_property_type_indexedERK6VectorI10StringNameEPb, .-_ZNK6Object32get_static_property_type_indexedERK6VectorI10StringNameEPb
	.align 2
	.globl	_ZNK6Object22is_queued_for_deletionEv
	.type	_ZNK6Object22is_queued_for_deletionEv, @function
_ZNK6Object22is_queued_for_deletionEv:
.LFB2595:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# core/object.cpp:1888: 	return _is_queued_for_deletion;
	movq	-8(%rbp), %rax	# this, tmp84
	movzbl	192(%rax), %eax	# this_2(D)->_is_queued_for_deletion, _3
# core/object.cpp:1889: }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2595:
	.size	_ZNK6Object22is_queued_for_deletionEv, .-_ZNK6Object22is_queued_for_deletionEv
	.align 2
	.globl	_ZN6Object27get_script_instance_bindingEi
	.type	_ZN6Object27get_script_instance_bindingEi, @function
_ZN6Object27get_script_instance_bindingEi:
.LFB2596:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movl	%esi, -28(%rbp)	# p_script_language_index, p_script_language_index
# core/object.cpp:1919: 	if (!_script_instance_bindings[p_script_language_index]) {
	movq	-24(%rbp), %rax	# this, tmp92
	movl	-28(%rbp), %edx	# p_script_language_index, tmp94
	movslq	%edx, %rdx	# tmp94, tmp93
	addq	$16, %rdx	#, tmp95
	movq	(%rax,%rdx,8), %rax	# this_8(D)->_script_instance_bindings, _1
# core/object.cpp:1919: 	if (!_script_instance_bindings[p_script_language_index]) {
	testq	%rax, %rax	# _1
	jne	.L2772	#,
# core/object.cpp:1920: 		void *script_data = ScriptServer::get_language(p_script_language_index)->alloc_instance_binding_data(this);
	movl	-28(%rbp), %eax	# p_script_language_index, tmp96
	movl	%eax, %edi	# tmp96,
	call	_ZN12ScriptServer12get_languageEi	#
# core/object.cpp:1920: 		void *script_data = ScriptServer::get_language(p_script_language_index)->alloc_instance_binding_data(this);
	movq	(%rax), %rdx	# _12->_vptr.ScriptLanguage, _2
	addq	$400, %rdx	#, _3
	movq	(%rdx), %rcx	# *_3, _4
# core/object.cpp:1920: 		void *script_data = ScriptServer::get_language(p_script_language_index)->alloc_instance_binding_data(this);
	movq	-24(%rbp), %rdx	# this, tmp97
	movq	%rdx, %rsi	# tmp97,
	movq	%rax, %rdi	# _11,
	call	*%rcx	# _4
	movq	%rax, -8(%rbp)	# _14, script_data
# core/object.cpp:1921: 		if (script_data) {
	cmpq	$0, -8(%rbp)	#, script_data
	je	.L2772	#,
# core/object.cpp:1922: 			atomic_increment(&instance_binding_count);
	movq	-24(%rbp), %rax	# this, tmp98
	addq	$120, %rax	#, _5
	movq	%rax, -16(%rbp)	# _5, pw
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	movq	-16(%rbp), %rax	# pw, tmp99
	movl	$1, %esi	#, D.54859
	lock xaddl	%esi, (%rax)	#, D.54859,
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	nop	
# core/object.cpp:1923: 			_script_instance_bindings[p_script_language_index] = script_data;
	movq	-24(%rbp), %rax	# this, tmp100
	movl	-28(%rbp), %edx	# p_script_language_index, tmp102
	movslq	%edx, %rdx	# tmp102, tmp101
	leaq	16(%rdx), %rcx	#, tmp103
	movq	-8(%rbp), %rdx	# script_data, tmp104
	movq	%rdx, (%rax,%rcx,8)	# tmp104, this_8(D)->_script_instance_bindings
.L2772:
# core/object.cpp:1927: 	return _script_instance_bindings[p_script_language_index];
	movq	-24(%rbp), %rax	# this, tmp105
	movl	-28(%rbp), %edx	# p_script_language_index, tmp107
	movslq	%edx, %rdx	# tmp107, tmp106
	addq	$16, %rdx	#, tmp108
	movq	(%rax,%rdx,8), %rax	# this_8(D)->_script_instance_bindings, _17
# core/object.cpp:1928: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2596:
	.size	_ZN6Object27get_script_instance_bindingEi, .-_ZN6Object27get_script_instance_bindingEi
	.align 2
	.globl	_ZN6Object27has_script_instance_bindingEi
	.type	_ZN6Object27has_script_instance_bindingEi, @function
_ZN6Object27has_script_instance_bindingEi:
.LFB2597:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_script_language_index, p_script_language_index
# core/object.cpp:1932: 	return _script_instance_bindings[p_script_language_index] != NULL;
	movq	-8(%rbp), %rax	# this, tmp85
	movl	-12(%rbp), %edx	# p_script_language_index, tmp87
	movslq	%edx, %rdx	# tmp87, tmp86
	addq	$16, %rdx	#, tmp88
	movq	(%rax,%rdx,8), %rax	# this_3(D)->_script_instance_bindings, _1
# core/object.cpp:1932: 	return _script_instance_bindings[p_script_language_index] != NULL;
	testq	%rax, %rax	# _1
	setne	%al	#, _5
# core/object.cpp:1933: }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2597:
	.size	_ZN6Object27has_script_instance_bindingEi, .-_ZN6Object27has_script_instance_bindingEi
	.align 2
	.globl	_ZN6Object27set_script_instance_bindingEiPv
	.type	_ZN6Object27set_script_instance_bindingEiPv, @function
_ZN6Object27set_script_instance_bindingEiPv:
.LFB2598:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_script_language_index, p_script_language_index
	movq	%rdx, -24(%rbp)	# p_data, p_data
# core/object.cpp:1939: 	_script_instance_bindings[p_script_language_index] = p_data;
	movq	-8(%rbp), %rax	# this, tmp82
	movl	-12(%rbp), %edx	# p_script_language_index, tmp84
	movslq	%edx, %rdx	# tmp84, tmp83
	leaq	16(%rdx), %rcx	#, tmp85
	movq	-24(%rbp), %rdx	# p_data, tmp86
	movq	%rdx, (%rax,%rcx,8)	# tmp86, this_2(D)->_script_instance_bindings
# core/object.cpp:1940: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2598:
	.size	_ZN6Object27set_script_instance_bindingEiPv, .-_ZN6Object27set_script_instance_bindingEiPv
	.align 2
	.globl	_ZN6ObjectC2Ev
	.type	_ZN6ObjectC2Ev, @function
_ZN6ObjectC2Ev:
.LFB2600:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2600
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# this, this
# core/object.cpp:1942: Object::Object() {
	movl	$_ZTV6Object+16, %edx	#, _1
	movq	-40(%rbp), %rax	# this, tmp99
	movq	%rdx, (%rax)	# _1, this_21(D)->_vptr.Object
	movq	-40(%rbp), %rax	# this, tmp100
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC1Ev	#
	movq	-40(%rbp), %rax	# this, tmp101
	addq	$24, %rax	#, _3
	movq	%rax, %rdi	# _3,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC1Ev	#
	movq	-40(%rbp), %rax	# this, tmp102
	addq	$40, %rax	#, _4
	movq	%rax, -24(%rbp)	# _4, this
# ./core/set.h:632: 	_FORCE_INLINE_ Set() {
	movq	-24(%rbp), %rax	# this, _48
	movq	%rax, -32(%rbp)	# _48, this
# ./core/set.h:110: 			_nil = (Element *)&_GlobalNilClass::_nil;
	movq	-32(%rbp), %rax	# this, tmp103
	movq	$_ZN15_GlobalNilClass4_nilE, 8(%rax)	#, this_49->_nil
# ./core/set.h:112: 			_root = NULL;
	movq	-32(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_49->_root
# ./core/set.h:113: 			size_cache = 0;
	movq	-32(%rbp), %rax	# this, tmp105
	movl	$0, 16(%rax)	#, this_49->size_cache
# ./core/set.h:114: 		}
	nop	
# ./core/set.h:633: 	}
	nop	
# core/object.cpp:1942: Object::Object() {
	movq	-40(%rbp), %rax	# this, tmp106
	addq	$88, %rax	#, _5
	movq	%rax, %rdi	# _5,
.LEHB653:
	call	_ZN6RefPtrC1Ev	#
.LEHE653:
# core/object.cpp:1942: Object::Object() {
	movq	-40(%rbp), %rax	# this, tmp107
	addq	$96, %rax	#, _6
	movq	%rax, %rdi	# _6,
.LEHB654:
	call	_ZN10DictionaryC1Ev	#
.LEHE654:
# core/object.cpp:1942: Object::Object() {
	movq	-40(%rbp), %rax	# this, tmp108
	addq	$104, %rax	#, _7
	movq	%rax, %rdi	# _7,
.LEHB655:
	call	_ZN10StringNameC1Ev	#
.LEHE655:
# core/object.cpp:1944: 	_class_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp109
	movq	$0, 112(%rax)	#, this_21(D)->_class_ptr
# core/object.cpp:1945: 	_block_signals = false;
	movq	-40(%rbp), %rax	# this, tmp110
	movb	$0, 32(%rax)	#, this_21(D)->_block_signals
# core/object.cpp:1946: 	_predelete_ok = 0;
	movq	-40(%rbp), %rax	# this, tmp111
	movl	$0, 36(%rax)	#, this_21(D)->_predelete_ok
# core/object.cpp:1947: 	_instance_id = 0;
	movq	-40(%rbp), %rax	# this, tmp112
	movq	$0, 64(%rax)	#, this_21(D)->_instance_id
# core/object.cpp:1948: 	_instance_id = ObjectDB::add_instance(this);
	movq	-40(%rbp), %rax	# this, tmp113
	movq	%rax, %rdi	# tmp113,
.LEHB656:
	call	_ZN8ObjectDB12add_instanceEP6Object	#
.LEHE656:
# core/object.cpp:1948: 	_instance_id = ObjectDB::add_instance(this);
	movq	-40(%rbp), %rdx	# this, tmp114
	movq	%rax, 64(%rdx)	# _8, this_21(D)->_instance_id
# core/object.cpp:1949: 	_can_translate = true;
	movq	-40(%rbp), %rax	# this, tmp115
	movb	$1, 72(%rax)	#, this_21(D)->_can_translate
# core/object.cpp:1950: 	_is_queued_for_deletion = false;
	movq	-40(%rbp), %rax	# this, tmp116
	movb	$0, 192(%rax)	#, this_21(D)->_is_queued_for_deletion
# core/object.cpp:1951: 	instance_binding_count = 0;
	movq	-40(%rbp), %rax	# this, tmp117
	movl	$0, 120(%rax)	#, this_21(D)->instance_binding_count
# core/object.cpp:1952: 	memset(_script_instance_bindings, 0, sizeof(void *) * MAX_SCRIPT_INSTANCE_BINDINGS);
	movq	-40(%rbp), %rax	# this, tmp118
	subq	$-128, %rax	#, _9
# core/object.cpp:1952: 	memset(_script_instance_bindings, 0, sizeof(void *) * MAX_SCRIPT_INSTANCE_BINDINGS);
	movl	$64, %edx	#,
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _9,
	call	memset	#
# core/object.cpp:1953: 	script_instance = NULL;
	movq	-40(%rbp), %rax	# this, tmp119
	movq	$0, 80(%rax)	#, this_21(D)->script_instance
# core/object.cpp:1963: }
	jmp	.L2787	#
.L2786:
	movq	%rax, %rbx	#, tmp122
# core/object.cpp:1942: Object::Object() {
	movq	-40(%rbp), %rax	# this, tmp120
	addq	$104, %rax	#, _10
	movq	%rax, %rdi	# _10,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2780	#
.L2785:
	movq	%rax, %rbx	#, tmp121
.L2780:
# core/object.cpp:1942: Object::Object() {
	movq	-40(%rbp), %rax	# this, tmp125
	addq	$96, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN10DictionaryD1Ev	#
	jmp	.L2781	#
.L2784:
	movq	%rax, %rbx	#, tmp126
.L2781:
# core/object.cpp:1942: Object::Object() {
	movq	-40(%rbp), %rax	# this, tmp128
	addq	$88, %rax	#, _12
	movq	%rax, %rdi	# _12,
	call	_ZN6RefPtrD1Ev	#
	jmp	.L2782	#
.L2783:
	movq	%rax, %rbx	#, tmp129
.L2782:
# core/object.cpp:1942: Object::Object() {
	movq	-40(%rbp), %rax	# this, tmp131
	addq	$40, %rax	#, _13
	movq	%rax, %rdi	# _13,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED1Ev	#
	movq	-40(%rbp), %rax	# this, tmp134
	addq	$24, %rax	#, _14
	movq	%rax, %rdi	# _14,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED1Ev	#
	movq	-40(%rbp), %rax	# this, tmp137
	addq	$8, %rax	#, _15
	movq	%rax, %rdi	# _15,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED1Ev	#
	movq	%rbx, %rax	# tmp135, D.62090
	movq	%rax, %rdi	# D.62090,
.LEHB657:
	call	_Unwind_Resume	#
.LEHE657:
.L2787:
# core/object.cpp:1963: }
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2600:
	.section	.gcc_except_table
.LLSDA2600:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2600-.LLSDACSB2600
.LLSDACSB2600:
	.uleb128 .LEHB653-.LFB2600
	.uleb128 .LEHE653-.LEHB653
	.uleb128 .L2783-.LFB2600
	.uleb128 0
	.uleb128 .LEHB654-.LFB2600
	.uleb128 .LEHE654-.LEHB654
	.uleb128 .L2784-.LFB2600
	.uleb128 0
	.uleb128 .LEHB655-.LFB2600
	.uleb128 .LEHE655-.LEHB655
	.uleb128 .L2785-.LFB2600
	.uleb128 0
	.uleb128 .LEHB656-.LFB2600
	.uleb128 .LEHE656-.LEHB656
	.uleb128 .L2786-.LFB2600
	.uleb128 0
	.uleb128 .LEHB657-.LFB2600
	.uleb128 .LEHE657-.LEHB657
	.uleb128 0
	.uleb128 0
.LLSDACSE2600:
	.text
	.size	_ZN6ObjectC2Ev, .-_ZN6ObjectC2Ev
	.globl	_ZN6ObjectC1Ev
	.set	_ZN6ObjectC1Ev,_ZN6ObjectC2Ev
	.section	.text._ZN6Object10ConnectionC2ERKS0_,"axG",@progbits,_ZN6Object10ConnectionC5ERKS0_,comdat
	.align 2
	.weak	_ZN6Object10ConnectionC2ERKS0_
	.type	_ZN6Object10ConnectionC2ERKS0_, @function
_ZN6Object10ConnectionC2ERKS0_:
.LFB2604:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2604
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# D.21878, D.21878
# core/object.h:412: 	struct Connection {
	movq	-64(%rbp), %rax	# D.21878, tmp100
	movq	(%rax), %rdx	# _17(D)->source, _1
	movq	-56(%rbp), %rax	# this, tmp101
	movq	%rdx, (%rax)	# _1, this_15(D)->source
	movq	-56(%rbp), %rax	# this, tmp102
	addq	$8, %rax	#, _2
	movq	-64(%rbp), %rdx	# D.21878, tmp103
	addq	$8, %rdx	#, _3
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _2,
.LEHB658:
	call	_ZN10StringNameC1ERKS_	#
.LEHE658:
	movq	-64(%rbp), %rax	# D.21878, tmp104
	movq	16(%rax), %rdx	# _17(D)->target, _4
	movq	-56(%rbp), %rax	# this, tmp105
	movq	%rdx, 16(%rax)	# _4, this_15(D)->target
	movq	-56(%rbp), %rax	# this, tmp106
	addq	$24, %rax	#, _5
	movq	-64(%rbp), %rdx	# D.21878, tmp107
	addq	$24, %rdx	#, _6
	movq	%rdx, %rsi	# _6,
	movq	%rax, %rdi	# _5,
.LEHB659:
	call	_ZN10StringNameC1ERKS_	#
.LEHE659:
# core/object.h:412: 	struct Connection {
	movq	-64(%rbp), %rax	# D.21878, tmp108
	movl	32(%rax), %edx	# _17(D)->flags, _7
	movq	-56(%rbp), %rax	# this, tmp109
	movl	%edx, 32(%rax)	# _7, this_15(D)->flags
	movq	-56(%rbp), %rax	# this, tmp110
	leaq	40(%rax), %rdx	#, _8
	movq	-64(%rbp), %rax	# D.21878, tmp111
	addq	$40, %rax	#, _9
	movq	%rdx, -24(%rbp)	# _8, this
	movq	%rax, -32(%rbp)	# _9, p_from
# ./core/vector.h:120: 	_FORCE_INLINE_ Vector(const Vector &p_from) { _cowdata._ref(p_from._cowdata); }
	movq	-24(%rbp), %rax	# this, tmp112
	addq	$8, %rax	#, _27
	movq	%rax, -40(%rbp)	# _27, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp113
	movq	$0, (%rax)	#, this_28->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/vector.h:120: 	_FORCE_INLINE_ Vector(const Vector &p_from) { _cowdata._ref(p_from._cowdata); }
	movq	-24(%rbp), %rax	# this, tmp114
	addq	$8, %rax	#, _29
# ./core/vector.h:120: 	_FORCE_INLINE_ Vector(const Vector &p_from) { _cowdata._ref(p_from._cowdata); }
	movq	-32(%rbp), %rdx	# p_from, tmp115
	addq	$8, %rdx	#, _30
# ./core/vector.h:120: 	_FORCE_INLINE_ Vector(const Vector &p_from) { _cowdata._ref(p_from._cowdata); }
	movq	%rdx, %rsi	# _30,
	movq	%rax, %rdi	# _29,
.LEHB660:
	call	_ZN7CowDataI7VariantE4_refERKS1_	#
.LEHE660:
# ./core/vector.h:120: 	_FORCE_INLINE_ Vector(const Vector &p_from) { _cowdata._ref(p_from._cowdata); }
	jmp	.L2794	#
.L2793:
	movq	%rax, %rbx	#, tmp120
# ./core/vector.h:120: 	_FORCE_INLINE_ Vector(const Vector &p_from) { _cowdata._ref(p_from._cowdata); }
	movq	-24(%rbp), %rax	# this, tmp116
	addq	$8, %rax	#, _31
	movq	%rax, -48(%rbp)	# _31, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp117
	movq	(%rax), %rdx	# this_32->_ptr, _33
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-48(%rbp), %rax	# this, tmp118
	movq	%rdx, %rsi	# _33,
	movq	%rax, %rdi	# tmp118,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# core/object.h:412: 	struct Connection {
	movq	-56(%rbp), %rax	# this, tmp123
	addq	$24, %rax	#, _11
	movq	%rax, %rdi	# _11,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2791	#
.L2794:
# core/object.h:412: 	struct Connection {
	jmp	.L2795	#
.L2792:
	movq	%rax, %rbx	#, tmp124
.L2791:
# core/object.h:412: 	struct Connection {
	movq	-56(%rbp), %rax	# this, tmp126
	addq	$8, %rax	#, _12
	movq	%rax, %rdi	# _12,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp124, D.62091
	movq	%rax, %rdi	# D.62091,
.LEHB661:
	call	_Unwind_Resume	#
.LEHE661:
.L2795:
# core/object.h:412: 	struct Connection {
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2604:
	.section	.gcc_except_table
.LLSDA2604:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2604-.LLSDACSB2604
.LLSDACSB2604:
	.uleb128 .LEHB658-.LFB2604
	.uleb128 .LEHE658-.LEHB658
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB659-.LFB2604
	.uleb128 .LEHE659-.LEHB659
	.uleb128 .L2792-.LFB2604
	.uleb128 0
	.uleb128 .LEHB660-.LFB2604
	.uleb128 .LEHE660-.LEHB660
	.uleb128 .L2793-.LFB2604
	.uleb128 0
	.uleb128 .LEHB661-.LFB2604
	.uleb128 .LEHE661-.LEHB661
	.uleb128 0
	.uleb128 0
.LLSDACSE2604:
	.section	.text._ZN6Object10ConnectionC2ERKS0_,"axG",@progbits,_ZN6Object10ConnectionC5ERKS0_,comdat
	.size	_ZN6Object10ConnectionC2ERKS0_, .-_ZN6Object10ConnectionC2ERKS0_
	.weak	_ZN6Object10ConnectionC1ERKS0_
	.set	_ZN6Object10ConnectionC1ERKS0_,_ZN6Object10ConnectionC2ERKS0_
	.section	.rodata
	.align 8
.LC103:
	.string	"Condition ' s->lock > 0 ' is true. Continuing..:"
.LC104:
	.string	"~Object"
	.text
	.align 2
	.globl	_ZN6ObjectD2Ev
	.type	_ZN6ObjectD2Ev, @function
_ZN6ObjectD2Ev:
.LFB2606:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2606
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$176, %rsp	#,
	movq	%rdi, -168(%rbp)	# this, this
# core/object.cpp:1965: Object::~Object() {
	movl	$_ZTV6Object+16, %edx	#, _1
	movq	-168(%rbp), %rax	# this, tmp140
	movq	%rdx, (%rax)	# _1, this_54(D)->_vptr.Object
# core/object.cpp:1967: 	if (script_instance)
	movq	-168(%rbp), %rax	# this, tmp141
	movq	80(%rax), %rax	# this_54(D)->script_instance, _2
# core/object.cpp:1967: 	if (script_instance)
	testq	%rax, %rax	# _2
	je	.L2797	#,
# core/object.cpp:1968: 		memdelete(script_instance);
	movq	-168(%rbp), %rax	# this, tmp142
	movq	80(%rax), %rax	# this_54(D)->script_instance, _3
	movq	%rax, %rdi	# _3,
	call	_Z9memdeleteI14ScriptInstanceEvPT_	#
.L2797:
# core/object.cpp:1969: 	script_instance = NULL;
	movq	-168(%rbp), %rax	# this, tmp143
	movq	$0, 80(%rax)	#, this_54(D)->script_instance
# core/object.cpp:1971: 	const StringName *S = NULL;
	movq	$0, -16(%rbp)	#, S
.L2809:
# core/object.cpp:1973: 	while ((S = signal_map.next(NULL))) {
	movq	-168(%rbp), %rax	# this, tmp144
	addq	$8, %rax	#, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_	#
	movq	%rax, -16(%rbp)	# _60, S
# core/object.cpp:1973: 	while ((S = signal_map.next(NULL))) {
	cmpq	$0, -16(%rbp)	#, S
	setne	%al	#, retval.371_62
	testb	%al, %al	# retval.371_62
	je	.L2798	#,
# core/object.cpp:1975: 		Signal *s = &signal_map[*S];
	movq	-168(%rbp), %rax	# this, tmp145
	leaq	8(%rax), %rdx	#, _5
	movq	-16(%rbp), %rax	# S, tmp146
	movq	%rax, %rsi	# tmp146,
	movq	%rdx, %rdi	# _5,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
	movq	%rax, -24(%rbp)	# _87, s
# core/object.cpp:1977: 		if (s->lock) {
	movq	-24(%rbp), %rax	# s, tmp147
	movl	96(%rax), %eax	# s_88->lock, _6
# core/object.cpp:1977: 		if (s->lock) {
	testl	%eax, %eax	# _6
	je	.L2799	#,
# core/object.cpp:1979: 			ERR_CONTINUE(s->lock > 0);
	movq	-24(%rbp), %rax	# s, tmp148
	movl	96(%rax), %eax	# s_88->lock, _7
	testl	%eax, %eax	# _7
	setg	%al	#, _8
	movzbl	%al, %eax	# _8, _9
	testq	%rax, %rax	# _10
	je	.L2800	#,
# core/object.cpp:1979: 			ERR_CONTINUE(s->lock > 0);
	movl	$0, %r8d	#,
	movl	$.LC103, %ecx	#,
	movl	$1979, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC104, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L2801	#
.L2800:
# core/object.cpp:1979: 			ERR_CONTINUE(s->lock > 0);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
.L2799:
# core/object.cpp:1983: 		int slot_count = s->slot_map.size();
	movq	-24(%rbp), %rax	# s, tmp149
	addq	$88, %rax	#, _11
	movq	%rax, -48(%rbp)	# _11, this
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, _101
	movq	%rax, -56(%rbp)	# _101, this
	movq	-56(%rbp), %rax	# this, tmp150
	movq	%rax, -64(%rbp)	# tmp150, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp151
	movq	(%rax), %rax	# this_103->_ptr, _104
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _104
	jne	.L2802	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _105
	jmp	.L2803	#
.L2802:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp152
	movq	(%rax), %rax	# this_103->_ptr, _106
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _105
.L2803:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _105, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L2804	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp153
	movl	(%rax), %eax	# *size_110, _111
	jmp	.L2805	#
.L2804:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.58948
.L2805:
# ./core/vmap.h:153: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# core/object.cpp:1983: 		int slot_count = s->slot_map.size();
	movl	%eax, -28(%rbp)	# D.58948, slot_count
# core/object.cpp:1984: 		const VMap<Signal::Target, Signal::Slot>::Pair *slot_list = s->slot_map.get_array();
	movq	-24(%rbp), %rax	# s, tmp154
	addq	$88, %rax	#, _12
	movq	%rax, %rdi	# _12,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv	#
	movq	%rax, -40(%rbp)	# _94, slot_list
# core/object.cpp:1986: 		for (int i = 0; i < slot_count; i++) {
	movl	$0, -4(%rbp)	#, i
.L2808:
# core/object.cpp:1986: 		for (int i = 0; i < slot_count; i++) {
	movl	-4(%rbp), %eax	# i, tmp155
	cmpl	-28(%rbp), %eax	# slot_count, tmp155
	jge	.L2807	#,
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	movl	-4(%rbp), %eax	# i, tmp156
	movslq	%eax, %rdx	# tmp156, _13
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	movq	%rdx, %rax	# _13, tmp157
	salq	$2, %rax	#, tmp157
	addq	%rdx, %rax	# _13, tmp157
	addq	%rax, %rax	# tmp157
	addq	%rdx, %rax	# _13, tmp157
	salq	$3, %rax	#, tmp158
	movq	%rax, %rdx	# tmp157, _14
	movq	-40(%rbp), %rax	# slot_list, tmp159
	addq	%rdx, %rax	# _14, _15
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	movq	40(%rax), %rax	# _15->value.conn.target, _16
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	leaq	24(%rax), %rcx	#, _17
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	movl	-4(%rbp), %eax	# i, tmp160
	movslq	%eax, %rdx	# tmp160, _18
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	movq	%rdx, %rax	# _18, tmp161
	salq	$2, %rax	#, tmp161
	addq	%rdx, %rax	# _18, tmp161
	addq	%rax, %rax	# tmp161
	addq	%rdx, %rax	# _18, tmp161
	salq	$3, %rax	#, tmp162
	movq	%rax, %rdx	# tmp161, _19
	movq	-40(%rbp), %rax	# slot_list, tmp163
	addq	%rdx, %rax	# _19, _20
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	movq	80(%rax), %rax	# _20->value.cE, _21
# core/object.cpp:1988: 			slot_list[i].value.conn.target->connections.erase(slot_list[i].value.cE);
	movq	%rax, %rsi	# _21,
	movq	%rcx, %rdi	# _17,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE	#
# core/object.cpp:1986: 		for (int i = 0; i < slot_count; i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L2808	#
.L2807:
# core/object.cpp:1991: 		signal_map.erase(*S);
	movq	-168(%rbp), %rax	# this, tmp164
	leaq	8(%rax), %rdx	#, _22
	movq	-16(%rbp), %rax	# S, tmp165
	movq	%rax, %rsi	# tmp165,
	movq	%rdx, %rdi	# _22,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_	#
.L2801:
# core/object.cpp:1973: 	while ((S = signal_map.next(NULL))) {
	jmp	.L2809	#
.L2798:
# core/object.cpp:1995: 	while (connections.size()) {
	movq	-168(%rbp), %rax	# this, tmp166
	addq	$24, %rax	#, _23
	movq	%rax, -80(%rbp)	# _23, this
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-80(%rbp), %rax	# this, tmp167
	movq	(%rax), %rax	# this_118->_data, _119
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	testq	%rax, %rax	# _119
	je	.L2810	#,
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-80(%rbp), %rax	# this, tmp168
	movq	(%rax), %rax	# this_118->_data, _120
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	16(%rax), %eax	# _120->size_cache, D.58957
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	jmp	.L2821	#
.L2810:
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	$0, %eax	#, D.58957
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	nop	
.L2821:
# core/object.cpp:1995: 	while (connections.size()) {
	testl	%eax, %eax	# D.58957
	setne	%al	#, retval.372_63
	testb	%al, %al	# retval.372_63
	je	.L2813	#,
# core/object.cpp:1997: 		Connection c = connections.front()->get();
	movq	-168(%rbp), %rax	# this, tmp169
	addq	$24, %rax	#, _25
	movq	%rax, -96(%rbp)	# _25, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-96(%rbp), %rax	# this, tmp170
	movq	(%rax), %rax	# this_127->_data, _128
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _128
	je	.L2814	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-96(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_127->_data, _129
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _129->first, D.58966
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L2822	#
.L2814:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.58966
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L2822:
	movq	%rax, -88(%rbp)	# D.58966, this
# ./core/list.h:121: 			return value;
	movq	-88(%rbp), %rdx	# this, D.58962
# core/object.cpp:1997: 		Connection c = connections.front()->get();
	leaq	-160(%rbp), %rax	#, tmp172
	movq	%rdx, %rsi	# D.58962,
	movq	%rax, %rdi	# tmp172,
	call	_ZN6Object10ConnectionC1ERKS0_	#
# core/object.cpp:1998: 		c.source->_disconnect(c.signal, c.target, c.method, true);
	movq	-160(%rbp), %rax	# c.source, _28
# core/object.cpp:1998: 		c.source->_disconnect(c.signal, c.target, c.method, true);
	movq	-144(%rbp), %rdx	# c.target, _29
	leaq	-160(%rbp), %rcx	#, tmp173
	addq	$24, %rcx	#, tmp174
	leaq	-160(%rbp), %rsi	#, tmp175
	addq	$8, %rsi	#, tmp176
	movl	$1, %r8d	#,
	movq	%rax, %rdi	# _28,
	call	_ZN6Object11_disconnectERK10StringNamePS_S2_b	#
# core/object.cpp:1997: 		Connection c = connections.front()->get();
	leaq	-160(%rbp), %rax	#, tmp177
	movq	%rax, %rdi	# tmp177,
	call	_ZN6Object10ConnectionD1Ev	#
# core/object.cpp:1995: 	while (connections.size()) {
	jmp	.L2798	#
.L2813:
# core/object.cpp:2001: 	ObjectDB::remove_instance(this);
	movq	-168(%rbp), %rax	# this, tmp178
	movq	%rax, %rdi	# tmp178,
	call	_ZN8ObjectDB15remove_instanceEP6Object	#
# core/object.cpp:2002: 	_instance_id = 0;
	movq	-168(%rbp), %rax	# this, tmp179
	movq	$0, 64(%rax)	#, this_54(D)->_instance_id
# core/object.cpp:2003: 	_predelete_ok = 2;
	movq	-168(%rbp), %rax	# this, tmp180
	movl	$2, 36(%rax)	#, this_54(D)->_predelete_ok
# core/object.cpp:2005: 	if (!ScriptServer::are_languages_finished()) {
	call	_ZN12ScriptServer22are_languages_finishedEv	#
# core/object.cpp:2005: 	if (!ScriptServer::are_languages_finished()) {
	xorl	$1, %eax	#, retval.373_68
# core/object.cpp:2005: 	if (!ScriptServer::are_languages_finished()) {
	testb	%al, %al	# retval.373_68
	je	.L2818	#,
# core/object.cpp:2006: 		for (int i = 0; i < MAX_SCRIPT_INSTANCE_BINDINGS; i++) {
	movl	$0, -8(%rbp)	#, i
.L2820:
# core/object.cpp:2006: 		for (int i = 0; i < MAX_SCRIPT_INSTANCE_BINDINGS; i++) {
	cmpl	$7, -8(%rbp)	#, i
	jg	.L2818	#,
# core/object.cpp:2007: 			if (_script_instance_bindings[i]) {
	movq	-168(%rbp), %rax	# this, tmp181
	movl	-8(%rbp), %edx	# i, tmp183
	movslq	%edx, %rdx	# tmp183, tmp182
	addq	$16, %rdx	#, tmp184
	movq	(%rax,%rdx,8), %rax	# this_54(D)->_script_instance_bindings, _31
# core/object.cpp:2007: 			if (_script_instance_bindings[i]) {
	testq	%rax, %rax	# _31
	je	.L2819	#,
# core/object.cpp:2008: 				ScriptServer::get_language(i)->free_instance_binding_data(_script_instance_bindings[i]);
	movl	-8(%rbp), %eax	# i, tmp185
	movl	%eax, %edi	# tmp185,
	call	_ZN12ScriptServer12get_languageEi	#
# core/object.cpp:2008: 				ScriptServer::get_language(i)->free_instance_binding_data(_script_instance_bindings[i]);
	movq	(%rax), %rdx	# _72->_vptr.ScriptLanguage, _32
	addq	$408, %rdx	#, _33
	movq	(%rdx), %rcx	# *_33, _34
# core/object.cpp:2008: 				ScriptServer::get_language(i)->free_instance_binding_data(_script_instance_bindings[i]);
	movq	-168(%rbp), %rdx	# this, tmp186
	movl	-8(%rbp), %esi	# i, tmp188
	movslq	%esi, %rsi	# tmp188, tmp187
	addq	$16, %rsi	#, tmp189
	movq	(%rdx,%rsi,8), %rdx	# this_54(D)->_script_instance_bindings, _35
	movq	%rdx, %rsi	# _35,
	movq	%rax, %rdi	# _71,
	call	*%rcx	# _34
.L2819:
# core/object.cpp:2006: 		for (int i = 0; i < MAX_SCRIPT_INSTANCE_BINDINGS; i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L2820	#
.L2818:
# core/object.cpp:1965: Object::~Object() {
	movq	-168(%rbp), %rax	# this, tmp190
	addq	$104, %rax	#, _36
	movq	%rax, %rdi	# _36,
	call	_ZN10StringNameD1Ev	#
	movq	-168(%rbp), %rax	# this, tmp191
	addq	$96, %rax	#, _37
	movq	%rax, %rdi	# _37,
	call	_ZN10DictionaryD1Ev	#
	movq	-168(%rbp), %rax	# this, tmp192
	addq	$88, %rax	#, _38
	movq	%rax, %rdi	# _38,
	call	_ZN6RefPtrD1Ev	#
	movq	-168(%rbp), %rax	# this, tmp193
	addq	$40, %rax	#, _39
	movq	%rax, %rdi	# _39,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED1Ev	#
	movq	-168(%rbp), %rax	# this, tmp194
	addq	$24, %rax	#, _40
	movq	%rax, %rdi	# _40,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED1Ev	#
	movq	-168(%rbp), %rax	# this, tmp195
	addq	$8, %rax	#, _41
	movq	%rax, %rdi	# _41,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED1Ev	#
# core/object.cpp:2012: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2606:
	.section	.gcc_except_table
.LLSDA2606:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2606-.LLSDACSB2606
.LLSDACSB2606:
.LLSDACSE2606:
	.text
	.size	_ZN6ObjectD2Ev, .-_ZN6ObjectD2Ev
	.globl	_ZN6ObjectD1Ev
	.set	_ZN6ObjectD1Ev,_ZN6ObjectD2Ev
	.align 2
	.globl	_ZN6ObjectD0Ev
	.type	_ZN6ObjectD0Ev, @function
_ZN6ObjectD0Ev:
.LFB2608:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# core/object.cpp:2012: }
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN6ObjectD1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$200, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2608:
	.size	_ZN6ObjectD0Ev, .-_ZN6ObjectD0Ev
	.globl	_Z17predelete_handlerP6Object
	.type	_Z17predelete_handlerP6Object, @function
_Z17predelete_handlerP6Object:
.LFB2609:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_object, p_object
# core/object.cpp:2016: 	return p_object->_predelete();
	movq	-8(%rbp), %rax	# p_object, tmp84
	movq	%rax, %rdi	# tmp84,
	call	_ZN6Object10_predeleteEv	#
# core/object.cpp:2017: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2609:
	.size	_Z17predelete_handlerP6Object, .-_Z17predelete_handlerP6Object
	.globl	_Z22postinitialize_handlerP6Object
	.type	_Z22postinitialize_handlerP6Object, @function
_Z22postinitialize_handlerP6Object:
.LFB2610:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_object, p_object
# core/object.cpp:2021: 	p_object->_postinitialize();
	movq	-8(%rbp), %rax	# p_object, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN6Object15_postinitializeEv	#
# core/object.cpp:2022: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2610:
	.size	_Z22postinitialize_handlerP6Object, .-_Z22postinitialize_handlerP6Object
	.globl	_ZN8ObjectDB9instancesE
	.bss
	.align 16
	.type	_ZN8ObjectDB9instancesE, @object
	.size	_ZN8ObjectDB9instancesE, 16
_ZN8ObjectDB9instancesE:
	.zero	16
	.globl	_ZN8ObjectDB16instance_counterE
	.data
	.align 8
	.type	_ZN8ObjectDB16instance_counterE, @object
	.size	_ZN8ObjectDB16instance_counterE, 8
_ZN8ObjectDB16instance_counterE:
	.quad	1
	.globl	_ZN8ObjectDB15instance_checksE
	.bss
	.align 16
	.type	_ZN8ObjectDB15instance_checksE, @object
	.size	_ZN8ObjectDB15instance_checksE, 16
_ZN8ObjectDB15instance_checksE:
	.zero	16
	.section	.rodata
	.align 8
.LC105:
	.string	"Condition ' p_object->get_instance_id() != 0 ' is true. returned: 0"
.LC106:
	.string	"add_instance"
	.text
	.align 2
	.globl	_ZN8ObjectDB12add_instanceEP6Object
	.type	_ZN8ObjectDB12add_instanceEP6Object, @function
_ZN8ObjectDB12add_instanceEP6Object:
.LFB2611:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_object, p_object
# core/object.cpp:2029: 	ERR_FAIL_COND_V(p_object->get_instance_id() != 0, 0);
	movq	-24(%rbp), %rax	# p_object, p_object.375_1
	movq	%rax, -8(%rbp)	# p_object.375_1, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-8(%rbp), %rax	# this, tmp109
	movq	64(%rax), %rax	# this_46->_instance_id, D.58211
# core/object.cpp:2029: 	ERR_FAIL_COND_V(p_object->get_instance_id() != 0, 0);
	testq	%rax, %rax	# D.58211
	setne	%al	#, _3
	movzbl	%al, %eax	# _3, _4
	testq	%rax, %rax	# _5
	setne	%al	#, retval.374_29
	testb	%al, %al	# retval.374_29
	je	.L2829	#,
# core/object.cpp:2029: 	ERR_FAIL_COND_V(p_object->get_instance_id() != 0, 0);
	movl	$0, %r8d	#,
	movl	$.LC105, %ecx	#,
	movl	$2029, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC106, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _25
	jmp	.L2831	#
.L2829:
# core/object.cpp:2029: 	ERR_FAIL_COND_V(p_object->get_instance_id() != 0, 0);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:2031: 	rw_lock->write_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.376_6
# core/object.cpp:2031: 	rw_lock->write_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.378_8
	movq	(%rdx), %rdx	# rw_lock.378_8->_vptr.RWLock, _9
	addq	$24, %rdx	#, _10
	movq	(%rdx), %rdx	# *_10, _11
# core/object.cpp:2031: 	rw_lock->write_lock();
	movq	%rax, %rdi	# rw_lock.376_6,
	call	*%rdx	# _11
# core/object.cpp:2032: 	ObjectID instance_id = ++instance_counter;
	movq	_ZN8ObjectDB16instance_counterE(%rip), %rax	# instance_counter, instance_counter.379_12
	addq	$1, %rax	#, _13
# core/object.cpp:2032: 	ObjectID instance_id = ++instance_counter;
	movq	%rax, _ZN8ObjectDB16instance_counterE(%rip)	# _13, instance_counter
	movq	_ZN8ObjectDB16instance_counterE(%rip), %rax	# instance_counter, instance_counter.380_14
	movq	%rax, -16(%rbp)	# instance_counter.380_14, instance_id
# core/object.cpp:2033: 	instances[instance_id] = p_object;
	leaq	-16(%rbp), %rax	#, tmp110
	movq	%rax, %rsi	# tmp110,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
# core/object.cpp:2033: 	instances[instance_id] = p_object;
	movq	-24(%rbp), %rdx	# p_object, p_object.381_16
	movq	%rdx, (%rax)	# p_object.381_16, *_15
# core/object.cpp:2034: 	instance_checks[p_object] = instance_id;
	leaq	-24(%rbp), %rax	#, tmp111
	movq	%rax, %rsi	# tmp111,
	movl	$_ZN8ObjectDB15instance_checksE, %edi	#,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_	#
# core/object.cpp:2034: 	instance_checks[p_object] = instance_id;
	movq	-16(%rbp), %rdx	# instance_id, instance_id.382_18
	movq	%rdx, (%rax)	# instance_id.382_18, *_17
# core/object.cpp:2036: 	rw_lock->write_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.383_19
# core/object.cpp:2036: 	rw_lock->write_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.385_21
	movq	(%rdx), %rdx	# rw_lock.385_21->_vptr.RWLock, _22
	addq	$32, %rdx	#, _23
	movq	(%rdx), %rdx	# *_23, _24
# core/object.cpp:2036: 	rw_lock->write_unlock();
	movq	%rax, %rdi	# rw_lock.383_19,
	call	*%rdx	# _24
# core/object.cpp:2038: 	return instance_id;
	movq	-16(%rbp), %rax	# instance_id, _25
.L2831:
# core/object.cpp:2039: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2611:
	.size	_ZN8ObjectDB12add_instanceEP6Object, .-_ZN8ObjectDB12add_instanceEP6Object
	.align 2
	.globl	_ZN8ObjectDB15remove_instanceEP6Object
	.type	_ZN8ObjectDB15remove_instanceEP6Object, @function
_ZN8ObjectDB15remove_instanceEP6Object:
.LFB2612:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_object, p_object
# core/object.cpp:2043: 	rw_lock->write_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.390_1
# core/object.cpp:2043: 	rw_lock->write_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.392_3
	movq	(%rdx), %rdx	# rw_lock.392_3->_vptr.RWLock, _4
	addq	$24, %rdx	#, _5
	movq	(%rdx), %rdx	# *_5, _6
# core/object.cpp:2043: 	rw_lock->write_lock();
	movq	%rax, %rdi	# rw_lock.390_1,
	call	*%rdx	# _6
# core/object.cpp:2045: 	instances.erase(p_object->get_instance_id());
	movq	-24(%rbp), %rax	# p_object, p_object.393_7
	movq	%rax, -8(%rbp)	# p_object.393_7, this
# core/object.h:592: 	_FORCE_INLINE_ ObjectID get_instance_id() const { return _instance_id; }
	movq	-8(%rbp), %rax	# this, tmp96
	movq	64(%rax), %rax	# this_23->_instance_id, D.57285
# core/object.cpp:2045: 	instances.erase(p_object->get_instance_id());
	movq	%rax, -16(%rbp)	# D.57285, D.41208
# core/object.cpp:2045: 	instances.erase(p_object->get_instance_id());
	leaq	-16(%rbp), %rax	#, tmp97
	movq	%rax, %rsi	# tmp97,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm	#
# core/object.cpp:2046: 	instance_checks.erase(p_object);
	leaq	-24(%rbp), %rax	#, tmp98
	movq	%rax, %rsi	# tmp98,
	movl	$_ZN8ObjectDB15instance_checksE, %edi	#,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_	#
# core/object.cpp:2048: 	rw_lock->write_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.394_9
# core/object.cpp:2048: 	rw_lock->write_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.396_11
	movq	(%rdx), %rdx	# rw_lock.396_11->_vptr.RWLock, _12
	addq	$32, %rdx	#, _13
	movq	(%rdx), %rdx	# *_13, _14
# core/object.cpp:2048: 	rw_lock->write_unlock();
	movq	%rax, %rdi	# rw_lock.394_9,
	call	*%rdx	# _14
# core/object.cpp:2049: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2612:
	.size	_ZN8ObjectDB15remove_instanceEP6Object, .-_ZN8ObjectDB15remove_instanceEP6Object
	.align 2
	.globl	_ZN8ObjectDB12get_instanceEm
	.type	_ZN8ObjectDB12get_instanceEm, @function
_ZN8ObjectDB12get_instanceEm:
.LFB2613:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# p_instance_id, p_instance_id
# core/object.cpp:2052: 	rw_lock->read_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.403_1
# core/object.cpp:2052: 	rw_lock->read_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.405_3
	movq	(%rdx), %rdx	# rw_lock.405_3->_vptr.RWLock, _4
	movq	(%rdx), %rdx	# *_4, _5
# core/object.cpp:2052: 	rw_lock->read_lock();
	movq	%rax, %rdi	# rw_lock.403_1,
	call	*%rdx	# _5
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	movq	_ZN8ObjectDB9instancesE(%rip), %rax	# instances.hash_table, _20
	testq	%rax, %rax	# _20
	sete	%al	#, _21
	movzbl	%al, %eax	# _21, _22
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _23
	je	.L2835	#,
# ./core/hash_map.h:322: 			return NULL;
	movl	$0, %eax	#, D.55667
	jmp	.L2836	#
.L2835:
	movq	$_ZN8ObjectDB9instancesE, -16(%rbp)	#, this
	leaq	-72(%rbp), %rax	#, tmp116
	movq	%rax, -24(%rbp)	# tmp116, p_key
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movq	-24(%rbp), %rax	# p_key, tmp117
	movq	(%rax), %rax	# *p_key_26, _27
	movq	%rax, -32(%rbp)	# _27, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-32(%rbp), %rax	# p_int, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -36(%rbp)	# _29, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-16(%rbp), %rax	# this, tmp119
	movzbl	8(%rax), %eax	# this_25->hash_table_power, _32
	movzbl	%al, %eax	# _32, _33
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp120
	movl	%eax, %ecx	# _33, tmp134
	sall	%cl, %edx	# tmp134, tmp120
	movl	%edx, %eax	# tmp120, _34
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _35
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-36(%rbp), %eax	# hash, tmp122
	movl	%eax, -40(%rbp)	# tmp122, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-16(%rbp), %rax	# this, tmp123
	movq	(%rax), %rax	# this_25->hash_table, _38
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-40(%rbp), %edx	# index, _39
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _40
	addq	%rdx, %rax	# _40, _41
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_41, tmp124
	movq	%rax, -48(%rbp)	# tmp124, e
.L2843:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -48(%rbp)	#, e
	je	.L2838	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-48(%rbp), %rax	# e, tmp125
	movl	(%rax), %eax	# e_43->hash, _44
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -36(%rbp)	# _44, hash
	jne	.L2839	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-48(%rbp), %rax	# e, tmp126
	leaq	16(%rax), %rdx	#, _45
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-24(%rbp), %rax	# p_key, tmp127
	movq	%rax, %rsi	# tmp127,
	movq	%rdx, %rdi	# _45,
	call	_ZN24HashMapComparatorDefaultImE7compareERKmS2_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _46
	je	.L2839	#,
	movl	$1, %eax	#, iftmp.387_47
	jmp	.L2840	#
.L2839:
	movl	$0, %eax	#, iftmp.387_47
.L2840:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.387_47
	je	.L2841	#,
# ./core/hash_map.h:198: 				return e;
	movq	-48(%rbp), %rax	# e, _51
	jmp	.L2842	#
.L2841:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-48(%rbp), %rax	# e, tmp128
	movq	8(%rax), %rax	# e_43->next, tmp129
	movq	%rax, -48(%rbp)	# tmp129, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L2843	#
.L2838:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _51
.L2842:
# ./core/hash_map.h:324: 		Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -56(%rbp)	# _51, e
# ./core/hash_map.h:326: 		if (e)
	cmpq	$0, -56(%rbp)	#, e
	je	.L2844	#,
# ./core/hash_map.h:327: 			return &e->pair.data;
	movq	-56(%rbp), %rax	# e, tmp130
	addq	$24, %rax	#, D.55667
	jmp	.L2836	#
.L2844:
# ./core/hash_map.h:329: 		return NULL;
	movl	$0, %eax	#, D.55667
.L2836:
# core/object.cpp:2053: 	Object **obj = instances.getptr(p_instance_id);
	movq	%rax, -8(%rbp)	# D.55667, obj
# core/object.cpp:2054: 	rw_lock->read_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.406_6
# core/object.cpp:2054: 	rw_lock->read_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.408_8
	movq	(%rdx), %rdx	# rw_lock.408_8->_vptr.RWLock, _9
	addq	$8, %rdx	#, _10
	movq	(%rdx), %rdx	# *_10, _11
# core/object.cpp:2054: 	rw_lock->read_unlock();
	movq	%rax, %rdi	# rw_lock.406_6,
	call	*%rdx	# _11
# core/object.cpp:2056: 	if (!obj)
	cmpq	$0, -8(%rbp)	#, obj
	jne	.L2845	#,
# core/object.cpp:2057: 		return NULL;
	movl	$0, %eax	#, _12
	jmp	.L2846	#
.L2845:
# core/object.cpp:2058: 	return *obj;
	movq	-8(%rbp), %rax	# obj, tmp131
	movq	(%rax), %rax	# *obj_16, _12
.L2846:
# core/object.cpp:2059: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2613:
	.size	_ZN8ObjectDB12get_instanceEm, .-_ZN8ObjectDB12get_instanceEm
	.align 2
	.globl	_ZN8ObjectDB13debug_objectsEPFvP6ObjectE
	.type	_ZN8ObjectDB13debug_objectsEPFvP6ObjectE, @function
_ZN8ObjectDB13debug_objectsEPFvP6ObjectE:
.LFB2614:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_func, p_func
# core/object.cpp:2063: 	rw_lock->read_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.409_1
# core/object.cpp:2063: 	rw_lock->read_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.411_3
	movq	(%rdx), %rdx	# rw_lock.411_3->_vptr.RWLock, _4
	movq	(%rdx), %rdx	# *_4, _5
# core/object.cpp:2063: 	rw_lock->read_lock();
	movq	%rax, %rdi	# rw_lock.409_1,
	call	*%rdx	# _5
# core/object.cpp:2065: 	const ObjectID *K = NULL;
	movq	$0, -8(%rbp)	#, K
.L2849:
# core/object.cpp:2066: 	while ((K = instances.next(K))) {
	movq	-8(%rbp), %rax	# K, tmp97
	movq	%rax, %rsi	# tmp97,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm	#
	movq	%rax, -8(%rbp)	# _20, K
# core/object.cpp:2066: 	while ((K = instances.next(K))) {
	cmpq	$0, -8(%rbp)	#, K
	setne	%al	#, retval.412_22
	testb	%al, %al	# retval.412_22
	je	.L2848	#,
# core/object.cpp:2068: 		p_func(instances[*K]);
	movq	-8(%rbp), %rax	# K, tmp98
	movq	%rax, %rsi	# tmp98,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
# core/object.cpp:2068: 		p_func(instances[*K]);
	movq	(%rax), %rax	# *_6, _7
	movq	-24(%rbp), %rdx	# p_func, tmp99
	movq	%rax, %rdi	# _7,
	call	*%rdx	# tmp99
# core/object.cpp:2066: 	while ((K = instances.next(K))) {
	jmp	.L2849	#
.L2848:
# core/object.cpp:2071: 	rw_lock->read_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.413_8
# core/object.cpp:2071: 	rw_lock->read_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.415_10
	movq	(%rdx), %rdx	# rw_lock.415_10->_vptr.RWLock, _11
	addq	$8, %rdx	#, _12
	movq	(%rdx), %rdx	# *_12, _13
# core/object.cpp:2071: 	rw_lock->read_unlock();
	movq	%rax, %rdi	# rw_lock.413_8,
	call	*%rdx	# _13
# core/object.cpp:2072: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2614:
	.size	_ZN8ObjectDB13debug_objectsEPFvP6ObjectE, .-_ZN8ObjectDB13debug_objectsEPFvP6ObjectE
	.align 2
	.globl	_ZNK6Object20get_argument_optionsERK10StringNameiP4ListI6String16DefaultAllocatorE
	.type	_ZNK6Object20get_argument_optionsERK10StringNameiP4ListI6String16DefaultAllocatorE, @function
_ZNK6Object20get_argument_optionsERK10StringNameiP4ListI6String16DefaultAllocatorE:
.LFB2615:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_function, p_function
	movl	%edx, -20(%rbp)	# p_idx, p_idx
	movq	%rcx, -32(%rbp)	# r_options, r_options
# core/object.cpp:2075: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2615:
	.size	_ZNK6Object20get_argument_optionsERK10StringNameiP4ListI6String16DefaultAllocatorE, .-_ZNK6Object20get_argument_optionsERK10StringNameiP4ListI6String16DefaultAllocatorE
	.align 2
	.globl	_ZN8ObjectDB16get_object_countEv
	.type	_ZN8ObjectDB16get_object_countEv, @function
_ZN8ObjectDB16get_object_countEv:
.LFB2616:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
# core/object.cpp:2079: 	rw_lock->read_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.416_1
# core/object.cpp:2079: 	rw_lock->read_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.418_3
	movq	(%rdx), %rdx	# rw_lock.418_3->_vptr.RWLock, _4
	movq	(%rdx), %rdx	# *_4, _5
# core/object.cpp:2079: 	rw_lock->read_lock();
	movq	%rax, %rdi	# rw_lock.416_1,
	call	*%rdx	# _5
# core/object.cpp:2080: 	int count = instances.size();
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv	#
# core/object.cpp:2080: 	int count = instances.size();
	movl	%eax, -4(%rbp)	# _6, count
# core/object.cpp:2081: 	rw_lock->read_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.419_7
# core/object.cpp:2081: 	rw_lock->read_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.421_9
	movq	(%rdx), %rdx	# rw_lock.421_9->_vptr.RWLock, _10
	addq	$8, %rdx	#, _11
	movq	(%rdx), %rdx	# *_11, _12
# core/object.cpp:2081: 	rw_lock->read_unlock();
	movq	%rax, %rdi	# rw_lock.419_7,
	call	*%rdx	# _12
# core/object.cpp:2083: 	return count;
	movl	-4(%rbp), %eax	# count, _18
# core/object.cpp:2084: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2616:
	.size	_ZN8ObjectDB16get_object_countEv, .-_ZN8ObjectDB16get_object_countEv
	.globl	_ZN8ObjectDB7rw_lockE
	.bss
	.align 8
	.type	_ZN8ObjectDB7rw_lockE, @object
	.size	_ZN8ObjectDB7rw_lockE, 8
_ZN8ObjectDB7rw_lockE:
	.zero	8
	.text
	.align 2
	.globl	_ZN8ObjectDB5setupEv
	.type	_ZN8ObjectDB5setupEv, @function
_ZN8ObjectDB5setupEv:
.LFB2617:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
# core/object.cpp:2090: 	rw_lock = RWLock::create();
	call	_ZN6RWLock6createEv	#
# core/object.cpp:2090: 	rw_lock = RWLock::create();
	movq	%rax, _ZN8ObjectDB7rw_lockE(%rip)	# _1, rw_lock
# core/object.cpp:2091: }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2617:
	.size	_ZN8ObjectDB5setupEv, .-_ZN8ObjectDB5setupEv
	.section	.rodata
	.align 8
.LC107:
	.string	"ObjectDB Instances still exist!"
.LC108:
	.string	"cleanup"
.LC109:
	.string	"Node"
.LC110:
	.string	"get_name"
.LC111:
	.string	" - Node name: "
.LC112:
	.string	"Resource"
.LC113:
	.string	"get_path"
.LC114:
	.string	" Path: "
.LC115:
	.string	" - Resource name: "
.LC116:
	.string	"Leaked instance: "
	.text
	.align 2
	.globl	_ZN8ObjectDB7cleanupEv
	.type	_ZN8ObjectDB7cleanupEv, @function
_ZN8ObjectDB7cleanupEv:
.LFB2618:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2618
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$768, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
# core/object.cpp:2095: 	rw_lock->write_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.422_1
# core/object.cpp:2095: 	rw_lock->write_lock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.424_3
	movq	(%rdx), %rdx	# rw_lock.424_3->_vptr.RWLock, _4
	addq	$24, %rdx	#, _5
	movq	(%rdx), %rdx	# *_5, _6
# core/object.cpp:2095: 	rw_lock->write_lock();
	movq	%rax, %rdi	# rw_lock.422_1,
.LEHB662:
	call	*%rdx	# _6
# core/object.cpp:2096: 	if (instances.size()) {
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv	#
# core/object.cpp:2096: 	if (instances.size()) {
	testl	%eax, %eax	# _7
	setne	%al	#, retval.425_67
# core/object.cpp:2096: 	if (instances.size()) {
	testb	%al, %al	# retval.425_67
	je	.L2855	#,
# core/object.cpp:2098: 		WARN_PRINT("ObjectDB Instances still exist!");
	movl	$1, %r8d	#,
	movl	$.LC107, %ecx	#,
	movl	$2098, %edx	#,
	movl	$.LC22, %esi	#,
	movl	$.LC108, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# core/object.cpp:2099: 		if (OS::get_singleton()->is_stdout_verbose()) {
	call	_ZN2OS13get_singletonEv	#
	movq	%rax, %rdi	# _8,
	call	_ZNK2OS17is_stdout_verboseEv	#
# core/object.cpp:2099: 		if (OS::get_singleton()->is_stdout_verbose()) {
	testb	%al, %al	# _73
	je	.L2855	#,
# core/object.cpp:2100: 			const ObjectID *K = NULL;
	movq	$0, -24(%rbp)	#, K
.L2876:
# core/object.cpp:2101: 			while ((K = instances.next(K))) {
	movq	-24(%rbp), %rax	# K, tmp164
	movq	%rax, %rsi	# tmp164,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm	#
.LEHE662:
	movq	%rax, -24(%rbp)	# _77, K
# core/object.cpp:2101: 			while ((K = instances.next(K))) {
	cmpq	$0, -24(%rbp)	#, K
	setne	%al	#, retval.427_79
	testb	%al, %al	# retval.427_79
	je	.L2855	#,
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	leaq	-776(%rbp), %rax	#, _255
	movq	%rax, -32(%rbp)	# _255, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-32(%rbp), %rax	# this, tmp165
	movq	$0, (%rax)	#, this_256->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# core/object.cpp:2104: 				if (instances[*K]->is_class("Node"))
	movq	-24(%rbp), %rax	# K, tmp166
	movq	%rax, %rsi	# tmp166,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
.LEHB663:
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
# core/object.cpp:2104: 				if (instances[*K]->is_class("Node"))
	movq	(%rax), %rbx	# *_9, _82
# core/object.cpp:2104: 				if (instances[*K]->is_class("Node"))
	movq	(%rbx), %rax	# _82->_vptr.Object, _10
	addq	$80, %rax	#, _11
	movq	(%rax), %r12	# *_11, _12
# core/object.cpp:2104: 				if (instances[*K]->is_class("Node"))
	leaq	-768(%rbp), %rax	#, tmp167
	movl	$.LC109, %esi	#,
	movq	%rax, %rdi	# tmp167,
	call	_ZN6StringC1EPKc	#
.LEHE663:
# core/object.cpp:2104: 				if (instances[*K]->is_class("Node"))
	leaq	-768(%rbp), %rax	#, tmp168
	movq	%rax, %rsi	# tmp168,
	movq	%rbx, %rdi	# _82,
.LEHB664:
	call	*%r12	# _12
.LEHE664:
	movl	%eax, %ebx	#, _85
	leaq	-768(%rbp), %rax	#, tmp169
	movq	%rax, %rdi	# tmp169,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2104: 				if (instances[*K]->is_class("Node"))
	testb	%bl, %bl	# _85
	je	.L2856	#,
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	movq	-24(%rbp), %rax	# K, tmp170
	movq	%rax, %rsi	# tmp170,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
.LEHB665:
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
.LEHE665:
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	movq	(%rax), %rbx	# *_13, _14
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -704(%rbp)	#, D.41247.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -672(%rbp)	#, D.41246.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -640(%rbp)	#, D.41245.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -608(%rbp)	#, D.41244.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -576(%rbp)	#, D.41243.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-552(%rbp), %rax	#, tmp171
	movl	$.LC110, %esi	#,
	movq	%rax, %rdi	# tmp171,
.LEHB666:
	call	_ZN10StringNameC1EPKc	#
.LEHE666:
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-736(%rbp), %rax	#, tmp172
	leaq	-640(%rbp), %r8	#, tmp173
	leaq	-608(%rbp), %rdi	#, tmp174
	leaq	-576(%rbp), %rcx	#, tmp175
	leaq	-552(%rbp), %rdx	#, tmp176
	leaq	-704(%rbp), %rsi	#, tmp177
	pushq	%rsi	# tmp177
	leaq	-672(%rbp), %rsi	#, tmp178
	pushq	%rsi	# tmp178
	movq	%r8, %r9	# tmp173,
	movq	%rdi, %r8	# tmp174,
	movq	%rbx, %rsi	# _14,
	movq	%rax, %rdi	# tmp172,
.LEHB667:
	.cfi_escape 0x2e,0x10
	call	_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_	#
.LEHE667:
	addq	$16, %rsp	#,
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-744(%rbp), %rax	#, tmp179
	leaq	-736(%rbp), %rdx	#, tmp180
	movq	%rdx, %rsi	# tmp180,
	movq	%rax, %rdi	# tmp179,
.LEHB668:
	.cfi_escape 0x2e,0
	call	_ZNK7Variantcv6StringEv	#
.LEHE668:
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-752(%rbp), %rax	#, tmp181
	leaq	-744(%rbp), %rdx	#, tmp182
	movl	$.LC111, %esi	#,
	movq	%rax, %rdi	# tmp181,
.LEHB669:
	call	_ZplPKcRK6String	#
.LEHE669:
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-760(%rbp), %rax	#, tmp183
	leaq	-752(%rbp), %rdx	#, tmp184
	leaq	-776(%rbp), %rcx	#, tmp185
	movq	%rcx, %rsi	# tmp185,
	movq	%rax, %rdi	# tmp183,
.LEHB670:
	call	_ZN6StringaSERKS_	#
.LEHE670:
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-760(%rbp), %rax	#, tmp186
	movq	%rax, %rdi	# tmp186,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-752(%rbp), %rax	#, tmp187
	movq	%rax, %rdi	# tmp187,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-744(%rbp), %rax	#, tmp188
	movq	%rax, %rdi	# tmp188,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-736(%rbp), %eax	# D.41248.type, _262
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _262
	je	.L2984	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-736(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN7Variant5clearEv	#
.L2984:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-552(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-576(%rbp), %eax	# D.41243.type, _261
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _261
	je	.L2985	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-576(%rbp), %rax	#, tmp191
	movq	%rax, %rdi	# tmp191,
	call	_ZN7Variant5clearEv	#
.L2985:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-608(%rbp), %eax	# D.41244.type, _260
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _260
	je	.L2986	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-608(%rbp), %rax	#, tmp192
	movq	%rax, %rdi	# tmp192,
	call	_ZN7Variant5clearEv	#
.L2986:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-640(%rbp), %eax	# D.41245.type, _259
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _259
	je	.L2987	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-640(%rbp), %rax	#, tmp193
	movq	%rax, %rdi	# tmp193,
	call	_ZN7Variant5clearEv	#
.L2987:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-672(%rbp), %eax	# D.41246.type, _258
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _258
	je	.L2988	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-672(%rbp), %rax	#, tmp194
	movq	%rax, %rdi	# tmp194,
	call	_ZN7Variant5clearEv	#
.L2988:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-704(%rbp), %eax	# D.41247.type, _257
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _257
	je	.L2989	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-704(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN7Variant5clearEv	#
.L2989:
# ./core/variant.h:423: 	}
	nop	
.L2856:
# core/object.cpp:2106: 				if (instances[*K]->is_class("Resource"))
	movq	-24(%rbp), %rax	# K, tmp196
	movq	%rax, %rsi	# tmp196,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
.LEHB671:
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
# core/object.cpp:2106: 				if (instances[*K]->is_class("Resource"))
	movq	(%rax), %rbx	# *_15, _124
# core/object.cpp:2106: 				if (instances[*K]->is_class("Resource"))
	movq	(%rbx), %rax	# _124->_vptr.Object, _16
	addq	$80, %rax	#, _17
	movq	(%rax), %r12	# *_17, _18
# core/object.cpp:2106: 				if (instances[*K]->is_class("Resource"))
	leaq	-544(%rbp), %rax	#, tmp197
	movl	$.LC112, %esi	#,
	movq	%rax, %rdi	# tmp197,
	call	_ZN6StringC1EPKc	#
.LEHE671:
# core/object.cpp:2106: 				if (instances[*K]->is_class("Resource"))
	leaq	-544(%rbp), %rax	#, tmp198
	movq	%rax, %rsi	# tmp198,
	movq	%rbx, %rdi	# _124,
.LEHB672:
	call	*%r12	# _18
.LEHE672:
	movl	%eax, %ebx	#, _127
	leaq	-544(%rbp), %rax	#, tmp199
	movq	%rax, %rdi	# tmp199,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2106: 				if (instances[*K]->is_class("Resource"))
	testb	%bl, %bl	# _127
	je	.L2863	#,
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	movq	-24(%rbp), %rax	# K, tmp200
	movq	%rax, %rsi	# tmp200,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
.LEHB673:
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
.LEHE673:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	movq	(%rax), %rbx	# *_19, _20
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -480(%rbp)	#, D.41269.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -448(%rbp)	#, D.41268.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -416(%rbp)	#, D.41267.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -384(%rbp)	#, D.41266.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -352(%rbp)	#, D.41265.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-328(%rbp), %rax	#, tmp201
	movl	$.LC113, %esi	#,
	movq	%rax, %rdi	# tmp201,
.LEHB674:
	call	_ZN10StringNameC1EPKc	#
.LEHE674:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-512(%rbp), %rax	#, tmp202
	leaq	-416(%rbp), %r8	#, tmp203
	leaq	-384(%rbp), %rdi	#, tmp204
	leaq	-352(%rbp), %rcx	#, tmp205
	leaq	-328(%rbp), %rdx	#, tmp206
	leaq	-480(%rbp), %rsi	#, tmp207
	pushq	%rsi	# tmp207
	leaq	-448(%rbp), %rsi	#, tmp208
	pushq	%rsi	# tmp208
	movq	%r8, %r9	# tmp203,
	movq	%rdi, %r8	# tmp204,
	movq	%rbx, %rsi	# _20,
	movq	%rax, %rdi	# tmp202,
.LEHB675:
	.cfi_escape 0x2e,0x10
	call	_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_	#
.LEHE675:
	addq	$16, %rsp	#,
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-520(%rbp), %rax	#, tmp209
	leaq	-512(%rbp), %rdx	#, tmp210
	movq	%rdx, %rsi	# tmp210,
	movq	%rax, %rdi	# tmp209,
.LEHB676:
	.cfi_escape 0x2e,0
	call	_ZNK7Variantcv6StringEv	#
.LEHE676:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-312(%rbp), %rax	#, tmp211
	movl	$.LC114, %esi	#,
	movq	%rax, %rdi	# tmp211,
.LEHB677:
	call	_ZN6StringC1EPKc	#
.LEHE677:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	movq	-24(%rbp), %rax	# K, tmp212
	movq	%rax, %rsi	# tmp212,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
.LEHB678:
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
.LEHE678:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	movq	(%rax), %rbx	# *_21, _22
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -256(%rbp)	#, D.41258.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -224(%rbp)	#, D.41257.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -192(%rbp)	#, D.41256.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -160(%rbp)	#, D.41255.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movl	$0, -128(%rbp)	#, D.41254.type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-96(%rbp), %rax	#, tmp213
	movl	$.LC110, %esi	#,
	movq	%rax, %rdi	# tmp213,
.LEHB679:
	call	_ZN10StringNameC1EPKc	#
.LEHE679:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-288(%rbp), %rax	#, tmp214
	leaq	-192(%rbp), %r8	#, tmp215
	leaq	-160(%rbp), %rdi	#, tmp216
	leaq	-128(%rbp), %rcx	#, tmp217
	leaq	-96(%rbp), %rdx	#, tmp218
	leaq	-256(%rbp), %rsi	#, tmp219
	pushq	%rsi	# tmp219
	leaq	-224(%rbp), %rsi	#, tmp220
	pushq	%rsi	# tmp220
	movq	%r8, %r9	# tmp215,
	movq	%rdi, %r8	# tmp216,
	movq	%rbx, %rsi	# _22,
	movq	%rax, %rdi	# tmp214,
.LEHB680:
	.cfi_escape 0x2e,0x10
	call	_ZN6Object4callERK10StringNameRK7VariantS5_S5_S5_S5_	#
.LEHE680:
	addq	$16, %rsp	#,
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-296(%rbp), %rax	#, tmp221
	leaq	-288(%rbp), %rdx	#, tmp222
	movq	%rdx, %rsi	# tmp222,
	movq	%rax, %rdi	# tmp221,
.LEHB681:
	.cfi_escape 0x2e,0
	call	_ZNK7Variantcv6StringEv	#
.LEHE681:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-304(%rbp), %rax	#, tmp223
	leaq	-296(%rbp), %rdx	#, tmp224
	movl	$.LC115, %esi	#,
	movq	%rax, %rdi	# tmp223,
.LEHB682:
	call	_ZplPKcRK6String	#
.LEHE682:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-320(%rbp), %rax	#, tmp225
	leaq	-312(%rbp), %rdx	#, tmp226
	leaq	-304(%rbp), %rcx	#, tmp227
	movq	%rcx, %rsi	# tmp227,
	movq	%rax, %rdi	# tmp225,
.LEHB683:
	call	_ZNK6StringplERKS_	#
.LEHE683:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-528(%rbp), %rax	#, tmp228
	leaq	-520(%rbp), %rdx	#, tmp229
	leaq	-320(%rbp), %rcx	#, tmp230
	movq	%rcx, %rsi	# tmp230,
	movq	%rax, %rdi	# tmp228,
.LEHB684:
	call	_ZNK6StringplERKS_	#
.LEHE684:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-536(%rbp), %rax	#, tmp231
	leaq	-528(%rbp), %rdx	#, tmp232
	leaq	-776(%rbp), %rcx	#, tmp233
	movq	%rcx, %rsi	# tmp233,
	movq	%rax, %rdi	# tmp231,
.LEHB685:
	call	_ZN6StringaSERKS_	#
.LEHE685:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-536(%rbp), %rax	#, tmp234
	movq	%rax, %rdi	# tmp234,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-528(%rbp), %rax	#, tmp235
	movq	%rax, %rdi	# tmp235,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-320(%rbp), %rax	#, tmp236
	movq	%rax, %rdi	# tmp236,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-304(%rbp), %rax	#, tmp237
	movq	%rax, %rdi	# tmp237,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-296(%rbp), %rax	#, tmp238
	movq	%rax, %rdi	# tmp238,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.41259.type, _274
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _274
	je	.L2990	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp239
	movq	%rax, %rdi	# tmp239,
	call	_ZN7Variant5clearEv	#
.L2990:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-96(%rbp), %rax	#, tmp240
	movq	%rax, %rdi	# tmp240,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.41254.type, _273
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _273
	je	.L2991	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp241
	movq	%rax, %rdi	# tmp241,
	call	_ZN7Variant5clearEv	#
.L2991:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.41255.type, _272
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _272
	je	.L2992	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp242
	movq	%rax, %rdi	# tmp242,
	call	_ZN7Variant5clearEv	#
.L2992:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.41256.type, _271
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _271
	je	.L2993	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp243
	movq	%rax, %rdi	# tmp243,
	call	_ZN7Variant5clearEv	#
.L2993:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# D.41257.type, _270
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _270
	je	.L2994	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp244
	movq	%rax, %rdi	# tmp244,
	call	_ZN7Variant5clearEv	#
.L2994:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-256(%rbp), %eax	# D.41258.type, _269
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _269
	je	.L2995	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-256(%rbp), %rax	#, tmp245
	movq	%rax, %rdi	# tmp245,
	call	_ZN7Variant5clearEv	#
.L2995:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-312(%rbp), %rax	#, tmp246
	movq	%rax, %rdi	# tmp246,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-520(%rbp), %rax	#, tmp247
	movq	%rax, %rdi	# tmp247,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-512(%rbp), %eax	# D.41270.type, _268
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _268
	je	.L2996	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-512(%rbp), %rax	#, tmp248
	movq	%rax, %rdi	# tmp248,
	call	_ZN7Variant5clearEv	#
.L2996:
# ./core/variant.h:423: 	}
	nop	
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-328(%rbp), %rax	#, tmp249
	movq	%rax, %rdi	# tmp249,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.41265.type, _267
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _267
	je	.L2997	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp250
	movq	%rax, %rdi	# tmp250,
	call	_ZN7Variant5clearEv	#
.L2997:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.41266.type, _266
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _266
	je	.L2998	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp251
	movq	%rax, %rdi	# tmp251,
	call	_ZN7Variant5clearEv	#
.L2998:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.41267.type, _265
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _265
	je	.L2999	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp252
	movq	%rax, %rdi	# tmp252,
	call	_ZN7Variant5clearEv	#
.L2999:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-448(%rbp), %eax	# D.41268.type, _264
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _264
	je	.L3000	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-448(%rbp), %rax	#, tmp253
	movq	%rax, %rdi	# tmp253,
	call	_ZN7Variant5clearEv	#
.L3000:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-480(%rbp), %eax	# D.41269.type, _263
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _263
	je	.L3001	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-480(%rbp), %rax	#, tmp254
	movq	%rax, %rdi	# tmp254,
	call	_ZN7Variant5clearEv	#
.L3001:
# ./core/variant.h:423: 	}
	nop	
.L2863:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	movq	-24(%rbp), %rax	# K, tmp255
	movq	(%rax), %rax	# *K_78, _23
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	movq	%rax, %rdx	# _23, _24
	leaq	-72(%rbp), %rax	#, tmp256
	movq	%rdx, %rsi	# _24,
	movq	%rax, %rdi	# tmp256,
.LEHB686:
	call	_Z4itosl	#
.LEHE686:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-56(%rbp), %rax	#, tmp257
	movl	$.LC32, %esi	#,
	movq	%rax, %rdi	# tmp257,
.LEHB687:
	call	_ZN6StringC1EPKc	#
.LEHE687:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	movq	-24(%rbp), %rax	# K, tmp258
	movq	%rax, %rsi	# tmp258,
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
.LEHB688:
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm	#
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	movq	(%rax), %rax	# *_25, _208
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	movq	(%rax), %rdx	# _208->_vptr.Object, _26
	addq	$64, %rdx	#, _27
	movq	(%rdx), %rcx	# *_27, _28
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-40(%rbp), %rdx	#, tmp259
	movq	%rax, %rsi	# _208,
	movq	%rdx, %rdi	# tmp259,
	call	*%rcx	# _28
.LEHE688:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-48(%rbp), %rax	#, tmp260
	leaq	-40(%rbp), %rdx	#, tmp261
	movl	$.LC116, %esi	#,
	movq	%rax, %rdi	# tmp260,
.LEHB689:
	call	_ZplPKcRK6String	#
.LEHE689:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-64(%rbp), %rax	#, tmp262
	leaq	-56(%rbp), %rdx	#, tmp263
	leaq	-48(%rbp), %rcx	#, tmp264
	movq	%rcx, %rsi	# tmp264,
	movq	%rax, %rdi	# tmp262,
.LEHB690:
	call	_ZNK6StringplERKS_	#
.LEHE690:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-80(%rbp), %rax	#, tmp265
	leaq	-72(%rbp), %rdx	#, tmp266
	leaq	-64(%rbp), %rcx	#, tmp267
	movq	%rcx, %rsi	# tmp267,
	movq	%rax, %rdi	# tmp265,
.LEHB691:
	call	_ZNK6StringplERKS_	#
.LEHE691:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-88(%rbp), %rax	#, tmp268
	leaq	-776(%rbp), %rdx	#, tmp269
	leaq	-80(%rbp), %rcx	#, tmp270
	movq	%rcx, %rsi	# tmp270,
	movq	%rax, %rdi	# tmp268,
.LEHB692:
	call	_ZNK6StringplERKS_	#
.LEHE692:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-88(%rbp), %rax	#, tmp271
	movq	%rax, %rdi	# tmp271,
.LEHB693:
	call	_Z10print_line6String	#
.LEHE693:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-88(%rbp), %rax	#, tmp272
	movq	%rax, %rdi	# tmp272,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-80(%rbp), %rax	#, tmp273
	movq	%rax, %rdi	# tmp273,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-64(%rbp), %rax	#, tmp274
	movq	%rax, %rdi	# tmp274,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-48(%rbp), %rax	#, tmp275
	movq	%rax, %rdi	# tmp275,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-40(%rbp), %rax	#, tmp276
	movq	%rax, %rdi	# tmp276,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-56(%rbp), %rax	#, tmp277
	movq	%rax, %rdi	# tmp277,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-72(%rbp), %rax	#, tmp278
	movq	%rax, %rdi	# tmp278,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2103: 				String node_name;
	leaq	-776(%rbp), %rax	#, tmp279
	movq	%rax, %rdi	# tmp279,
	call	_ZN6StringD1Ev	#
# core/object.cpp:2101: 			while ((K = instances.next(K))) {
	jmp	.L2876	#
.L2855:
# core/object.cpp:2112: 	instances.clear();
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
.LEHB694:
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv	#
# core/object.cpp:2113: 	instance_checks.clear();
	movl	$_ZN8ObjectDB15instance_checksE, %edi	#,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv	#
# core/object.cpp:2114: 	rw_lock->write_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.430_29
# core/object.cpp:2114: 	rw_lock->write_unlock();
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rdx	# rw_lock, rw_lock.432_31
	movq	(%rdx), %rdx	# rw_lock.432_31->_vptr.RWLock, _32
	addq	$32, %rdx	#, _33
	movq	(%rdx), %rdx	# *_33, _34
# core/object.cpp:2114: 	rw_lock->write_unlock();
	movq	%rax, %rdi	# rw_lock.430_29,
	call	*%rdx	# _34
# core/object.cpp:2115: 	memdelete(rw_lock);
	movq	_ZN8ObjectDB7rw_lockE(%rip), %rax	# rw_lock, rw_lock.433_35
	movq	%rax, %rdi	# rw_lock.433_35,
	call	_Z9memdeleteI6RWLockEvPT_	#
.LEHE694:
# core/object.cpp:2116: }
	jmp	.L2983	#
.L2923:
	movq	%rax, %rbx	#, tmp282
# core/object.cpp:2104: 				if (instances[*K]->is_class("Node"))
	leaq	-768(%rbp), %rax	#, tmp280
	movq	%rax, %rdi	# tmp280,
	call	_ZN6StringD1Ev	#
	jmp	.L2878	#
.L2928:
	movq	%rax, %rbx	#, tmp287
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-752(%rbp), %rax	#, tmp285
	movq	%rax, %rdi	# tmp285,
	call	_ZN6StringD1Ev	#
	jmp	.L2880	#
.L2927:
	movq	%rax, %rbx	#, tmp286
.L2880:
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-744(%rbp), %rax	#, tmp290
	movq	%rax, %rdi	# tmp290,
	call	_ZN6StringD1Ev	#
	jmp	.L2881	#
.L2926:
	movq	%rax, %rbx	#, tmp291
.L2881:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-736(%rbp), %eax	# D.41248.type, _275
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _275
	je	.L3002	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-736(%rbp), %rax	#, tmp293
	movq	%rax, %rdi	# tmp293,
	call	_ZN7Variant5clearEv	#
.L3002:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2883	#
.L2925:
	movq	%rax, %rbx	#, tmp294
.L2883:
# core/object.cpp:2105: 					node_name = " - Node name: " + String(instances[*K]->call("get_name"));
	leaq	-552(%rbp), %rax	#, tmp296
	movq	%rax, %rdi	# tmp296,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2884	#
.L2924:
	movq	%rax, %rbx	#, tmp297
.L2884:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-576(%rbp), %eax	# D.41243.type, _276
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _276
	je	.L3003	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-576(%rbp), %rax	#, tmp299
	movq	%rax, %rdi	# tmp299,
	call	_ZN7Variant5clearEv	#
.L3003:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-608(%rbp), %eax	# D.41244.type, _277
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _277
	je	.L3004	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-608(%rbp), %rax	#, tmp302
	movq	%rax, %rdi	# tmp302,
	call	_ZN7Variant5clearEv	#
.L3004:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-640(%rbp), %eax	# D.41245.type, _278
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _278
	je	.L3005	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-640(%rbp), %rax	#, tmp305
	movq	%rax, %rdi	# tmp305,
	call	_ZN7Variant5clearEv	#
.L3005:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-672(%rbp), %eax	# D.41246.type, _279
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _279
	je	.L3006	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-672(%rbp), %rax	#, tmp308
	movq	%rax, %rdi	# tmp308,
	call	_ZN7Variant5clearEv	#
.L3006:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-704(%rbp), %eax	# D.41247.type, _280
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _280
	je	.L3007	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-704(%rbp), %rax	#, tmp311
	movq	%rax, %rdi	# tmp311,
	call	_ZN7Variant5clearEv	#
.L3007:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2878	#
.L2929:
	movq	%rax, %rbx	#, tmp313
# core/object.cpp:2106: 				if (instances[*K]->is_class("Resource"))
	leaq	-544(%rbp), %rax	#, tmp312
	movq	%rax, %rdi	# tmp312,
	call	_ZN6StringD1Ev	#
	jmp	.L2878	#
.L2941:
	movq	%rax, %rbx	#, tmp317
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-528(%rbp), %rax	#, tmp315
	movq	%rax, %rdi	# tmp315,
	call	_ZN6StringD1Ev	#
	jmp	.L2892	#
.L2940:
	movq	%rax, %rbx	#, tmp316
.L2892:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-320(%rbp), %rax	#, tmp320
	movq	%rax, %rdi	# tmp320,
	call	_ZN6StringD1Ev	#
	jmp	.L2893	#
.L2939:
	movq	%rax, %rbx	#, tmp321
.L2893:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-304(%rbp), %rax	#, tmp323
	movq	%rax, %rdi	# tmp323,
	call	_ZN6StringD1Ev	#
	jmp	.L2894	#
.L2938:
	movq	%rax, %rbx	#, tmp324
.L2894:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-296(%rbp), %rax	#, tmp326
	movq	%rax, %rdi	# tmp326,
	call	_ZN6StringD1Ev	#
	jmp	.L2895	#
.L2937:
	movq	%rax, %rbx	#, tmp327
.L2895:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-288(%rbp), %eax	# D.41259.type, _281
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _281
	je	.L3008	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-288(%rbp), %rax	#, tmp329
	movq	%rax, %rdi	# tmp329,
	call	_ZN7Variant5clearEv	#
.L3008:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2897	#
.L2936:
	movq	%rax, %rbx	#, tmp330
.L2897:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-96(%rbp), %rax	#, tmp332
	movq	%rax, %rdi	# tmp332,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2898	#
.L2935:
	movq	%rax, %rbx	#, tmp333
.L2898:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-128(%rbp), %eax	# D.41254.type, _282
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _282
	je	.L3009	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-128(%rbp), %rax	#, tmp335
	movq	%rax, %rdi	# tmp335,
	call	_ZN7Variant5clearEv	#
.L3009:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-160(%rbp), %eax	# D.41255.type, _283
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _283
	je	.L3010	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-160(%rbp), %rax	#, tmp338
	movq	%rax, %rdi	# tmp338,
	call	_ZN7Variant5clearEv	#
.L3010:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.41256.type, _284
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _284
	je	.L3011	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp341
	movq	%rax, %rdi	# tmp341,
	call	_ZN7Variant5clearEv	#
.L3011:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# D.41257.type, _285
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _285
	je	.L3012	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp344
	movq	%rax, %rdi	# tmp344,
	call	_ZN7Variant5clearEv	#
.L3012:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-256(%rbp), %eax	# D.41258.type, _286
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _286
	je	.L3013	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-256(%rbp), %rax	#, tmp347
	movq	%rax, %rdi	# tmp347,
	call	_ZN7Variant5clearEv	#
.L3013:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2904	#
.L2934:
	movq	%rax, %rbx	#, tmp348
.L2904:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-312(%rbp), %rax	#, tmp350
	movq	%rax, %rdi	# tmp350,
	call	_ZN6StringD1Ev	#
	jmp	.L2905	#
.L2933:
	movq	%rax, %rbx	#, tmp351
.L2905:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-520(%rbp), %rax	#, tmp353
	movq	%rax, %rdi	# tmp353,
	call	_ZN6StringD1Ev	#
	jmp	.L2906	#
.L2932:
	movq	%rax, %rbx	#, tmp354
.L2906:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-512(%rbp), %eax	# D.41270.type, _287
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _287
	je	.L3014	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-512(%rbp), %rax	#, tmp356
	movq	%rax, %rdi	# tmp356,
	call	_ZN7Variant5clearEv	#
.L3014:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2908	#
.L2931:
	movq	%rax, %rbx	#, tmp357
.L2908:
# core/object.cpp:2107: 					node_name = " - Resource name: " + String(instances[*K]->call("get_name")) + " Path: " + String(instances[*K]->call("get_path"));
	leaq	-328(%rbp), %rax	#, tmp359
	movq	%rax, %rdi	# tmp359,
	call	_ZN10StringNameD1Ev	#
	jmp	.L2909	#
.L2930:
	movq	%rax, %rbx	#, tmp360
.L2909:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.41265.type, _288
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _288
	je	.L3015	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp362
	movq	%rax, %rdi	# tmp362,
	call	_ZN7Variant5clearEv	#
.L3015:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.41266.type, _289
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _289
	je	.L3016	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp365
	movq	%rax, %rdi	# tmp365,
	call	_ZN7Variant5clearEv	#
.L3016:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.41267.type, _290
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _290
	je	.L3017	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp368
	movq	%rax, %rdi	# tmp368,
	call	_ZN7Variant5clearEv	#
.L3017:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-448(%rbp), %eax	# D.41268.type, _291
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _291
	je	.L3018	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-448(%rbp), %rax	#, tmp371
	movq	%rax, %rdi	# tmp371,
	call	_ZN7Variant5clearEv	#
.L3018:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-480(%rbp), %eax	# D.41269.type, _292
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _292
	je	.L3019	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-480(%rbp), %rax	#, tmp374
	movq	%rax, %rdi	# tmp374,
	call	_ZN7Variant5clearEv	#
.L3019:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L2878	#
.L2948:
	movq	%rax, %rbx	#, tmp377
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-88(%rbp), %rax	#, tmp375
	movq	%rax, %rdi	# tmp375,
	call	_ZN6StringD1Ev	#
	jmp	.L2916	#
.L2947:
	movq	%rax, %rbx	#, tmp376
.L2916:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-80(%rbp), %rax	#, tmp380
	movq	%rax, %rdi	# tmp380,
	call	_ZN6StringD1Ev	#
	jmp	.L2917	#
.L2946:
	movq	%rax, %rbx	#, tmp381
.L2917:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-64(%rbp), %rax	#, tmp383
	movq	%rax, %rdi	# tmp383,
	call	_ZN6StringD1Ev	#
	jmp	.L2918	#
.L2945:
	movq	%rax, %rbx	#, tmp384
.L2918:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-48(%rbp), %rax	#, tmp386
	movq	%rax, %rdi	# tmp386,
	call	_ZN6StringD1Ev	#
	jmp	.L2919	#
.L2944:
	movq	%rax, %rbx	#, tmp387
.L2919:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-40(%rbp), %rax	#, tmp389
	movq	%rax, %rdi	# tmp389,
	call	_ZN6StringD1Ev	#
	jmp	.L2920	#
.L2943:
	movq	%rax, %rbx	#, tmp390
.L2920:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-56(%rbp), %rax	#, tmp392
	movq	%rax, %rdi	# tmp392,
	call	_ZN6StringD1Ev	#
	jmp	.L2921	#
.L2942:
	movq	%rax, %rbx	#, tmp393
.L2921:
# core/object.cpp:2108: 				print_line("Leaked instance: " + String(instances[*K]->get_class()) + ":" + itos(*K) + node_name);
	leaq	-72(%rbp), %rax	#, tmp395
	movq	%rax, %rdi	# tmp395,
	call	_ZN6StringD1Ev	#
	jmp	.L2878	#
.L2922:
	movq	%rax, %rbx	#, tmp281
.L2878:
# core/object.cpp:2103: 				String node_name;
	leaq	-776(%rbp), %rax	#, tmp396
	movq	%rax, %rdi	# tmp396,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp281, D.62096
	movq	%rax, %rdi	# D.62096,
.LEHB695:
	call	_Unwind_Resume	#
.LEHE695:
.L2983:
# core/object.cpp:2116: }
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2618:
	.section	.gcc_except_table
.LLSDA2618:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2618-.LLSDACSB2618
.LLSDACSB2618:
	.uleb128 .LEHB662-.LFB2618
	.uleb128 .LEHE662-.LEHB662
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB663-.LFB2618
	.uleb128 .LEHE663-.LEHB663
	.uleb128 .L2922-.LFB2618
	.uleb128 0
	.uleb128 .LEHB664-.LFB2618
	.uleb128 .LEHE664-.LEHB664
	.uleb128 .L2923-.LFB2618
	.uleb128 0
	.uleb128 .LEHB665-.LFB2618
	.uleb128 .LEHE665-.LEHB665
	.uleb128 .L2922-.LFB2618
	.uleb128 0
	.uleb128 .LEHB666-.LFB2618
	.uleb128 .LEHE666-.LEHB666
	.uleb128 .L2924-.LFB2618
	.uleb128 0
	.uleb128 .LEHB667-.LFB2618
	.uleb128 .LEHE667-.LEHB667
	.uleb128 .L2925-.LFB2618
	.uleb128 0
	.uleb128 .LEHB668-.LFB2618
	.uleb128 .LEHE668-.LEHB668
	.uleb128 .L2926-.LFB2618
	.uleb128 0
	.uleb128 .LEHB669-.LFB2618
	.uleb128 .LEHE669-.LEHB669
	.uleb128 .L2927-.LFB2618
	.uleb128 0
	.uleb128 .LEHB670-.LFB2618
	.uleb128 .LEHE670-.LEHB670
	.uleb128 .L2928-.LFB2618
	.uleb128 0
	.uleb128 .LEHB671-.LFB2618
	.uleb128 .LEHE671-.LEHB671
	.uleb128 .L2922-.LFB2618
	.uleb128 0
	.uleb128 .LEHB672-.LFB2618
	.uleb128 .LEHE672-.LEHB672
	.uleb128 .L2929-.LFB2618
	.uleb128 0
	.uleb128 .LEHB673-.LFB2618
	.uleb128 .LEHE673-.LEHB673
	.uleb128 .L2922-.LFB2618
	.uleb128 0
	.uleb128 .LEHB674-.LFB2618
	.uleb128 .LEHE674-.LEHB674
	.uleb128 .L2930-.LFB2618
	.uleb128 0
	.uleb128 .LEHB675-.LFB2618
	.uleb128 .LEHE675-.LEHB675
	.uleb128 .L2931-.LFB2618
	.uleb128 0
	.uleb128 .LEHB676-.LFB2618
	.uleb128 .LEHE676-.LEHB676
	.uleb128 .L2932-.LFB2618
	.uleb128 0
	.uleb128 .LEHB677-.LFB2618
	.uleb128 .LEHE677-.LEHB677
	.uleb128 .L2933-.LFB2618
	.uleb128 0
	.uleb128 .LEHB678-.LFB2618
	.uleb128 .LEHE678-.LEHB678
	.uleb128 .L2934-.LFB2618
	.uleb128 0
	.uleb128 .LEHB679-.LFB2618
	.uleb128 .LEHE679-.LEHB679
	.uleb128 .L2935-.LFB2618
	.uleb128 0
	.uleb128 .LEHB680-.LFB2618
	.uleb128 .LEHE680-.LEHB680
	.uleb128 .L2936-.LFB2618
	.uleb128 0
	.uleb128 .LEHB681-.LFB2618
	.uleb128 .LEHE681-.LEHB681
	.uleb128 .L2937-.LFB2618
	.uleb128 0
	.uleb128 .LEHB682-.LFB2618
	.uleb128 .LEHE682-.LEHB682
	.uleb128 .L2938-.LFB2618
	.uleb128 0
	.uleb128 .LEHB683-.LFB2618
	.uleb128 .LEHE683-.LEHB683
	.uleb128 .L2939-.LFB2618
	.uleb128 0
	.uleb128 .LEHB684-.LFB2618
	.uleb128 .LEHE684-.LEHB684
	.uleb128 .L2940-.LFB2618
	.uleb128 0
	.uleb128 .LEHB685-.LFB2618
	.uleb128 .LEHE685-.LEHB685
	.uleb128 .L2941-.LFB2618
	.uleb128 0
	.uleb128 .LEHB686-.LFB2618
	.uleb128 .LEHE686-.LEHB686
	.uleb128 .L2922-.LFB2618
	.uleb128 0
	.uleb128 .LEHB687-.LFB2618
	.uleb128 .LEHE687-.LEHB687
	.uleb128 .L2942-.LFB2618
	.uleb128 0
	.uleb128 .LEHB688-.LFB2618
	.uleb128 .LEHE688-.LEHB688
	.uleb128 .L2943-.LFB2618
	.uleb128 0
	.uleb128 .LEHB689-.LFB2618
	.uleb128 .LEHE689-.LEHB689
	.uleb128 .L2944-.LFB2618
	.uleb128 0
	.uleb128 .LEHB690-.LFB2618
	.uleb128 .LEHE690-.LEHB690
	.uleb128 .L2945-.LFB2618
	.uleb128 0
	.uleb128 .LEHB691-.LFB2618
	.uleb128 .LEHE691-.LEHB691
	.uleb128 .L2946-.LFB2618
	.uleb128 0
	.uleb128 .LEHB692-.LFB2618
	.uleb128 .LEHE692-.LEHB692
	.uleb128 .L2947-.LFB2618
	.uleb128 0
	.uleb128 .LEHB693-.LFB2618
	.uleb128 .LEHE693-.LEHB693
	.uleb128 .L2948-.LFB2618
	.uleb128 0
	.uleb128 .LEHB694-.LFB2618
	.uleb128 .LEHE694-.LEHB694
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB695-.LFB2618
	.uleb128 .LEHE695-.LEHB695
	.uleb128 0
	.uleb128 0
.LLSDACSE2618:
	.text
	.size	_ZN8ObjectDB7cleanupEv, .-_ZN8ObjectDB7cleanupEv
	.section	.text._ZN7CowDataIwE4_refERKS0_,"axG",@progbits,_ZN7CowDataIwE4_refERKS0_,comdat
	.align 2
	.weak	_ZN7CowDataIwE4_refERKS0_
	.type	_ZN7CowDataIwE4_refERKS0_, @function
_ZN7CowDataIwE4_refERKS0_:
.LFB2653:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_from, p_from
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	movq	-40(%rbp), %rax	# this, tmp95
	movq	(%rax), %rdx	# this_10(D)->_ptr, _1
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	movq	-48(%rbp), %rax	# p_from, tmp96
	movq	(%rax), %rax	# p_from_11(D)->_ptr, _2
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	cmpq	%rax, %rdx	# _2, _1
	je	.L3030	#,
# ./core/cowdata.h:349: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp97
	movq	(%rax), %rdx	# this_10(D)->_ptr, _3
# ./core/cowdata.h:349: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp98
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp98,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:350: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp99
	movq	$0, (%rax)	#, this_10(D)->_ptr
# ./core/cowdata.h:352: 	if (!p_from._ptr)
	movq	-48(%rbp), %rax	# p_from, tmp100
	movq	(%rax), %rax	# p_from_11(D)->_ptr, _4
# ./core/cowdata.h:352: 	if (!p_from._ptr)
	testq	%rax, %rax	# _4
	je	.L3031	#,
	movq	-48(%rbp), %rax	# p_from, tmp101
	movq	%rax, -24(%rbp)	# tmp101, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_24->_ptr, _25
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _25
	jne	.L3024	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.55345
	jmp	.L3025	#
.L3024:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-24(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_24->_ptr, _27
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.55345
.L3025:
	movq	%rax, -8(%rbp)	# D.55345, pw
.L3029:
# ./core/safe_refcount.h:107: 		T tmp = static_cast<T const volatile &>(*pw);
	movq	-8(%rbp), %rax	# pw, tmp104
	movl	(%rax), %eax	# MEM[(const unsigned int &)pw_16], tmp105
	movl	%eax, -12(%rbp)	# tmp105, tmp
# ./core/safe_refcount.h:108: 		if (tmp == 0)
	cmpl	$0, -12(%rbp)	#, tmp
	jne	.L3026	#,
# ./core/safe_refcount.h:109: 			return 0; // if zero, can't add to it anymore
	movl	$0, %eax	#, D.55340
	jmp	.L3027	#
.L3026:
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	movl	-12(%rbp), %eax	# tmp, tmp106
	leal	1(%rax), %ecx	#, _19
	movq	-8(%rbp), %rdx	# pw, tmp107
	movl	-12(%rbp), %eax	# tmp, tmp108
	lock cmpxchgl	%ecx, (%rdx)	#, _19,
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	cmpl	%eax, -12(%rbp)	# _20, tmp
	sete	%al	#, retval.8_21
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	testb	%al, %al	# retval.8_21
	je	.L3029	#,
# ./core/safe_refcount.h:111: 			return tmp + 1;
	movl	-12(%rbp), %eax	# tmp, tmp110
	addl	$1, %eax	#, D.55340
.L3027:
# ./core/cowdata.h:355: 	if (atomic_conditional_increment(p_from._get_refcount()) > 0) { // could reference
	testl	%eax, %eax	# D.55340
	setne	%al	#, retval.6_14
# ./core/cowdata.h:355: 	if (atomic_conditional_increment(p_from._get_refcount()) > 0) { // could reference
	testb	%al, %al	# retval.6_14
	je	.L3020	#,
# ./core/cowdata.h:356: 		_ptr = p_from._ptr;
	movq	-48(%rbp), %rax	# p_from, tmp111
	movq	(%rax), %rdx	# p_from_11(D)->_ptr, _7
# ./core/cowdata.h:356: 		_ptr = p_from._ptr;
	movq	-40(%rbp), %rax	# this, tmp112
	movq	%rdx, (%rax)	# _7, this_10(D)->_ptr
	jmp	.L3020	#
.L3030:
# ./core/cowdata.h:347: 		return; // self assign, do nothing.
	nop	
	jmp	.L3020	#
.L3031:
# ./core/cowdata.h:353: 		return; //nothing to do
	nop	
.L3020:
# ./core/cowdata.h:358: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2653:
	.size	_ZN7CowDataIwE4_refERKS0_, .-_ZN7CowDataIwE4_refERKS0_
	.section	.rodata
	.align 8
.LC117:
	.string	"Condition ' _data->size_cache ' is true."
.LC118:
	.string	"./core/list.h"
.LC119:
	.string	"~List"
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorED5Ev,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev:
.LFB2669:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2669
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:711: 		clear();
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv	#
# ./core/list.h:712: 		if (_data) {
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11(D)->_data, _1
# ./core/list.h:712: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3036	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_11(D)->_data, _2
	movl	16(%rax), %eax	# _2->size_cache, _3
	testl	%eax, %eax	# _3
	setne	%al	#, _4
	movzbl	%al, %eax	# _4, _5
	testq	%rax, %rax	# _6
	je	.L3034	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movl	$0, %r8d	#,
	movl	$.LC117, %ecx	#,
	movl	$714, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC119, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/list.h:717: 	};
	jmp	.L3037	#
.L3034:
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:715: 			memdelete_allocator<_Data, A>(_data);
	movq	-8(%rbp), %rax	# this, tmp92
	movq	(%rax), %rax	# this_11(D)->_data, _7
	movq	%rax, %rdi	# _7,
	call	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_	#
.L3036:
# ./core/list.h:717: 	};
	nop	
.L3037:
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2669:
	.section	.gcc_except_table
.LLSDA2669:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2669-.LLSDACSB2669
.LLSDACSB2669:
.LLSDACSE2669:
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorED5Ev,comdat
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev, .-_ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev
	.set	_ZN4ListI12PropertyInfo16DefaultAllocatorED1Ev,_ZN4ListI12PropertyInfo16DefaultAllocatorED2Ev
	.section	.text._ZN4ListI6String16DefaultAllocatorE9push_backERKS0_,"axG",@progbits,_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_,comdat
	.align 2
	.weak	_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_
	.type	_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_, @function
_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_:
.LFB2677:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# value, value
# ./core/list.h:219: 		if (!_data) {
	movq	-88(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_26(D)->_data, _1
# ./core/list.h:219: 		if (!_data) {
	testq	%rax, %rax	# _1
	jne	.L3039	#,
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$24, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -16(%rbp)	# _2, p_obj
	movq	-16(%rbp), %rax	# p_obj, tmp110
	movq	%rax, -24(%rbp)	# tmp110, D.55407
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-16(%rbp), %rdx	# p_obj, D.55408
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movq	-88(%rbp), %rax	# this, tmp111
	movq	%rdx, (%rax)	# D.55408, this_26(D)->_data
# ./core/list.h:222: 			_data->first = NULL;
	movq	-88(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_26(D)->_data, _4
	movq	$0, (%rax)	#, _4->first
# ./core/list.h:223: 			_data->last = NULL;
	movq	-88(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_26(D)->_data, _5
	movq	$0, 8(%rax)	#, _5->last
# ./core/list.h:224: 			_data->size_cache = 0;
	movq	-88(%rbp), %rax	# this, tmp114
	movq	(%rax), %rax	# this_26(D)->_data, _6
	movl	$0, 16(%rax)	#, _6->size_cache
.L3039:
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$32, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -48(%rbp)	# _34, this
# ./core/list.h:141: 		_FORCE_INLINE_ Element() {
	movq	-48(%rbp), %rdx	# this, _56
	movq	%rdx, -56(%rbp)	# _56, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-56(%rbp), %rdx	# this, _58
	movq	%rdx, -64(%rbp)	# _58, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-64(%rbp), %rdx	# this, tmp115
	movq	$0, (%rdx)	#, this_59->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/list.h:142: 			next_ptr = 0;
	movq	-48(%rbp), %rdx	# this, tmp116
	movq	$0, 8(%rdx)	#, this_55->next_ptr
# ./core/list.h:143: 			prev_ptr = 0;
	movq	-48(%rbp), %rdx	# this, tmp117
	movq	$0, 16(%rdx)	#, this_55->prev_ptr
# ./core/list.h:144: 			data = NULL;
	movq	-48(%rbp), %rdx	# this, tmp118
	movq	$0, 24(%rdx)	#, this_55->data
# ./core/list.h:145: 		};
	nop	
	movq	%rax, -32(%rbp)	# _34, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp119
	movq	%rax, -40(%rbp)	# tmp119, D.55412
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.55413
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movq	%rax, -8(%rbp)	# D.55413, n
# ./core/list.h:228: 		n->value = (T &)value;
	movq	-8(%rbp), %rcx	# n, _7
	leaq	-72(%rbp), %rax	#, tmp120
	movq	-96(%rbp), %rdx	# value, tmp121
	movq	%rcx, %rsi	# _7,
	movq	%rax, %rdi	# tmp120,
	call	_ZN6StringaSERKS_	#
	leaq	-72(%rbp), %rax	#, tmp122
	movq	%rax, %rdi	# tmp122,
	call	_ZN6StringD1Ev	#
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-88(%rbp), %rax	# this, tmp123
	movq	(%rax), %rax	# this_26(D)->_data, _8
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	8(%rax), %rdx	# _8->last, _9
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-8(%rbp), %rax	# n, tmp124
	movq	%rdx, 16(%rax)	# _9, n_36->prev_ptr
# ./core/list.h:231: 		n->next_ptr = 0;
	movq	-8(%rbp), %rax	# n, tmp125
	movq	$0, 8(%rax)	#, n_36->next_ptr
# ./core/list.h:232: 		n->data = _data;
	movq	-88(%rbp), %rax	# this, tmp126
	movq	(%rax), %rdx	# this_26(D)->_data, _10
# ./core/list.h:232: 		n->data = _data;
	movq	-8(%rbp), %rax	# n, tmp127
	movq	%rdx, 24(%rax)	# _10, n_36->data
# ./core/list.h:234: 		if (_data->last) {
	movq	-88(%rbp), %rax	# this, tmp128
	movq	(%rax), %rax	# this_26(D)->_data, _11
# ./core/list.h:234: 		if (_data->last) {
	movq	8(%rax), %rax	# _11->last, _12
# ./core/list.h:234: 		if (_data->last) {
	testq	%rax, %rax	# _12
	je	.L3042	#,
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-88(%rbp), %rax	# this, tmp129
	movq	(%rax), %rax	# this_26(D)->_data, _13
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	8(%rax), %rax	# _13->last, _14
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-8(%rbp), %rdx	# n, tmp130
	movq	%rdx, 8(%rax)	# tmp130, _14->next_ptr
.L3042:
# ./core/list.h:239: 		_data->last = n;
	movq	-88(%rbp), %rax	# this, tmp131
	movq	(%rax), %rax	# this_26(D)->_data, _15
	movq	-8(%rbp), %rdx	# n, tmp132
	movq	%rdx, 8(%rax)	# tmp132, _15->last
# ./core/list.h:241: 		if (!_data->first)
	movq	-88(%rbp), %rax	# this, tmp133
	movq	(%rax), %rax	# this_26(D)->_data, _16
# ./core/list.h:241: 		if (!_data->first)
	movq	(%rax), %rax	# _16->first, _17
# ./core/list.h:241: 		if (!_data->first)
	testq	%rax, %rax	# _17
	jne	.L3043	#,
# ./core/list.h:242: 			_data->first = n;
	movq	-88(%rbp), %rax	# this, tmp134
	movq	(%rax), %rax	# this_26(D)->_data, _18
	movq	-8(%rbp), %rdx	# n, tmp135
	movq	%rdx, (%rax)	# tmp135, _18->first
.L3043:
# ./core/list.h:244: 		_data->size_cache++;
	movq	-88(%rbp), %rax	# this, tmp136
	movq	(%rax), %rax	# this_26(D)->_data, _19
# ./core/list.h:244: 		_data->size_cache++;
	movl	16(%rax), %edx	# _19->size_cache, _20
# ./core/list.h:244: 		_data->size_cache++;
	addl	$1, %edx	#, _21
	movl	%edx, 16(%rax)	# _21, _19->size_cache
# ./core/list.h:246: 		return n;
	movq	-8(%rbp), %rax	# n, _48
# ./core/list.h:247: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2677:
	.size	_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_, .-_ZN4ListI6String16DefaultAllocatorE9push_backERKS0_
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_:
.LFB2690:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# value, value
# ./core/list.h:219: 		if (!_data) {
	movq	-72(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_26(D)->_data, _1
# ./core/list.h:219: 		if (!_data) {
	testq	%rax, %rax	# _1
	jne	.L3046	#,
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$24, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -32(%rbp)	# _2, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp109
	movq	%rax, -40(%rbp)	# tmp109, D.55422
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rdx	# p_obj, D.55423
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movq	-72(%rbp), %rax	# this, tmp110
	movq	%rdx, (%rax)	# D.55423, this_26(D)->_data
# ./core/list.h:222: 			_data->first = NULL;
	movq	-72(%rbp), %rax	# this, tmp111
	movq	(%rax), %rax	# this_26(D)->_data, _4
	movq	$0, (%rax)	#, _4->first
# ./core/list.h:223: 			_data->last = NULL;
	movq	-72(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_26(D)->_data, _5
	movq	$0, 8(%rax)	#, _5->last
# ./core/list.h:224: 			_data->size_cache = 0;
	movq	-72(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_26(D)->_data, _6
	movl	$0, 16(%rax)	#, _6->size_cache
.L3046:
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$72, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, %rbx	#, _34
	movq	%rbx, -64(%rbp)	# _34, this
# ./core/list.h:141: 		_FORCE_INLINE_ Element() {
	movq	-64(%rbp), %rax	# this, _54
	movq	%rax, %rdi	# _54,
	call	_ZN12PropertyInfoC1Ev	#
# ./core/list.h:142: 			next_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp114
	movq	$0, 48(%rax)	#, this_53->next_ptr
# ./core/list.h:143: 			prev_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp115
	movq	$0, 56(%rax)	#, this_53->prev_ptr
# ./core/list.h:144: 			data = NULL;
	movq	-64(%rbp), %rax	# this, tmp116
	movq	$0, 64(%rax)	#, this_53->data
# ./core/list.h:145: 		};
	nop	
	movq	%rbx, -48(%rbp)	# _34, p_obj
	movq	-48(%rbp), %rax	# p_obj, tmp117
	movq	%rax, -56(%rbp)	# tmp117, D.55427
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-48(%rbp), %rax	# p_obj, D.55428
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movq	%rax, -24(%rbp)	# D.55428, n
# ./core/list.h:228: 		n->value = (T &)value;
	movq	-24(%rbp), %rax	# n, _7
	movq	-80(%rbp), %rdx	# value, tmp118
	movq	%rdx, %rsi	# tmp118,
	movq	%rax, %rdi	# _7,
	call	_ZN12PropertyInfoaSERKS_	#
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-72(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_26(D)->_data, _8
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	8(%rax), %rdx	# _8->last, _9
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-24(%rbp), %rax	# n, tmp120
	movq	%rdx, 56(%rax)	# _9, n_36->prev_ptr
# ./core/list.h:231: 		n->next_ptr = 0;
	movq	-24(%rbp), %rax	# n, tmp121
	movq	$0, 48(%rax)	#, n_36->next_ptr
# ./core/list.h:232: 		n->data = _data;
	movq	-72(%rbp), %rax	# this, tmp122
	movq	(%rax), %rdx	# this_26(D)->_data, _10
# ./core/list.h:232: 		n->data = _data;
	movq	-24(%rbp), %rax	# n, tmp123
	movq	%rdx, 64(%rax)	# _10, n_36->data
# ./core/list.h:234: 		if (_data->last) {
	movq	-72(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_26(D)->_data, _11
# ./core/list.h:234: 		if (_data->last) {
	movq	8(%rax), %rax	# _11->last, _12
# ./core/list.h:234: 		if (_data->last) {
	testq	%rax, %rax	# _12
	je	.L3049	#,
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-72(%rbp), %rax	# this, tmp125
	movq	(%rax), %rax	# this_26(D)->_data, _13
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	8(%rax), %rax	# _13->last, _14
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-24(%rbp), %rdx	# n, tmp126
	movq	%rdx, 48(%rax)	# tmp126, _14->next_ptr
.L3049:
# ./core/list.h:239: 		_data->last = n;
	movq	-72(%rbp), %rax	# this, tmp127
	movq	(%rax), %rax	# this_26(D)->_data, _15
	movq	-24(%rbp), %rdx	# n, tmp128
	movq	%rdx, 8(%rax)	# tmp128, _15->last
# ./core/list.h:241: 		if (!_data->first)
	movq	-72(%rbp), %rax	# this, tmp129
	movq	(%rax), %rax	# this_26(D)->_data, _16
# ./core/list.h:241: 		if (!_data->first)
	movq	(%rax), %rax	# _16->first, _17
# ./core/list.h:241: 		if (!_data->first)
	testq	%rax, %rax	# _17
	jne	.L3050	#,
# ./core/list.h:242: 			_data->first = n;
	movq	-72(%rbp), %rax	# this, tmp130
	movq	(%rax), %rax	# this_26(D)->_data, _18
	movq	-24(%rbp), %rdx	# n, tmp131
	movq	%rdx, (%rax)	# tmp131, _18->first
.L3050:
# ./core/list.h:244: 		_data->size_cache++;
	movq	-72(%rbp), %rax	# this, tmp132
	movq	(%rax), %rax	# this_26(D)->_data, _19
# ./core/list.h:244: 		_data->size_cache++;
	movl	16(%rax), %edx	# _19->size_cache, _20
# ./core/list.h:244: 		_data->size_cache++;
	addl	$1, %edx	#, _21
	movl	%edx, 16(%rax)	# _21, _19->size_cache
# ./core/list.h:246: 		return n;
	movq	-24(%rbp), %rax	# n, _46
# ./core/list.h:247: 	};
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2690:
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_, .-_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_
	.section	.text._ZN3RefI8ResourceEC2Ev,"axG",@progbits,_ZN3RefI8ResourceEC5Ev,comdat
	.align 2
	.weak	_ZN3RefI8ResourceEC2Ev
	.type	_ZN3RefI8ResourceEC2Ev, @function
_ZN3RefI8ResourceEC2Ev:
.LFB2717:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:293: 		reference = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->reference
# ./core/reference.h:294: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2717:
	.size	_ZN3RefI8ResourceEC2Ev, .-_ZN3RefI8ResourceEC2Ev
	.weak	_ZN3RefI8ResourceEC1Ev
	.set	_ZN3RefI8ResourceEC1Ev,_ZN3RefI8ResourceEC2Ev
	.section	.text._ZN3RefI8ResourceED2Ev,"axG",@progbits,_ZN3RefI8ResourceED5Ev,comdat
	.align 2
	.weak	_ZN3RefI8ResourceED2Ev
	.type	_ZN3RefI8ResourceED2Ev, @function
_ZN3RefI8ResourceED2Ev:
.LFB2720:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2720
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:298: 		unref();
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN3RefI8ResourceE5unrefEv	#
# ./core/reference.h:299: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2720:
	.section	.gcc_except_table
.LLSDA2720:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2720-.LLSDACSB2720
.LLSDACSB2720:
.LLSDACSE2720:
	.section	.text._ZN3RefI8ResourceED2Ev,"axG",@progbits,_ZN3RefI8ResourceED5Ev,comdat
	.size	_ZN3RefI8ResourceED2Ev, .-_ZN3RefI8ResourceED2Ev
	.weak	_ZN3RefI8ResourceED1Ev
	.set	_ZN3RefI8ResourceED1Ev,_ZN3RefI8ResourceED2Ev
	.section	.text._ZN3RefI6ScriptED2Ev,"axG",@progbits,_ZN3RefI6ScriptED5Ev,comdat
	.align 2
	.weak	_ZN3RefI6ScriptED2Ev
	.type	_ZN3RefI6ScriptED2Ev, @function
_ZN3RefI6ScriptED2Ev:
.LFB2735:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2735
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:298: 		unref();
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN3RefI6ScriptE5unrefEv	#
# ./core/reference.h:299: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2735:
	.section	.gcc_except_table
.LLSDA2735:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2735-.LLSDACSB2735
.LLSDACSB2735:
.LLSDACSE2735:
	.section	.text._ZN3RefI6ScriptED2Ev,"axG",@progbits,_ZN3RefI6ScriptED5Ev,comdat
	.size	_ZN3RefI6ScriptED2Ev, .-_ZN3RefI6ScriptED2Ev
	.weak	_ZN3RefI6ScriptED1Ev
	.set	_ZN3RefI6ScriptED1Ev,_ZN3RefI6ScriptED2Ev
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorEC2Ev,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorEC5Ev,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorEC2Ev
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorEC2Ev, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorEC2Ev:
.LFB2764:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:708: 		_data = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->_data
# ./core/list.h:709: 	};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2764:
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorEC2Ev, .-_ZN4ListI12PropertyInfo16DefaultAllocatorEC2Ev
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev
	.set	_ZN4ListI12PropertyInfo16DefaultAllocatorEC1Ev,_ZN4ListI12PropertyInfo16DefaultAllocatorEC2Ev
	.section	.rodata
	.align 8
.LC120:
	.string	"Condition ' err ' is true. returned: true"
.LC121:
	.string	"push_back"
	.section	.text._ZN6VectorI7VariantE9push_backERKS0_,"axG",@progbits,_ZN6VectorI7VariantE9push_backERKS0_,comdat
	.align 2
	.weak	_ZN6VectorI7VariantE9push_backERKS0_
	.type	_ZN6VectorI7VariantE9push_backERKS0_, @function
_ZN6VectorI7VariantE9push_backERKS0_:
.LFB2766:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$192, %rsp	#,
	movq	%rdi, -184(%rbp)	# this, this
	movq	%rsi, -192(%rbp)	# p_elem, p_elem
	movq	-184(%rbp), %rax	# this, tmp129
	movq	%rax, -16(%rbp)	# tmp129, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-16(%rbp), %rax	# this, tmp130
	addq	$8, %rax	#, _23
	movq	%rax, -24(%rbp)	# _23, this
	movq	-24(%rbp), %rax	# this, tmp131
	movq	%rax, -32(%rbp)	# tmp131, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-32(%rbp), %rax	# this, tmp132
	movq	(%rax), %rax	# this_25->_ptr, _26
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _26
	jne	.L3057	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _27
	jmp	.L3058	#
.L3057:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-32(%rbp), %rax	# this, tmp133
	movq	(%rax), %rax	# this_25->_ptr, _28
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _27
.L3058:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -40(%rbp)	# _27, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -40(%rbp)	#, size
	je	.L3059	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-40(%rbp), %rax	# size, tmp134
	movl	(%rax), %eax	# *size_32, _33
	jmp	.L3060	#
.L3059:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.59418
.L3060:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/vector.h:152: 	Error err = resize(size() + 1);
	leal	1(%rax), %edx	#, _2
	movq	-184(%rbp), %rax	# this, tmp135
	movl	%edx, %esi	# _2,
	movq	%rax, %rdi	# tmp135,
	call	_ZN6VectorI7VariantE6resizeEi	#
	movl	%eax, -4(%rbp)	# _14, err
# ./core/vector.h:153: 	ERR_FAIL_COND_V(err, true);
	cmpl	$0, -4(%rbp)	#, err
	setne	%al	#, _3
	movzbl	%al, %eax	# _3, _4
	testq	%rax, %rax	# _5
	je	.L3062	#,
# ./core/vector.h:153: 	ERR_FAIL_COND_V(err, true);
	movl	$0, %r8d	#,
	movl	$.LC120, %ecx	#,
	movl	$153, %edx	#,
	movl	$.LC47, %esi	#,
	movl	$.LC121, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$1, %eax	#, _8
	jmp	.L3063	#
.L3062:
# ./core/vector.h:153: 	ERR_FAIL_COND_V(err, true);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-184(%rbp), %rax	# this, tmp136
	movq	%rax, -152(%rbp)	# tmp136, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-152(%rbp), %rax	# this, tmp137
	addq	$8, %rax	#, _103
	movq	%rax, -160(%rbp)	# _103, this
	movq	-160(%rbp), %rax	# this, tmp138
	movq	%rax, -168(%rbp)	# tmp138, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp139
	movq	(%rax), %rax	# this_105->_ptr, _106
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _106
	jne	.L3064	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _107
	jmp	.L3065	#
.L3064:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp140
	movq	(%rax), %rax	# this_105->_ptr, _108
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _107
.L3065:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -176(%rbp)	# _107, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -176(%rbp)	#, size
	je	.L3066	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-176(%rbp), %rax	# size, tmp141
	movl	(%rax), %eax	# *size_112, _113
	jmp	.L3067	#
.L3066:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.59464
.L3067:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/vector.h:154: 	set(size() - 1, p_elem);
	leal	-1(%rax), %edx	#, _7
	movq	-184(%rbp), %rax	# this, tmp142
	movq	%rax, -48(%rbp)	# tmp142, this
	movl	%edx, -52(%rbp)	# _7, p_index
	movq	-192(%rbp), %rax	# p_elem, tmp143
	movq	%rax, -64(%rbp)	# tmp143, p_elem
# ./core/vector.h:82: 	_FORCE_INLINE_ void set(int p_index, const T &p_elem) { _cowdata.set(p_index, p_elem); }
	movq	-48(%rbp), %rax	# this, tmp144
	addq	$8, %rax	#, _43
	movq	%rax, -72(%rbp)	# _43, this
	movl	-52(%rbp), %eax	# p_index, tmp145
	movl	%eax, -76(%rbp)	# tmp145, p_index
	movq	-64(%rbp), %rax	# p_elem, tmp146
	movq	%rax, -88(%rbp)	# tmp146, p_elem
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	movl	-76(%rbp), %eax	# p_index, tmp148
	shrl	$31, %eax	#, tmp147
	movzbl	%al, %eax	# _47, _48
	testq	%rax, %rax	# _49
	jne	.L3069	#,
	movq	-72(%rbp), %rax	# this, tmp149
	movq	%rax, -96(%rbp)	# tmp149, this
	movq	-96(%rbp), %rax	# this, tmp150
	movq	%rax, -104(%rbp)	# tmp150, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-104(%rbp), %rax	# this, tmp151
	movq	(%rax), %rax	# this_51->_ptr, _52
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _52
	jne	.L3070	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _53
	jmp	.L3071	#
.L3070:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-104(%rbp), %rax	# this, tmp152
	movq	(%rax), %rax	# this_51->_ptr, _54
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _53
.L3071:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -112(%rbp)	# _53, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -112(%rbp)	#, size
	je	.L3072	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-112(%rbp), %rax	# size, tmp153
	movl	(%rax), %eax	# *size_58, _59
	jmp	.L3073	#
.L3072:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _60
.L3073:
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -76(%rbp)	# _60, p_index
	setge	%al	#, _66
	movzbl	%al, %eax	# _66, _67
	testq	%rax, %rax	# _68
	je	.L3074	#,
.L3069:
	movl	$1, %eax	#, iftmp.41_69
	jmp	.L3075	#
.L3074:
	movl	$0, %eax	#, iftmp.41_69
.L3075:
	movzbl	%al, %eax	# iftmp.41_69, _72
	testq	%rax, %rax	# _72
	setne	%al	#, retval.40_73
	testb	%al, %al	# retval.40_73
	je	.L3076	#,
	movq	-72(%rbp), %rax	# this, tmp154
	movq	%rax, -120(%rbp)	# tmp154, this
	movq	-120(%rbp), %rax	# this, tmp155
	movq	%rax, -128(%rbp)	# tmp155, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp156
	movq	(%rax), %rax	# this_75->_ptr, _76
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _76
	jne	.L3077	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _77
	jmp	.L3078	#
.L3077:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp157
	movq	(%rax), %rax	# this_75->_ptr, _78
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _77
.L3078:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _77, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L3079	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp158
	movl	(%rax), %eax	# *size_82, _83
	jmp	.L3080	#
.L3079:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _84
.L3080:
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _84, _90
	movl	-76(%rbp), %eax	# p_index, tmp159
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _90,
	movq	%rax, %rcx	# _91,
	movl	$137, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC66, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L3076:
# ./core/cowdata.h:138: 		_copy_on_write();
	movq	-72(%rbp), %rax	# this, tmp160
	movq	%rax, %rdi	# tmp160,
	call	_ZN7CowDataI7VariantE14_copy_on_writeEv	#
	movq	-72(%rbp), %rax	# this, tmp161
	movq	%rax, -144(%rbp)	# tmp161, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp162
	movq	(%rax), %rax	# this_92->_ptr, _93
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _93
	jne	.L3081	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _94
	jmp	.L3082	#
.L3081:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-144(%rbp), %rax	# this, tmp163
	movq	(%rax), %rcx	# this_92->_ptr, _94
.L3082:
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	movl	-76(%rbp), %eax	# p_index, tmp164
	movslq	%eax, %rdx	# tmp164, _99
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	movq	%rdx, %rax	# _99, tmp165
	addq	%rax, %rax	# tmp165
	addq	%rdx, %rax	# _99, tmp165
	salq	$3, %rax	#, tmp166
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	leaq	(%rcx,%rax), %rdx	#, _101
	movq	-88(%rbp), %rax	# p_elem, tmp167
	movq	%rax, %rsi	# tmp167,
	movq	%rdx, %rdi	# _101,
	call	_ZN7VariantaSERKS_	#
# ./core/cowdata.h:140: 	}
	nop	
# ./core/vector.h:82: 	_FORCE_INLINE_ void set(int p_index, const T &p_elem) { _cowdata.set(p_index, p_elem); }
	nop	
# ./core/vector.h:156: 	return false;
	movl	$0, %eax	#, _8
.L3063:
# ./core/vector.h:157: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2766:
	.size	_ZN6VectorI7VariantE9push_backERKS0_, .-_ZN6VectorI7VariantE9push_backERKS0_
	.section	.text._ZN6VectorI7VariantEaSERKS1_,"axG",@progbits,_ZN6VectorI7VariantEaSERKS1_,comdat
	.align 2
	.weak	_ZN6VectorI7VariantEaSERKS1_
	.type	_ZN6VectorI7VariantEaSERKS1_, @function
_ZN6VectorI7VariantEaSERKS1_:
.LFB2770:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_from, p_from
# ./core/vector.h:122: 		_cowdata._ref(p_from._cowdata);
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$8, %rax	#, _1
# ./core/vector.h:122: 		_cowdata._ref(p_from._cowdata);
	movq	-16(%rbp), %rdx	# p_from, tmp87
	addq	$8, %rdx	#, _2
# ./core/vector.h:122: 		_cowdata._ref(p_from._cowdata);
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# _1,
	call	_ZN7CowDataI7VariantE4_refERKS1_	#
# ./core/vector.h:123: 		return *this;
	movq	-8(%rbp), %rax	# this, _7
# ./core/vector.h:124: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2770:
	.size	_ZN6VectorI7VariantEaSERKS1_, .-_ZN6VectorI7VariantEaSERKS1_
	.section	.text._ZN4ListI7Variant16DefaultAllocatorEC2Ev,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorEC5Ev,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorEC2Ev
	.type	_ZN4ListI7Variant16DefaultAllocatorEC2Ev, @function
_ZN4ListI7Variant16DefaultAllocatorEC2Ev:
.LFB2772:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:708: 		_data = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->_data
# ./core/list.h:709: 	};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2772:
	.size	_ZN4ListI7Variant16DefaultAllocatorEC2Ev, .-_ZN4ListI7Variant16DefaultAllocatorEC2Ev
	.weak	_ZN4ListI7Variant16DefaultAllocatorEC1Ev
	.set	_ZN4ListI7Variant16DefaultAllocatorEC1Ev,_ZN4ListI7Variant16DefaultAllocatorEC2Ev
	.section	.text._ZN4ListI7Variant16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorED5Ev,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorED2Ev
	.type	_ZN4ListI7Variant16DefaultAllocatorED2Ev, @function
_ZN4ListI7Variant16DefaultAllocatorED2Ev:
.LFB2775:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2775
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:711: 		clear();
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN4ListI7Variant16DefaultAllocatorE5clearEv	#
# ./core/list.h:712: 		if (_data) {
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11(D)->_data, _1
# ./core/list.h:712: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3090	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_11(D)->_data, _2
	movl	16(%rax), %eax	# _2->size_cache, _3
	testl	%eax, %eax	# _3
	setne	%al	#, _4
	movzbl	%al, %eax	# _4, _5
	testq	%rax, %rax	# _6
	je	.L3088	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movl	$0, %r8d	#,
	movl	$.LC117, %ecx	#,
	movl	$714, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC119, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/list.h:717: 	};
	jmp	.L3091	#
.L3088:
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:715: 			memdelete_allocator<_Data, A>(_data);
	movq	-8(%rbp), %rax	# this, tmp92
	movq	(%rax), %rax	# this_11(D)->_data, _7
	movq	%rax, %rdi	# _7,
	call	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_	#
.L3090:
# ./core/list.h:717: 	};
	nop	
.L3091:
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2775:
	.section	.gcc_except_table
.LLSDA2775:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2775-.LLSDACSB2775
.LLSDACSB2775:
.LLSDACSE2775:
	.section	.text._ZN4ListI7Variant16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorED5Ev,comdat
	.size	_ZN4ListI7Variant16DefaultAllocatorED2Ev, .-_ZN4ListI7Variant16DefaultAllocatorED2Ev
	.weak	_ZN4ListI7Variant16DefaultAllocatorED1Ev
	.set	_ZN4ListI7Variant16DefaultAllocatorED1Ev,_ZN4ListI7Variant16DefaultAllocatorED2Ev
	.section	.text._ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_
	.type	_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_, @function
_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_:
.LFB2777:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# value, value
# ./core/list.h:219: 		if (!_data) {
	movq	-72(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_26(D)->_data, _1
# ./core/list.h:219: 		if (!_data) {
	testq	%rax, %rax	# _1
	jne	.L3093	#,
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$24, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -16(%rbp)	# _2, p_obj
	movq	-16(%rbp), %rax	# p_obj, tmp109
	movq	%rax, -24(%rbp)	# tmp109, D.55445
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-16(%rbp), %rdx	# p_obj, D.55446
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movq	-72(%rbp), %rax	# this, tmp110
	movq	%rdx, (%rax)	# D.55446, this_26(D)->_data
# ./core/list.h:222: 			_data->first = NULL;
	movq	-72(%rbp), %rax	# this, tmp111
	movq	(%rax), %rax	# this_26(D)->_data, _4
	movq	$0, (%rax)	#, _4->first
# ./core/list.h:223: 			_data->last = NULL;
	movq	-72(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_26(D)->_data, _5
	movq	$0, 8(%rax)	#, _5->last
# ./core/list.h:224: 			_data->size_cache = 0;
	movq	-72(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_26(D)->_data, _6
	movl	$0, 16(%rax)	#, _6->size_cache
.L3093:
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$48, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -48(%rbp)	# _34, this
# ./core/list.h:141: 		_FORCE_INLINE_ Element() {
	movq	-48(%rbp), %rdx	# this, _54
	movq	%rdx, -56(%rbp)	# _54, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-56(%rbp), %rdx	# this, tmp114
	movl	$0, (%rdx)	#, this_55->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/list.h:142: 			next_ptr = 0;
	movq	-48(%rbp), %rdx	# this, tmp115
	movq	$0, 24(%rdx)	#, this_53->next_ptr
# ./core/list.h:143: 			prev_ptr = 0;
	movq	-48(%rbp), %rdx	# this, tmp116
	movq	$0, 32(%rdx)	#, this_53->prev_ptr
# ./core/list.h:144: 			data = NULL;
	movq	-48(%rbp), %rdx	# this, tmp117
	movq	$0, 40(%rdx)	#, this_53->data
# ./core/list.h:145: 		};
	nop	
	movq	%rax, -32(%rbp)	# _34, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp118
	movq	%rax, -40(%rbp)	# tmp118, D.55450
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.55451
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movq	%rax, -8(%rbp)	# D.55451, n
# ./core/list.h:228: 		n->value = (T &)value;
	movq	-8(%rbp), %rax	# n, _7
	movq	-80(%rbp), %rdx	# value, tmp119
	movq	%rdx, %rsi	# tmp119,
	movq	%rax, %rdi	# _7,
	call	_ZN7VariantaSERKS_	#
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-72(%rbp), %rax	# this, tmp120
	movq	(%rax), %rax	# this_26(D)->_data, _8
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	8(%rax), %rdx	# _8->last, _9
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-8(%rbp), %rax	# n, tmp121
	movq	%rdx, 32(%rax)	# _9, n_36->prev_ptr
# ./core/list.h:231: 		n->next_ptr = 0;
	movq	-8(%rbp), %rax	# n, tmp122
	movq	$0, 24(%rax)	#, n_36->next_ptr
# ./core/list.h:232: 		n->data = _data;
	movq	-72(%rbp), %rax	# this, tmp123
	movq	(%rax), %rdx	# this_26(D)->_data, _10
# ./core/list.h:232: 		n->data = _data;
	movq	-8(%rbp), %rax	# n, tmp124
	movq	%rdx, 40(%rax)	# _10, n_36->data
# ./core/list.h:234: 		if (_data->last) {
	movq	-72(%rbp), %rax	# this, tmp125
	movq	(%rax), %rax	# this_26(D)->_data, _11
# ./core/list.h:234: 		if (_data->last) {
	movq	8(%rax), %rax	# _11->last, _12
# ./core/list.h:234: 		if (_data->last) {
	testq	%rax, %rax	# _12
	je	.L3096	#,
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-72(%rbp), %rax	# this, tmp126
	movq	(%rax), %rax	# this_26(D)->_data, _13
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	8(%rax), %rax	# _13->last, _14
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-8(%rbp), %rdx	# n, tmp127
	movq	%rdx, 24(%rax)	# tmp127, _14->next_ptr
.L3096:
# ./core/list.h:239: 		_data->last = n;
	movq	-72(%rbp), %rax	# this, tmp128
	movq	(%rax), %rax	# this_26(D)->_data, _15
	movq	-8(%rbp), %rdx	# n, tmp129
	movq	%rdx, 8(%rax)	# tmp129, _15->last
# ./core/list.h:241: 		if (!_data->first)
	movq	-72(%rbp), %rax	# this, tmp130
	movq	(%rax), %rax	# this_26(D)->_data, _16
# ./core/list.h:241: 		if (!_data->first)
	movq	(%rax), %rax	# _16->first, _17
# ./core/list.h:241: 		if (!_data->first)
	testq	%rax, %rax	# _17
	jne	.L3097	#,
# ./core/list.h:242: 			_data->first = n;
	movq	-72(%rbp), %rax	# this, tmp131
	movq	(%rax), %rax	# this_26(D)->_data, _18
	movq	-8(%rbp), %rdx	# n, tmp132
	movq	%rdx, (%rax)	# tmp132, _18->first
.L3097:
# ./core/list.h:244: 		_data->size_cache++;
	movq	-72(%rbp), %rax	# this, tmp133
	movq	(%rax), %rax	# this_26(D)->_data, _19
# ./core/list.h:244: 		_data->size_cache++;
	movl	16(%rax), %edx	# _19->size_cache, _20
# ./core/list.h:244: 		_data->size_cache++;
	addl	$1, %edx	#, _21
	movl	%edx, 16(%rax)	# _21, _19->size_cache
# ./core/list.h:246: 		return n;
	movq	-8(%rbp), %rax	# n, _46
# ./core/list.h:247: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2777:
	.size	_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_, .-_ZN4ListI7Variant16DefaultAllocatorE9push_backERKS0_
	.section	.text._ZN4ListI7Variant16DefaultAllocatorE5clearEv,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorE5clearEv,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorE5clearEv
	.type	_ZN4ListI7Variant16DefaultAllocatorE5clearEv, @function
_ZN4ListI7Variant16DefaultAllocatorE5clearEv:
.LFB2778:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
.L3107:
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rax, -8(%rbp)	# tmp89, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_8->_data, _9
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _9
	je	.L3100	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_8->_data, _10
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _10->first, D.57301
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3108	#
.L3100:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.57301
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3108:
# ./core/list.h:403: 		while (front()) {
	testq	%rax, %rax	# D.57301
	setne	%al	#, retval.65_6
	testb	%al, %al	# retval.65_6
	je	.L3110	#,
	movq	-24(%rbp), %rax	# this, tmp92
	movq	%rax, -16(%rbp)	# tmp92, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_15->_data, _16
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _16
	je	.L3104	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_15->_data, _17
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _17->first, D.57306
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3109	#
.L3104:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.57306
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3109:
# ./core/list.h:404: 			erase(front());
	movq	-24(%rbp), %rdx	# this, tmp95
	movq	%rax, %rsi	# D.57306,
	movq	%rdx, %rdi	# tmp95,
	call	_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE	#
# ./core/list.h:403: 		while (front()) {
	jmp	.L3107	#
.L3110:
# ./core/list.h:406: 	};
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2778:
	.size	_ZN4ListI7Variant16DefaultAllocatorE5clearEv, .-_ZN4ListI7Variant16DefaultAllocatorE5clearEv
	.section	.text._ZN4ListI7Variant16DefaultAllocatorE8pop_backEv,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv
	.type	_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv, @function
_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv:
.LFB2782:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:251: 		if (_data && _data->last)
	movq	-8(%rbp), %rax	# this, tmp87
	movq	(%rax), %rax	# this_8(D)->_data, _1
# ./core/list.h:251: 		if (_data && _data->last)
	testq	%rax, %rax	# _1
	je	.L3113	#,
# ./core/list.h:251: 		if (_data && _data->last)
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_8(D)->_data, _2
# ./core/list.h:251: 		if (_data && _data->last)
	movq	8(%rax), %rax	# _2->last, _3
# ./core/list.h:251: 		if (_data && _data->last)
	testq	%rax, %rax	# _3
	je	.L3113	#,
# ./core/list.h:252: 			erase(_data->last);
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_8(D)->_data, _4
# ./core/list.h:252: 			erase(_data->last);
	movq	8(%rax), %rdx	# _4->last, _5
# ./core/list.h:252: 			erase(_data->last);
	movq	-8(%rbp), %rax	# this, tmp90
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp90,
	call	_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE	#
.L3113:
# ./core/list.h:253: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2782:
	.size	_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv, .-_ZN4ListI7Variant16DefaultAllocatorE8pop_backEv
	.section	.text._Z9memdeleteI6ObjectEvPT_,"axG",@progbits,_Z9memdeleteI6ObjectEvPT_,comdat
	.weak	_Z9memdeleteI6ObjectEvPT_
	.type	_Z9memdeleteI6ObjectEvPT_, @function
_Z9memdeleteI6ObjectEvPT_:
.LFB2784:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_class, p_class
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	movq	-8(%rbp), %rax	# p_class, tmp87
	movq	%rax, %rdi	# tmp87,
	call	_Z17predelete_handlerP6Object	#
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.82_10
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.82_10
	jne	.L3117	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-8(%rbp), %rax	# p_class, tmp88
	movq	(%rax), %rax	# p_class_7(D)->_vptr.Object, _2
	addq	$152, %rax	#, _3
	movq	(%rax), %rdx	# *_3, _4
	movq	-8(%rbp), %rax	# p_class, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _4
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-8(%rbp), %rax	# p_class, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L3114	#
.L3117:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L3114:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2784:
	.size	_Z9memdeleteI6ObjectEvPT_, .-_Z9memdeleteI6ObjectEvPT_
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_:
.LFB2785:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_value, p_value
# ./core/set.h:538: 		if (!_data._root)
	movq	-8(%rbp), %rax	# this, tmp86
	movq	(%rax), %rax	# this_5(D)->_data._root, _1
# ./core/set.h:538: 		if (!_data._root)
	testq	%rax, %rax	# _1
	jne	.L3119	#,
# ./core/set.h:539: 			_data._create_root();
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv	#
.L3119:
# ./core/set.h:540: 		return _insert(p_value);
	movq	-16(%rbp), %rdx	# p_value, tmp87
	movq	-8(%rbp), %rax	# this, tmp88
	movq	%rdx, %rsi	# tmp87,
	movq	%rax, %rdi	# tmp88,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_	#
# ./core/set.h:541: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2785:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6insertERKS1_
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_:
.LFB2786:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_value, p_value
# ./core/set.h:555: 		if (!_data._root)
	movq	-24(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_9(D)->_data._root, _1
# ./core/set.h:555: 		if (!_data._root)
	testq	%rax, %rax	# _1
	jne	.L3122	#,
# ./core/set.h:556: 			return false;
	movl	$0, %eax	#, _5
	jmp	.L3123	#
.L3122:
# ./core/set.h:558: 		Element *e = find(p_value);
	movq	-32(%rbp), %rdx	# p_value, tmp90
	movq	-24(%rbp), %rax	# this, tmp91
	movq	%rdx, %rsi	# tmp90,
	movq	%rax, %rdi	# tmp91,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_	#
	movq	%rax, -8(%rbp)	# _12, e
# ./core/set.h:559: 		if (!e)
	cmpq	$0, -8(%rbp)	#, e
	jne	.L3124	#,
# ./core/set.h:560: 			return false;
	movl	$0, %eax	#, _5
	jmp	.L3123	#
.L3124:
# ./core/set.h:562: 		_erase(e);
	movq	-8(%rbp), %rdx	# e, tmp92
	movq	-24(%rbp), %rax	# this, tmp93
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# tmp93,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE	#
# ./core/set.h:563: 		if (_data.size_cache == 0 && _data._root)
	movq	-24(%rbp), %rax	# this, tmp94
	movl	16(%rax), %eax	# this_9(D)->_data.size_cache, _2
# ./core/set.h:563: 		if (_data.size_cache == 0 && _data._root)
	testl	%eax, %eax	# _2
	jne	.L3125	#,
# ./core/set.h:563: 		if (_data.size_cache == 0 && _data._root)
	movq	-24(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_9(D)->_data._root, _3
# ./core/set.h:563: 		if (_data.size_cache == 0 && _data._root)
	testq	%rax, %rax	# _3
	je	.L3125	#,
# ./core/set.h:564: 			_data._free_root();
	movq	-24(%rbp), %rax	# this, _4
	movq	%rax, %rdi	# _4,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv	#
.L3125:
# ./core/set.h:565: 		return true;
	movl	$1, %eax	#, _5
.L3123:
# ./core/set.h:566: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2786:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5eraseERKS1_
	.section	.text._Z9memdeleteI14ScriptInstanceEvPT_,"axG",@progbits,_Z9memdeleteI14ScriptInstanceEvPT_,comdat
	.weak	_Z9memdeleteI14ScriptInstanceEvPT_
	.type	_Z9memdeleteI14ScriptInstanceEvPT_, @function
_Z9memdeleteI14ScriptInstanceEvPT_:
.LFB2787:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp87
	movq	%rax, -8(%rbp)	# tmp87, D.55198
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55199
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.111_8
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.111_8
	jne	.L3130	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp88
	movq	(%rax), %rax	# p_class_7(D)->_vptr.ScriptInstance, _2
	addq	$192, %rax	#, _3
	movq	(%rax), %rdx	# *_3, _4
	movq	-24(%rbp), %rax	# p_class, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _4
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-24(%rbp), %rax	# p_class, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L3126	#
.L3130:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L3126:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2787:
	.size	_Z9memdeleteI14ScriptInstanceEvPT_, .-_Z9memdeleteI14ScriptInstanceEvPT_
	.section	.text._ZN3RefI6ScriptEC2ERK6RefPtr,"axG",@progbits,_ZN3RefI6ScriptEC5ERK6RefPtr,comdat
	.align 2
	.weak	_ZN3RefI6ScriptEC2ERK6RefPtr
	.type	_ZN3RefI6ScriptEC2ERK6RefPtr, @function
_ZN3RefI6ScriptEC2ERK6RefPtr:
.LFB2789:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2789
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_refptr, p_refptr
	movq	-80(%rbp), %rax	# p_refptr, tmp86
	movq	%rax, -48(%rbp)	# tmp86, this
# ./core/ref_ptr.h:55: 	_FORCE_INLINE_ void *get_data() const { return data; }
	movq	-48(%rbp), %rax	# this, D.56322
# ./core/reference.h:259: 		Ref<Reference> *irr = reinterpret_cast<Ref<Reference> *>(p_refptr.get_data());
	movq	%rax, -24(%rbp)	# D.56322, irr
# ./core/reference.h:260: 		reference = NULL;
	movq	-72(%rbp), %rax	# this, tmp87
	movq	$0, (%rax)	#, this_5(D)->reference
	movq	-24(%rbp), %rax	# irr, tmp88
	movq	%rax, -40(%rbp)	# tmp88, this
# ./core/reference.h:131: 		return reference;
	movq	-40(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_22->reference, D.56318
# ./core/reference.h:261: 		Reference *refb = irr->ptr();
	movq	%rax, -32(%rbp)	# D.56318, refb
# ./core/reference.h:262: 		if (!refb) {
	cmpq	$0, -32(%rbp)	#, refb
	jne	.L3134	#,
# ./core/reference.h:263: 			unref();
	movq	-72(%rbp), %rax	# this, tmp90
	movq	%rax, %rdi	# tmp90,
.LEHB696:
	call	_ZN3RefI6ScriptE5unrefEv	#
.LEHE696:
	jmp	.L3131	#
.L3134:
# ./core/reference.h:266: 		Ref r;
	leaq	-56(%rbp), %rax	#, tmp91
	movq	%rax, %rdi	# tmp91,
	call	_ZN3RefI6ScriptEC1Ev	#
# ./core/reference.h:267: 		r.reference = Object::cast_to<T>(refb);
	movq	-32(%rbp), %rax	# refb, tmp92
	movq	%rax, %rdi	# tmp92,
	call	_ZN6Object7cast_toI6ScriptEEPT_PS_	#
# ./core/reference.h:267: 		r.reference = Object::cast_to<T>(refb);
	movq	%rax, -56(%rbp)	# _1, r.reference
# ./core/reference.h:268: 		ref(r);
	leaq	-56(%rbp), %rdx	#, tmp93
	movq	-72(%rbp), %rax	# this, tmp94
	movq	%rdx, %rsi	# tmp93,
	movq	%rax, %rdi	# tmp94,
.LEHB697:
	call	_ZN3RefI6ScriptE3refERKS1_	#
.LEHE697:
# ./core/reference.h:269: 		r.reference = NULL;
	movq	$0, -56(%rbp)	#, r.reference
# ./core/reference.h:266: 		Ref r;
	leaq	-56(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN3RefI6ScriptED1Ev	#
	jmp	.L3131	#
.L3137:
	movq	%rax, %rbx	#, tmp97
	leaq	-56(%rbp), %rax	#, tmp96
	movq	%rax, %rdi	# tmp96,
	call	_ZN3RefI6ScriptED1Ev	#
	movq	%rbx, %rax	# tmp97, D.62131
	movq	%rax, %rdi	# D.62131,
.LEHB698:
	call	_Unwind_Resume	#
.LEHE698:
.L3131:
# ./core/reference.h:270: 	}
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2789:
	.section	.gcc_except_table
.LLSDA2789:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2789-.LLSDACSB2789
.LLSDACSB2789:
	.uleb128 .LEHB696-.LFB2789
	.uleb128 .LEHE696-.LEHB696
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB697-.LFB2789
	.uleb128 .LEHE697-.LEHB697
	.uleb128 .L3137-.LFB2789
	.uleb128 0
	.uleb128 .LEHB698-.LFB2789
	.uleb128 .LEHE698-.LEHB698
	.uleb128 0
	.uleb128 0
.LLSDACSE2789:
	.section	.text._ZN3RefI6ScriptEC2ERK6RefPtr,"axG",@progbits,_ZN3RefI6ScriptEC5ERK6RefPtr,comdat
	.size	_ZN3RefI6ScriptEC2ERK6RefPtr, .-_ZN3RefI6ScriptEC2ERK6RefPtr
	.weak	_ZN3RefI6ScriptEC1ERK6RefPtr
	.set	_ZN3RefI6ScriptEC1ERK6RefPtr,_ZN3RefI6ScriptEC2ERK6RefPtr
	.section	.text._ZNK3RefI6ScriptE7is_nullEv,"axG",@progbits,_ZNK3RefI6ScriptE7is_nullEv,comdat
	.align 2
	.weak	_ZNK3RefI6ScriptE7is_nullEv
	.type	_ZNK3RefI6ScriptE7is_nullEv, @function
_ZNK3RefI6ScriptE7is_nullEv:
.LFB2791:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:273: 	inline bool is_null() const { return reference == NULL; }
	movq	-8(%rbp), %rax	# this, tmp85
	movq	(%rax), %rax	# this_3(D)->reference, _1
# ./core/reference.h:273: 	inline bool is_null() const { return reference == NULL; }
	testq	%rax, %rax	# _1
	sete	%al	#, _4
# ./core/reference.h:273: 	inline bool is_null() const { return reference == NULL; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2791:
	.size	_ZNK3RefI6ScriptE7is_nullEv, .-_ZNK3RefI6ScriptE7is_nullEv
	.section	.text._ZNK3RefI6ScriptE11get_ref_ptrEv,"axG",@progbits,_ZNK3RefI6ScriptE11get_ref_ptrEv,comdat
	.align 2
	.weak	_ZNK3RefI6ScriptE11get_ref_ptrEv
	.type	_ZNK3RefI6ScriptE11get_ref_ptrEv, @function
_ZNK3RefI6ScriptE11get_ref_ptrEv:
.LFB2793:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2793
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -48(%rbp)	# this, this
# ./core/reference.h:141: 		RefPtr refptr;
	movq	-40(%rbp), %rax	# <retval>, tmp84
	movq	%rax, %rdi	# tmp84,
.LEHB699:
	call	_ZN6RefPtrC1Ev	#
.LEHE699:
	movq	-40(%rbp), %rax	# <retval>, tmp85
	movq	%rax, -32(%rbp)	# tmp85, this
# ./core/ref_ptr.h:55: 	_FORCE_INLINE_ void *get_data() const { return data; }
	movq	-32(%rbp), %rax	# this, D.57351
# ./core/reference.h:142: 		Ref<Reference> *irr = reinterpret_cast<Ref<Reference> *>(refptr.get_data());
	movq	%rax, -24(%rbp)	# D.57351, irr
# ./core/reference.h:143: 		*irr = *this;
	movq	-48(%rbp), %rdx	# this, tmp86
	movq	-24(%rbp), %rax	# irr, tmp87
	movq	%rdx, %rsi	# tmp86,
	movq	%rax, %rdi	# tmp87,
.LEHB700:
	call	_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E	#
.LEHE700:
# ./core/reference.h:144: 		return refptr;
	jmp	.L3145	#
.L3144:
	movq	%rax, %rbx	#, tmp89
	movq	-40(%rbp), %rax	# <retval>, tmp88
	movq	%rax, %rdi	# tmp88,
	call	_ZN6RefPtrD1Ev	#
	movq	%rbx, %rax	# tmp89, D.62132
	movq	%rax, %rdi	# D.62132,
.LEHB701:
	call	_Unwind_Resume	#
.LEHE701:
.L3145:
# ./core/reference.h:145: 	};
	movq	-40(%rbp), %rax	# <retval>,
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2793:
	.section	.gcc_except_table
.LLSDA2793:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2793-.LLSDACSB2793
.LLSDACSB2793:
	.uleb128 .LEHB699-.LFB2793
	.uleb128 .LEHE699-.LEHB699
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB700-.LFB2793
	.uleb128 .LEHE700-.LEHB700
	.uleb128 .L3144-.LFB2793
	.uleb128 0
	.uleb128 .LEHB701-.LFB2793
	.uleb128 .LEHE701-.LEHB701
	.uleb128 0
	.uleb128 0
.LLSDACSE2793:
	.section	.text._ZNK3RefI6ScriptE11get_ref_ptrEv,"axG",@progbits,_ZNK3RefI6ScriptE11get_ref_ptrEv,comdat
	.size	_ZNK3RefI6ScriptE11get_ref_ptrEv, .-_ZNK3RefI6ScriptE11get_ref_ptrEv
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorEC2Ev,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorEC5Ev,comdat
	.align 2
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorEC2Ev
	.type	_ZN4ListI10MethodInfo16DefaultAllocatorEC2Ev, @function
_ZN4ListI10MethodInfo16DefaultAllocatorEC2Ev:
.LFB2795:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:708: 		_data = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->_data
# ./core/list.h:709: 	};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2795:
	.size	_ZN4ListI10MethodInfo16DefaultAllocatorEC2Ev, .-_ZN4ListI10MethodInfo16DefaultAllocatorEC2Ev
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorEC1Ev
	.set	_ZN4ListI10MethodInfo16DefaultAllocatorEC1Ev,_ZN4ListI10MethodInfo16DefaultAllocatorEC2Ev
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorED5Ev,comdat
	.align 2
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorED2Ev
	.type	_ZN4ListI10MethodInfo16DefaultAllocatorED2Ev, @function
_ZN4ListI10MethodInfo16DefaultAllocatorED2Ev:
.LFB2798:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2798
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:711: 		clear();
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv	#
# ./core/list.h:712: 		if (_data) {
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11(D)->_data, _1
# ./core/list.h:712: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3151	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_11(D)->_data, _2
	movl	16(%rax), %eax	# _2->size_cache, _3
	testl	%eax, %eax	# _3
	setne	%al	#, _4
	movzbl	%al, %eax	# _4, _5
	testq	%rax, %rax	# _6
	je	.L3149	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movl	$0, %r8d	#,
	movl	$.LC117, %ecx	#,
	movl	$714, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC119, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/list.h:717: 	};
	jmp	.L3152	#
.L3149:
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:715: 			memdelete_allocator<_Data, A>(_data);
	movq	-8(%rbp), %rax	# this, tmp92
	movq	(%rax), %rax	# this_11(D)->_data, _7
	movq	%rax, %rdi	# _7,
	call	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_	#
.L3151:
# ./core/list.h:717: 	};
	nop	
.L3152:
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2798:
	.section	.gcc_except_table
.LLSDA2798:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2798-.LLSDACSB2798
.LLSDACSB2798:
.LLSDACSE2798:
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorED5Ev,comdat
	.size	_ZN4ListI10MethodInfo16DefaultAllocatorED2Ev, .-_ZN4ListI10MethodInfo16DefaultAllocatorED2Ev
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorED1Ev
	.set	_ZN4ListI10MethodInfo16DefaultAllocatorED1Ev,_ZN4ListI10MethodInfo16DefaultAllocatorED2Ev
	.section	.text._ZN10PoolVectorI6StringEC2Ev,"axG",@progbits,_ZN10PoolVectorI6StringEC5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringEC2Ev
	.type	_ZN10PoolVectorI6StringEC2Ev, @function
_ZN10PoolVectorI6StringEC2Ev:
.LFB2804:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:468: 	PoolVector() { alloc = NULL; }
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->alloc
# ./core/pool_vector.h:468: 	PoolVector() { alloc = NULL; }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2804:
	.size	_ZN10PoolVectorI6StringEC2Ev, .-_ZN10PoolVectorI6StringEC2Ev
	.weak	_ZN10PoolVectorI6StringEC1Ev
	.set	_ZN10PoolVectorI6StringEC1Ev,_ZN10PoolVectorI6StringEC2Ev
	.section	.text._ZN10PoolVectorI6StringED2Ev,"axG",@progbits,_ZN10PoolVectorI6StringED5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringED2Ev
	.type	_ZN10PoolVectorI6StringED2Ev, @function
_ZN10PoolVectorI6StringED2Ev:
.LFB2807:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2807
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:473: 	~PoolVector() { _unreference(); }
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN10PoolVectorI6StringE12_unreferenceEv	#
# ./core/pool_vector.h:473: 	~PoolVector() { _unreference(); }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2807:
	.section	.gcc_except_table
.LLSDA2807:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2807-.LLSDACSB2807
.LLSDACSB2807:
.LLSDACSE2807:
	.section	.text._ZN10PoolVectorI6StringED2Ev,"axG",@progbits,_ZN10PoolVectorI6StringED5Ev,comdat
	.size	_ZN10PoolVectorI6StringED2Ev, .-_ZN10PoolVectorI6StringED2Ev
	.weak	_ZN10PoolVectorI6StringED1Ev
	.set	_ZN10PoolVectorI6StringED1Ev,_ZN10PoolVectorI6StringED2Ev
	.section	.text._ZN10PoolVectorI6StringE9push_backERKS0_,"axG",@progbits,_ZN10PoolVectorI6StringE9push_backERKS0_,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE9push_backERKS0_
	.type	_ZN10PoolVectorI6StringE9push_backERKS0_, @function
_ZN10PoolVectorI6StringE9push_backERKS0_:
.LFB2811:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_val, p_val
# ./core/pool_vector.h:500: 	resize(size() + 1);
	movq	-8(%rbp), %rax	# this, tmp86
	movq	%rax, %rdi	# tmp86,
	call	_ZNK10PoolVectorI6StringE4sizeEv	#
# ./core/pool_vector.h:500: 	resize(size() + 1);
	leal	1(%rax), %edx	#, _2
	movq	-8(%rbp), %rax	# this, tmp87
	movl	%edx, %esi	# _2,
	movq	%rax, %rdi	# tmp87,
	call	_ZN10PoolVectorI6StringE6resizeEi	#
# ./core/pool_vector.h:501: 	set(size() - 1, p_val);
	movq	-8(%rbp), %rax	# this, tmp88
	movq	%rax, %rdi	# tmp88,
	call	_ZNK10PoolVectorI6StringE4sizeEv	#
# ./core/pool_vector.h:501: 	set(size() - 1, p_val);
	leal	-1(%rax), %ecx	#, _4
	movq	-16(%rbp), %rdx	# p_val, tmp89
	movq	-8(%rbp), %rax	# this, tmp90
	movl	%ecx, %esi	# _4,
	movq	%rax, %rdi	# tmp90,
	call	_ZN10PoolVectorI6StringE3setEiRKS0_	#
# ./core/pool_vector.h:502: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2811:
	.size	_ZN10PoolVectorI6StringE9push_backERKS0_, .-_ZN10PoolVectorI6StringE9push_backERKS0_
	.section	.text._ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_,"axG",@progbits,_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_,comdat
	.align 2
	.weak	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_
	.type	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_, @function
_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_:
.LFB2815:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_key, p_key
	movq	-88(%rbp), %rax	# this, tmp106
	movq	%rax, -8(%rbp)	# tmp106, this
	movq	-96(%rbp), %rax	# p_key, tmp107
	movq	%rax, -16(%rbp)	# tmp107, p_key
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	movq	-8(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_7->hash_table, _9
	testq	%rax, %rax	# _9
	sete	%al	#, _10
	movzbl	%al, %eax	# _10, _11
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _12
	je	.L3157	#,
# ./core/hash_map.h:335: 			return NULL;
	movl	$0, %eax	#, D.55500
	jmp	.L3158	#
.L3157:
	movq	-8(%rbp), %rax	# this, tmp109
	movq	%rax, -24(%rbp)	# tmp109, this
	movq	-16(%rbp), %rax	# p_key, tmp110
	movq	%rax, -32(%rbp)	# tmp110, p_key
	movq	-32(%rbp), %rax	# p_key, tmp111
	movq	%rax, -40(%rbp)	# tmp111, p_string_name
	movq	-40(%rbp), %rax	# p_string_name, tmp112
	movq	%rax, -48(%rbp)	# tmp112, this
# ./core/string_name.h:112: 		if (_data)
	movq	-48(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_17->_data, _18
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _18
	je	.L3159	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-48(%rbp), %rax	# this, tmp114
	movq	(%rax), %rax	# this_17->_data, _19
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _19->hash, _20
	jmp	.L3160	#
.L3159:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _20
.L3160:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -52(%rbp)	# _20, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-24(%rbp), %rax	# this, tmp115
	movzbl	8(%rax), %eax	# this_14->hash_table_power, _27
	movzbl	%al, %eax	# _27, _28
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp116
	movl	%eax, %ecx	# _28, tmp129
	sall	%cl, %edx	# tmp129, tmp116
	movl	%edx, %eax	# tmp116, _29
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _30
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-52(%rbp), %eax	# hash, tmp118
	movl	%eax, -56(%rbp)	# tmp118, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-24(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_14->hash_table, _33
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-56(%rbp), %edx	# index, _34
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _35
	addq	%rdx, %rax	# _35, _36
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_36, tmp120
	movq	%rax, -64(%rbp)	# tmp120, e
.L3167:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -64(%rbp)	#, e
	je	.L3162	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# e, tmp121
	movl	(%rax), %eax	# e_38->hash, _39
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -52(%rbp)	# _39, hash
	jne	.L3163	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# e, tmp122
	leaq	16(%rax), %rdx	#, _40
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-32(%rbp), %rax	# p_key, tmp123
	movq	%rax, %rsi	# tmp123,
	movq	%rdx, %rdi	# _40,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _41
	je	.L3163	#,
	movl	$1, %eax	#, iftmp.197_42
	jmp	.L3164	#
.L3163:
	movl	$0, %eax	#, iftmp.197_42
.L3164:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_42
	je	.L3165	#,
# ./core/hash_map.h:198: 				return e;
	movq	-64(%rbp), %rax	# e, _46
	jmp	.L3166	#
.L3165:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-64(%rbp), %rax	# e, tmp124
	movq	8(%rax), %rax	# e_38->next, tmp125
	movq	%rax, -64(%rbp)	# tmp125, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3167	#
.L3162:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _46
.L3166:
# ./core/hash_map.h:337: 		const Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -72(%rbp)	# _46, e
# ./core/hash_map.h:339: 		if (e)
	cmpq	$0, -72(%rbp)	#, e
	je	.L3168	#,
# ./core/hash_map.h:340: 			return &e->pair.data;
	movq	-72(%rbp), %rax	# e, tmp126
	addq	$24, %rax	#, D.55500
	jmp	.L3158	#
.L3168:
# ./core/hash_map.h:342: 		return NULL;
	movl	$0, %eax	#, D.55500
.L3158:
# ./core/hash_map.h:291: 		return getptr(p_key) != NULL;
	testq	%rax, %rax	# D.55500
	setne	%al	#, _6
# ./core/hash_map.h:292: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2815:
	.size	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_, .-_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_:
.LFB2816:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_list, p_list
# ./core/list.h:443: 		clear();
	movq	-40(%rbp), %rax	# this, tmp87
	movq	%rax, %rdi	# tmp87,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv	#
	movq	-48(%rbp), %rax	# p_list, tmp88
	movq	%rax, -16(%rbp)	# tmp88, this
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_11->_data, _12
# ./core/list.h:188: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _12
	je	.L3171	#,
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11->_data, _13
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _13->first, D.59202
# ./core/list.h:188: 		return _data ? _data->first : 0;
	jmp	.L3178	#
.L3171:
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59202
# ./core/list.h:188: 		return _data ? _data->first : 0;
	nop	
.L3178:
# ./core/list.h:444: 		const Element *it = p_list.front();
	movq	%rax, -8(%rbp)	# D.59202, it
.L3177:
# ./core/list.h:445: 		while (it) {
	cmpq	$0, -8(%rbp)	#, it
	je	.L3179	#,
	movq	-8(%rbp), %rax	# it, tmp91
	movq	%rax, -32(%rbp)	# tmp91, this
# ./core/list.h:127: 			return value;
	movq	-32(%rbp), %rdx	# this, D.59211
# ./core/list.h:447: 			push_back(it->get());
	movq	-40(%rbp), %rax	# this, tmp92
	movq	%rdx, %rsi	# D.59211,
	movq	%rax, %rdi	# tmp92,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE9push_backERKS0_	#
	movq	-8(%rbp), %rax	# it, tmp93
	movq	%rax, -24(%rbp)	# tmp93, this
# ./core/list.h:66: 			return next_ptr;
	movq	-24(%rbp), %rax	# this, tmp94
	movq	48(%rax), %rax	# this_18->next_ptr, D.59207
# ./core/list.h:448: 			it = it->next();
	movq	%rax, -8(%rbp)	# D.59207, it
# ./core/list.h:445: 		while (it) {
	jmp	.L3177	#
.L3179:
# ./core/list.h:450: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2816:
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_, .-_ZN4ListI12PropertyInfo16DefaultAllocatorEaSERKS2_
	.section	.rodata
	.align 8
.LC122:
	.string	"FATAL: Condition ' !e ' is true."
.LC123:
	.string	"./core/hash_map.h"
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_:
.LFB2817:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_key, p_key
# ./core/hash_map.h:452: 		Element *e = NULL;
	movq	$0, -8(%rbp)	#, e
# ./core/hash_map.h:453: 		if (!hash_table)
	movq	-72(%rbp), %rax	# this, tmp106
	movq	(%rax), %rax	# this_11(D)->hash_table, _1
# ./core/hash_map.h:453: 		if (!hash_table)
	testq	%rax, %rax	# _1
	jne	.L3181	#,
# ./core/hash_map.h:454: 			make_hash_table(); // if no table, make one
	movq	-72(%rbp), %rax	# this, tmp107
	movq	%rax, %rdi	# tmp107,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv	#
	jmp	.L3182	#
.L3181:
	movq	-72(%rbp), %rax	# this, tmp108
	movq	%rax, -16(%rbp)	# tmp108, this
	movq	-80(%rbp), %rax	# p_key, tmp109
	movq	%rax, -24(%rbp)	# tmp109, p_key
	movq	-24(%rbp), %rax	# p_key, tmp110
	movq	%rax, -32(%rbp)	# tmp110, p_string_name
	movq	-32(%rbp), %rax	# p_string_name, tmp111
	movq	%rax, -40(%rbp)	# tmp111, this
# ./core/string_name.h:112: 		if (_data)
	movq	-40(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_26->_data, _27
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _27
	je	.L3183	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-40(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_26->_data, _28
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _28->hash, _29
	jmp	.L3184	#
.L3183:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _29
.L3184:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -44(%rbp)	# _29, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-16(%rbp), %rax	# this, tmp114
	movzbl	8(%rax), %eax	# this_23->hash_table_power, _36
	movzbl	%al, %eax	# _36, _37
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp115
	movl	%eax, %ecx	# _37, tmp131
	sall	%cl, %edx	# tmp131, tmp115
	movl	%edx, %eax	# tmp115, _38
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _39
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-44(%rbp), %eax	# hash, tmp117
	movl	%eax, -48(%rbp)	# tmp117, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-16(%rbp), %rax	# this, tmp118
	movq	(%rax), %rax	# this_23->hash_table, _42
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-48(%rbp), %edx	# index, _43
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _44
	addq	%rdx, %rax	# _44, _45
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_45, tmp119
	movq	%rax, -56(%rbp)	# tmp119, e
.L3191:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -56(%rbp)	#, e
	je	.L3186	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-56(%rbp), %rax	# e, tmp120
	movl	(%rax), %eax	# e_47->hash, _48
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -44(%rbp)	# _48, hash
	jne	.L3187	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-56(%rbp), %rax	# e, tmp121
	leaq	16(%rax), %rdx	#, _49
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-24(%rbp), %rax	# p_key, tmp122
	movq	%rax, %rsi	# tmp122,
	movq	%rdx, %rdi	# _49,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _50
	je	.L3187	#,
	movl	$1, %eax	#, iftmp.197_51
	jmp	.L3188	#
.L3187:
	movl	$0, %eax	#, iftmp.197_51
.L3188:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_51
	je	.L3189	#,
# ./core/hash_map.h:198: 				return e;
	movq	-56(%rbp), %rax	# e, D.58259
	jmp	.L3190	#
.L3189:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-56(%rbp), %rax	# e, tmp123
	movq	8(%rax), %rax	# e_47->next, tmp124
	movq	%rax, -56(%rbp)	# tmp124, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3191	#
.L3186:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, D.58259
.L3190:
# ./core/hash_map.h:456: 			e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -8(%rbp)	# D.58259, e
.L3182:
# ./core/hash_map.h:459: 		if (!e) {
	cmpq	$0, -8(%rbp)	#, e
	jne	.L3192	#,
# ./core/hash_map.h:461: 			e = create_element(p_key);
	movq	-80(%rbp), %rdx	# p_key, tmp125
	movq	-72(%rbp), %rax	# this, tmp126
	movq	%rdx, %rsi	# tmp125,
	movq	%rax, %rdi	# tmp126,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_	#
	movq	%rax, -8(%rbp)	# _17, e
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	cmpq	$0, -8(%rbp)	#, e
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L3193	#,
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	movl	$0, %r8d	#,
	movl	$.LC122, %ecx	#,
	movl	$462, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC48, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	ud2	
.L3193:
# ./core/hash_map.h:463: 			check_hash_table(); // perform mantenience routine
	movq	-72(%rbp), %rax	# this, tmp127
	movq	%rax, %rdi	# tmp127,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv	#
.L3192:
# ./core/hash_map.h:466: 		return e->pair.data;
	movq	-8(%rbp), %rax	# e, tmp128
	addq	$24, %rax	#, _22
# ./core/hash_map.h:467: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2817:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_:
.LFB2818:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_from, p_from
# ./core/vmap.h:209: 		_cowdata._ref(p_from._cowdata);
	movq	-8(%rbp), %rax	# this, _1
# ./core/vmap.h:209: 		_cowdata._ref(p_from._cowdata);
	movq	-16(%rbp), %rdx	# p_from, _2
# ./core/vmap.h:209: 		_cowdata._ref(p_from._cowdata);
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# _1,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_	#
# ./core/vmap.h:210: 		return *this;
	movq	-8(%rbp), %rax	# this, _7
# ./core/vmap.h:211: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2818:
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEaSERKS4_
	.section	.text._ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_,"axG",@progbits,_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_,comdat
	.align 2
	.weak	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_
	.type	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_, @function
_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_:
.LFB2819:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_key, p_key
# ./core/hash_map.h:448: 		return get(p_key);
	movq	-16(%rbp), %rdx	# p_key, tmp84
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, %rsi	# tmp84,
	movq	%rax, %rdi	# tmp85,
	call	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_	#
# ./core/hash_map.h:449: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2819:
	.size	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_, .-_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC2Ev,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC5Ev,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC2Ev
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC2Ev, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC2Ev:
.LFB2822:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:708: 		_data = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->_data
# ./core/list.h:709: 	};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2822:
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC2Ev, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC2Ev
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC1Ev
	.set	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC1Ev,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorEC2Ev
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED5Ev,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev:
.LFB2825:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2825
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:711: 		clear();
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv	#
# ./core/list.h:712: 		if (_data) {
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11(D)->_data, _1
# ./core/list.h:712: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3204	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_11(D)->_data, _2
	movl	16(%rax), %eax	# _2->size_cache, _3
	testl	%eax, %eax	# _3
	setne	%al	#, _4
	movzbl	%al, %eax	# _4, _5
	testq	%rax, %rax	# _6
	je	.L3202	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movl	$0, %r8d	#,
	movl	$.LC117, %ecx	#,
	movl	$714, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC119, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/list.h:717: 	};
	jmp	.L3205	#
.L3202:
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:715: 			memdelete_allocator<_Data, A>(_data);
	movq	-8(%rbp), %rax	# this, tmp92
	movq	(%rax), %rax	# this_11(D)->_data, _7
	movq	%rax, %rdi	# _7,
	call	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_	#
.L3204:
# ./core/list.h:717: 	};
	nop	
.L3205:
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2825:
	.section	.gcc_except_table
.LLSDA2825:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2825-.LLSDACSB2825
.LLSDACSB2825:
.LLSDACSE2825:
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED5Ev,comdat
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED1Ev
	.set	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED1Ev,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorED2Ev
	.section	.rodata
.LC124:
	.string	"get_m"
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi:
.LFB2837:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
	movl	%esi, -92(%rbp)	# p_index, p_index
# ./core/vmap.h:173: 		return _cowdata.get_m(p_index).value;
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -8(%rbp)	# _1, this
	movl	-92(%rbp), %eax	# p_index, tmp111
	movl	%eax, -12(%rbp)	# tmp111, p_index
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	movl	-12(%rbp), %eax	# p_index, tmp113
	shrl	$31, %eax	#, tmp112
	movzbl	%al, %eax	# _10, _11
	testq	%rax, %rax	# _12
	jne	.L3207	#,
	movq	-8(%rbp), %rax	# this, tmp114
	movq	%rax, -24(%rbp)	# tmp114, this
	movq	-24(%rbp), %rax	# this, tmp115
	movq	%rax, -32(%rbp)	# tmp115, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-32(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_14->_ptr, _15
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _15
	jne	.L3208	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _16
	jmp	.L3209	#
.L3208:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-32(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_14->_ptr, _17
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _16
.L3209:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -40(%rbp)	# _16, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -40(%rbp)	#, size
	je	.L3210	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-40(%rbp), %rax	# size, tmp118
	movl	(%rax), %eax	# *size_21, _22
	jmp	.L3211	#
.L3210:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _23
.L3211:
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -12(%rbp)	# _23, p_index
	setge	%al	#, _29
	movzbl	%al, %eax	# _29, _30
	testq	%rax, %rax	# _31
	je	.L3212	#,
.L3207:
	movl	$1, %eax	#, iftmp.210_32
	jmp	.L3213	#
.L3212:
	movl	$0, %eax	#, iftmp.210_32
.L3213:
	movzbl	%al, %eax	# iftmp.210_32, _35
	testq	%rax, %rax	# _35
	setne	%al	#, retval.209_36
	testb	%al, %al	# retval.209_36
	je	.L3214	#,
	movq	-8(%rbp), %rax	# this, tmp119
	movq	%rax, -48(%rbp)	# tmp119, this
	movq	-48(%rbp), %rax	# this, tmp120
	movq	%rax, -56(%rbp)	# tmp120, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-56(%rbp), %rax	# this, tmp121
	movq	(%rax), %rax	# this_38->_ptr, _39
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _39
	jne	.L3215	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _40
	jmp	.L3216	#
.L3215:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-56(%rbp), %rax	# this, tmp122
	movq	(%rax), %rax	# this_38->_ptr, _41
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _40
.L3216:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -64(%rbp)	# _40, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -64(%rbp)	#, size
	je	.L3217	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-64(%rbp), %rax	# size, tmp123
	movl	(%rax), %eax	# *size_45, _46
	jmp	.L3218	#
.L3217:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _47
.L3218:
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _47, _53
	movl	-12(%rbp), %eax	# p_index, tmp124
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _53,
	movq	%rax, %rcx	# _54,
	movl	$144, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC124, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L3214:
# ./core/cowdata.h:145: 		_copy_on_write();
	movq	-8(%rbp), %rax	# this, tmp125
	movq	%rax, %rdi	# tmp125,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
	movq	-8(%rbp), %rax	# this, tmp126
	movq	%rax, -72(%rbp)	# tmp126, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-72(%rbp), %rax	# this, tmp127
	movq	(%rax), %rax	# this_55->_ptr, _56
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _56
	jne	.L3219	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _57
	jmp	.L3220	#
.L3219:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-72(%rbp), %rax	# this, tmp128
	movq	(%rax), %rcx	# this_55->_ptr, _57
.L3220:
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	movl	-12(%rbp), %eax	# p_index, tmp129
	movslq	%eax, %rdx	# tmp129, _62
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _62, tmp130
	salq	$2, %rax	#, tmp130
	addq	%rdx, %rax	# _62, tmp130
	addq	%rax, %rax	# tmp130
	addq	%rdx, %rax	# _62, tmp130
	salq	$3, %rax	#, tmp131
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	addq	%rcx, %rax	# _57, D.56441
# ./core/vmap.h:173: 		return _cowdata.get_m(p_index).value;
	addq	$16, %rax	#, _7
# ./core/vmap.h:174: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2837:
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi
	.section	.text._ZN6VectorIPK7VariantE6resizeEi,"axG",@progbits,_ZN6VectorIPK7VariantE6resizeEi,comdat
	.align 2
	.weak	_ZN6VectorIPK7VariantE6resizeEi
	.type	_ZN6VectorIPK7VariantE6resizeEi, @function
_ZN6VectorIPK7VariantE6resizeEi:
.LFB2838:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_size, p_size
# ./core/vector.h:84: 	Error resize(int p_size) { return _cowdata.resize(p_size); }
	movq	-8(%rbp), %rax	# this, tmp85
	leaq	8(%rax), %rdx	#, _1
	movl	-12(%rbp), %eax	# p_size, tmp86
	movl	%eax, %esi	# tmp86,
	movq	%rdx, %rdi	# _1,
	call	_ZN7CowDataIPK7VariantE6resizeEi	#
# ./core/vector.h:84: 	Error resize(int p_size) { return _cowdata.resize(p_size); }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2838:
	.size	_ZN6VectorIPK7VariantE6resizeEi, .-_ZN6VectorIPK7VariantE6resizeEi
	.section	.text._ZN27_ObjectSignalDisconnectDataaSERKS_,"axG",@progbits,_ZN27_ObjectSignalDisconnectDataaSERKS_,comdat
	.align 2
	.weak	_ZN27_ObjectSignalDisconnectDataaSERKS_
	.type	_ZN27_ObjectSignalDisconnectDataaSERKS_, @function
_ZN27_ObjectSignalDisconnectDataaSERKS_:
.LFB2843:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.42227, D.42227
# core/object.cpp:1130: struct _ObjectSignalDisconnectData {
	movq	-16(%rbp), %rdx	# D.42227, _1
	movq	-8(%rbp), %rax	# this, _2
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameaSERKS_	#
	movq	-16(%rbp), %rax	# D.42227, tmp89
	movq	8(%rax), %rdx	# _6(D)->target, _3
	movq	-8(%rbp), %rax	# this, tmp90
	movq	%rdx, 8(%rax)	# _3, this_7(D)->target
	movq	-16(%rbp), %rax	# D.42227, tmp91
	leaq	16(%rax), %rdx	#, _4
	movq	-8(%rbp), %rax	# this, tmp92
	addq	$16, %rax	#, _5
	movq	%rdx, %rsi	# _4,
	movq	%rax, %rdi	# _5,
	call	_ZN10StringNameaSERKS_	#
	movq	-8(%rbp), %rax	# this, _12
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2843:
	.size	_ZN27_ObjectSignalDisconnectDataaSERKS_, .-_ZN27_ObjectSignalDisconnectDataaSERKS_
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_:
.LFB2842:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# value, value
# ./core/list.h:219: 		if (!_data) {
	movq	-72(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_26(D)->_data, _1
# ./core/list.h:219: 		if (!_data) {
	testq	%rax, %rax	# _1
	jne	.L3228	#,
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$24, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -32(%rbp)	# _2, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp109
	movq	%rax, -40(%rbp)	# tmp109, D.55604
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rdx	# p_obj, D.55605
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movq	-72(%rbp), %rax	# this, tmp110
	movq	%rdx, (%rax)	# D.55605, this_26(D)->_data
# ./core/list.h:222: 			_data->first = NULL;
	movq	-72(%rbp), %rax	# this, tmp111
	movq	(%rax), %rax	# this_26(D)->_data, _4
	movq	$0, (%rax)	#, _4->first
# ./core/list.h:223: 			_data->last = NULL;
	movq	-72(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_26(D)->_data, _5
	movq	$0, 8(%rax)	#, _5->last
# ./core/list.h:224: 			_data->size_cache = 0;
	movq	-72(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_26(D)->_data, _6
	movl	$0, 16(%rax)	#, _6->size_cache
.L3228:
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$48, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, %rbx	#, _34
	movq	%rbx, -64(%rbp)	# _34, this
# ./core/list.h:141: 		_FORCE_INLINE_ Element() {
	movq	-64(%rbp), %rax	# this, _54
	movq	%rax, %rdi	# _54,
	call	_ZN27_ObjectSignalDisconnectDataC1Ev	#
# ./core/list.h:142: 			next_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp114
	movq	$0, 24(%rax)	#, this_53->next_ptr
# ./core/list.h:143: 			prev_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp115
	movq	$0, 32(%rax)	#, this_53->prev_ptr
# ./core/list.h:144: 			data = NULL;
	movq	-64(%rbp), %rax	# this, tmp116
	movq	$0, 40(%rax)	#, this_53->data
# ./core/list.h:145: 		};
	nop	
	movq	%rbx, -48(%rbp)	# _34, p_obj
	movq	-48(%rbp), %rax	# p_obj, tmp117
	movq	%rax, -56(%rbp)	# tmp117, D.55609
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-48(%rbp), %rax	# p_obj, D.55610
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movq	%rax, -24(%rbp)	# D.55610, n
# ./core/list.h:228: 		n->value = (T &)value;
	movq	-24(%rbp), %rax	# n, _7
	movq	-80(%rbp), %rdx	# value, tmp118
	movq	%rdx, %rsi	# tmp118,
	movq	%rax, %rdi	# _7,
	call	_ZN27_ObjectSignalDisconnectDataaSERKS_	#
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-72(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_26(D)->_data, _8
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	8(%rax), %rdx	# _8->last, _9
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-24(%rbp), %rax	# n, tmp120
	movq	%rdx, 32(%rax)	# _9, n_36->prev_ptr
# ./core/list.h:231: 		n->next_ptr = 0;
	movq	-24(%rbp), %rax	# n, tmp121
	movq	$0, 24(%rax)	#, n_36->next_ptr
# ./core/list.h:232: 		n->data = _data;
	movq	-72(%rbp), %rax	# this, tmp122
	movq	(%rax), %rdx	# this_26(D)->_data, _10
# ./core/list.h:232: 		n->data = _data;
	movq	-24(%rbp), %rax	# n, tmp123
	movq	%rdx, 40(%rax)	# _10, n_36->data
# ./core/list.h:234: 		if (_data->last) {
	movq	-72(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_26(D)->_data, _11
# ./core/list.h:234: 		if (_data->last) {
	movq	8(%rax), %rax	# _11->last, _12
# ./core/list.h:234: 		if (_data->last) {
	testq	%rax, %rax	# _12
	je	.L3231	#,
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-72(%rbp), %rax	# this, tmp125
	movq	(%rax), %rax	# this_26(D)->_data, _13
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	8(%rax), %rax	# _13->last, _14
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-24(%rbp), %rdx	# n, tmp126
	movq	%rdx, 24(%rax)	# tmp126, _14->next_ptr
.L3231:
# ./core/list.h:239: 		_data->last = n;
	movq	-72(%rbp), %rax	# this, tmp127
	movq	(%rax), %rax	# this_26(D)->_data, _15
	movq	-24(%rbp), %rdx	# n, tmp128
	movq	%rdx, 8(%rax)	# tmp128, _15->last
# ./core/list.h:241: 		if (!_data->first)
	movq	-72(%rbp), %rax	# this, tmp129
	movq	(%rax), %rax	# this_26(D)->_data, _16
# ./core/list.h:241: 		if (!_data->first)
	movq	(%rax), %rax	# _16->first, _17
# ./core/list.h:241: 		if (!_data->first)
	testq	%rax, %rax	# _17
	jne	.L3232	#,
# ./core/list.h:242: 			_data->first = n;
	movq	-72(%rbp), %rax	# this, tmp130
	movq	(%rax), %rax	# this_26(D)->_data, _18
	movq	-24(%rbp), %rdx	# n, tmp131
	movq	%rdx, (%rax)	# tmp131, _18->first
.L3232:
# ./core/list.h:244: 		_data->size_cache++;
	movq	-72(%rbp), %rax	# this, tmp132
	movq	(%rax), %rax	# this_26(D)->_data, _19
# ./core/list.h:244: 		_data->size_cache++;
	movl	16(%rax), %edx	# _19->size_cache, _20
# ./core/list.h:244: 		_data->size_cache++;
	addl	$1, %edx	#, _21
	movl	%edx, 16(%rax)	# _21, _19->size_cache
# ./core/list.h:246: 		return n;
	movq	-24(%rbp), %rax	# n, _46
# ./core/list.h:247: 	};
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2842:
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9push_backERKS0_
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv:
.LFB2847:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:291: 		if (_data && _data->first)
	movq	-8(%rbp), %rax	# this, tmp87
	movq	(%rax), %rax	# this_8(D)->_data, _1
# ./core/list.h:291: 		if (_data && _data->first)
	testq	%rax, %rax	# _1
	je	.L3236	#,
# ./core/list.h:291: 		if (_data && _data->first)
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_8(D)->_data, _2
# ./core/list.h:291: 		if (_data && _data->first)
	movq	(%rax), %rax	# _2->first, _3
# ./core/list.h:291: 		if (_data && _data->first)
	testq	%rax, %rax	# _3
	je	.L3236	#,
# ./core/list.h:292: 			erase(_data->first);
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_8(D)->_data, _4
# ./core/list.h:292: 			erase(_data->first);
	movq	(%rax), %rdx	# _4->first, _5
# ./core/list.h:292: 			erase(_data->first);
	movq	-8(%rbp), %rax	# this, tmp90
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp90,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE	#
.L3236:
# ./core/list.h:293: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2847:
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE9pop_frontEv
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC2Ev,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC5Ev,comdat
	.align 2
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC2Ev
	.type	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC2Ev, @function
_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC2Ev:
.LFB2849:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:708: 		_data = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->_data
# ./core/list.h:709: 	};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2849:
	.size	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC2Ev, .-_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC2Ev
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC1Ev
	.set	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC1Ev,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorEC2Ev
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED5Ev,comdat
	.align 2
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev
	.type	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev, @function
_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev:
.LFB2852:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2852
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:711: 		clear();
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv	#
# ./core/list.h:712: 		if (_data) {
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11(D)->_data, _1
# ./core/list.h:712: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3242	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_11(D)->_data, _2
	movl	16(%rax), %eax	# _2->size_cache, _3
	testl	%eax, %eax	# _3
	setne	%al	#, _4
	movzbl	%al, %eax	# _4, _5
	testq	%rax, %rax	# _6
	je	.L3240	#,
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movl	$0, %r8d	#,
	movl	$.LC117, %ecx	#,
	movl	$714, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC119, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/list.h:717: 	};
	jmp	.L3243	#
.L3240:
# ./core/list.h:714: 			ERR_FAIL_COND(_data->size_cache);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:715: 			memdelete_allocator<_Data, A>(_data);
	movq	-8(%rbp), %rax	# this, tmp92
	movq	(%rax), %rax	# this_11(D)->_data, _7
	movq	%rax, %rdi	# _7,
	call	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_	#
.L3242:
# ./core/list.h:717: 	};
	nop	
.L3243:
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2852:
	.section	.gcc_except_table
.LLSDA2852:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2852-.LLSDACSB2852
.LLSDACSB2852:
.LLSDACSE2852:
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED5Ev,comdat
	.size	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev, .-_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED1Ev
	.set	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED1Ev,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorED2Ev
	.section	.rodata
	.align 8
.LC125:
	.string	"FATAL: Method/Function Failed."
	.section	.text._ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi,"axG",@progbits,_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi,comdat
	.align 2
	.weak	_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi
	.type	_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi, @function
_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi:
.LFB2858:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movl	%esi, -76(%rbp)	# p_index, p_index
# ./core/list.h:473: 		CRASH_BAD_INDEX(p_index, size());
	movl	-76(%rbp), %eax	# p_index, tmp106
	shrl	$31, %eax	#, tmp105
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	jne	.L3245	#,
	movq	-72(%rbp), %rax	# this, tmp107
	movq	%rax, -24(%rbp)	# tmp107, this
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-24(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_33->_data, _34
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	testq	%rax, %rax	# _34
	je	.L3246	#,
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-24(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_33->_data, _35
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	16(%rax), %eax	# _35->size_cache, D.55203
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	jmp	.L3264	#
.L3246:
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	$0, %eax	#, D.55203
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	nop	
.L3264:
# ./core/list.h:473: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -76(%rbp)	# D.55203, p_index
	setge	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L3249	#,
.L3245:
# ./core/list.h:473: 		CRASH_BAD_INDEX(p_index, size());
	movl	$1, %eax	#, iftmp.246_14
	jmp	.L3250	#
.L3249:
# ./core/list.h:473: 		CRASH_BAD_INDEX(p_index, size());
	movl	$0, %eax	#, iftmp.246_14
.L3250:
# ./core/list.h:473: 		CRASH_BAD_INDEX(p_index, size());
	movzbl	%al, %eax	# iftmp.246_14, _8
	testq	%rax, %rax	# _8
	setne	%al	#, retval.245_23
	testb	%al, %al	# retval.245_23
	je	.L3251	#,
	movq	-72(%rbp), %rax	# this, tmp110
	movq	%rax, -32(%rbp)	# tmp110, this
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-32(%rbp), %rax	# this, tmp111
	movq	(%rax), %rax	# this_40->_data, _41
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	testq	%rax, %rax	# _41
	je	.L3252	#,
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-32(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_40->_data, _42
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	16(%rax), %eax	# _42->size_cache, D.55208
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	jmp	.L3265	#
.L3252:
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	$0, %eax	#, D.55208
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	nop	
.L3265:
# ./core/list.h:473: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# D.55208, _10
	movl	-76(%rbp), %eax	# p_index, tmp113
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _10,
	movq	%rax, %rcx	# _11,
	movl	$473, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC48, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L3251:
	movq	-72(%rbp), %rax	# this, tmp114
	movq	%rax, -40(%rbp)	# tmp114, this
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-40(%rbp), %rax	# this, tmp115
	movq	(%rax), %rax	# this_47->_data, _48
# ./core/list.h:188: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _48
	je	.L3255	#,
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	-40(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_47->_data, _49
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _49->first, D.55213
# ./core/list.h:188: 		return _data ? _data->first : 0;
	jmp	.L3266	#
.L3255:
# ./core/list.h:188: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.55213
# ./core/list.h:188: 		return _data ? _data->first : 0;
	nop	
.L3266:
# ./core/list.h:475: 		const Element *I = front();
	movq	%rax, -8(%rbp)	# D.55213, I
# ./core/list.h:476: 		int c = 0;
	movl	$0, -12(%rbp)	#, c
.L3263:
# ./core/list.h:477: 		while (I) {
	cmpq	$0, -8(%rbp)	#, I
	je	.L3258	#,
# ./core/list.h:479: 			if (c == p_index) {
	movl	-12(%rbp), %eax	# c, tmp117
	cmpl	-76(%rbp), %eax	# p_index, tmp117
	jne	.L3259	#,
	movq	-8(%rbp), %rax	# I, tmp118
	movq	%rax, -48(%rbp)	# tmp118, this
# ./core/list.h:127: 			return value;
	movq	-48(%rbp), %rax	# this, D.55218
# ./core/list.h:481: 				return I->get();
	jmp	.L3267	#
.L3259:
	movq	-8(%rbp), %rax	# I, tmp119
	movq	%rax, -56(%rbp)	# tmp119, this
# ./core/list.h:66: 			return next_ptr;
	movq	-56(%rbp), %rax	# this, tmp120
	movq	56(%rax), %rax	# this_56->next_ptr, D.55222
# ./core/list.h:483: 			I = I->next();
	movq	%rax, -8(%rbp)	# D.55222, I
# ./core/list.h:484: 			c++;
	addl	$1, -12(%rbp)	#, c
# ./core/list.h:477: 		while (I) {
	jmp	.L3263	#
.L3258:
# ./core/list.h:487: 		CRASH_NOW(); // bug!!
	movl	$0, %r8d	#,
	movl	$.LC125, %ecx	#,
	movl	$487, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC48, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	ud2	
.L3267:
# ./core/list.h:488: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2858:
	.size	_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi, .-_ZNK4ListIN6Object10ConnectionE16DefaultAllocatorEixEi
	.section	.text._ZNK3RefI6ScriptE8is_validEv,"axG",@progbits,_ZNK3RefI6ScriptE8is_validEv,comdat
	.align 2
	.weak	_ZNK3RefI6ScriptE8is_validEv
	.type	_ZNK3RefI6ScriptE8is_validEv, @function
_ZNK3RefI6ScriptE8is_validEv:
.LFB2859:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:272: 	inline bool is_valid() const { return reference != NULL; }
	movq	-8(%rbp), %rax	# this, tmp85
	movq	(%rax), %rax	# this_3(D)->reference, _1
# ./core/reference.h:272: 	inline bool is_valid() const { return reference != NULL; }
	testq	%rax, %rax	# _1
	setne	%al	#, _4
# ./core/reference.h:272: 	inline bool is_valid() const { return reference != NULL; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2859:
	.size	_ZNK3RefI6ScriptE8is_validEv, .-_ZNK3RefI6ScriptE8is_validEv
	.section	.rodata
	.align 8
.LC126:
	.string	"Method/Function Failed, returning: __null"
.LC127:
	.string	"next"
	.section	.text._ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_,"axG",@progbits,_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_,comdat
	.align 2
	.weak	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_
	.type	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_, @function
_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_:
.LFB2860:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_key, p_key
# ./core/hash_map.h:486: 		if (unlikely(!hash_table))
	movq	-88(%rbp), %rax	# this, tmp139
	movq	(%rax), %rax	# this_45(D)->hash_table, _1
	testq	%rax, %rax	# _1
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:486: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _4
	je	.L3271	#,
# ./core/hash_map.h:487: 			return NULL;
	movl	$0, %eax	#, _41
	jmp	.L3272	#
.L3271:
# ./core/hash_map.h:489: 		if (!p_key) { /* get the first key */
	cmpq	$0, -96(%rbp)	#, p_key
	jne	.L3273	#,
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -4(%rbp)	#, i
.L3276:
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-88(%rbp), %rax	# this, tmp140
	movzbl	8(%rax), %eax	# this_45(D)->hash_table_power, _5
	movzbl	%al, %eax	# _5, _6
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp141
	movl	%eax, %ecx	# _6, tmp178
	sall	%cl, %edx	# tmp178, tmp141
	movl	%edx, %eax	# tmp141, _7
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -4(%rbp)	# _7, i
	jge	.L3274	#,
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	movq	-88(%rbp), %rax	# this, tmp142
	movq	(%rax), %rax	# this_45(D)->hash_table, _8
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	movl	-4(%rbp), %edx	# i, tmp143
	movslq	%edx, %rdx	# tmp143, _9
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	salq	$3, %rdx	#, _10
	addq	%rdx, %rax	# _10, _11
	movq	(%rax), %rax	# *_11, _12
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	testq	%rax, %rax	# _12
	je	.L3275	#,
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	movq	-88(%rbp), %rax	# this, tmp144
	movq	(%rax), %rax	# this_45(D)->hash_table, _13
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	movl	-4(%rbp), %edx	# i, tmp145
	movslq	%edx, %rdx	# tmp145, _14
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	salq	$3, %rdx	#, _15
	addq	%rdx, %rax	# _15, _16
	movq	(%rax), %rax	# *_16, _17
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	addq	$16, %rax	#, _41
	jmp	.L3272	#
.L3275:
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L3276	#
.L3273:
	movq	-88(%rbp), %rax	# this, tmp146
	movq	%rax, -32(%rbp)	# tmp146, this
	movq	-96(%rbp), %rax	# p_key, tmp147
	movq	%rax, -40(%rbp)	# tmp147, p_key
	movq	-40(%rbp), %rax	# p_key, tmp148
	movq	%rax, -48(%rbp)	# tmp148, p_string_name
	movq	-48(%rbp), %rax	# p_string_name, tmp149
	movq	%rax, -56(%rbp)	# tmp149, this
# ./core/string_name.h:112: 		if (_data)
	movq	-56(%rbp), %rax	# this, tmp150
	movq	(%rax), %rax	# this_66->_data, _67
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _67
	je	.L3277	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-56(%rbp), %rax	# this, tmp151
	movq	(%rax), %rax	# this_66->_data, _68
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _68->hash, _69
	jmp	.L3278	#
.L3277:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _69
.L3278:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -60(%rbp)	# _69, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-32(%rbp), %rax	# this, tmp152
	movzbl	8(%rax), %eax	# this_63->hash_table_power, _76
	movzbl	%al, %eax	# _76, _77
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp153
	movl	%eax, %ecx	# _77, tmp180
	sall	%cl, %edx	# tmp180, tmp153
	movl	%edx, %eax	# tmp153, _78
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _79
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-60(%rbp), %eax	# hash, tmp155
	movl	%eax, -64(%rbp)	# tmp155, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-32(%rbp), %rax	# this, tmp156
	movq	(%rax), %rax	# this_63->hash_table, _82
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-64(%rbp), %edx	# index, _83
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _84
	addq	%rdx, %rax	# _84, _85
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_85, tmp157
	movq	%rax, -72(%rbp)	# tmp157, e
.L3285:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -72(%rbp)	#, e
	je	.L3280	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-72(%rbp), %rax	# e, tmp158
	movl	(%rax), %eax	# e_87->hash, _88
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -60(%rbp)	# _88, hash
	jne	.L3281	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-72(%rbp), %rax	# e, tmp159
	leaq	16(%rax), %rdx	#, _89
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-40(%rbp), %rax	# p_key, tmp160
	movq	%rax, %rsi	# tmp160,
	movq	%rdx, %rdi	# _89,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _90
	je	.L3281	#,
	movl	$1, %eax	#, iftmp.197_91
	jmp	.L3282	#
.L3281:
	movl	$0, %eax	#, iftmp.197_91
.L3282:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_91
	je	.L3283	#,
# ./core/hash_map.h:198: 				return e;
	movq	-72(%rbp), %rax	# e, D.55539
	jmp	.L3284	#
.L3283:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-72(%rbp), %rax	# e, tmp161
	movq	8(%rax), %rax	# e_87->next, tmp162
	movq	%rax, -72(%rbp)	# tmp162, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3285	#
.L3280:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, D.55539
.L3284:
# ./core/hash_map.h:500: 			const Element *e = get_element(*p_key);
	movq	%rax, -16(%rbp)	# D.55539, e
# ./core/hash_map.h:501: 			if (!e) {
	cmpq	$0, -16(%rbp)	#, e
	jne	.L3286	#,
# ./core/hash_map.h:503: 				ERR_FAIL_V(NULL);
	movl	$0, %r8d	#,
	movl	$.LC126, %ecx	#,
	movl	$503, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC127, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %eax	#, _41
	jmp	.L3272	#
.L3286:
# ./core/hash_map.h:505: 			if (e->next) {
	movq	-16(%rbp), %rax	# e, tmp163
	movq	8(%rax), %rax	# e_48->next, _18
# ./core/hash_map.h:505: 			if (e->next) {
	testq	%rax, %rax	# _18
	je	.L3287	#,
# ./core/hash_map.h:507: 				return &e->next->pair.key;
	movq	-16(%rbp), %rax	# e, tmp164
	movq	8(%rax), %rax	# e_48->next, _19
# ./core/hash_map.h:507: 				return &e->next->pair.key;
	addq	$16, %rax	#, _41
	jmp	.L3272	#
.L3287:
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	movq	-16(%rbp), %rax	# e, tmp165
	movl	(%rax), %edx	# e_48->hash, _20
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	movq	-88(%rbp), %rax	# this, tmp166
	movzbl	8(%rax), %eax	# this_45(D)->hash_table_power, _21
	movzbl	%al, %eax	# _21, _22
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	movl	$1, %esi	#, tmp167
	movl	%eax, %ecx	# _22, tmp182
	sall	%cl, %esi	# tmp182, tmp167
	movl	%esi, %eax	# tmp167, _23
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _24
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	andl	%edx, %eax	# _20, tmp168
	movl	%eax, -20(%rbp)	# tmp168, index
# ./core/hash_map.h:511: 				index++;
	addl	$1, -20(%rbp)	#, index
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	movl	-20(%rbp), %eax	# index, tmp169
	movl	%eax, -8(%rbp)	# tmp169, i
.L3289:
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	movq	-88(%rbp), %rax	# this, tmp170
	movzbl	8(%rax), %eax	# this_45(D)->hash_table_power, _26
	movzbl	%al, %eax	# _26, _27
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp171
	movl	%eax, %ecx	# _27, tmp184
	sall	%cl, %edx	# tmp184, tmp171
	movl	%edx, %eax	# tmp171, _28
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -8(%rbp)	# _28, i
	jge	.L3274	#,
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	movq	-88(%rbp), %rax	# this, tmp172
	movq	(%rax), %rax	# this_45(D)->hash_table, _29
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	movl	-8(%rbp), %edx	# i, tmp173
	movslq	%edx, %rdx	# tmp173, _30
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	salq	$3, %rdx	#, _31
	addq	%rdx, %rax	# _31, _32
	movq	(%rax), %rax	# *_32, _33
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	testq	%rax, %rax	# _33
	je	.L3288	#,
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	movq	-88(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_45(D)->hash_table, _34
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	movl	-8(%rbp), %edx	# i, tmp175
	movslq	%edx, %rdx	# tmp175, _35
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	salq	$3, %rdx	#, _36
	addq	%rdx, %rax	# _36, _37
	movq	(%rax), %rax	# *_37, _38
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	addq	$16, %rax	#, _41
	jmp	.L3272	#
.L3288:
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L3289	#
.L3274:
# ./core/hash_map.h:523: 		return NULL; /* nothing found */
	movl	$0, %eax	#, _41
.L3272:
# ./core/hash_map.h:524: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2860:
	.size	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_, .-_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4nextEPKS0_
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_,comdat
	.align 2
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_
	.type	_ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_, @function
_ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_:
.LFB2861:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# value, value
# ./core/list.h:219: 		if (!_data) {
	movq	-72(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_26(D)->_data, _1
# ./core/list.h:219: 		if (!_data) {
	testq	%rax, %rax	# _1
	jne	.L3291	#,
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$24, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -32(%rbp)	# _2, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp109
	movq	%rax, -40(%rbp)	# tmp109, D.59228
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rdx	# p_obj, D.59229
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movq	-72(%rbp), %rax	# this, tmp110
	movq	%rdx, (%rax)	# D.59229, this_26(D)->_data
# ./core/list.h:222: 			_data->first = NULL;
	movq	-72(%rbp), %rax	# this, tmp111
	movq	(%rax), %rax	# this_26(D)->_data, _4
	movq	$0, (%rax)	#, _4->first
# ./core/list.h:223: 			_data->last = NULL;
	movq	-72(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_26(D)->_data, _5
	movq	$0, 8(%rax)	#, _5->last
# ./core/list.h:224: 			_data->size_cache = 0;
	movq	-72(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_26(D)->_data, _6
	movl	$0, 16(%rax)	#, _6->size_cache
.L3291:
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$112, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, %rbx	#, _34
	movq	%rbx, -64(%rbp)	# _34, this
# ./core/list.h:141: 		_FORCE_INLINE_ Element() {
	movq	-64(%rbp), %rax	# this, _54
	movq	%rax, %rdi	# _54,
	call	_ZN10MethodInfoC1Ev	#
# ./core/list.h:142: 			next_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp114
	movq	$0, 88(%rax)	#, this_53->next_ptr
# ./core/list.h:143: 			prev_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp115
	movq	$0, 96(%rax)	#, this_53->prev_ptr
# ./core/list.h:144: 			data = NULL;
	movq	-64(%rbp), %rax	# this, tmp116
	movq	$0, 104(%rax)	#, this_53->data
# ./core/list.h:145: 		};
	nop	
	movq	%rbx, -48(%rbp)	# _34, p_obj
	movq	-48(%rbp), %rax	# p_obj, tmp117
	movq	%rax, -56(%rbp)	# tmp117, D.59233
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-48(%rbp), %rax	# p_obj, D.59234
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movq	%rax, -24(%rbp)	# D.59234, n
# ./core/list.h:228: 		n->value = (T &)value;
	movq	-24(%rbp), %rax	# n, _7
	movq	-80(%rbp), %rdx	# value, tmp118
	movq	%rdx, %rsi	# tmp118,
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodInfoaSERKS_	#
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-72(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_26(D)->_data, _8
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	8(%rax), %rdx	# _8->last, _9
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-24(%rbp), %rax	# n, tmp120
	movq	%rdx, 96(%rax)	# _9, n_36->prev_ptr
# ./core/list.h:231: 		n->next_ptr = 0;
	movq	-24(%rbp), %rax	# n, tmp121
	movq	$0, 88(%rax)	#, n_36->next_ptr
# ./core/list.h:232: 		n->data = _data;
	movq	-72(%rbp), %rax	# this, tmp122
	movq	(%rax), %rdx	# this_26(D)->_data, _10
# ./core/list.h:232: 		n->data = _data;
	movq	-24(%rbp), %rax	# n, tmp123
	movq	%rdx, 104(%rax)	# _10, n_36->data
# ./core/list.h:234: 		if (_data->last) {
	movq	-72(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_26(D)->_data, _11
# ./core/list.h:234: 		if (_data->last) {
	movq	8(%rax), %rax	# _11->last, _12
# ./core/list.h:234: 		if (_data->last) {
	testq	%rax, %rax	# _12
	je	.L3294	#,
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-72(%rbp), %rax	# this, tmp125
	movq	(%rax), %rax	# this_26(D)->_data, _13
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	8(%rax), %rax	# _13->last, _14
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-24(%rbp), %rdx	# n, tmp126
	movq	%rdx, 88(%rax)	# tmp126, _14->next_ptr
.L3294:
# ./core/list.h:239: 		_data->last = n;
	movq	-72(%rbp), %rax	# this, tmp127
	movq	(%rax), %rax	# this_26(D)->_data, _15
	movq	-24(%rbp), %rdx	# n, tmp128
	movq	%rdx, 8(%rax)	# tmp128, _15->last
# ./core/list.h:241: 		if (!_data->first)
	movq	-72(%rbp), %rax	# this, tmp129
	movq	(%rax), %rax	# this_26(D)->_data, _16
# ./core/list.h:241: 		if (!_data->first)
	movq	(%rax), %rax	# _16->first, _17
# ./core/list.h:241: 		if (!_data->first)
	testq	%rax, %rax	# _17
	jne	.L3295	#,
# ./core/list.h:242: 			_data->first = n;
	movq	-72(%rbp), %rax	# this, tmp130
	movq	(%rax), %rax	# this_26(D)->_data, _18
	movq	-24(%rbp), %rdx	# n, tmp131
	movq	%rdx, (%rax)	# tmp131, _18->first
.L3295:
# ./core/list.h:244: 		_data->size_cache++;
	movq	-72(%rbp), %rax	# this, tmp132
	movq	(%rax), %rax	# this_26(D)->_data, _19
# ./core/list.h:244: 		_data->size_cache++;
	movl	16(%rax), %edx	# _19->size_cache, _20
# ./core/list.h:244: 		_data->size_cache++;
	addl	$1, %edx	#, _21
	movl	%edx, 16(%rax)	# _21, _19->size_cache
# ./core/list.h:246: 		return n;
	movq	-24(%rbp), %rax	# n, _46
# ./core/list.h:247: 	};
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2861:
	.size	_ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_, .-_ZN4ListI10MethodInfo16DefaultAllocatorE9push_backERKS0_
	.section	.text._ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi,"axG",@progbits,_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi,comdat
	.align 2
	.weak	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi
	.type	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi, @function
_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi:
.LFB2862:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
	movl	%esi, -92(%rbp)	# p_index, p_index
# ./core/vmap.h:168: 		return _cowdata.get(p_index).value;
	movq	-88(%rbp), %rax	# this, _1
	movq	%rax, -8(%rbp)	# _1, this
	movl	-92(%rbp), %eax	# p_index, tmp111
	movl	%eax, -12(%rbp)	# tmp111, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-12(%rbp), %eax	# p_index, tmp113
	shrl	$31, %eax	#, tmp112
	movzbl	%al, %eax	# _10, _11
	testq	%rax, %rax	# _12
	jne	.L3298	#,
	movq	-8(%rbp), %rax	# this, tmp114
	movq	%rax, -24(%rbp)	# tmp114, this
	movq	-24(%rbp), %rax	# this, tmp115
	movq	%rax, -32(%rbp)	# tmp115, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-32(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_14->_ptr, _15
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _15
	jne	.L3299	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _16
	jmp	.L3300	#
.L3299:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-32(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_14->_ptr, _17
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _16
.L3300:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -40(%rbp)	# _16, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -40(%rbp)	#, size
	je	.L3301	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-40(%rbp), %rax	# size, tmp118
	movl	(%rax), %eax	# *size_21, _22
	jmp	.L3302	#
.L3301:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _23
.L3302:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -12(%rbp)	# _23, p_index
	setge	%al	#, _29
	movzbl	%al, %eax	# _29, _30
	testq	%rax, %rax	# _31
	je	.L3303	#,
.L3298:
	movl	$1, %eax	#, iftmp.255_32
	jmp	.L3304	#
.L3303:
	movl	$0, %eax	#, iftmp.255_32
.L3304:
	movzbl	%al, %eax	# iftmp.255_32, _35
	testq	%rax, %rax	# _35
	setne	%al	#, retval.254_36
	testb	%al, %al	# retval.254_36
	je	.L3305	#,
	movq	-8(%rbp), %rax	# this, tmp119
	movq	%rax, -48(%rbp)	# tmp119, this
	movq	-48(%rbp), %rax	# this, tmp120
	movq	%rax, -56(%rbp)	# tmp120, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-56(%rbp), %rax	# this, tmp121
	movq	(%rax), %rax	# this_38->_ptr, _39
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _39
	jne	.L3306	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _40
	jmp	.L3307	#
.L3306:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-56(%rbp), %rax	# this, tmp122
	movq	(%rax), %rax	# this_38->_ptr, _41
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _40
.L3307:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -64(%rbp)	# _40, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -64(%rbp)	#, size
	je	.L3308	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-64(%rbp), %rax	# size, tmp123
	movl	(%rax), %eax	# *size_45, _46
	jmp	.L3309	#
.L3308:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _47
.L3309:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _47, _53
	movl	-12(%rbp), %eax	# p_index, tmp124
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _53,
	movq	%rax, %rcx	# _54,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L3305:
	movq	-8(%rbp), %rax	# this, tmp125
	movq	%rax, -72(%rbp)	# tmp125, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-72(%rbp), %rax	# this, tmp126
	movq	(%rax), %rax	# this_55->_ptr, _56
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _56
	jne	.L3310	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _57
	jmp	.L3311	#
.L3310:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-72(%rbp), %rax	# this, tmp127
	movq	(%rax), %rcx	# this_55->_ptr, _57
.L3311:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-12(%rbp), %eax	# p_index, tmp128
	movslq	%eax, %rdx	# tmp128, _62
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _62, tmp129
	salq	$2, %rax	#, tmp129
	addq	%rdx, %rax	# _62, tmp129
	addq	%rax, %rax	# tmp129
	addq	%rdx, %rax	# _62, tmp129
	salq	$3, %rax	#, tmp130
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	addq	%rcx, %rax	# _57, D.56494
# ./core/vmap.h:168: 		return _cowdata.get(p_index).value;
	addq	$16, %rax	#, _7
# ./core/vmap.h:169: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2862:
	.size	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi, .-_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE4getvEi
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_,comdat
	.align 2
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_
	.type	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_, @function
_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_:
.LFB2863:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# value, value
# ./core/list.h:219: 		if (!_data) {
	movq	-72(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_26(D)->_data, _1
# ./core/list.h:219: 		if (!_data) {
	testq	%rax, %rax	# _1
	jne	.L3315	#,
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$24, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, -32(%rbp)	# _2, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp109
	movq	%rax, -40(%rbp)	# tmp109, D.56106
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rdx	# p_obj, D.56107
# ./core/list.h:221: 			_data = memnew_allocator(_Data, A);
	movq	-72(%rbp), %rax	# this, tmp110
	movq	%rdx, (%rax)	# D.56107, this_26(D)->_data
# ./core/list.h:222: 			_data->first = NULL;
	movq	-72(%rbp), %rax	# this, tmp111
	movq	(%rax), %rax	# this_26(D)->_data, _4
	movq	$0, (%rax)	#, _4->first
# ./core/list.h:223: 			_data->last = NULL;
	movq	-72(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_26(D)->_data, _5
	movq	$0, 8(%rax)	#, _5->last
# ./core/list.h:224: 			_data->size_cache = 0;
	movq	-72(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_26(D)->_data, _6
	movl	$0, 16(%rax)	#, _6->size_cache
.L3315:
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$80, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, %rbx	#, _34
	movq	%rbx, -64(%rbp)	# _34, this
# ./core/list.h:141: 		_FORCE_INLINE_ Element() {
	movq	-64(%rbp), %rax	# this, _54
	movq	%rax, %rdi	# _54,
	call	_ZN6Object10ConnectionC1Ev	#
# ./core/list.h:142: 			next_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp114
	movq	$0, 56(%rax)	#, this_53->next_ptr
# ./core/list.h:143: 			prev_ptr = 0;
	movq	-64(%rbp), %rax	# this, tmp115
	movq	$0, 64(%rax)	#, this_53->prev_ptr
# ./core/list.h:144: 			data = NULL;
	movq	-64(%rbp), %rax	# this, tmp116
	movq	$0, 72(%rax)	#, this_53->data
# ./core/list.h:145: 		};
	nop	
	movq	%rbx, -48(%rbp)	# _34, p_obj
	movq	-48(%rbp), %rax	# p_obj, tmp117
	movq	%rax, -56(%rbp)	# tmp117, D.56111
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-48(%rbp), %rax	# p_obj, D.56112
# ./core/list.h:227: 		Element *n = memnew_allocator(Element, A);
	movq	%rax, -24(%rbp)	# D.56112, n
# ./core/list.h:228: 		n->value = (T &)value;
	movq	-24(%rbp), %rax	# n, _7
	movq	-80(%rbp), %rdx	# value, tmp118
	movq	%rdx, %rsi	# tmp118,
	movq	%rax, %rdi	# _7,
	call	_ZN6Object10ConnectionaSERKS0_	#
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-72(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_26(D)->_data, _8
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	8(%rax), %rdx	# _8->last, _9
# ./core/list.h:230: 		n->prev_ptr = _data->last;
	movq	-24(%rbp), %rax	# n, tmp120
	movq	%rdx, 64(%rax)	# _9, n_36->prev_ptr
# ./core/list.h:231: 		n->next_ptr = 0;
	movq	-24(%rbp), %rax	# n, tmp121
	movq	$0, 56(%rax)	#, n_36->next_ptr
# ./core/list.h:232: 		n->data = _data;
	movq	-72(%rbp), %rax	# this, tmp122
	movq	(%rax), %rdx	# this_26(D)->_data, _10
# ./core/list.h:232: 		n->data = _data;
	movq	-24(%rbp), %rax	# n, tmp123
	movq	%rdx, 72(%rax)	# _10, n_36->data
# ./core/list.h:234: 		if (_data->last) {
	movq	-72(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_26(D)->_data, _11
# ./core/list.h:234: 		if (_data->last) {
	movq	8(%rax), %rax	# _11->last, _12
# ./core/list.h:234: 		if (_data->last) {
	testq	%rax, %rax	# _12
	je	.L3318	#,
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-72(%rbp), %rax	# this, tmp125
	movq	(%rax), %rax	# this_26(D)->_data, _13
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	8(%rax), %rax	# _13->last, _14
# ./core/list.h:236: 			_data->last->next_ptr = n;
	movq	-24(%rbp), %rdx	# n, tmp126
	movq	%rdx, 56(%rax)	# tmp126, _14->next_ptr
.L3318:
# ./core/list.h:239: 		_data->last = n;
	movq	-72(%rbp), %rax	# this, tmp127
	movq	(%rax), %rax	# this_26(D)->_data, _15
	movq	-24(%rbp), %rdx	# n, tmp128
	movq	%rdx, 8(%rax)	# tmp128, _15->last
# ./core/list.h:241: 		if (!_data->first)
	movq	-72(%rbp), %rax	# this, tmp129
	movq	(%rax), %rax	# this_26(D)->_data, _16
# ./core/list.h:241: 		if (!_data->first)
	movq	(%rax), %rax	# _16->first, _17
# ./core/list.h:241: 		if (!_data->first)
	testq	%rax, %rax	# _17
	jne	.L3319	#,
# ./core/list.h:242: 			_data->first = n;
	movq	-72(%rbp), %rax	# this, tmp130
	movq	(%rax), %rax	# this_26(D)->_data, _18
	movq	-24(%rbp), %rdx	# n, tmp131
	movq	%rdx, (%rax)	# tmp131, _18->first
.L3319:
# ./core/list.h:244: 		_data->size_cache++;
	movq	-72(%rbp), %rax	# this, tmp132
	movq	(%rax), %rax	# this_26(D)->_data, _19
# ./core/list.h:244: 		_data->size_cache++;
	movl	16(%rax), %edx	# _19->size_cache, _20
# ./core/list.h:244: 		_data->size_cache++;
	addl	$1, %edx	#, _21
	movl	%edx, 16(%rax)	# _21, _19->size_cache
# ./core/list.h:246: 		return n;
	movq	-24(%rbp), %rax	# n, _46
# ./core/list.h:247: 	};
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2863:
	.size	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_, .-_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE9push_backERKS1_
	.section	.text._ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_,"axG",@progbits,_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_,comdat
	.align 2
	.weak	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_
	.type	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_, @function
_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_:
.LFB2868:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$56, %rsp	#,
	movq	%rdi, -168(%rbp)	# this, this
	movq	%rsi, -176(%rbp)	# p_val, p_val
	movq	-168(%rbp), %rax	# this, tmp128
	movq	%rax, -8(%rbp)	# tmp128, this
	movq	-176(%rbp), %rax	# p_val, tmp129
	movq	%rax, -16(%rbp)	# tmp129, p_val
# ./core/vmap.h:93: 		if (_cowdata.empty())
	movq	-8(%rbp), %rax	# this, _9
	movq	%rax, -24(%rbp)	# _9, this
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	movq	-24(%rbp), %rax	# this, tmp130
	movq	(%rax), %rax	# this_10->_ptr, _11
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	testq	%rax, %rax	# _11
	sete	%al	#, _12
# ./core/vmap.h:93: 		if (_cowdata.empty())
	testb	%al, %al	# _12
	je	.L3323	#,
# ./core/vmap.h:94: 			return -1;
	movl	$-1, %eax	#, D.56760
	jmp	.L3324	#
.L3323:
# ./core/vmap.h:96: 		int low = 0;
	movl	$0, -28(%rbp)	#, low
# ./core/vmap.h:97: 		int high = _cowdata.size() - 1;
	movq	-8(%rbp), %rax	# this, _17
	movq	%rax, -40(%rbp)	# _17, this
	movq	-40(%rbp), %rax	# this, tmp131
	movq	%rax, -48(%rbp)	# tmp131, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp132
	movq	(%rax), %rax	# this_19->_ptr, _20
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _20
	jne	.L3325	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _21
	jmp	.L3326	#
.L3325:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-48(%rbp), %rax	# this, tmp133
	movq	(%rax), %rax	# this_19->_ptr, _22
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _21
.L3326:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -56(%rbp)	# _21, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -56(%rbp)	#, size
	je	.L3327	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-56(%rbp), %rax	# size, tmp134
	movl	(%rax), %eax	# *size_26, _27
	jmp	.L3328	#
.L3327:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _28
.L3328:
# ./core/vmap.h:97: 		int high = _cowdata.size() - 1;
	subl	$1, %eax	#, tmp135
	movl	%eax, -60(%rbp)	# tmp135, high
# ./core/vmap.h:99: 		const Pair *a = _cowdata.ptr();
	movq	-8(%rbp), %rax	# this, _35
	movq	%rax, -72(%rbp)	# _35, this
	movq	-72(%rbp), %rax	# this, tmp136
	movq	%rax, -80(%rbp)	# tmp136, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-80(%rbp), %rax	# this, tmp137
	movq	(%rax), %rax	# this_37->_ptr, _38
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _38
	jne	.L3329	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _39
	jmp	.L3330	#
.L3329:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-80(%rbp), %rax	# this, tmp138
	movq	(%rax), %rax	# this_37->_ptr, _39
.L3330:
# ./core/cowdata.h:121: 		return _get_data();
	nop	
# ./core/vmap.h:99: 		const Pair *a = _cowdata.ptr();
	movq	%rax, -88(%rbp)	# _39, a
.L3344:
# ./core/vmap.h:101: 		while (low <= high) {
	movl	-28(%rbp), %eax	# low, tmp139
	cmpl	-60(%rbp), %eax	# high, tmp139
	jg	.L3332	#,
# ./core/vmap.h:102: 			middle = (low + high) / 2;
	movl	-28(%rbp), %edx	# low, tmp140
	movl	-60(%rbp), %eax	# high, tmp141
	addl	%edx, %eax	# tmp140, _48
# ./core/vmap.h:102: 			middle = (low + high) / 2;
	movl	%eax, %edx	# _48, tmp142
	shrl	$31, %edx	#, tmp142
	addl	%edx, %eax	# tmp142, tmp143
	sarl	%eax	# tmp144
	movl	%eax, -92(%rbp)	# tmp144, middle
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movl	-92(%rbp), %eax	# middle, tmp145
	movslq	%eax, %rdx	# tmp145, _50
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movq	%rdx, %rax	# _50, tmp146
	salq	$2, %rax	#, tmp146
	addq	%rdx, %rax	# _50, tmp146
	addq	%rax, %rax	# tmp146
	addq	%rdx, %rax	# _50, tmp146
	salq	$3, %rax	#, tmp147
	movq	%rax, %rdx	# tmp146, _51
	movq	-88(%rbp), %rax	# a, tmp148
	addq	%rdx, %rax	# _51, _52
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movq	%rax, %rdx	# _52, _53
	movq	-16(%rbp), %rax	# p_val, tmp149
	movq	%rax, -104(%rbp)	# tmp149, this
	movq	%rdx, -112(%rbp)	# _53, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-104(%rbp), %rax	# this, tmp150
	movq	(%rax), %rdx	# this_54->_id, _56
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-112(%rbp), %rax	# p_target, tmp151
	movq	(%rax), %rax	# p_target_55->_id, _57
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _57, _56
	jne	.L3333	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-112(%rbp), %rax	# p_target, tmp152
	addq	$8, %rax	#, _58
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-104(%rbp), %rdx	# this, tmp153
	addq	$8, %rdx	#, _59
	movq	%rdx, -120(%rbp)	# _59, this
	movq	%rax, -128(%rbp)	# _58, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-120(%rbp), %rax	# this, tmp154
	movq	(%rax), %rdx	# this_60->_data, _62
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-128(%rbp), %rax	# p_name, tmp155
	movq	(%rax), %rax	# p_name_61->_data, _63
	cmpq	%rax, %rdx	# _63, _62
	setb	%al	#, _64
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _64, _67
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _67
	setne	%al	#, iftmp.267_68
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L3346	#
.L3333:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-104(%rbp), %rax	# this, tmp156
	movq	(%rax), %rdx	# this_54->_id, _69
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-112(%rbp), %rax	# p_target, tmp157
	movq	(%rax), %rax	# p_target_55->_id, _70
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _70, _69
	setb	%al	#, iftmp.267_68
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L3346:
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	testb	%al, %al	# iftmp.267_68
	je	.L3337	#,
# ./core/vmap.h:105: 				high = middle - 1; //search low end of array
	movl	-92(%rbp), %eax	# middle, tmp161
	subl	$1, %eax	#, tmp160
	movl	%eax, -60(%rbp)	# tmp160, high
	jmp	.L3344	#
.L3337:
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	movl	-92(%rbp), %eax	# middle, tmp162
	movslq	%eax, %rdx	# tmp162, _77
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	movq	%rdx, %rax	# _77, tmp163
	salq	$2, %rax	#, tmp163
	addq	%rdx, %rax	# _77, tmp163
	addq	%rax, %rax	# tmp163
	addq	%rdx, %rax	# _77, tmp163
	salq	$3, %rax	#, tmp164
	movq	%rax, %rdx	# tmp163, _78
	movq	-88(%rbp), %rax	# a, tmp165
	addq	%rdx, %rax	# _78, _79
	movq	%rax, -136(%rbp)	# _80, this
	movq	-16(%rbp), %rax	# p_val, tmp166
	movq	%rax, -144(%rbp)	# tmp166, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# this, tmp167
	movq	(%rax), %rdx	# this_81->_id, _83
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-144(%rbp), %rax	# p_target, tmp168
	movq	(%rax), %rax	# p_target_82->_id, _84
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _84, _83
	jne	.L3339	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-144(%rbp), %rax	# p_target, tmp169
	addq	$8, %rax	#, _85
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rdx	# this, tmp170
	addq	$8, %rdx	#, _86
	movq	%rdx, -152(%rbp)	# _86, this
	movq	%rax, -160(%rbp)	# _85, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-152(%rbp), %rax	# this, tmp171
	movq	(%rax), %rdx	# this_87->_data, _89
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-160(%rbp), %rax	# p_name, tmp172
	movq	(%rax), %rax	# p_name_88->_data, _90
	cmpq	%rax, %rdx	# _90, _89
	setb	%al	#, _91
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _91, _94
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _94
	setne	%al	#, iftmp.267_95
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L3347	#
.L3339:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# this, tmp173
	movq	(%rax), %rdx	# this_81->_id, _96
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-144(%rbp), %rax	# p_target, tmp174
	movq	(%rax), %rax	# p_target_82->_id, _97
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _97, _96
	setb	%al	#, iftmp.267_95
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L3347:
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	testb	%al, %al	# iftmp.267_95
	je	.L3343	#,
# ./core/vmap.h:107: 				low = middle + 1; //search high end of array
	movl	-92(%rbp), %eax	# middle, tmp178
	addl	$1, %eax	#, tmp177
	movl	%eax, -28(%rbp)	# tmp177, low
	jmp	.L3344	#
.L3343:
# ./core/vmap.h:109: 				return middle;
	movl	-92(%rbp), %eax	# middle, D.56760
	jmp	.L3324	#
.L3332:
# ./core/vmap.h:113: 		return -1;
	movl	$-1, %eax	#, D.56760
.L3324:
# ./core/vmap.h:131: 		return _find_exact(p_val) != -1;
	cmpl	$-1, %eax	#, D.56760
	setne	%al	#, _6
# ./core/vmap.h:132: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2868:
	.size	_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_, .-_ZNK4VMapIN6Object6Signal6TargetENS1_4SlotEE3hasERKS2_
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_:
.LFB2869:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2869
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$344, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -344(%rbp)	# this, this
	movq	%rsi, -352(%rbp)	# p_key, p_key
	movq	-344(%rbp), %rax	# this, tmp157
	movq	%rax, -32(%rbp)	# tmp157, this
	movq	-352(%rbp), %rax	# p_key, tmp158
	movq	%rax, -40(%rbp)	# tmp158, p_val
# ./core/vmap.h:93: 		if (_cowdata.empty())
	movq	-32(%rbp), %rax	# this, _23
	movq	%rax, -48(%rbp)	# _23, this
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	movq	-48(%rbp), %rax	# this, tmp159
	movq	(%rax), %rax	# this_24->_ptr, _25
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	testq	%rax, %rax	# _25
	sete	%al	#, _26
# ./core/vmap.h:93: 		if (_cowdata.empty())
	testb	%al, %al	# _26
	je	.L3350	#,
# ./core/vmap.h:94: 			return -1;
	movl	$-1, %eax	#, D.58018
	jmp	.L3351	#
.L3350:
# ./core/vmap.h:96: 		int low = 0;
	movl	$0, -52(%rbp)	#, low
# ./core/vmap.h:97: 		int high = _cowdata.size() - 1;
	movq	-32(%rbp), %rax	# this, _31
	movq	%rax, -64(%rbp)	# _31, this
	movq	-64(%rbp), %rax	# this, tmp160
	movq	%rax, -72(%rbp)	# tmp160, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-72(%rbp), %rax	# this, tmp161
	movq	(%rax), %rax	# this_33->_ptr, _34
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _34
	jne	.L3352	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _35
	jmp	.L3353	#
.L3352:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-72(%rbp), %rax	# this, tmp162
	movq	(%rax), %rax	# this_33->_ptr, _36
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _35
.L3353:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -80(%rbp)	# _35, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -80(%rbp)	#, size
	je	.L3354	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-80(%rbp), %rax	# size, tmp163
	movl	(%rax), %eax	# *size_40, _41
	jmp	.L3355	#
.L3354:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _42
.L3355:
# ./core/vmap.h:97: 		int high = _cowdata.size() - 1;
	subl	$1, %eax	#, tmp164
	movl	%eax, -84(%rbp)	# tmp164, high
# ./core/vmap.h:99: 		const Pair *a = _cowdata.ptr();
	movq	-32(%rbp), %rax	# this, _49
	movq	%rax, -96(%rbp)	# _49, this
	movq	-96(%rbp), %rax	# this, tmp165
	movq	%rax, -104(%rbp)	# tmp165, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-104(%rbp), %rax	# this, tmp166
	movq	(%rax), %rax	# this_51->_ptr, _52
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _52
	jne	.L3356	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _53
	jmp	.L3357	#
.L3356:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-104(%rbp), %rax	# this, tmp167
	movq	(%rax), %rax	# this_51->_ptr, _53
.L3357:
# ./core/cowdata.h:121: 		return _get_data();
	nop	
# ./core/vmap.h:99: 		const Pair *a = _cowdata.ptr();
	movq	%rax, -112(%rbp)	# _53, a
.L3371:
# ./core/vmap.h:101: 		while (low <= high) {
	movl	-52(%rbp), %eax	# low, tmp168
	cmpl	-84(%rbp), %eax	# high, tmp168
	jg	.L3359	#,
# ./core/vmap.h:102: 			middle = (low + high) / 2;
	movl	-52(%rbp), %edx	# low, tmp169
	movl	-84(%rbp), %eax	# high, tmp170
	addl	%edx, %eax	# tmp169, _62
# ./core/vmap.h:102: 			middle = (low + high) / 2;
	movl	%eax, %edx	# _62, tmp171
	shrl	$31, %edx	#, tmp171
	addl	%edx, %eax	# tmp171, tmp172
	sarl	%eax	# tmp173
	movl	%eax, -116(%rbp)	# tmp173, middle
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movl	-116(%rbp), %eax	# middle, tmp174
	movslq	%eax, %rdx	# tmp174, _64
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movq	%rdx, %rax	# _64, tmp175
	salq	$2, %rax	#, tmp175
	addq	%rdx, %rax	# _64, tmp175
	addq	%rax, %rax	# tmp175
	addq	%rdx, %rax	# _64, tmp175
	salq	$3, %rax	#, tmp176
	movq	%rax, %rdx	# tmp175, _65
	movq	-112(%rbp), %rax	# a, tmp177
	addq	%rdx, %rax	# _65, _66
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movq	%rax, %rdx	# _66, _67
	movq	-40(%rbp), %rax	# p_val, tmp178
	movq	%rax, -128(%rbp)	# tmp178, this
	movq	%rdx, -136(%rbp)	# _67, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-128(%rbp), %rax	# this, tmp179
	movq	(%rax), %rdx	# this_68->_id, _70
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# p_target, tmp180
	movq	(%rax), %rax	# p_target_69->_id, _71
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _71, _70
	jne	.L3360	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# p_target, tmp181
	addq	$8, %rax	#, _72
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-128(%rbp), %rdx	# this, tmp182
	addq	$8, %rdx	#, _73
	movq	%rdx, -144(%rbp)	# _73, this
	movq	%rax, -152(%rbp)	# _72, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-144(%rbp), %rax	# this, tmp183
	movq	(%rax), %rdx	# this_74->_data, _76
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-152(%rbp), %rax	# p_name, tmp184
	movq	(%rax), %rax	# p_name_75->_data, _77
	cmpq	%rax, %rdx	# _77, _76
	setb	%al	#, _78
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _78, _81
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _81
	setne	%al	#, iftmp.267_82
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L3391	#
.L3360:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-128(%rbp), %rax	# this, tmp185
	movq	(%rax), %rdx	# this_68->_id, _83
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# p_target, tmp186
	movq	(%rax), %rax	# p_target_69->_id, _84
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _84, _83
	setb	%al	#, iftmp.267_82
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L3391:
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	testb	%al, %al	# iftmp.267_82
	je	.L3364	#,
# ./core/vmap.h:105: 				high = middle - 1; //search low end of array
	movl	-116(%rbp), %eax	# middle, tmp190
	subl	$1, %eax	#, tmp189
	movl	%eax, -84(%rbp)	# tmp189, high
	jmp	.L3371	#
.L3364:
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	movl	-116(%rbp), %eax	# middle, tmp191
	movslq	%eax, %rdx	# tmp191, _91
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	movq	%rdx, %rax	# _91, tmp192
	salq	$2, %rax	#, tmp192
	addq	%rdx, %rax	# _91, tmp192
	addq	%rax, %rax	# tmp192
	addq	%rdx, %rax	# _91, tmp192
	salq	$3, %rax	#, tmp193
	movq	%rax, %rdx	# tmp192, _92
	movq	-112(%rbp), %rax	# a, tmp194
	addq	%rdx, %rax	# _92, _93
	movq	%rax, -160(%rbp)	# _94, this
	movq	-40(%rbp), %rax	# p_val, tmp195
	movq	%rax, -168(%rbp)	# tmp195, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-160(%rbp), %rax	# this, tmp196
	movq	(%rax), %rdx	# this_95->_id, _97
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-168(%rbp), %rax	# p_target, tmp197
	movq	(%rax), %rax	# p_target_96->_id, _98
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _98, _97
	jne	.L3366	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-168(%rbp), %rax	# p_target, tmp198
	addq	$8, %rax	#, _99
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-160(%rbp), %rdx	# this, tmp199
	addq	$8, %rdx	#, _100
	movq	%rdx, -176(%rbp)	# _100, this
	movq	%rax, -184(%rbp)	# _99, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-176(%rbp), %rax	# this, tmp200
	movq	(%rax), %rdx	# this_101->_data, _103
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-184(%rbp), %rax	# p_name, tmp201
	movq	(%rax), %rax	# p_name_102->_data, _104
	cmpq	%rax, %rdx	# _104, _103
	setb	%al	#, _105
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _105, _108
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _108
	setne	%al	#, iftmp.267_109
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L3392	#
.L3366:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-160(%rbp), %rax	# this, tmp202
	movq	(%rax), %rdx	# this_95->_id, _110
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-168(%rbp), %rax	# p_target, tmp203
	movq	(%rax), %rax	# p_target_96->_id, _111
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _111, _110
	setb	%al	#, iftmp.267_109
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L3392:
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	testb	%al, %al	# iftmp.267_109
	je	.L3370	#,
# ./core/vmap.h:107: 				low = middle + 1; //search high end of array
	movl	-116(%rbp), %eax	# middle, tmp207
	addl	$1, %eax	#, tmp206
	movl	%eax, -52(%rbp)	# tmp206, low
	jmp	.L3371	#
.L3370:
# ./core/vmap.h:109: 				return middle;
	movl	-116(%rbp), %eax	# middle, D.58018
	jmp	.L3351	#
.L3359:
# ./core/vmap.h:113: 		return -1;
	movl	$-1, %eax	#, D.58018
.L3351:
# ./core/vmap.h:197: 		int pos = _find_exact(p_key);
	movl	%eax, -20(%rbp)	# D.58018, pos
# ./core/vmap.h:198: 		if (pos < 0) {
	cmpl	$0, -20(%rbp)	#, pos
	jns	.L3372	#,
# ./core/vmap.h:199: 			V val;
	leaq	-336(%rbp), %rax	#, tmp208
	movq	%rax, %rdi	# tmp208,
.LEHB702:
	call	_ZN6Object6Signal4SlotC1Ev	#
.LEHE702:
# ./core/vmap.h:200: 			pos = insert(p_key, val);
	leaq	-336(%rbp), %rdx	#, tmp209
	movq	-352(%rbp), %rcx	# p_key, tmp210
	movq	-344(%rbp), %rax	# this, tmp211
	movq	%rcx, %rsi	# tmp210,
	movq	%rax, %rdi	# tmp211,
.LEHB703:
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_	#
.LEHE703:
	movl	%eax, -20(%rbp)	# _13, pos
# ./core/vmap.h:199: 			V val;
	leaq	-336(%rbp), %rax	#, tmp212
	movq	%rax, %rdi	# tmp212,
	call	_ZN6Object6Signal4SlotD1Ev	#
.L3372:
# ./core/vmap.h:203: 		return _cowdata.get_m(pos).value;
	movq	-344(%rbp), %rax	# this, _1
	movq	%rax, -192(%rbp)	# _1, this
	movl	-20(%rbp), %eax	# pos, tmp213
	movl	%eax, -196(%rbp)	# tmp213, p_index
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	movl	-196(%rbp), %eax	# p_index, tmp215
	shrl	$31, %eax	#, tmp214
	movzbl	%al, %eax	# _125, _126
	testq	%rax, %rax	# _127
	jne	.L3373	#,
	movq	-192(%rbp), %rax	# this, tmp216
	movq	%rax, -208(%rbp)	# tmp216, this
	movq	-208(%rbp), %rax	# this, tmp217
	movq	%rax, -216(%rbp)	# tmp217, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-216(%rbp), %rax	# this, tmp218
	movq	(%rax), %rax	# this_129->_ptr, _130
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _130
	jne	.L3374	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _131
	jmp	.L3375	#
.L3374:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-216(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_129->_ptr, _132
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _131
.L3375:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -224(%rbp)	# _131, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -224(%rbp)	#, size
	je	.L3376	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-224(%rbp), %rax	# size, tmp220
	movl	(%rax), %eax	# *size_136, _137
	jmp	.L3377	#
.L3376:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _138
.L3377:
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -196(%rbp)	# _138, p_index
	setge	%al	#, _144
	movzbl	%al, %eax	# _144, _145
	testq	%rax, %rax	# _146
	je	.L3378	#,
.L3373:
	movl	$1, %eax	#, iftmp.210_147
	jmp	.L3379	#
.L3378:
	movl	$0, %eax	#, iftmp.210_147
.L3379:
	movzbl	%al, %eax	# iftmp.210_147, _150
	testq	%rax, %rax	# _150
	setne	%al	#, retval.209_151
	testb	%al, %al	# retval.209_151
	je	.L3380	#,
	movq	-192(%rbp), %rax	# this, tmp221
	movq	%rax, -232(%rbp)	# tmp221, this
	movq	-232(%rbp), %rax	# this, tmp222
	movq	%rax, -240(%rbp)	# tmp222, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-240(%rbp), %rax	# this, tmp223
	movq	(%rax), %rax	# this_153->_ptr, _154
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _154
	jne	.L3381	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _155
	jmp	.L3382	#
.L3381:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-240(%rbp), %rax	# this, tmp224
	movq	(%rax), %rax	# this_153->_ptr, _156
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _155
.L3382:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -248(%rbp)	# _155, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -248(%rbp)	#, size
	je	.L3383	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-248(%rbp), %rax	# size, tmp225
	movl	(%rax), %eax	# *size_160, _161
	jmp	.L3384	#
.L3383:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _162
.L3384:
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _162, _168
	movl	-196(%rbp), %eax	# p_index, tmp226
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _168,
	movq	%rax, %rcx	# _169,
	movl	$144, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC124, %edi	#,
.LEHB704:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L3380:
# ./core/cowdata.h:145: 		_copy_on_write();
	movq	-192(%rbp), %rax	# this, tmp227
	movq	%rax, %rdi	# tmp227,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
	movq	-192(%rbp), %rax	# this, tmp228
	movq	%rax, -256(%rbp)	# tmp228, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-256(%rbp), %rax	# this, tmp229
	movq	(%rax), %rax	# this_170->_ptr, _171
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _171
	jne	.L3385	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _172
	jmp	.L3386	#
.L3385:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-256(%rbp), %rax	# this, tmp230
	movq	(%rax), %rcx	# this_170->_ptr, _172
.L3386:
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	movl	-196(%rbp), %eax	# p_index, tmp231
	movslq	%eax, %rdx	# tmp231, _177
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _177, tmp232
	salq	$2, %rax	#, tmp232
	addq	%rdx, %rax	# _177, tmp232
	addq	%rax, %rax	# tmp232
	addq	%rdx, %rax	# _177, tmp232
	salq	$3, %rax	#, tmp233
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	addq	%rcx, %rax	# _172, D.58059
# ./core/vmap.h:203: 		return _cowdata.get_m(pos).value;
	addq	$16, %rax	#, _20
	jmp	.L3393	#
.L3390:
	movq	%rax, %rbx	#, tmp236
# ./core/vmap.h:199: 			V val;
	leaq	-336(%rbp), %rax	#, tmp235
	movq	%rax, %rdi	# tmp235,
	call	_ZN6Object6Signal4SlotD1Ev	#
	movq	%rbx, %rax	# tmp236, D.62140
	movq	%rax, %rdi	# D.62140,
	call	_Unwind_Resume	#
.LEHE704:
.L3393:
# ./core/vmap.h:204: 	}
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2869:
	.section	.gcc_except_table
.LLSDA2869:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2869-.LLSDACSB2869
.LLSDACSB2869:
	.uleb128 .LEHB702-.LFB2869
	.uleb128 .LEHE702-.LEHB702
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB703-.LFB2869
	.uleb128 .LEHE703-.LEHB703
	.uleb128 .L3390-.LFB2869
	.uleb128 0
	.uleb128 .LEHB704-.LFB2869
	.uleb128 .LEHE704-.LEHB704
	.uleb128 0
	.uleb128 0
.LLSDACSE2869:
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_,comdat
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEEixERKS2_
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE,comdat
	.align 2
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE
	.type	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE, @function
_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE:
.LFB2870:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_I, p_I
# ./core/list.h:367: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_10(D)->_data, _1
# ./core/list.h:367: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3395	#,
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_10(D)->_data, _2
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-32(%rbp), %rdx	# p_I, tmp92
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# _2,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE	#
	movb	%al, -1(%rbp)	# _14, ret
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movq	-24(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_10(D)->_data, _3
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movl	16(%rax), %eax	# _3->size_cache, _4
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	testl	%eax, %eax	# _4
	jne	.L3396	#,
# ./core/list.h:371: 				memdelete_allocator<_Data, A>(_data);
	movq	-24(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_10(D)->_data, _5
	movq	%rax, %rdi	# _5,
	call	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_	#
# ./core/list.h:372: 				_data = NULL;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	$0, (%rax)	#, this_10(D)->_data
.L3396:
# ./core/list.h:375: 			return ret;
	movzbl	-1(%rbp), %eax	# ret, _6
	jmp	.L3397	#
.L3395:
# ./core/list.h:378: 		return false;
	movl	$0, %eax	#, _6
.L3397:
# ./core/list.h:379: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2870:
	.size	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE, .-_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE
	.section	.rodata
.LC128:
	.string	"remove"
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_:
.LFB2871:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$304, %rsp	#,
	movq	%rdi, -296(%rbp)	# this, this
	movq	%rsi, -304(%rbp)	# p_val, p_val
	movq	-296(%rbp), %rax	# this, tmp164
	movq	%rax, -16(%rbp)	# tmp164, this
	movq	-304(%rbp), %rax	# p_val, tmp165
	movq	%rax, -24(%rbp)	# tmp165, p_val
# ./core/vmap.h:93: 		if (_cowdata.empty())
	movq	-16(%rbp), %rax	# this, _10
	movq	%rax, -32(%rbp)	# _10, this
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	movq	-32(%rbp), %rax	# this, tmp166
	movq	(%rax), %rax	# this_11->_ptr, _12
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	testq	%rax, %rax	# _12
	sete	%al	#, _13
# ./core/vmap.h:93: 		if (_cowdata.empty())
	testb	%al, %al	# _13
	je	.L3400	#,
# ./core/vmap.h:94: 			return -1;
	movl	$-1, %eax	#, D.56854
	jmp	.L3401	#
.L3400:
# ./core/vmap.h:96: 		int low = 0;
	movl	$0, -36(%rbp)	#, low
# ./core/vmap.h:97: 		int high = _cowdata.size() - 1;
	movq	-16(%rbp), %rax	# this, _18
	movq	%rax, -48(%rbp)	# _18, this
	movq	-48(%rbp), %rax	# this, tmp167
	movq	%rax, -56(%rbp)	# tmp167, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-56(%rbp), %rax	# this, tmp168
	movq	(%rax), %rax	# this_20->_ptr, _21
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _21
	jne	.L3402	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _22
	jmp	.L3403	#
.L3402:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-56(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_20->_ptr, _23
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _22
.L3403:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -64(%rbp)	# _22, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -64(%rbp)	#, size
	je	.L3404	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-64(%rbp), %rax	# size, tmp170
	movl	(%rax), %eax	# *size_27, _28
	jmp	.L3405	#
.L3404:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _29
.L3405:
# ./core/vmap.h:97: 		int high = _cowdata.size() - 1;
	subl	$1, %eax	#, tmp171
	movl	%eax, -68(%rbp)	# tmp171, high
# ./core/vmap.h:99: 		const Pair *a = _cowdata.ptr();
	movq	-16(%rbp), %rax	# this, _36
	movq	%rax, -80(%rbp)	# _36, this
	movq	-80(%rbp), %rax	# this, tmp172
	movq	%rax, -88(%rbp)	# tmp172, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-88(%rbp), %rax	# this, tmp173
	movq	(%rax), %rax	# this_38->_ptr, _39
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _39
	jne	.L3406	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _40
	jmp	.L3407	#
.L3406:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-88(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_38->_ptr, _40
.L3407:
# ./core/cowdata.h:121: 		return _get_data();
	nop	
# ./core/vmap.h:99: 		const Pair *a = _cowdata.ptr();
	movq	%rax, -96(%rbp)	# _40, a
.L3421:
# ./core/vmap.h:101: 		while (low <= high) {
	movl	-36(%rbp), %eax	# low, tmp175
	cmpl	-68(%rbp), %eax	# high, tmp175
	jg	.L3409	#,
# ./core/vmap.h:102: 			middle = (low + high) / 2;
	movl	-36(%rbp), %edx	# low, tmp176
	movl	-68(%rbp), %eax	# high, tmp177
	addl	%edx, %eax	# tmp176, _49
# ./core/vmap.h:102: 			middle = (low + high) / 2;
	movl	%eax, %edx	# _49, tmp178
	shrl	$31, %edx	#, tmp178
	addl	%edx, %eax	# tmp178, tmp179
	sarl	%eax	# tmp180
	movl	%eax, -100(%rbp)	# tmp180, middle
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movl	-100(%rbp), %eax	# middle, tmp181
	movslq	%eax, %rdx	# tmp181, _51
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movq	%rdx, %rax	# _51, tmp182
	salq	$2, %rax	#, tmp182
	addq	%rdx, %rax	# _51, tmp182
	addq	%rax, %rax	# tmp182
	addq	%rdx, %rax	# _51, tmp182
	salq	$3, %rax	#, tmp183
	movq	%rax, %rdx	# tmp182, _52
	movq	-96(%rbp), %rax	# a, tmp184
	addq	%rdx, %rax	# _52, _53
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	movq	%rax, %rdx	# _53, _54
	movq	-24(%rbp), %rax	# p_val, tmp185
	movq	%rax, -112(%rbp)	# tmp185, this
	movq	%rdx, -120(%rbp)	# _54, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-112(%rbp), %rax	# this, tmp186
	movq	(%rax), %rdx	# this_55->_id, _57
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-120(%rbp), %rax	# p_target, tmp187
	movq	(%rax), %rax	# p_target_56->_id, _58
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _58, _57
	jne	.L3410	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-120(%rbp), %rax	# p_target, tmp188
	addq	$8, %rax	#, _59
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-112(%rbp), %rdx	# this, tmp189
	addq	$8, %rdx	#, _60
	movq	%rdx, -128(%rbp)	# _60, this
	movq	%rax, -136(%rbp)	# _59, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-128(%rbp), %rax	# this, tmp190
	movq	(%rax), %rdx	# this_61->_data, _63
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-136(%rbp), %rax	# p_name, tmp191
	movq	(%rax), %rax	# p_name_62->_data, _64
	cmpq	%rax, %rdx	# _64, _63
	setb	%al	#, _65
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _65, _68
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _68
	setne	%al	#, iftmp.267_69
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L3446	#
.L3410:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-112(%rbp), %rax	# this, tmp192
	movq	(%rax), %rdx	# this_55->_id, _70
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-120(%rbp), %rax	# p_target, tmp193
	movq	(%rax), %rax	# p_target_56->_id, _71
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _71, _70
	setb	%al	#, iftmp.267_69
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L3446:
# ./core/vmap.h:104: 			if (p_val < a[middle].key) {
	testb	%al, %al	# iftmp.267_69
	je	.L3414	#,
# ./core/vmap.h:105: 				high = middle - 1; //search low end of array
	movl	-100(%rbp), %eax	# middle, tmp197
	subl	$1, %eax	#, tmp196
	movl	%eax, -68(%rbp)	# tmp196, high
	jmp	.L3421	#
.L3414:
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	movl	-100(%rbp), %eax	# middle, tmp198
	movslq	%eax, %rdx	# tmp198, _78
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	movq	%rdx, %rax	# _78, tmp199
	salq	$2, %rax	#, tmp199
	addq	%rdx, %rax	# _78, tmp199
	addq	%rax, %rax	# tmp199
	addq	%rdx, %rax	# _78, tmp199
	salq	$3, %rax	#, tmp200
	movq	%rax, %rdx	# tmp199, _79
	movq	-96(%rbp), %rax	# a, tmp201
	addq	%rdx, %rax	# _79, _80
	movq	%rax, -144(%rbp)	# _81, this
	movq	-24(%rbp), %rax	# p_val, tmp202
	movq	%rax, -152(%rbp)	# tmp202, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-144(%rbp), %rax	# this, tmp203
	movq	(%rax), %rdx	# this_82->_id, _84
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-152(%rbp), %rax	# p_target, tmp204
	movq	(%rax), %rax	# p_target_83->_id, _85
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _85, _84
	jne	.L3416	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-152(%rbp), %rax	# p_target, tmp205
	addq	$8, %rax	#, _86
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-144(%rbp), %rdx	# this, tmp206
	addq	$8, %rdx	#, _87
	movq	%rdx, -160(%rbp)	# _87, this
	movq	%rax, -168(%rbp)	# _86, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-160(%rbp), %rax	# this, tmp207
	movq	(%rax), %rdx	# this_88->_data, _90
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-168(%rbp), %rax	# p_name, tmp208
	movq	(%rax), %rax	# p_name_89->_data, _91
	cmpq	%rax, %rdx	# _91, _90
	setb	%al	#, _92
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _92, _95
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _95
	setne	%al	#, iftmp.267_96
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L3447	#
.L3416:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-144(%rbp), %rax	# this, tmp209
	movq	(%rax), %rdx	# this_82->_id, _97
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-152(%rbp), %rax	# p_target, tmp210
	movq	(%rax), %rax	# p_target_83->_id, _98
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _98, _97
	setb	%al	#, iftmp.267_96
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L3447:
# ./core/vmap.h:106: 			} else if (a[middle].key < p_val) {
	testb	%al, %al	# iftmp.267_96
	je	.L3420	#,
# ./core/vmap.h:107: 				low = middle + 1; //search high end of array
	movl	-100(%rbp), %eax	# middle, tmp214
	addl	$1, %eax	#, tmp213
	movl	%eax, -36(%rbp)	# tmp213, low
	jmp	.L3421	#
.L3420:
# ./core/vmap.h:109: 				return middle;
	movl	-100(%rbp), %eax	# middle, D.56854
	jmp	.L3401	#
.L3409:
# ./core/vmap.h:113: 		return -1;
	movl	$-1, %eax	#, D.56854
.L3401:
# ./core/vmap.h:136: 		int pos = _find_exact(p_val);
	movl	%eax, -4(%rbp)	# D.56854, pos
# ./core/vmap.h:137: 		if (pos < 0)
	cmpl	$0, -4(%rbp)	#, pos
	js	.L3448	#,
# ./core/vmap.h:139: 		_cowdata.remove(pos);
	movq	-296(%rbp), %rax	# this, _1
	movq	%rax, -176(%rbp)	# _1, this
	movl	-4(%rbp), %eax	# pos, tmp215
	movl	%eax, -180(%rbp)	# tmp215, p_index
# ./core/cowdata.h:160: 		ERR_FAIL_INDEX(p_index, size());
	movl	-180(%rbp), %eax	# p_index, tmp217
	shrl	$31, %eax	#, tmp216
	movzbl	%al, %eax	# _112, _113
	testq	%rax, %rax	# _114
	jne	.L3424	#,
	movq	-176(%rbp), %rax	# this, tmp218
	movq	%rax, -192(%rbp)	# tmp218, this
	movq	-192(%rbp), %rax	# this, tmp219
	movq	%rax, -200(%rbp)	# tmp219, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-200(%rbp), %rax	# this, tmp220
	movq	(%rax), %rax	# this_116->_ptr, _117
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _117
	jne	.L3425	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _118
	jmp	.L3426	#
.L3425:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-200(%rbp), %rax	# this, tmp221
	movq	(%rax), %rax	# this_116->_ptr, _119
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _118
.L3426:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -208(%rbp)	# _118, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -208(%rbp)	#, size
	je	.L3427	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-208(%rbp), %rax	# size, tmp222
	movl	(%rax), %eax	# *size_123, _124
	jmp	.L3428	#
.L3427:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _125
.L3428:
# ./core/cowdata.h:160: 		ERR_FAIL_INDEX(p_index, size());
	cmpl	%eax, -180(%rbp)	# _125, p_index
	setge	%al	#, _131
	movzbl	%al, %eax	# _131, _132
	testq	%rax, %rax	# _133
	je	.L3429	#,
.L3424:
	movl	$1, %eax	#, iftmp.302_134
	jmp	.L3430	#
.L3429:
	movl	$0, %eax	#, iftmp.302_134
.L3430:
	movzbl	%al, %eax	# iftmp.302_134, _137
	testq	%rax, %rax	# _137
	setne	%al	#, retval.301_138
	testb	%al, %al	# retval.301_138
	je	.L3431	#,
	movq	-176(%rbp), %rax	# this, tmp223
	movq	%rax, -216(%rbp)	# tmp223, this
	movq	-216(%rbp), %rax	# this, tmp224
	movq	%rax, -224(%rbp)	# tmp224, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-224(%rbp), %rax	# this, tmp225
	movq	(%rax), %rax	# this_140->_ptr, _141
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _141
	jne	.L3432	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _142
	jmp	.L3433	#
.L3432:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-224(%rbp), %rax	# this, tmp226
	movq	(%rax), %rax	# this_140->_ptr, _143
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _142
.L3433:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -232(%rbp)	# _142, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -232(%rbp)	#, size
	je	.L3434	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-232(%rbp), %rax	# size, tmp227
	movl	(%rax), %eax	# *size_147, _148
	jmp	.L3435	#
.L3434:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _149
.L3435:
# ./core/cowdata.h:160: 		ERR_FAIL_INDEX(p_index, size());
	movslq	%eax, %rdx	# _149, _155
	movl	-180(%rbp), %eax	# p_index, tmp228
	cltq
	pushq	$0	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _155,
	movq	%rax, %rcx	# _156,
	movl	$160, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC128, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	jmp	.L3398	#
.L3431:
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-176(%rbp), %rax	# this, tmp229
	movq	%rax, -240(%rbp)	# tmp229, this
# ./core/cowdata.h:116: 		_copy_on_write();
	movq	-240(%rbp), %rax	# this, tmp230
	movq	%rax, %rdi	# tmp230,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
	movq	-240(%rbp), %rax	# this, tmp231
	movq	%rax, -248(%rbp)	# tmp231, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-248(%rbp), %rax	# this, tmp232
	movq	(%rax), %rax	# this_158->_ptr, _159
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _159
	jne	.L3437	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _160
	jmp	.L3438	#
.L3437:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-248(%rbp), %rax	# this, tmp233
	movq	(%rax), %rax	# this_158->_ptr, _160
.L3438:
# ./core/cowdata.h:117: 		return (T *)_get_data();
	nop	
# ./core/cowdata.h:161: 		T *p = ptrw();
	movq	%rax, -256(%rbp)	# _160, p
	movq	-176(%rbp), %rax	# this, tmp234
	movq	%rax, -264(%rbp)	# tmp234, this
	movq	-264(%rbp), %rax	# this, tmp235
	movq	%rax, -272(%rbp)	# tmp235, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp236
	movq	(%rax), %rax	# this_169->_ptr, _170
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _170
	jne	.L3440	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _171
	jmp	.L3441	#
.L3440:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp237
	movq	(%rax), %rax	# this_169->_ptr, _172
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _171
.L3441:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _171, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L3442	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp238
	movl	(%rax), %eax	# *size_176, _177
	jmp	.L3443	#
.L3442:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _178
.L3443:
# ./core/cowdata.h:162: 		int len = size();
	movl	%eax, -284(%rbp)	# _178, len
# ./core/cowdata.h:163: 		for (int i = p_index; i < len - 1; i++) {
	movl	-180(%rbp), %eax	# p_index, tmp239
	movl	%eax, -288(%rbp)	# tmp239, i
.L3445:
# ./core/cowdata.h:163: 		for (int i = p_index; i < len - 1; i++) {
	movl	-284(%rbp), %eax	# len, tmp240
	subl	$1, %eax	#, _185
# ./core/cowdata.h:163: 		for (int i = p_index; i < len - 1; i++) {
	cmpl	-288(%rbp), %eax	# i, _185
	jle	.L3444	#,
# ./core/cowdata.h:165: 			p[i] = p[i + 1];
	movl	-288(%rbp), %eax	# i, tmp241
	cltq
# ./core/cowdata.h:165: 			p[i] = p[i + 1];
	leaq	1(%rax), %rdx	#, _188
	movq	%rdx, %rax	# _188, tmp242
	salq	$2, %rax	#, tmp242
	addq	%rdx, %rax	# _188, tmp242
	addq	%rax, %rax	# tmp242
	addq	%rdx, %rax	# _188, tmp242
	salq	$3, %rax	#, tmp243
	movq	%rax, %rdx	# tmp242, _189
# ./core/cowdata.h:165: 			p[i] = p[i + 1];
	movq	-256(%rbp), %rax	# p, tmp244
	leaq	(%rdx,%rax), %rcx	#, _190
# ./core/cowdata.h:165: 			p[i] = p[i + 1];
	movl	-288(%rbp), %eax	# i, tmp245
	movslq	%eax, %rdx	# tmp245, _191
# ./core/cowdata.h:165: 			p[i] = p[i + 1];
	movq	%rdx, %rax	# _191, tmp246
	salq	$2, %rax	#, tmp246
	addq	%rdx, %rax	# _191, tmp246
	addq	%rax, %rax	# tmp246
	addq	%rdx, %rax	# _191, tmp246
	salq	$3, %rax	#, tmp247
	movq	%rax, %rdx	# tmp246, _192
# ./core/cowdata.h:165: 			p[i] = p[i + 1];
	movq	-256(%rbp), %rax	# p, tmp248
	addq	%rdx, %rax	# _192, _193
	movq	%rcx, %rsi	# _190,
	movq	%rax, %rdi	# _193,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_	#
# ./core/cowdata.h:163: 		for (int i = p_index; i < len - 1; i++) {
	addl	$1, -288(%rbp)	#, i
	jmp	.L3445	#
.L3444:
# ./core/cowdata.h:168: 		resize(len - 1);
	movl	-284(%rbp), %eax	# len, tmp249
	leal	-1(%rax), %edx	#, _195
	movq	-176(%rbp), %rax	# this, tmp250
	movl	%edx, %esi	# _195,
	movq	%rax, %rdi	# tmp250,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi	#
	jmp	.L3398	#
.L3448:
# ./core/vmap.h:138: 			return;
	nop	
.L3398:
# ./core/vmap.h:140: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2871:
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE5eraseERKS2_
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_:
.LFB2873:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_key, p_key
# ./core/hash_map.h:408: 		if (unlikely(!hash_table))
	movq	-56(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_37(D)->hash_table, _1
	testq	%rax, %rax	# _1
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:408: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _4
	je	.L3450	#,
# ./core/hash_map.h:409: 			return false;
	movl	$0, %eax	#, _28
	jmp	.L3451	#
.L3450:
	movq	-64(%rbp), %rax	# p_key, tmp114
	movq	%rax, -32(%rbp)	# tmp114, p_string_name
	movq	-32(%rbp), %rax	# p_string_name, tmp115
	movq	%rax, -40(%rbp)	# tmp115, this
# ./core/string_name.h:112: 		if (_data)
	movq	-40(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_59->_data, _60
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _60
	je	.L3452	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-40(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_59->_data, _61
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _61->hash, D.58275
	jmp	.L3453	#
.L3452:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, D.58275
.L3453:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:411: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -20(%rbp)	# D.58275, hash
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-56(%rbp), %rax	# this, tmp118
	movzbl	8(%rax), %eax	# this_37(D)->hash_table_power, _5
	movzbl	%al, %eax	# _5, _6
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp119
	movl	%eax, %ecx	# _6, tmp142
	sall	%cl, %edx	# tmp142, tmp119
	movl	%edx, %eax	# tmp119, _7
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _8
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-20(%rbp), %eax	# hash, tmp121
	movl	%eax, -24(%rbp)	# tmp121, index
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movq	-56(%rbp), %rax	# this, tmp122
	movq	(%rax), %rax	# this_37(D)->hash_table, _10
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movl	-24(%rbp), %edx	# index, _11
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _12
	addq	%rdx, %rax	# _12, _13
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_13, tmp123
	movq	%rax, -8(%rbp)	# tmp123, e
# ./core/hash_map.h:415: 		Element *p = NULL;
	movq	$0, -16(%rbp)	#, p
.L3463:
# ./core/hash_map.h:416: 		while (e) {
	cmpq	$0, -8(%rbp)	#, e
	je	.L3455	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-8(%rbp), %rax	# e, tmp124
	movl	(%rax), %eax	# e_26->hash, _14
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -20(%rbp)	# _14, hash
	jne	.L3456	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-8(%rbp), %rax	# e, tmp125
	leaq	16(%rax), %rdx	#, _15
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# p_key, tmp126
	movq	%rax, %rsi	# tmp126,
	movq	%rdx, %rdi	# _15,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _16
	je	.L3456	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movl	$1, %eax	#, iftmp.304_29
	jmp	.L3457	#
.L3456:
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movl	$0, %eax	#, iftmp.304_29
.L3457:
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.304_29
	je	.L3458	#,
# ./core/hash_map.h:421: 				if (p) {
	cmpq	$0, -16(%rbp)	#, p
	je	.L3459	#,
# ./core/hash_map.h:423: 					p->next = e->next;
	movq	-8(%rbp), %rax	# e, tmp127
	movq	8(%rax), %rdx	# e_26->next, _17
# ./core/hash_map.h:423: 					p->next = e->next;
	movq	-16(%rbp), %rax	# p, tmp128
	movq	%rdx, 8(%rax)	# _17, p_27->next
	jmp	.L3460	#
.L3459:
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	-56(%rbp), %rax	# this, tmp129
	movq	(%rax), %rax	# this_37(D)->hash_table, _18
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movl	-24(%rbp), %edx	# index, _19
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	salq	$3, %rdx	#, _20
	addq	%rax, %rdx	# _18, _21
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	-8(%rbp), %rax	# e, tmp130
	movq	8(%rax), %rax	# e_26->next, _22
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	%rax, (%rdx)	# _22, *_21
.L3460:
# ./core/hash_map.h:429: 				memdelete(e);
	movq	-8(%rbp), %rax	# e, tmp131
	movq	%rax, %rdi	# tmp131,
	call	_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:430: 				elements--;
	movq	-56(%rbp), %rax	# this, tmp132
	movl	12(%rax), %eax	# this_37(D)->elements, _23
	leal	-1(%rax), %edx	#, _24
	movq	-56(%rbp), %rax	# this, tmp133
	movl	%edx, 12(%rax)	# _24, this_37(D)->elements
# ./core/hash_map.h:432: 				if (elements == 0)
	movq	-56(%rbp), %rax	# this, tmp134
	movl	12(%rax), %eax	# this_37(D)->elements, _25
# ./core/hash_map.h:432: 				if (elements == 0)
	testl	%eax, %eax	# _25
	jne	.L3461	#,
# ./core/hash_map.h:433: 					erase_hash_table();
	movq	-56(%rbp), %rax	# this, tmp135
	movq	%rax, %rdi	# tmp135,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv	#
	jmp	.L3462	#
.L3461:
# ./core/hash_map.h:435: 					check_hash_table();
	movq	-56(%rbp), %rax	# this, tmp136
	movq	%rax, %rdi	# tmp136,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv	#
.L3462:
# ./core/hash_map.h:436: 				return true;
	movl	$1, %eax	#, _28
	jmp	.L3451	#
.L3458:
# ./core/hash_map.h:439: 			p = e;
	movq	-8(%rbp), %rax	# e, tmp137
	movq	%rax, -16(%rbp)	# tmp137, p
# ./core/hash_map.h:440: 			e = e->next;
	movq	-8(%rbp), %rax	# e, tmp138
	movq	8(%rax), %rax	# e_26->next, tmp139
	movq	%rax, -8(%rbp)	# tmp139, e
# ./core/hash_map.h:416: 		while (e) {
	jmp	.L3463	#
.L3455:
# ./core/hash_map.h:443: 		return false;
	movl	$0, %eax	#, _28
.L3451:
# ./core/hash_map.h:444: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2873:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5eraseERKS0_
	.section	.text._ZN7ClassDB10_add_classI6ObjectEEvv,"axG",@progbits,_ZN7ClassDB10_add_classI6ObjectEEvv,comdat
	.weak	_ZN7ClassDB10_add_classI6ObjectEEvv
	.type	_ZN7ClassDB10_add_classI6ObjectEEvv, @function
_ZN7ClassDB10_add_classI6ObjectEEvv:
.LFB2877:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2877
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-40(%rbp), %rax	#, tmp83
	movq	%rax, %rdi	# tmp83,
	call	_ZN6Object23get_parent_class_staticEv	#
	leaq	-40(%rbp), %rdx	#, tmp84
	leaq	-48(%rbp), %rax	#, tmp85
	movq	%rdx, %rsi	# tmp84,
	movq	%rax, %rdi	# tmp85,
.LEHB705:
	call	_ZN10StringNameC1ERK6String	#
.LEHE705:
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-24(%rbp), %rax	#, tmp86
	movq	%rax, %rdi	# tmp86,
.LEHB706:
	call	_ZN6Object16get_class_staticEv	#
.LEHE706:
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-24(%rbp), %rdx	#, tmp87
	leaq	-32(%rbp), %rax	#, tmp88
	movq	%rdx, %rsi	# tmp87,
	movq	%rax, %rdi	# tmp88,
.LEHB707:
	call	_ZN10StringNameC1ERK6String	#
.LEHE707:
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-48(%rbp), %rdx	#, tmp89
	leaq	-32(%rbp), %rax	#, tmp90
	movq	%rdx, %rsi	# tmp89,
	movq	%rax, %rdi	# tmp90,
.LEHB708:
	call	_ZN7ClassDB11_add_class2ERK10StringNameS2_	#
.LEHE708:
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-32(%rbp), %rax	#, tmp91
	movq	%rax, %rdi	# tmp91,
	call	_ZN10StringNameD1Ev	#
	leaq	-24(%rbp), %rax	#, tmp92
	movq	%rax, %rdi	# tmp92,
	call	_ZN6StringD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp93
	movq	%rax, %rdi	# tmp93,
	call	_ZN10StringNameD1Ev	#
	leaq	-40(%rbp), %rax	#, tmp94
	movq	%rax, %rdi	# tmp94,
	call	_ZN6StringD1Ev	#
# ./core/class_db.h:173: 	}
	jmp	.L3473	#
.L3472:
	movq	%rax, %rbx	#, tmp97
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-32(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN10StringNameD1Ev	#
	jmp	.L3466	#
.L3471:
	movq	%rax, %rbx	#, tmp96
.L3466:
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-24(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN6StringD1Ev	#
	jmp	.L3467	#
.L3470:
	movq	%rax, %rbx	#, tmp101
.L3467:
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-48(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L3468	#
.L3469:
	movq	%rax, %rbx	#, tmp104
.L3468:
# ./core/class_db.h:172: 		_add_class2(T::get_class_static(), T::get_parent_class_static());
	leaq	-40(%rbp), %rax	#, tmp106
	movq	%rax, %rdi	# tmp106,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62142
	movq	%rax, %rdi	# D.62142,
.LEHB709:
	call	_Unwind_Resume	#
.LEHE709:
.L3473:
# ./core/class_db.h:173: 	}
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2877:
	.section	.gcc_except_table
.LLSDA2877:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2877-.LLSDACSB2877
.LLSDACSB2877:
	.uleb128 .LEHB705-.LFB2877
	.uleb128 .LEHE705-.LEHB705
	.uleb128 .L3469-.LFB2877
	.uleb128 0
	.uleb128 .LEHB706-.LFB2877
	.uleb128 .LEHE706-.LEHB706
	.uleb128 .L3470-.LFB2877
	.uleb128 0
	.uleb128 .LEHB707-.LFB2877
	.uleb128 .LEHE707-.LEHB707
	.uleb128 .L3471-.LFB2877
	.uleb128 0
	.uleb128 .LEHB708-.LFB2877
	.uleb128 .LEHE708-.LEHB708
	.uleb128 .L3472-.LFB2877
	.uleb128 0
	.uleb128 .LEHB709-.LFB2877
	.uleb128 .LEHE709-.LEHB709
	.uleb128 0
	.uleb128 0
.LLSDACSE2877:
	.section	.text._ZN7ClassDB10_add_classI6ObjectEEvv,"axG",@progbits,_ZN7ClassDB10_add_classI6ObjectEEvv,comdat
	.size	_ZN7ClassDB10_add_classI6ObjectEEvv, .-_ZN7ClassDB10_add_classI6ObjectEEvv
	.section	.text._ZN3RefI8ResourceEC2ERK7Variant,"axG",@progbits,_ZN3RefI8ResourceEC5ERK7Variant,comdat
	.align 2
	.weak	_ZN3RefI8ResourceEC2ERK7Variant
	.type	_ZN3RefI8ResourceEC2ERK7Variant, @function
_ZN3RefI8ResourceEC2ERK7Variant:
.LFB2879:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2879
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_variant, p_variant
# ./core/reference.h:243: 		RefPtr refptr = p_variant;
	leaq	-48(%rbp), %rax	#, tmp87
	movq	-80(%rbp), %rdx	# p_variant, tmp88
	movq	%rdx, %rsi	# tmp88,
	movq	%rax, %rdi	# tmp87,
.LEHB710:
	call	_ZNK7Variantcv6RefPtrEv	#
.LEHE710:
# ./core/ref_ptr.h:55: 	_FORCE_INLINE_ void *get_data() const { return data; }
	leaq	-48(%rbp), %rax	#, D.56314
# ./core/reference.h:244: 		Ref<Reference> *irr = reinterpret_cast<Ref<Reference> *>(refptr.get_data());
	movq	%rax, -24(%rbp)	# D.56314, irr
# ./core/reference.h:245: 		reference = NULL;
	movq	-72(%rbp), %rax	# this, tmp89
	movq	$0, (%rax)	#, this_8(D)->reference
	movq	-24(%rbp), %rax	# irr, tmp90
	movq	%rax, -40(%rbp)	# tmp90, this
# ./core/reference.h:131: 		return reference;
	movq	-40(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_33->reference, D.56310
# ./core/reference.h:246: 		Reference *refb = irr->ptr();
	movq	%rax, -32(%rbp)	# D.56310, refb
# ./core/reference.h:247: 		if (!refb) {
	cmpq	$0, -32(%rbp)	#, refb
	jne	.L3477	#,
# ./core/reference.h:248: 			unref();
	movq	-72(%rbp), %rax	# this, tmp92
	movq	%rax, %rdi	# tmp92,
.LEHB711:
	call	_ZN3RefI8ResourceE5unrefEv	#
.LEHE711:
	movl	$0, %ebx	#, finally_tmp.318_2
# ./core/reference.h:249: 			return;
	jmp	.L3478	#
.L3477:
# ./core/reference.h:251: 		Ref r;
	leaq	-56(%rbp), %rax	#, tmp93
	movq	%rax, %rdi	# tmp93,
	call	_ZN3RefI8ResourceEC1Ev	#
# ./core/reference.h:252: 		r.reference = Object::cast_to<T>(refb);
	movq	-32(%rbp), %rax	# refb, tmp94
	movq	%rax, %rdi	# tmp94,
	call	_ZN6Object7cast_toI8ResourceEEPT_PS_	#
# ./core/reference.h:252: 		r.reference = Object::cast_to<T>(refb);
	movq	%rax, -56(%rbp)	# _1, r.reference
# ./core/reference.h:253: 		ref(r);
	leaq	-56(%rbp), %rdx	#, tmp95
	movq	-72(%rbp), %rax	# this, tmp96
	movq	%rdx, %rsi	# tmp95,
	movq	%rax, %rdi	# tmp96,
.LEHB712:
	call	_ZN3RefI8ResourceE3refERKS1_	#
.LEHE712:
# ./core/reference.h:254: 		r.reference = NULL;
	movq	$0, -56(%rbp)	#, r.reference
# ./core/reference.h:251: 		Ref r;
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rax, %rdi	# tmp97,
	call	_ZN3RefI8ResourceED1Ev	#
	movl	$1, %ebx	#, finally_tmp.318_2
.L3478:
	leaq	-48(%rbp), %rax	#, tmp98
	movq	%rax, %rdi	# tmp98,
	call	_ZN6RefPtrD1Ev	#
	cmpl	$1, %ebx	#, finally_tmp.318_2
	jmp	.L3485	#
.L3484:
	movq	%rax, %rbx	#, tmp101
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rdi	# tmp99,
	call	_ZN3RefI8ResourceED1Ev	#
	jmp	.L3482	#
.L3483:
	movq	%rax, %rbx	#, tmp100
.L3482:
# ./core/reference.h:243: 		RefPtr refptr = p_variant;
	leaq	-48(%rbp), %rax	#, tmp104
	movq	%rax, %rdi	# tmp104,
	call	_ZN6RefPtrD1Ev	#
	movq	%rbx, %rax	# tmp100, D.62145
	movq	%rax, %rdi	# D.62145,
.LEHB713:
	call	_Unwind_Resume	#
.LEHE713:
.L3485:
# ./core/reference.h:255: 	}
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2879:
	.section	.gcc_except_table
.LLSDA2879:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2879-.LLSDACSB2879
.LLSDACSB2879:
	.uleb128 .LEHB710-.LFB2879
	.uleb128 .LEHE710-.LEHB710
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB711-.LFB2879
	.uleb128 .LEHE711-.LEHB711
	.uleb128 .L3483-.LFB2879
	.uleb128 0
	.uleb128 .LEHB712-.LFB2879
	.uleb128 .LEHE712-.LEHB712
	.uleb128 .L3484-.LFB2879
	.uleb128 0
	.uleb128 .LEHB713-.LFB2879
	.uleb128 .LEHE713-.LEHB713
	.uleb128 0
	.uleb128 0
.LLSDACSE2879:
	.section	.text._ZN3RefI8ResourceEC2ERK7Variant,"axG",@progbits,_ZN3RefI8ResourceEC5ERK7Variant,comdat
	.size	_ZN3RefI8ResourceEC2ERK7Variant, .-_ZN3RefI8ResourceEC2ERK7Variant
	.weak	_ZN3RefI8ResourceEC1ERK7Variant
	.set	_ZN3RefI8ResourceEC1ERK7Variant,_ZN3RefI8ResourceEC2ERK7Variant
	.section	.text._ZNK3RefI8ResourceE8is_validEv,"axG",@progbits,_ZNK3RefI8ResourceE8is_validEv,comdat
	.align 2
	.weak	_ZNK3RefI8ResourceE8is_validEv
	.type	_ZNK3RefI8ResourceE8is_validEv, @function
_ZNK3RefI8ResourceE8is_validEv:
.LFB2884:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:272: 	inline bool is_valid() const { return reference != NULL; }
	movq	-8(%rbp), %rax	# this, tmp85
	movq	(%rax), %rax	# this_3(D)->reference, _1
# ./core/reference.h:272: 	inline bool is_valid() const { return reference != NULL; }
	testq	%rax, %rax	# _1
	setne	%al	#, _4
# ./core/reference.h:272: 	inline bool is_valid() const { return reference != NULL; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2884:
	.size	_ZNK3RefI8ResourceE8is_validEv, .-_ZNK3RefI8ResourceE8is_validEv
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_:
.LFB2889:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2889:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF6StringvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_:
.LFB2890:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2890:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK6StringEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_:
.LFB2891:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2891:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK7VariantEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_:
.LFB2892:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2892:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK6StringEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_:
.LFB2893:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2893:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK8NodePathRK7VariantEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_:
.LFB2894:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2894:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF7VariantRK8NodePathEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_:
.LFB2895:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2895:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant:
.LFB2896:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rsi, %rax	# p_method, tmp86
	movq	%rdx, %rsi	# p_method, tmp87
	movq	%rsi, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
	movq	%rcx, -32(%rbp)	# p_def1, p_def1
# ./core/class_db.h:240: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E	#
	movq	%rax, -8(%rbp)	# _4, bind
# ./core/class_db.h:241: 		const Variant *ptr[1] = { &p_def1 };
	movq	-32(%rbp), %rax	# p_def1, tmp90
	movq	%rax, -16(%rbp)	# tmp90, ptr
# ./core/class_db.h:243: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, ptr, 1);
	leaq	-16(%rbp), %rcx	#, tmp91
	movq	-24(%rbp), %rdx	# p_method_name, tmp92
	movq	-8(%rbp), %rax	# bind, tmp93
	movl	$1, %r8d	#,
	movq	%rax, %rsi	# tmp93,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:244: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2896:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvibEEEP10MethodBindT_T0_RK7Variant
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_:
.LFB2897:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2897:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectF6StringvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_:
.LFB2898:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2898:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKFmvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_:
.LFB2899:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2899:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6RefPtrEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_:
.LFB2900:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2900:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF6RefPtrvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_:
.LFB2901:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2901:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_:
.LFB2902:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2902:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF10PoolVectorI6StringEvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant:
.LFB2903:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rsi, %rax	# p_method, tmp86
	movq	%rdx, %rsi	# p_method, tmp87
	movq	%rsi, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
	movq	%rcx, -32(%rbp)	# p_def1, p_def1
# ./core/class_db.h:240: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E	#
	movq	%rax, -8(%rbp)	# _4, bind
# ./core/class_db.h:241: 		const Variant *ptr[1] = { &p_def1 };
	movq	-32(%rbp), %rax	# p_def1, tmp90
	movq	%rax, -16(%rbp)	# tmp90, ptr
# ./core/class_db.h:243: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, ptr, 1);
	leaq	-16(%rbp), %rcx	#, tmp91
	movq	-24(%rbp), %rdx	# p_method_name, tmp92
	movq	-8(%rbp), %rax	# bind, tmp93
	movl	$1, %r8d	#,
	movq	%rax, %rsi	# tmp93,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:244: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2903:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK6StringRK5ArrayEEEP10MethodBindT_T0_RK7Variant
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_:
.LFB2904:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2904:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNameEEEP10MethodBindT_T0_
	.section	.rodata
	.align 8
.LC129:
	.string	"Condition ' !bind ' is true. returned: __null"
.LC130:
	.string	"./core/class_db.h"
.LC131:
	.string	"bind_vararg_method"
	.align 8
.LC132:
	.string	"Condition ' !type ' is true. returned: __null"
	.section	.text._ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E,"axG",@progbits,_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E,comdat
	.weak	_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E
	.type	_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E, @function
_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E:
.LFB2905:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2905
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$152, %rsp	#,
	.cfi_offset 3, -24
	movl	%edi, -116(%rbp)	# p_flags, p_flags
	movq	%rsi, -128(%rbp)	# p_name, p_name
	movq	%rdx, -144(%rbp)	# p_method, p_method
	movq	%rcx, -136(%rbp)	# p_method, p_method
	movq	%r8, -152(%rbp)	# p_info, p_info
	movq	%r9, -160(%rbp)	# p_default_args, p_default_args
# ./core/class_db.h:294: 		GLOBAL_LOCK_FUNCTION;
	leaq	-97(%rbp), %rax	#, tmp120
	movq	%rax, %rdi	# tmp120,
.LEHB714:
	call	_ZN11_GlobalLockC1Ev	#
.LEHE714:
# ./core/class_db.h:296: 		MethodBind *bind = create_vararg_method_bind(p_method, p_info);
	movq	-152(%rbp), %rdx	# p_info, tmp121
	movq	-144(%rbp), %rcx	# p_method, tmp122
	movq	-136(%rbp), %rax	# p_method, tmp123
	movq	%rcx, %rdi	# tmp122,
	movq	%rax, %rsi	# tmp123,
.LEHB715:
	call	_Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo	#
	movq	%rax, -24(%rbp)	# _24, bind
# ./core/class_db.h:297: 		ERR_FAIL_COND_V(!bind, NULL);
	cmpq	$0, -24(%rbp)	#, bind
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L3521	#,
# ./core/class_db.h:297: 		ERR_FAIL_COND_V(!bind, NULL);
	movl	$0, %r8d	#,
	movl	$.LC129, %ecx	#,
	movl	$297, %edx	#,
	movl	$.LC130, %esi	#,
	movl	$.LC131, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/class_db.h:297: 		ERR_FAIL_COND_V(!bind, NULL);
	movl	$0, %ebx	#, _12
	jmp	.L3522	#
.L3521:
# ./core/class_db.h:297: 		ERR_FAIL_COND_V(!bind, NULL);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/class_db.h:299: 		bind->set_name(p_name);
	movq	-128(%rbp), %rdx	# p_name, tmp124
	movq	-24(%rbp), %rax	# bind, tmp125
	movq	%rdx, %rsi	# tmp124,
	movq	%rax, %rdi	# tmp125,
	call	_ZN10MethodBind8set_nameERK10StringName	#
# ./core/class_db.h:300: 		bind->set_default_arguments(p_default_args);
	movq	-160(%rbp), %rdx	# p_default_args, tmp126
	movq	-24(%rbp), %rax	# bind, tmp127
	movq	%rdx, %rsi	# tmp126,
	movq	%rax, %rdi	# tmp127,
	call	_ZN10MethodBind21set_default_argumentsERK6VectorI7VariantE	#
# ./core/class_db.h:302: 		String instance_type = bind->get_instance_class();
	movq	-24(%rbp), %rax	# bind, tmp128
	movq	(%rax), %rax	# bind_25->_vptr.MethodBind, _4
	movq	(%rax), %rcx	# *_4, _5
# ./core/class_db.h:302: 		String instance_type = bind->get_instance_class();
	leaq	-112(%rbp), %rax	#, tmp129
	movq	-24(%rbp), %rdx	# bind, tmp130
	movq	%rdx, %rsi	# tmp130,
	movq	%rax, %rdi	# tmp129,
	call	*%rcx	# _5
.LEHE715:
# ./core/class_db.h:304: 		ClassInfo *type = classes.getptr(instance_type);
	leaq	-112(%rbp), %rdx	#, tmp131
	leaq	-96(%rbp), %rax	#, tmp132
	movq	%rdx, %rsi	# tmp131,
	movq	%rax, %rdi	# tmp132,
.LEHB716:
	call	_ZN10StringNameC1ERK6String	#
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	movq	_ZN7ClassDB7classesE(%rip), %rax	# classes.hash_table, _62
	testq	%rax, %rax	# _62
	sete	%al	#, _63
	movzbl	%al, %eax	# _63, _64
# ./core/hash_map.h:321: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _65
	je	.L3523	#,
# ./core/hash_map.h:322: 			return NULL;
	movl	$0, %eax	#, D.59581
	jmp	.L3524	#
.L3523:
	movq	$_ZN7ClassDB7classesE, -40(%rbp)	#, this
	leaq	-96(%rbp), %rax	#, tmp133
	movq	%rax, -48(%rbp)	# tmp133, p_key
	movq	-48(%rbp), %rax	# p_key, tmp134
	movq	%rax, -56(%rbp)	# tmp134, p_string_name
	movq	-56(%rbp), %rax	# p_string_name, tmp135
	movq	%rax, -64(%rbp)	# tmp135, this
# ./core/string_name.h:112: 		if (_data)
	movq	-64(%rbp), %rax	# this, tmp136
	movq	(%rax), %rax	# this_70->_data, _71
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _71
	je	.L3525	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-64(%rbp), %rax	# this, tmp137
	movq	(%rax), %rax	# this_70->_data, _72
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _72->hash, _73
	jmp	.L3526	#
.L3525:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _73
.L3526:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -68(%rbp)	# _73, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-40(%rbp), %rax	# this, tmp138
	movzbl	8(%rax), %eax	# this_67->hash_table_power, _80
	movzbl	%al, %eax	# _80, _81
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp139
	movl	%eax, %ecx	# _81, tmp168
	sall	%cl, %edx	# tmp168, tmp139
	movl	%edx, %eax	# tmp139, _82
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _83
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-68(%rbp), %eax	# hash, tmp141
	movl	%eax, -72(%rbp)	# tmp141, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-40(%rbp), %rax	# this, tmp142
	movq	(%rax), %rax	# this_67->hash_table, _86
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-72(%rbp), %edx	# index, _87
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _88
	addq	%rdx, %rax	# _88, _89
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_89, tmp143
	movq	%rax, -80(%rbp)	# tmp143, e
.L3533:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -80(%rbp)	#, e
	je	.L3528	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-80(%rbp), %rax	# e, tmp144
	movl	(%rax), %eax	# e_91->hash, _92
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -68(%rbp)	# _92, hash
	jne	.L3529	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-80(%rbp), %rax	# e, tmp145
	leaq	16(%rax), %rdx	#, _93
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-48(%rbp), %rax	# p_key, tmp146
	movq	%rax, %rsi	# tmp146,
	movq	%rdx, %rdi	# _93,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _94
	je	.L3529	#,
	movl	$1, %eax	#, iftmp.344_95
	jmp	.L3530	#
.L3529:
	movl	$0, %eax	#, iftmp.344_95
.L3530:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.344_95
	je	.L3531	#,
# ./core/hash_map.h:198: 				return e;
	movq	-80(%rbp), %rax	# e, _99
	jmp	.L3532	#
.L3531:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-80(%rbp), %rax	# e, tmp147
	movq	8(%rax), %rax	# e_91->next, tmp148
	movq	%rax, -80(%rbp)	# tmp148, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3533	#
.L3528:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _99
.L3532:
# ./core/hash_map.h:324: 		Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -88(%rbp)	# _99, e
# ./core/hash_map.h:326: 		if (e)
	cmpq	$0, -88(%rbp)	#, e
	je	.L3534	#,
# ./core/hash_map.h:327: 			return &e->pair.data;
	movq	-88(%rbp), %rax	# e, tmp149
	addq	$24, %rax	#, D.59581
	jmp	.L3524	#
.L3534:
# ./core/hash_map.h:329: 		return NULL;
	movl	$0, %eax	#, D.59581
.L3524:
# ./core/class_db.h:304: 		ClassInfo *type = classes.getptr(instance_type);
	movq	%rax, -32(%rbp)	# D.59581, type
	leaq	-96(%rbp), %rax	#, tmp150
	movq	%rax, %rdi	# tmp150,
	call	_ZN10StringNameD1Ev	#
# ./core/class_db.h:305: 		if (!type) {
	cmpq	$0, -32(%rbp)	#, type
	jne	.L3535	#,
# ./core/class_db.h:306: 			memdelete(bind);
	movq	-24(%rbp), %rax	# bind, tmp151
	movq	%rax, %rdi	# tmp151,
	call	_Z9memdeleteI10MethodBindEvPT_	#
# ./core/class_db.h:307: 			ERR_FAIL_COND_V(!type, NULL);
	cmpq	$0, -32(%rbp)	#, type
	sete	%al	#, _6
	movzbl	%al, %eax	# _6, _7
	testq	%rax, %rax	# _8
	je	.L3536	#,
# ./core/class_db.h:307: 			ERR_FAIL_COND_V(!type, NULL);
	movl	$0, %r8d	#,
	movl	$.LC132, %ecx	#,
	movl	$307, %edx	#,
	movl	$.LC130, %esi	#,
	movl	$.LC131, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/class_db.h:307: 			ERR_FAIL_COND_V(!type, NULL);
	movl	$0, %ebx	#, _12
	jmp	.L3537	#
.L3536:
# ./core/class_db.h:307: 			ERR_FAIL_COND_V(!type, NULL);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
.L3535:
# ./core/class_db.h:310: 		if (type->method_map.has(p_name)) {
	movq	-32(%rbp), %rax	# type, tmp152
	leaq	16(%rax), %rdx	#, _9
	movq	-128(%rbp), %rax	# p_name, tmp153
	movq	%rax, %rsi	# tmp153,
	movq	%rdx, %rdi	# _9,
	call	_ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_	#
# ./core/class_db.h:310: 		if (type->method_map.has(p_name)) {
	testb	%al, %al	# _42
	je	.L3538	#,
# ./core/class_db.h:311: 			memdelete(bind);
	movq	-24(%rbp), %rax	# bind, tmp154
	movq	%rax, %rdi	# tmp154,
	call	_Z9memdeleteI10MethodBindEvPT_	#
# ./core/class_db.h:314: 			ERR_FAIL_V(NULL);
	movl	$0, %r8d	#,
	movl	$.LC126, %ecx	#,
	movl	$314, %edx	#,
	movl	$.LC130, %esi	#,
	movl	$.LC131, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
# ./core/class_db.h:314: 			ERR_FAIL_V(NULL);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %ebx	#, _12
	jmp	.L3537	#
.L3538:
# ./core/class_db.h:316: 		type->method_map[p_name] = bind;
	movq	-32(%rbp), %rax	# type, tmp155
	leaq	16(%rax), %rdx	#, _10
	movq	-128(%rbp), %rax	# p_name, tmp156
	movq	%rax, %rsi	# tmp156,
	movq	%rdx, %rdi	# _10,
	call	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_	#
.LEHE716:
# ./core/class_db.h:316: 		type->method_map[p_name] = bind;
	movq	-24(%rbp), %rdx	# bind, tmp157
	movq	%rdx, (%rax)	# tmp157, *_11
# ./core/class_db.h:323: 		return bind;
	movq	-24(%rbp), %rbx	# bind, _12
.L3537:
# ./core/class_db.h:302: 		String instance_type = bind->get_instance_class();
	leaq	-112(%rbp), %rax	#, tmp158
	movq	%rax, %rdi	# tmp158,
	call	_ZN6StringD1Ev	#
.L3522:
# ./core/class_db.h:294: 		GLOBAL_LOCK_FUNCTION;
	leaq	-97(%rbp), %rax	#, tmp159
	movq	%rax, %rdi	# tmp159,
	call	_ZN11_GlobalLockD1Ev	#
	movq	%rbx, %rax	# _12, <retval>
	jmp	.L3544	#
.L3543:
	movq	%rax, %rbx	#, tmp163
# ./core/class_db.h:302: 		String instance_type = bind->get_instance_class();
	leaq	-112(%rbp), %rax	#, tmp161
	movq	%rax, %rdi	# tmp161,
	call	_ZN6StringD1Ev	#
	jmp	.L3541	#
.L3542:
	movq	%rax, %rbx	#, tmp162
.L3541:
# ./core/class_db.h:294: 		GLOBAL_LOCK_FUNCTION;
	leaq	-97(%rbp), %rax	#, tmp166
	movq	%rax, %rdi	# tmp166,
	call	_ZN11_GlobalLockD1Ev	#
	movq	%rbx, %rax	# tmp162, D.62147
	movq	%rax, %rdi	# D.62147,
.LEHB717:
	call	_Unwind_Resume	#
.LEHE717:
.L3544:
# ./core/class_db.h:324: 	}
	addq	$152, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2905:
	.section	.gcc_except_table
.LLSDA2905:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2905-.LLSDACSB2905
.LLSDACSB2905:
	.uleb128 .LEHB714-.LFB2905
	.uleb128 .LEHE714-.LEHB714
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB715-.LFB2905
	.uleb128 .LEHE715-.LEHB715
	.uleb128 .L3542-.LFB2905
	.uleb128 0
	.uleb128 .LEHB716-.LFB2905
	.uleb128 .LEHE716-.LEHB716
	.uleb128 .L3543-.LFB2905
	.uleb128 0
	.uleb128 .LEHB717-.LFB2905
	.uleb128 .LEHE717-.LEHB717
	.uleb128 0
	.uleb128 0
.LLSDACSE2905:
	.section	.text._ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E,"axG",@progbits,_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E,comdat
	.size	_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E, .-_ZN7ClassDB18bind_vararg_methodIM6ObjectF7VariantPPKS2_iRNS2_9CallErrorEEEEP10MethodBindj10StringNameT_RK10MethodInfoRK6VectorIS2_E
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_:
.LFB2906:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2906:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNameRK7VariantEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_:
.LFB2907:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2907:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectF7VariantRK10StringNameRK5ArrayEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_:
.LFB2908:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2908:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF5ArrayRK6StringEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_:
.LFB2909:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -40(%rbp)	# p_method_name, p_method_name
	movq	%rsi, %rax	# p_method, tmp86
	movq	%rdx, %rsi	# p_method, tmp87
	movq	%rsi, %rdx	# tmp87,
	movq	%rax, -64(%rbp)	# tmp85, p_method
	movq	%rdx, -56(%rbp)	#, p_method
	movq	%rcx, -48(%rbp)	# p_def1, p_def1
	movq	%r8, -72(%rbp)	# p_def2, p_def2
# ./core/class_db.h:249: 		MethodBind *bind = create_method_bind(p_method);
	movq	-64(%rbp), %rdx	# p_method, tmp88
	movq	-56(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E	#
	movq	%rax, -8(%rbp)	# _4, bind
# ./core/class_db.h:250: 		const Variant *ptr[2] = { &p_def1, &p_def2 };
	movq	-48(%rbp), %rax	# p_def1, tmp90
	movq	%rax, -32(%rbp)	# tmp90, ptr
	movq	-72(%rbp), %rax	# p_def2, tmp91
	movq	%rax, -24(%rbp)	# tmp91, ptr
# ./core/class_db.h:252: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, ptr, 2);
	leaq	-32(%rbp), %rcx	#, tmp92
	movq	-40(%rbp), %rdx	# p_method_name, tmp93
	movq	-8(%rbp), %rax	# bind, tmp94
	movl	$2, %r8d	#,
	movq	%rax, %rsi	# tmp94,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:253: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2909:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectF5ErrorRK10StringNamePS3_S7_RK6VectorI7VariantEjEEEP10MethodBindT_T0_RKSA_SL_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_:
.LFB2910:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2910:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvRK10StringNamePS3_S6_EEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_:
.LFB2911:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2911:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKFbRK10StringNamePS3_S6_EEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_:
.LFB2912:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2912:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvbEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_:
.LFB2913:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2913:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKFbvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_:
.LFB2914:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2914:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectFvvEEEP10MethodBindT_T0_
	.section	.text._ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_,"axG",@progbits,_ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_,comdat
	.weak	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_
	.type	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_, @function
_ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_:
.LFB2915:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_method_name, p_method_name
	movq	%rdx, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# tmp86, tmp85
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp87,
	movq	%rax, -48(%rbp)	# tmp85, p_method
	movq	%rdx, -40(%rbp)	#, p_method
# ./core/class_db.h:232: 		MethodBind *bind = create_method_bind(p_method);
	movq	-48(%rbp), %rdx	# p_method, tmp88
	movq	-40(%rbp), %rax	# p_method, tmp89
	movq	%rdx, %rdi	# tmp88,
	movq	%rax, %rsi	# tmp89,
	call	_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E	#
	movq	%rax, -8(%rbp)	# _3, bind
# ./core/class_db.h:234: 		return bind_methodfi(METHOD_FLAGS_DEFAULT, bind, p_method_name, NULL, 0); //use static function, much smaller binary usage
	movq	-24(%rbp), %rdx	# p_method_name, tmp90
	movq	-8(%rbp), %rax	# bind, tmp91
	movl	$0, %r8d	#,
	movl	$0, %ecx	#,
	movq	%rax, %rsi	# tmp91,
	movl	$1, %edi	#,
	call	_ZN7ClassDB13bind_methodfiEjP10MethodBindPKcPPK7Varianti	#
# ./core/class_db.h:235: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2915:
	.size	_ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_, .-_ZN7ClassDB11bind_methodIPKcM6ObjectKF10StringNameRKS4_EEEP10MethodBindT_T0_
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC2Ev
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC2Ev, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC2Ev:
.LFB2918:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:564: 		hash_table = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->hash_table
# ./core/hash_map.h:565: 		elements = 0;
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$0, 12(%rax)	#, this_2(D)->elements
# ./core/hash_map.h:566: 		hash_table_power = 0;
	movq	-8(%rbp), %rax	# this, tmp84
	movb	$0, 8(%rax)	#, this_2(D)->hash_table_power
# ./core/hash_map.h:567: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2918:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC2Ev, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC2Ev
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC1Ev
	.set	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC1Ev,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEC2Ev
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev:
.LFB2921:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2921
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:607: 		clear();
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv	#
# ./core/hash_map.h:608: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2921:
	.section	.gcc_except_table
.LLSDA2921:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2921-.LLSDACSB2921
.LLSDACSB2921:
.LLSDACSE2921:
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED5Ev,comdat
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED1Ev
	.set	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED1Ev,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EED2Ev
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED5Ev,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev:
.LFB2927:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2927
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/set.h:637: 		clear();
	movq	-8(%rbp), %rax	# this, tmp83
	movq	%rax, %rdi	# tmp83,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv	#
# ./core/set.h:638: 	}
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2927:
	.section	.gcc_except_table
.LLSDA2927:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2927-.LLSDACSB2927
.LLSDACSB2927:
.LLSDACSE2927:
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED5Ev,comdat
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED1Ev
	.set	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED1Ev,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorED2Ev
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv:
.LFB2929:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/vmap.h:163: 		return _cowdata.ptrw();
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, -8(%rbp)	# _1, this
# ./core/cowdata.h:116: 		_copy_on_write();
	movq	-8(%rbp), %rax	# this, tmp86
	movq	%rax, %rdi	# tmp86,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
	movq	-8(%rbp), %rax	# this, tmp87
	movq	%rax, -16(%rbp)	# tmp87, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-16(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_7->_ptr, _8
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _8
	jne	.L3569	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, D.56620
	jmp	.L3570	#
.L3569:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-16(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_7->_ptr, D.56620
.L3570:
# ./core/cowdata.h:117: 		return (T *)_get_data();
	nop	
# ./core/vmap.h:164: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2929:
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE9get_arrayEv
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC2Ev,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC2Ev
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC2Ev, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC2Ev:
.LFB2931:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:564: 		hash_table = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->hash_table
# ./core/hash_map.h:565: 		elements = 0;
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$0, 12(%rax)	#, this_2(D)->elements
# ./core/hash_map.h:566: 		hash_table_power = 0;
	movq	-8(%rbp), %rax	# this, tmp84
	movb	$0, 8(%rax)	#, this_2(D)->hash_table_power
# ./core/hash_map.h:567: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2931:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC2Ev, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC2Ev
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC1Ev
	.set	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC1Ev,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC2Ev
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC2Ev,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC2Ev
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC2Ev, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC2Ev:
.LFB2934:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:564: 		hash_table = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->hash_table
# ./core/hash_map.h:565: 		elements = 0;
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$0, 12(%rax)	#, this_2(D)->elements
# ./core/hash_map.h:566: 		hash_table_power = 0;
	movq	-8(%rbp), %rax	# this, tmp84
	movb	$0, 8(%rax)	#, this_2(D)->hash_table_power
# ./core/hash_map.h:567: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2934:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC2Ev, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC2Ev
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC1Ev
	.set	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC1Ev,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC2Ev
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm:
.LFB2936:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_key, p_key
# ./core/hash_map.h:452: 		Element *e = NULL;
	movq	$0, -8(%rbp)	#, e
# ./core/hash_map.h:453: 		if (!hash_table)
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rax	# this_11(D)->hash_table, _1
# ./core/hash_map.h:453: 		if (!hash_table)
	testq	%rax, %rax	# _1
	jne	.L3576	#,
# ./core/hash_map.h:454: 			make_hash_table(); // if no table, make one
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rax, %rdi	# tmp106,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv	#
	jmp	.L3577	#
.L3576:
	movq	-56(%rbp), %rax	# this, tmp107
	movq	%rax, -16(%rbp)	# tmp107, this
	movq	-64(%rbp), %rax	# p_key, tmp108
	movq	%rax, -24(%rbp)	# tmp108, p_key
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movq	-24(%rbp), %rax	# p_key, tmp109
	movq	(%rax), %rax	# *p_key_24, _25
	movq	%rax, -32(%rbp)	# _25, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-32(%rbp), %rax	# p_int, tmp110
	movq	%rax, %rdi	# tmp110,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -36(%rbp)	# _27, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-16(%rbp), %rax	# this, tmp111
	movzbl	8(%rax), %eax	# this_23->hash_table_power, _30
	movzbl	%al, %eax	# _30, _31
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp112
	movl	%eax, %ecx	# _31, tmp128
	sall	%cl, %edx	# tmp128, tmp112
	movl	%edx, %eax	# tmp112, _32
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _33
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-36(%rbp), %eax	# hash, tmp114
	movl	%eax, -40(%rbp)	# tmp114, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-16(%rbp), %rax	# this, tmp115
	movq	(%rax), %rax	# this_23->hash_table, _36
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-40(%rbp), %edx	# index, _37
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _38
	addq	%rdx, %rax	# _38, _39
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_39, tmp116
	movq	%rax, -48(%rbp)	# tmp116, e
.L3584:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -48(%rbp)	#, e
	je	.L3579	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-48(%rbp), %rax	# e, tmp117
	movl	(%rax), %eax	# e_41->hash, _42
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -36(%rbp)	# _42, hash
	jne	.L3580	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-48(%rbp), %rax	# e, tmp118
	leaq	16(%rax), %rdx	#, _43
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-24(%rbp), %rax	# p_key, tmp119
	movq	%rax, %rsi	# tmp119,
	movq	%rdx, %rdi	# _43,
	call	_ZN24HashMapComparatorDefaultImE7compareERKmS2_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _44
	je	.L3580	#,
	movl	$1, %eax	#, iftmp.387_45
	jmp	.L3581	#
.L3580:
	movl	$0, %eax	#, iftmp.387_45
.L3581:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.387_45
	je	.L3582	#,
# ./core/hash_map.h:198: 				return e;
	movq	-48(%rbp), %rax	# e, D.58115
	jmp	.L3583	#
.L3582:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-48(%rbp), %rax	# e, tmp120
	movq	8(%rax), %rax	# e_41->next, tmp121
	movq	%rax, -48(%rbp)	# tmp121, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3584	#
.L3579:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, D.58115
.L3583:
# ./core/hash_map.h:456: 			e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -8(%rbp)	# D.58115, e
.L3577:
# ./core/hash_map.h:459: 		if (!e) {
	cmpq	$0, -8(%rbp)	#, e
	jne	.L3585	#,
# ./core/hash_map.h:461: 			e = create_element(p_key);
	movq	-64(%rbp), %rdx	# p_key, tmp122
	movq	-56(%rbp), %rax	# this, tmp123
	movq	%rdx, %rsi	# tmp122,
	movq	%rax, %rdi	# tmp123,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm	#
	movq	%rax, -8(%rbp)	# _17, e
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	cmpq	$0, -8(%rbp)	#, e
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L3586	#,
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	movl	$0, %r8d	#,
	movl	$.LC122, %ecx	#,
	movl	$462, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC48, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	ud2	
.L3586:
# ./core/hash_map.h:463: 			check_hash_table(); // perform mantenience routine
	movq	-56(%rbp), %rax	# this, tmp124
	movq	%rax, %rdi	# tmp124,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv	#
.L3585:
# ./core/hash_map.h:466: 		return e->pair.data;
	movq	-8(%rbp), %rax	# e, tmp125
	addq	$24, %rax	#, _22
# ./core/hash_map.h:467: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2936:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEixERKm
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_:
.LFB2937:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_key, p_key
# ./core/hash_map.h:452: 		Element *e = NULL;
	movq	$0, -8(%rbp)	#, e
# ./core/hash_map.h:453: 		if (!hash_table)
	movq	-72(%rbp), %rax	# this, tmp106
	movq	(%rax), %rax	# this_11(D)->hash_table, _1
# ./core/hash_map.h:453: 		if (!hash_table)
	testq	%rax, %rax	# _1
	jne	.L3589	#,
# ./core/hash_map.h:454: 			make_hash_table(); // if no table, make one
	movq	-72(%rbp), %rax	# this, tmp107
	movq	%rax, %rdi	# tmp107,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv	#
	jmp	.L3590	#
.L3589:
	movq	-72(%rbp), %rax	# this, tmp108
	movq	%rax, -16(%rbp)	# tmp108, this
	movq	-80(%rbp), %rax	# p_key, tmp109
	movq	%rax, -24(%rbp)	# tmp109, p_key
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movq	-24(%rbp), %rax	# p_key, tmp110
	movq	(%rax), %rax	# *p_key_24, _25
	movq	%rax, -32(%rbp)	# _25, p_obj
# core/object.h:770: 			u.p = p_obj;
	movq	-32(%rbp), %rax	# p_obj, tmp111
	movq	%rax, -64(%rbp)	# tmp111, u.p
# core/object.h:771: 			return HashMapHasherDefault::hash((uint64_t)u.i);
	movq	-64(%rbp), %rax	# u.i, _27
	movq	%rax, -40(%rbp)	# _27, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-40(%rbp), %rax	# p_int, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# core/object.h:771: 			return HashMapHasherDefault::hash((uint64_t)u.i);
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -44(%rbp)	# _29, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-16(%rbp), %rax	# this, tmp113
	movzbl	8(%rax), %eax	# this_23->hash_table_power, _34
	movzbl	%al, %eax	# _34, _35
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp114
	movl	%eax, %ecx	# _35, tmp130
	sall	%cl, %edx	# tmp130, tmp114
	movl	%edx, %eax	# tmp114, _36
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _37
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-44(%rbp), %eax	# hash, tmp116
	movl	%eax, -48(%rbp)	# tmp116, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-16(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_23->hash_table, _40
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-48(%rbp), %edx	# index, _41
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _42
	addq	%rdx, %rax	# _42, _43
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_43, tmp118
	movq	%rax, -56(%rbp)	# tmp118, e
.L3598:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -56(%rbp)	#, e
	je	.L3593	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-56(%rbp), %rax	# e, tmp119
	movl	(%rax), %eax	# e_45->hash, _46
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -44(%rbp)	# _46, hash
	jne	.L3594	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-56(%rbp), %rax	# e, tmp120
	leaq	16(%rax), %rdx	#, _47
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-24(%rbp), %rax	# p_key, tmp121
	movq	%rax, %rsi	# tmp121,
	movq	%rdx, %rdi	# _47,
	call	_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _48
	je	.L3594	#,
	movl	$1, %eax	#, iftmp.389_49
	jmp	.L3595	#
.L3594:
	movl	$0, %eax	#, iftmp.389_49
.L3595:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.389_49
	je	.L3596	#,
# ./core/hash_map.h:198: 				return e;
	movq	-56(%rbp), %rax	# e, D.58201
	jmp	.L3597	#
.L3596:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-56(%rbp), %rax	# e, tmp122
	movq	8(%rax), %rax	# e_45->next, tmp123
	movq	%rax, -56(%rbp)	# tmp123, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3598	#
.L3593:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, D.58201
.L3597:
# ./core/hash_map.h:456: 			e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -8(%rbp)	# D.58201, e
.L3590:
# ./core/hash_map.h:459: 		if (!e) {
	cmpq	$0, -8(%rbp)	#, e
	jne	.L3599	#,
# ./core/hash_map.h:461: 			e = create_element(p_key);
	movq	-80(%rbp), %rdx	# p_key, tmp124
	movq	-72(%rbp), %rax	# this, tmp125
	movq	%rdx, %rsi	# tmp124,
	movq	%rax, %rdi	# tmp125,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_	#
	movq	%rax, -8(%rbp)	# _17, e
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	cmpq	$0, -8(%rbp)	#, e
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L3600	#,
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	movl	$0, %r8d	#,
	movl	$.LC122, %ecx	#,
	movl	$462, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC48, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	ud2	
.L3600:
# ./core/hash_map.h:463: 			check_hash_table(); // perform mantenience routine
	movq	-72(%rbp), %rax	# this, tmp126
	movq	%rax, %rdi	# tmp126,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv	#
.L3599:
# ./core/hash_map.h:466: 		return e->pair.data;
	movq	-8(%rbp), %rax	# e, tmp127
	addq	$24, %rax	#, _22
# ./core/hash_map.h:467: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2937:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEixERKS1_
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm:
.LFB2938:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_key, p_key
# ./core/hash_map.h:408: 		if (unlikely(!hash_table))
	movq	-40(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_38(D)->hash_table, _1
	testq	%rax, %rax	# _1
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:408: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _4
	je	.L3603	#,
# ./core/hash_map.h:409: 			return false;
	movl	$0, %eax	#, _29
	jmp	.L3604	#
.L3603:
# ./core/hash_map.h:411: 		uint32_t hash = Hasher::hash(p_key);
	movq	-48(%rbp), %rax	# p_key, tmp113
	movq	(%rax), %rax	# *p_key_39(D), _5
	movq	%rax, -32(%rbp)	# _5, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-32(%rbp), %rax	# p_int, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# ./core/hash_map.h:411: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -20(%rbp)	# D.57270, hash
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-40(%rbp), %rax	# this, tmp115
	movzbl	8(%rax), %eax	# this_38(D)->hash_table_power, _6
	movzbl	%al, %eax	# _6, _7
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp116
	movl	%eax, %ecx	# _7, tmp139
	sall	%cl, %edx	# tmp139, tmp116
	movl	%edx, %eax	# tmp116, _8
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _9
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-20(%rbp), %eax	# hash, tmp118
	movl	%eax, -24(%rbp)	# tmp118, index
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movq	-40(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_38(D)->hash_table, _11
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movl	-24(%rbp), %edx	# index, _12
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _13
	addq	%rdx, %rax	# _13, _14
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_14, tmp120
	movq	%rax, -8(%rbp)	# tmp120, e
# ./core/hash_map.h:415: 		Element *p = NULL;
	movq	$0, -16(%rbp)	#, p
.L3614:
# ./core/hash_map.h:416: 		while (e) {
	cmpq	$0, -8(%rbp)	#, e
	je	.L3606	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-8(%rbp), %rax	# e, tmp121
	movl	(%rax), %eax	# e_27->hash, _15
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -20(%rbp)	# _15, hash
	jne	.L3607	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-8(%rbp), %rax	# e, tmp122
	leaq	16(%rax), %rdx	#, _16
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-48(%rbp), %rax	# p_key, tmp123
	movq	%rax, %rsi	# tmp123,
	movq	%rdx, %rdi	# _16,
	call	_ZN24HashMapComparatorDefaultImE7compareERKmS2_	#
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _17
	je	.L3607	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movl	$1, %eax	#, iftmp.398_30
	jmp	.L3608	#
.L3607:
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movl	$0, %eax	#, iftmp.398_30
.L3608:
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.398_30
	je	.L3609	#,
# ./core/hash_map.h:421: 				if (p) {
	cmpq	$0, -16(%rbp)	#, p
	je	.L3610	#,
# ./core/hash_map.h:423: 					p->next = e->next;
	movq	-8(%rbp), %rax	# e, tmp124
	movq	8(%rax), %rdx	# e_27->next, _18
# ./core/hash_map.h:423: 					p->next = e->next;
	movq	-16(%rbp), %rax	# p, tmp125
	movq	%rdx, 8(%rax)	# _18, p_28->next
	jmp	.L3611	#
.L3610:
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	-40(%rbp), %rax	# this, tmp126
	movq	(%rax), %rax	# this_38(D)->hash_table, _19
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movl	-24(%rbp), %edx	# index, _20
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	salq	$3, %rdx	#, _21
	addq	%rax, %rdx	# _19, _22
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	-8(%rbp), %rax	# e, tmp127
	movq	8(%rax), %rax	# e_27->next, _23
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	%rax, (%rdx)	# _23, *_22
.L3611:
# ./core/hash_map.h:429: 				memdelete(e);
	movq	-8(%rbp), %rax	# e, tmp128
	movq	%rax, %rdi	# tmp128,
	call	_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:430: 				elements--;
	movq	-40(%rbp), %rax	# this, tmp129
	movl	12(%rax), %eax	# this_38(D)->elements, _24
	leal	-1(%rax), %edx	#, _25
	movq	-40(%rbp), %rax	# this, tmp130
	movl	%edx, 12(%rax)	# _25, this_38(D)->elements
# ./core/hash_map.h:432: 				if (elements == 0)
	movq	-40(%rbp), %rax	# this, tmp131
	movl	12(%rax), %eax	# this_38(D)->elements, _26
# ./core/hash_map.h:432: 				if (elements == 0)
	testl	%eax, %eax	# _26
	jne	.L3612	#,
# ./core/hash_map.h:433: 					erase_hash_table();
	movq	-40(%rbp), %rax	# this, tmp132
	movq	%rax, %rdi	# tmp132,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv	#
	jmp	.L3613	#
.L3612:
# ./core/hash_map.h:435: 					check_hash_table();
	movq	-40(%rbp), %rax	# this, tmp133
	movq	%rax, %rdi	# tmp133,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv	#
.L3613:
# ./core/hash_map.h:436: 				return true;
	movl	$1, %eax	#, _29
	jmp	.L3604	#
.L3609:
# ./core/hash_map.h:439: 			p = e;
	movq	-8(%rbp), %rax	# e, tmp134
	movq	%rax, -16(%rbp)	# tmp134, p
# ./core/hash_map.h:440: 			e = e->next;
	movq	-8(%rbp), %rax	# e, tmp135
	movq	8(%rax), %rax	# e_27->next, tmp136
	movq	%rax, -8(%rbp)	# tmp136, e
# ./core/hash_map.h:416: 		while (e) {
	jmp	.L3614	#
.L3606:
# ./core/hash_map.h:443: 		return false;
	movl	$0, %eax	#, _29
.L3604:
# ./core/hash_map.h:444: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2938:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5eraseERKm
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_:
.LFB2939:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_key, p_key
# ./core/hash_map.h:408: 		if (unlikely(!hash_table))
	movq	-56(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_38(D)->hash_table, _1
	testq	%rax, %rax	# _1
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:408: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _4
	je	.L3616	#,
# ./core/hash_map.h:409: 			return false;
	movl	$0, %eax	#, _29
	jmp	.L3617	#
.L3616:
# ./core/hash_map.h:411: 		uint32_t hash = Hasher::hash(p_key);
	movq	-64(%rbp), %rax	# p_key, tmp114
	movq	(%rax), %rax	# *p_key_39(D), _5
	movq	%rax, -32(%rbp)	# _5, p_obj
# core/object.h:770: 			u.p = p_obj;
	movq	-32(%rbp), %rax	# p_obj, tmp115
	movq	%rax, -48(%rbp)	# tmp115, u.p
# core/object.h:771: 			return HashMapHasherDefault::hash((uint64_t)u.i);
	movq	-48(%rbp), %rax	# u.i, _60
	movq	%rax, -40(%rbp)	# _60, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-40(%rbp), %rax	# p_int, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# core/object.h:771: 			return HashMapHasherDefault::hash((uint64_t)u.i);
	nop	
# ./core/hash_map.h:411: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -20(%rbp)	# D.57279, hash
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-56(%rbp), %rax	# this, tmp117
	movzbl	8(%rax), %eax	# this_38(D)->hash_table_power, _6
	movzbl	%al, %eax	# _6, _7
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp118
	movl	%eax, %ecx	# _7, tmp141
	sall	%cl, %edx	# tmp141, tmp118
	movl	%edx, %eax	# tmp118, _8
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _9
# ./core/hash_map.h:412: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-20(%rbp), %eax	# hash, tmp120
	movl	%eax, -24(%rbp)	# tmp120, index
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movq	-56(%rbp), %rax	# this, tmp121
	movq	(%rax), %rax	# this_38(D)->hash_table, _11
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movl	-24(%rbp), %edx	# index, _12
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _13
	addq	%rdx, %rax	# _13, _14
# ./core/hash_map.h:414: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_14, tmp122
	movq	%rax, -8(%rbp)	# tmp122, e
# ./core/hash_map.h:415: 		Element *p = NULL;
	movq	$0, -16(%rbp)	#, p
.L3628:
# ./core/hash_map.h:416: 		while (e) {
	cmpq	$0, -8(%rbp)	#, e
	je	.L3620	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-8(%rbp), %rax	# e, tmp123
	movl	(%rax), %eax	# e_27->hash, _15
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -20(%rbp)	# _15, hash
	jne	.L3621	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-8(%rbp), %rax	# e, tmp124
	leaq	16(%rax), %rdx	#, _16
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# p_key, tmp125
	movq	%rax, %rsi	# tmp125,
	movq	%rdx, %rdi	# _16,
	call	_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_	#
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _17
	je	.L3621	#,
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movl	$1, %eax	#, iftmp.401_30
	jmp	.L3622	#
.L3621:
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movl	$0, %eax	#, iftmp.401_30
.L3622:
# ./core/hash_map.h:419: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.401_30
	je	.L3623	#,
# ./core/hash_map.h:421: 				if (p) {
	cmpq	$0, -16(%rbp)	#, p
	je	.L3624	#,
# ./core/hash_map.h:423: 					p->next = e->next;
	movq	-8(%rbp), %rax	# e, tmp126
	movq	8(%rax), %rdx	# e_27->next, _18
# ./core/hash_map.h:423: 					p->next = e->next;
	movq	-16(%rbp), %rax	# p, tmp127
	movq	%rdx, 8(%rax)	# _18, p_28->next
	jmp	.L3625	#
.L3624:
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	-56(%rbp), %rax	# this, tmp128
	movq	(%rax), %rax	# this_38(D)->hash_table, _19
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movl	-24(%rbp), %edx	# index, _20
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	salq	$3, %rdx	#, _21
	addq	%rax, %rdx	# _19, _22
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	-8(%rbp), %rax	# e, tmp129
	movq	8(%rax), %rax	# e_27->next, _23
# ./core/hash_map.h:426: 					hash_table[index] = e->next;
	movq	%rax, (%rdx)	# _23, *_22
.L3625:
# ./core/hash_map.h:429: 				memdelete(e);
	movq	-8(%rbp), %rax	# e, tmp130
	movq	%rax, %rdi	# tmp130,
	call	_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:430: 				elements--;
	movq	-56(%rbp), %rax	# this, tmp131
	movl	12(%rax), %eax	# this_38(D)->elements, _24
	leal	-1(%rax), %edx	#, _25
	movq	-56(%rbp), %rax	# this, tmp132
	movl	%edx, 12(%rax)	# _25, this_38(D)->elements
# ./core/hash_map.h:432: 				if (elements == 0)
	movq	-56(%rbp), %rax	# this, tmp133
	movl	12(%rax), %eax	# this_38(D)->elements, _26
# ./core/hash_map.h:432: 				if (elements == 0)
	testl	%eax, %eax	# _26
	jne	.L3626	#,
# ./core/hash_map.h:433: 					erase_hash_table();
	movq	-56(%rbp), %rax	# this, tmp134
	movq	%rax, %rdi	# tmp134,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv	#
	jmp	.L3627	#
.L3626:
# ./core/hash_map.h:435: 					check_hash_table();
	movq	-56(%rbp), %rax	# this, tmp135
	movq	%rax, %rdi	# tmp135,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv	#
.L3627:
# ./core/hash_map.h:436: 				return true;
	movl	$1, %eax	#, _29
	jmp	.L3617	#
.L3623:
# ./core/hash_map.h:439: 			p = e;
	movq	-8(%rbp), %rax	# e, tmp136
	movq	%rax, -16(%rbp)	# tmp136, p
# ./core/hash_map.h:440: 			e = e->next;
	movq	-8(%rbp), %rax	# e, tmp137
	movq	8(%rax), %rax	# e_27->next, tmp138
	movq	%rax, -8(%rbp)	# tmp138, e
# ./core/hash_map.h:416: 		while (e) {
	jmp	.L3628	#
.L3620:
# ./core/hash_map.h:443: 		return false;
	movl	$0, %eax	#, _29
.L3617:
# ./core/hash_map.h:444: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2939:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5eraseERKS1_
	.section	.text._ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm,"axG",@progbits,_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm,comdat
	.align 2
	.weak	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm
	.type	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm, @function
_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm:
.LFB2941:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_key, p_key
# ./core/hash_map.h:486: 		if (unlikely(!hash_table))
	movq	-72(%rbp), %rax	# this, tmp138
	movq	(%rax), %rax	# this_45(D)->hash_table, _1
	testq	%rax, %rax	# _1
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:486: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _4
	je	.L3630	#,
# ./core/hash_map.h:487: 			return NULL;
	movl	$0, %eax	#, _41
	jmp	.L3631	#
.L3630:
# ./core/hash_map.h:489: 		if (!p_key) { /* get the first key */
	cmpq	$0, -80(%rbp)	#, p_key
	jne	.L3632	#,
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -4(%rbp)	#, i
.L3635:
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-72(%rbp), %rax	# this, tmp139
	movzbl	8(%rax), %eax	# this_45(D)->hash_table_power, _5
	movzbl	%al, %eax	# _5, _6
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp140
	movl	%eax, %ecx	# _6, tmp175
	sall	%cl, %edx	# tmp175, tmp140
	movl	%edx, %eax	# tmp140, _7
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -4(%rbp)	# _7, i
	jge	.L3633	#,
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	movq	-72(%rbp), %rax	# this, tmp141
	movq	(%rax), %rax	# this_45(D)->hash_table, _8
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	movl	-4(%rbp), %edx	# i, tmp142
	movslq	%edx, %rdx	# tmp142, _9
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	salq	$3, %rdx	#, _10
	addq	%rdx, %rax	# _10, _11
	movq	(%rax), %rax	# *_11, _12
# ./core/hash_map.h:493: 				if (hash_table[i]) {
	testq	%rax, %rax	# _12
	je	.L3634	#,
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	movq	-72(%rbp), %rax	# this, tmp143
	movq	(%rax), %rax	# this_45(D)->hash_table, _13
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	movl	-4(%rbp), %edx	# i, tmp144
	movslq	%edx, %rdx	# tmp144, _14
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	salq	$3, %rdx	#, _15
	addq	%rdx, %rax	# _15, _16
	movq	(%rax), %rax	# *_16, _17
# ./core/hash_map.h:494: 					return &hash_table[i]->pair.key;
	addq	$16, %rax	#, _41
	jmp	.L3631	#
.L3634:
# ./core/hash_map.h:491: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L3635	#
.L3632:
	movq	-72(%rbp), %rax	# this, tmp145
	movq	%rax, -32(%rbp)	# tmp145, this
	movq	-80(%rbp), %rax	# p_key, tmp146
	movq	%rax, -40(%rbp)	# tmp146, p_key
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movq	-40(%rbp), %rax	# p_key, tmp147
	movq	(%rax), %rax	# *p_key_64, _65
	movq	%rax, -48(%rbp)	# _65, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-48(%rbp), %rax	# p_int, tmp148
	movq	%rax, %rdi	# tmp148,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -52(%rbp)	# _67, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-32(%rbp), %rax	# this, tmp149
	movzbl	8(%rax), %eax	# this_63->hash_table_power, _70
	movzbl	%al, %eax	# _70, _71
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp150
	movl	%eax, %ecx	# _71, tmp177
	sall	%cl, %edx	# tmp177, tmp150
	movl	%edx, %eax	# tmp150, _72
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _73
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-52(%rbp), %eax	# hash, tmp152
	movl	%eax, -56(%rbp)	# tmp152, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-32(%rbp), %rax	# this, tmp153
	movq	(%rax), %rax	# this_63->hash_table, _76
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-56(%rbp), %edx	# index, _77
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _78
	addq	%rdx, %rax	# _78, _79
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_79, tmp154
	movq	%rax, -64(%rbp)	# tmp154, e
.L3642:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -64(%rbp)	#, e
	je	.L3637	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# e, tmp155
	movl	(%rax), %eax	# e_81->hash, _82
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -52(%rbp)	# _82, hash
	jne	.L3638	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# e, tmp156
	leaq	16(%rax), %rdx	#, _83
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-40(%rbp), %rax	# p_key, tmp157
	movq	%rax, %rsi	# tmp157,
	movq	%rdx, %rdi	# _83,
	call	_ZN24HashMapComparatorDefaultImE7compareERKmS2_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _84
	je	.L3638	#,
	movl	$1, %eax	#, iftmp.387_85
	jmp	.L3639	#
.L3638:
	movl	$0, %eax	#, iftmp.387_85
.L3639:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.387_85
	je	.L3640	#,
# ./core/hash_map.h:198: 				return e;
	movq	-64(%rbp), %rax	# e, D.55684
	jmp	.L3641	#
.L3640:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-64(%rbp), %rax	# e, tmp158
	movq	8(%rax), %rax	# e_81->next, tmp159
	movq	%rax, -64(%rbp)	# tmp159, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3642	#
.L3637:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, D.55684
.L3641:
# ./core/hash_map.h:500: 			const Element *e = get_element(*p_key);
	movq	%rax, -16(%rbp)	# D.55684, e
# ./core/hash_map.h:501: 			if (!e) {
	cmpq	$0, -16(%rbp)	#, e
	jne	.L3643	#,
# ./core/hash_map.h:503: 				ERR_FAIL_V(NULL);
	movl	$0, %r8d	#,
	movl	$.LC126, %ecx	#,
	movl	$503, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC127, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %eax	#, _41
	jmp	.L3631	#
.L3643:
# ./core/hash_map.h:505: 			if (e->next) {
	movq	-16(%rbp), %rax	# e, tmp160
	movq	8(%rax), %rax	# e_48->next, _18
# ./core/hash_map.h:505: 			if (e->next) {
	testq	%rax, %rax	# _18
	je	.L3644	#,
# ./core/hash_map.h:507: 				return &e->next->pair.key;
	movq	-16(%rbp), %rax	# e, tmp161
	movq	8(%rax), %rax	# e_48->next, _19
# ./core/hash_map.h:507: 				return &e->next->pair.key;
	addq	$16, %rax	#, _41
	jmp	.L3631	#
.L3644:
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	movq	-16(%rbp), %rax	# e, tmp162
	movl	(%rax), %edx	# e_48->hash, _20
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	movq	-72(%rbp), %rax	# this, tmp163
	movzbl	8(%rax), %eax	# this_45(D)->hash_table_power, _21
	movzbl	%al, %eax	# _21, _22
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	movl	$1, %esi	#, tmp164
	movl	%eax, %ecx	# _22, tmp179
	sall	%cl, %esi	# tmp179, tmp164
	movl	%esi, %eax	# tmp164, _23
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _24
# ./core/hash_map.h:510: 				uint32_t index = e->hash & ((1 << hash_table_power) - 1);
	andl	%edx, %eax	# _20, tmp165
	movl	%eax, -20(%rbp)	# tmp165, index
# ./core/hash_map.h:511: 				index++;
	addl	$1, -20(%rbp)	#, index
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	movl	-20(%rbp), %eax	# index, tmp166
	movl	%eax, -8(%rbp)	# tmp166, i
.L3646:
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	movq	-72(%rbp), %rax	# this, tmp167
	movzbl	8(%rax), %eax	# this_45(D)->hash_table_power, _26
	movzbl	%al, %eax	# _26, _27
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp168
	movl	%eax, %ecx	# _27, tmp181
	sall	%cl, %edx	# tmp181, tmp168
	movl	%edx, %eax	# tmp168, _28
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -8(%rbp)	# _28, i
	jge	.L3633	#,
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	movq	-72(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_45(D)->hash_table, _29
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	movl	-8(%rbp), %edx	# i, tmp170
	movslq	%edx, %rdx	# tmp170, _30
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	salq	$3, %rdx	#, _31
	addq	%rdx, %rax	# _31, _32
	movq	(%rax), %rax	# *_32, _33
# ./core/hash_map.h:514: 					if (hash_table[i]) {
	testq	%rax, %rax	# _33
	je	.L3645	#,
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	movq	-72(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_45(D)->hash_table, _34
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	movl	-8(%rbp), %edx	# i, tmp172
	movslq	%edx, %rdx	# tmp172, _35
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	salq	$3, %rdx	#, _36
	addq	%rdx, %rax	# _36, _37
	movq	(%rax), %rax	# *_37, _38
# ./core/hash_map.h:515: 						return &hash_table[i]->pair.key;
	addq	$16, %rax	#, _41
	jmp	.L3631	#
.L3645:
# ./core/hash_map.h:512: 				for (int i = index; i < (1 << hash_table_power); i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L3646	#
.L3633:
# ./core/hash_map.h:523: 		return NULL; /* nothing found */
	movl	$0, %eax	#, _41
.L3631:
# ./core/hash_map.h:524: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2941:
	.size	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm, .-_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4nextEPKm
	.section	.text._ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv,"axG",@progbits,_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv,comdat
	.align 2
	.weak	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv
	.type	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv, @function
_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv:
.LFB2942:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:528: 		return elements;
	movq	-8(%rbp), %rax	# this, tmp84
	movl	12(%rax), %eax	# this_2(D)->elements, _3
# ./core/hash_map.h:529: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2942:
	.size	_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv, .-_ZNK7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4sizeEv
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv:
.LFB2943:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:539: 		if (hash_table) {
	movq	-24(%rbp), %rax	# this, tmp101
	movq	(%rax), %rax	# this_25(D)->hash_table, _1
# ./core/hash_map.h:539: 		if (hash_table) {
	testq	%rax, %rax	# _1
	je	.L3650	#,
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -4(%rbp)	#, i
.L3654:
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-24(%rbp), %rax	# this, tmp102
	movzbl	8(%rax), %eax	# this_25(D)->hash_table_power, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp103
	movl	%eax, %ecx	# _3, tmp118
	sall	%cl, %edx	# tmp118, tmp103
	movl	%edx, %eax	# tmp103, _4
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -4(%rbp)	# _4, i
	jge	.L3651	#,
.L3653:
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	movq	-24(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_25(D)->hash_table, _5
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	movl	-4(%rbp), %edx	# i, tmp105
	movslq	%edx, %rdx	# tmp105, _6
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	salq	$3, %rdx	#, _7
	addq	%rdx, %rax	# _7, _8
	movq	(%rax), %rax	# *_8, _9
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	testq	%rax, %rax	# _9
	je	.L3652	#,
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movq	-24(%rbp), %rax	# this, tmp106
	movq	(%rax), %rax	# this_25(D)->hash_table, _10
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movl	-4(%rbp), %edx	# i, tmp107
	movslq	%edx, %rdx	# tmp107, _11
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	salq	$3, %rdx	#, _12
	addq	%rdx, %rax	# _12, _13
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movq	(%rax), %rax	# *_13, tmp108
	movq	%rax, -16(%rbp)	# tmp108, e
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	-24(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_25(D)->hash_table, _14
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movl	-4(%rbp), %edx	# i, tmp110
	movslq	%edx, %rdx	# tmp110, _15
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	salq	$3, %rdx	#, _16
	addq	%rax, %rdx	# _14, _17
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	-16(%rbp), %rax	# e, tmp111
	movq	8(%rax), %rax	# e_27->next, _18
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	%rax, (%rdx)	# _18, *_17
# ./core/hash_map.h:546: 					memdelete(e);
	movq	-16(%rbp), %rax	# e, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	jmp	.L3653	#
.L3652:
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L3654	#
.L3651:
# ./core/hash_map.h:550: 			memdelete_arr(hash_table);
	movq	-24(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_25(D)->hash_table, _19
	movq	%rax, %rdi	# _19,
	call	_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_	#
.L3650:
# ./core/hash_map.h:553: 		hash_table = 0;
	movq	-24(%rbp), %rax	# this, tmp114
	movq	$0, (%rax)	#, this_25(D)->hash_table
# ./core/hash_map.h:554: 		hash_table_power = 0;
	movq	-24(%rbp), %rax	# this, tmp115
	movb	$0, 8(%rax)	#, this_25(D)->hash_table_power
# ./core/hash_map.h:555: 		elements = 0;
	movq	-24(%rbp), %rax	# this, tmp116
	movl	$0, 12(%rax)	#, this_25(D)->elements
# ./core/hash_map.h:556: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2943:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv:
.LFB2944:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:539: 		if (hash_table) {
	movq	-24(%rbp), %rax	# this, tmp101
	movq	(%rax), %rax	# this_25(D)->hash_table, _1
# ./core/hash_map.h:539: 		if (hash_table) {
	testq	%rax, %rax	# _1
	je	.L3656	#,
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -4(%rbp)	#, i
.L3660:
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-24(%rbp), %rax	# this, tmp102
	movzbl	8(%rax), %eax	# this_25(D)->hash_table_power, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp103
	movl	%eax, %ecx	# _3, tmp118
	sall	%cl, %edx	# tmp118, tmp103
	movl	%edx, %eax	# tmp103, _4
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -4(%rbp)	# _4, i
	jge	.L3657	#,
.L3659:
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	movq	-24(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_25(D)->hash_table, _5
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	movl	-4(%rbp), %edx	# i, tmp105
	movslq	%edx, %rdx	# tmp105, _6
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	salq	$3, %rdx	#, _7
	addq	%rdx, %rax	# _7, _8
	movq	(%rax), %rax	# *_8, _9
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	testq	%rax, %rax	# _9
	je	.L3658	#,
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movq	-24(%rbp), %rax	# this, tmp106
	movq	(%rax), %rax	# this_25(D)->hash_table, _10
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movl	-4(%rbp), %edx	# i, tmp107
	movslq	%edx, %rdx	# tmp107, _11
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	salq	$3, %rdx	#, _12
	addq	%rdx, %rax	# _12, _13
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movq	(%rax), %rax	# *_13, tmp108
	movq	%rax, -16(%rbp)	# tmp108, e
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	-24(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_25(D)->hash_table, _14
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movl	-4(%rbp), %edx	# i, tmp110
	movslq	%edx, %rdx	# tmp110, _15
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	salq	$3, %rdx	#, _16
	addq	%rax, %rdx	# _14, _17
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	-16(%rbp), %rax	# e, tmp111
	movq	8(%rax), %rax	# e_27->next, _18
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	%rax, (%rdx)	# _18, *_17
# ./core/hash_map.h:546: 					memdelete(e);
	movq	-16(%rbp), %rax	# e, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	jmp	.L3659	#
.L3658:
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L3660	#
.L3657:
# ./core/hash_map.h:550: 			memdelete_arr(hash_table);
	movq	-24(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_25(D)->hash_table, _19
	movq	%rax, %rdi	# _19,
	call	_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_	#
.L3656:
# ./core/hash_map.h:553: 		hash_table = 0;
	movq	-24(%rbp), %rax	# this, tmp114
	movq	$0, (%rax)	#, this_25(D)->hash_table
# ./core/hash_map.h:554: 		hash_table_power = 0;
	movq	-24(%rbp), %rax	# this, tmp115
	movb	$0, 8(%rax)	#, this_25(D)->hash_table_power
# ./core/hash_map.h:555: 		elements = 0;
	movq	-24(%rbp), %rax	# this, tmp116
	movl	$0, 12(%rax)	#, this_25(D)->elements
# ./core/hash_map.h:556: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2944:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv
	.section	.text._Z9memdeleteI6RWLockEvPT_,"axG",@progbits,_Z9memdeleteI6RWLockEvPT_,comdat
	.weak	_Z9memdeleteI6RWLockEvPT_
	.type	_Z9memdeleteI6RWLockEvPT_, @function
_Z9memdeleteI6RWLockEvPT_:
.LFB2945:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp87
	movq	%rax, -8(%rbp)	# tmp87, D.55244
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55245
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.434_8
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.434_8
	jne	.L3665	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp88
	movq	(%rax), %rax	# p_class_7(D)->_vptr.RWLock, _2
	addq	$48, %rax	#, _3
	movq	(%rax), %rdx	# *_3, _4
	movq	-24(%rbp), %rax	# p_class, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _4
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-24(%rbp), %rax	# p_class, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L3661	#
.L3665:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L3661:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2945:
	.size	_Z9memdeleteI6RWLockEvPT_, .-_Z9memdeleteI6RWLockEvPT_
	.section	.text._ZN7CowDataIcE6_unrefEPv,"axG",@progbits,_ZN7CowDataIcE6_unrefEPv,comdat
	.align 2
	.weak	_ZN7CowDataIcE6_unrefEPv
	.type	_ZN7CowDataIcE6_unrefEPv, @function
_ZN7CowDataIcE6_unrefEPv:
.LFB2949:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_data, p_data
# ./core/cowdata.h:192: 	if (!p_data)
	cmpq	$0, -48(%rbp)	#, p_data
	je	.L3673	#,
	movq	-40(%rbp), %rax	# this, tmp87
	movq	%rax, -24(%rbp)	# tmp87, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-24(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_11->_ptr, _12
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _12
	jne	.L3669	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.55253
	jmp	.L3670	#
.L3669:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-24(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_11->_ptr, _14
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.55253
.L3670:
# ./core/cowdata.h:195: 	uint32_t *refc = _get_refcount();
	movq	%rax, -8(%rbp)	# D.55253, refc
	movq	-8(%rbp), %rax	# refc, tmp90
	movq	%rax, -16(%rbp)	# tmp90, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-16(%rbp), %rdx	# pw, tmp91
	movl	$1, %eax	#, tmp93
	negl	%eax	# tmp93
	movl	%eax, %ecx	# tmp93, tmp92
	movl	%ecx, %eax	# tmp92, D.55249
	lock xaddl	%eax, (%rdx)	#, D.55249,
	addl	%ecx, %eax	# tmp92, D.55249
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testl	%eax, %eax	# D.55249
	setne	%al	#, retval.233_7
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testb	%al, %al	# retval.233_7
	jne	.L3674	#,
# ./core/cowdata.h:212: 	Memory::free_static((uint8_t *)p_data, true);
	movq	-48(%rbp), %rax	# p_data, tmp94
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp94,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L3666	#
.L3673:
# ./core/cowdata.h:193: 		return;
	nop	
	jmp	.L3666	#
.L3674:
# ./core/cowdata.h:198: 		return; // still in use
	nop	
.L3666:
# ./core/cowdata.h:213: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2949:
	.size	_ZN7CowDataIcE6_unrefEPv, .-_ZN7CowDataIcE6_unrefEPv
	.section	.text._ZN7CowDataIwE6_unrefEPv,"axG",@progbits,_ZN7CowDataIwE6_unrefEPv,comdat
	.align 2
	.weak	_ZN7CowDataIwE6_unrefEPv
	.type	_ZN7CowDataIwE6_unrefEPv, @function
_ZN7CowDataIwE6_unrefEPv:
.LFB2956:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_data, p_data
# ./core/cowdata.h:192: 	if (!p_data)
	cmpq	$0, -48(%rbp)	#, p_data
	je	.L3682	#,
	movq	-40(%rbp), %rax	# this, tmp87
	movq	%rax, -24(%rbp)	# tmp87, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-24(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_11->_ptr, _12
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _12
	jne	.L3678	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.55335
	jmp	.L3679	#
.L3678:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-24(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_11->_ptr, _14
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.55335
.L3679:
# ./core/cowdata.h:195: 	uint32_t *refc = _get_refcount();
	movq	%rax, -8(%rbp)	# D.55335, refc
	movq	-8(%rbp), %rax	# refc, tmp90
	movq	%rax, -16(%rbp)	# tmp90, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-16(%rbp), %rdx	# pw, tmp91
	movl	$1, %eax	#, tmp93
	negl	%eax	# tmp93
	movl	%eax, %ecx	# tmp93, tmp92
	movl	%ecx, %eax	# tmp92, D.55331
	lock xaddl	%eax, (%rdx)	#, D.55331,
	addl	%ecx, %eax	# tmp92, D.55331
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testl	%eax, %eax	# D.55331
	setne	%al	#, retval.7_7
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testb	%al, %al	# retval.7_7
	jne	.L3683	#,
# ./core/cowdata.h:212: 	Memory::free_static((uint8_t *)p_data, true);
	movq	-48(%rbp), %rax	# p_data, tmp94
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp94,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L3675	#
.L3682:
# ./core/cowdata.h:193: 		return;
	nop	
	jmp	.L3675	#
.L3683:
# ./core/cowdata.h:198: 		return; // still in use
	nop	
.L3675:
# ./core/cowdata.h:213: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2956:
	.size	_ZN7CowDataIwE6_unrefEPv, .-_ZN7CowDataIwE6_unrefEPv
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv:
.LFB2969:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
.L3692:
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rax, -8(%rbp)	# tmp89, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_8->_data, _9
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _9
	je	.L3685	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_8->_data, _10
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _10->first, D.58220
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3693	#
.L3685:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.58220
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3693:
# ./core/list.h:403: 		while (front()) {
	testq	%rax, %rax	# D.58220
	setne	%al	#, retval.13_6
	testb	%al, %al	# retval.13_6
	je	.L3695	#,
	movq	-24(%rbp), %rax	# this, tmp92
	movq	%rax, -16(%rbp)	# tmp92, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_15->_data, _16
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _16
	je	.L3689	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_15->_data, _17
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _17->first, D.58225
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3694	#
.L3689:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.58225
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3694:
# ./core/list.h:404: 			erase(front());
	movq	-24(%rbp), %rdx	# this, tmp95
	movq	%rax, %rsi	# D.58225,
	movq	%rdx, %rdi	# tmp95,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE	#
# ./core/list.h:403: 		while (front()) {
	jmp	.L3692	#
.L3695:
# ./core/list.h:406: 	};
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2969:
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv, .-_ZN4ListI12PropertyInfo16DefaultAllocatorE5clearEv
	.section	.text._Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_:
.LFB2970:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.55394
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55395
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.16_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.16_5
	jne	.L3700	#,
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, -16(%rbp)	# tmp85, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp86
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L3696	#
.L3700:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L3696:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2970:
	.size	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD2Ev,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD5Ev,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD2Ev
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD2Ev, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD2Ev:
.LFB2976:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/vmap.h:40: 	struct Pair {
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$16, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN6Object6Signal4SlotD1Ev	#
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN6Object6Signal6TargetD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2976:
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD2Ev, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD2Ev
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD1Ev
	.set	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD1Ev,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD2Ev
	.section	.text._ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv,"axG",@progbits,_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv,comdat
	.align 2
	.weak	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv
	.type	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv, @function
_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv:
.LFB2974:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_data, p_data
# ./core/cowdata.h:192: 	if (!p_data)
	cmpq	$0, -80(%rbp)	#, p_data
	je	.L3713	#,
	movq	-72(%rbp), %rax	# this, tmp94
	movq	%rax, -48(%rbp)	# tmp94, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_22->_ptr, _23
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _23
	jne	.L3705	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.56007
	jmp	.L3706	#
.L3705:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-48(%rbp), %rax	# this, tmp96
	movq	(%rax), %rax	# this_22->_ptr, _25
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.56007
.L3706:
# ./core/cowdata.h:195: 	uint32_t *refc = _get_refcount();
	movq	%rax, -16(%rbp)	# D.56007, refc
	movq	-16(%rbp), %rax	# refc, tmp97
	movq	%rax, -40(%rbp)	# tmp97, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-40(%rbp), %rdx	# pw, tmp98
	movl	$1, %eax	#, tmp100
	negl	%eax	# tmp100
	movl	%eax, %ecx	# tmp100, tmp99
	movl	%ecx, %eax	# tmp99, D.56003
	lock xaddl	%eax, (%rdx)	#, D.56003,
	addl	%ecx, %eax	# tmp99, D.56003
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testl	%eax, %eax	# D.56003
	setne	%al	#, retval.199_13
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testb	%al, %al	# retval.199_13
	jne	.L3714	#,
	movq	-72(%rbp), %rax	# this, tmp101
	movq	%rax, -56(%rbp)	# tmp101, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-56(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_28->_ptr, _29
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _29
	jne	.L3709	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.56011
	jmp	.L3710	#
.L3709:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-56(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_28->_ptr, _31
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.56011
.L3710:
# ./core/cowdata.h:202: 		uint32_t *count = _get_size();
	movq	%rax, -24(%rbp)	# D.56011, count
# ./core/cowdata.h:203: 		T *data = (T *)(count + 1);
	movq	-24(%rbp), %rax	# count, tmp107
	addq	$4, %rax	#, tmp106
	movq	%rax, -32(%rbp)	# tmp106, data
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	movl	$0, -4(%rbp)	#, i
.L3712:
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	movq	-24(%rbp), %rax	# count, tmp108
	movl	(%rax), %eax	# *count_14, _2
	cmpl	%eax, -4(%rbp)	# _2, i
	jnb	.L3711	#,
# ./core/cowdata.h:207: 			data[i].~T();
	movl	-4(%rbp), %edx	# i, _3
# ./core/cowdata.h:207: 			data[i].~T();
	movq	%rdx, %rax	# _3, tmp109
	salq	$2, %rax	#, tmp109
	addq	%rdx, %rax	# _3, tmp109
	addq	%rax, %rax	# tmp109
	addq	%rdx, %rax	# _3, tmp109
	salq	$3, %rax	#, tmp110
	movq	%rax, %rdx	# tmp109, _4
# ./core/cowdata.h:207: 			data[i].~T();
	movq	-32(%rbp), %rax	# data, tmp111
	addq	%rdx, %rax	# _4, _5
	movq	%rax, %rdi	# _5,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD1Ev	#
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L3712	#
.L3711:
# ./core/cowdata.h:212: 	Memory::free_static((uint8_t *)p_data, true);
	movq	-80(%rbp), %rax	# p_data, tmp112
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp112,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L3702	#
.L3713:
# ./core/cowdata.h:193: 		return;
	nop	
	jmp	.L3702	#
.L3714:
# ./core/cowdata.h:198: 		return; // still in use
	nop	
.L3702:
# ./core/cowdata.h:213: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2974:
	.size	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv, .-_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv
	.section	.text._ZN7CowDataI7VariantE4_refERKS1_,"axG",@progbits,_ZN7CowDataI7VariantE4_refERKS1_,comdat
	.align 2
	.weak	_ZN7CowDataI7VariantE4_refERKS1_
	.type	_ZN7CowDataI7VariantE4_refERKS1_, @function
_ZN7CowDataI7VariantE4_refERKS1_:
.LFB2984:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_from, p_from
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	movq	-40(%rbp), %rax	# this, tmp95
	movq	(%rax), %rdx	# this_10(D)->_ptr, _1
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	movq	-48(%rbp), %rax	# p_from, tmp96
	movq	(%rax), %rax	# p_from_11(D)->_ptr, _2
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	cmpq	%rax, %rdx	# _2, _1
	je	.L3725	#,
# ./core/cowdata.h:349: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp97
	movq	(%rax), %rdx	# this_10(D)->_ptr, _3
# ./core/cowdata.h:349: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp98
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp98,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:350: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp99
	movq	$0, (%rax)	#, this_10(D)->_ptr
# ./core/cowdata.h:352: 	if (!p_from._ptr)
	movq	-48(%rbp), %rax	# p_from, tmp100
	movq	(%rax), %rax	# p_from_11(D)->_ptr, _4
# ./core/cowdata.h:352: 	if (!p_from._ptr)
	testq	%rax, %rax	# _4
	je	.L3726	#,
	movq	-48(%rbp), %rax	# p_from, tmp101
	movq	%rax, -24(%rbp)	# tmp101, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_24->_ptr, _25
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _25
	jne	.L3719	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.56070
	jmp	.L3720	#
.L3719:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-24(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_24->_ptr, _27
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.56070
.L3720:
	movq	%rax, -8(%rbp)	# D.56070, pw
.L3724:
# ./core/safe_refcount.h:107: 		T tmp = static_cast<T const volatile &>(*pw);
	movq	-8(%rbp), %rax	# pw, tmp104
	movl	(%rax), %eax	# MEM[(const unsigned int &)pw_16], tmp105
	movl	%eax, -12(%rbp)	# tmp105, tmp
# ./core/safe_refcount.h:108: 		if (tmp == 0)
	cmpl	$0, -12(%rbp)	#, tmp
	jne	.L3721	#,
# ./core/safe_refcount.h:109: 			return 0; // if zero, can't add to it anymore
	movl	$0, %eax	#, D.56065
	jmp	.L3722	#
.L3721:
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	movl	-12(%rbp), %eax	# tmp, tmp106
	leal	1(%rax), %ecx	#, _19
	movq	-8(%rbp), %rdx	# pw, tmp107
	movl	-12(%rbp), %eax	# tmp, tmp108
	lock cmpxchgl	%ecx, (%rdx)	#, _19,
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	cmpl	%eax, -12(%rbp)	# _20, tmp
	sete	%al	#, retval.8_21
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	testb	%al, %al	# retval.8_21
	je	.L3724	#,
# ./core/safe_refcount.h:111: 			return tmp + 1;
	movl	-12(%rbp), %eax	# tmp, tmp110
	addl	$1, %eax	#, D.56065
.L3722:
# ./core/cowdata.h:355: 	if (atomic_conditional_increment(p_from._get_refcount()) > 0) { // could reference
	testl	%eax, %eax	# D.56065
	setne	%al	#, retval.49_14
# ./core/cowdata.h:355: 	if (atomic_conditional_increment(p_from._get_refcount()) > 0) { // could reference
	testb	%al, %al	# retval.49_14
	je	.L3715	#,
# ./core/cowdata.h:356: 		_ptr = p_from._ptr;
	movq	-48(%rbp), %rax	# p_from, tmp111
	movq	(%rax), %rdx	# p_from_11(D)->_ptr, _7
# ./core/cowdata.h:356: 		_ptr = p_from._ptr;
	movq	-40(%rbp), %rax	# this, tmp112
	movq	%rdx, (%rax)	# _7, this_10(D)->_ptr
	jmp	.L3715	#
.L3725:
# ./core/cowdata.h:347: 		return; // self assign, do nothing.
	nop	
	jmp	.L3715	#
.L3726:
# ./core/cowdata.h:353: 		return; //nothing to do
	nop	
.L3715:
# ./core/cowdata.h:358: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2984:
	.size	_ZN7CowDataI7VariantE4_refERKS1_, .-_ZN7CowDataI7VariantE4_refERKS1_
	.section	.text._ZN3RefI8ResourceE5unrefEv,"axG",@progbits,_ZN3RefI8ResourceE5unrefEv,comdat
	.align 2
	.weak	_ZN3RefI8ResourceE5unrefEv
	.type	_ZN3RefI8ResourceE5unrefEv, @function
_ZN3RefI8ResourceE5unrefEv:
.LFB2992:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_11(D)->reference, _1
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	testq	%rax, %rax	# _1
	je	.L3728	#,
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_11(D)->reference, _2
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	%rax, %rdi	# _3,
	call	_ZN9Reference11unreferenceEv	#
	testb	%al, %al	# _4
	je	.L3728	#,
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movl	$1, %eax	#, iftmp.320_6
	jmp	.L3729	#
.L3728:
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movl	$0, %eax	#, iftmp.320_6
.L3729:
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	testb	%al, %al	# iftmp.320_6
	je	.L3730	#,
# ./core/reference.h:282: 			memdelete(reference);
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11(D)->reference, _5
	movq	%rax, %rdi	# _5,
	call	_Z9memdeleteI8ResourceEvPT_	#
.L3730:
# ./core/reference.h:284: 		reference = NULL;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	$0, (%rax)	#, this_11(D)->reference
# ./core/reference.h:285: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE2992:
	.size	_ZN3RefI8ResourceE5unrefEv, .-_ZN3RefI8ResourceE5unrefEv
	.section	.text._ZN3RefI6ScriptE3refERKS1_,"axG",@progbits,_ZN3RefI6ScriptE3refERKS1_,comdat
	.align 2
	.weak	_ZN3RefI6ScriptE3refERKS1_
	.type	_ZN3RefI6ScriptE3refERKS1_, @function
_ZN3RefI6ScriptE3refERKS1_:
.LFB3000:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_from, p_from
# ./core/reference.h:70: 		if (p_from.reference == reference)
	movq	-16(%rbp), %rax	# p_from, tmp88
	movq	(%rax), %rdx	# p_from_9(D)->reference, _1
# ./core/reference.h:70: 		if (p_from.reference == reference)
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_10(D)->reference, _2
# ./core/reference.h:70: 		if (p_from.reference == reference)
	cmpq	%rax, %rdx	# _2, _1
	je	.L3734	#,
# ./core/reference.h:73: 		unref();
	movq	-8(%rbp), %rax	# this, tmp90
	movq	%rax, %rdi	# tmp90,
	call	_ZN3RefI6ScriptE5unrefEv	#
# ./core/reference.h:75: 		reference = p_from.reference;
	movq	-16(%rbp), %rax	# p_from, tmp91
	movq	(%rax), %rdx	# p_from_9(D)->reference, _3
# ./core/reference.h:75: 		reference = p_from.reference;
	movq	-8(%rbp), %rax	# this, tmp92
	movq	%rdx, (%rax)	# _3, this_10(D)->reference
# ./core/reference.h:76: 		if (reference)
	movq	-8(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_10(D)->reference, _4
# ./core/reference.h:76: 		if (reference)
	testq	%rax, %rax	# _4
	je	.L3731	#,
# ./core/reference.h:77: 			reference->reference();
	movq	-8(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_10(D)->reference, _5
	movq	%rax, %rdi	# _6,
	call	_ZN9Reference9referenceEv	#
	jmp	.L3731	#
.L3734:
# ./core/reference.h:71: 			return;
	nop	
.L3731:
# ./core/reference.h:78: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3000:
	.size	_ZN3RefI6ScriptE3refERKS1_, .-_ZN3RefI6ScriptE3refERKS1_
	.section	.text._ZN3RefI6ScriptE5unrefEv,"axG",@progbits,_ZN3RefI6ScriptE5unrefEv,comdat
	.align 2
	.weak	_ZN3RefI6ScriptE5unrefEv
	.type	_ZN3RefI6ScriptE5unrefEv, @function
_ZN3RefI6ScriptE5unrefEv:
.LFB3001:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_11(D)->reference, _1
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	testq	%rax, %rax	# _1
	je	.L3736	#,
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_11(D)->reference, _2
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	%rax, %rdi	# _3,
	call	_ZN9Reference11unreferenceEv	#
	testb	%al, %al	# _4
	je	.L3736	#,
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movl	$1, %eax	#, iftmp.113_6
	jmp	.L3737	#
.L3736:
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movl	$0, %eax	#, iftmp.113_6
.L3737:
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	testb	%al, %al	# iftmp.113_6
	je	.L3738	#,
# ./core/reference.h:282: 			memdelete(reference);
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_11(D)->reference, _5
	movq	%rax, %rdi	# _5,
	call	_Z9memdeleteI6ScriptEvPT_	#
.L3738:
# ./core/reference.h:284: 		reference = NULL;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	$0, (%rax)	#, this_11(D)->reference
# ./core/reference.h:285: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3001:
	.size	_ZN3RefI6ScriptE5unrefEv, .-_ZN3RefI6ScriptE5unrefEv
	.section	.text._ZN6VectorI7VariantE6resizeEi,"axG",@progbits,_ZN6VectorI7VariantE6resizeEi,comdat
	.align 2
	.weak	_ZN6VectorI7VariantE6resizeEi
	.type	_ZN6VectorI7VariantE6resizeEi, @function
_ZN6VectorI7VariantE6resizeEi:
.LFB3018:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_size, p_size
# ./core/vector.h:84: 	Error resize(int p_size) { return _cowdata.resize(p_size); }
	movq	-8(%rbp), %rax	# this, tmp85
	leaq	8(%rax), %rdx	#, _1
	movl	-12(%rbp), %eax	# p_size, tmp86
	movl	%eax, %esi	# tmp86,
	movq	%rdx, %rdi	# _1,
	call	_ZN7CowDataI7VariantE6resizeEi	#
# ./core/vector.h:84: 	Error resize(int p_size) { return _cowdata.resize(p_size); }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3018:
	.size	_ZN6VectorI7VariantE6resizeEi, .-_ZN6VectorI7VariantE6resizeEi
	.section	.text._Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_:
.LFB3020:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.55436
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55437
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.68_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.68_5
	jne	.L3745	#,
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, -16(%rbp)	# tmp85, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp86
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L3741	#
.L3745:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L3741:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3020:
	.size	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_
	.section	.text._ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.type	_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE, @function
_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE:
.LFB3026:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_I, p_I
# ./core/list.h:367: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_10(D)->_data, _1
# ./core/list.h:367: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3747	#,
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_10(D)->_data, _2
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-32(%rbp), %rdx	# p_I, tmp92
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# _2,
	call	_ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE	#
	movb	%al, -1(%rbp)	# _14, ret
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movq	-24(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_10(D)->_data, _3
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movl	16(%rax), %eax	# _3->size_cache, _4
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	testl	%eax, %eax	# _4
	jne	.L3748	#,
# ./core/list.h:371: 				memdelete_allocator<_Data, A>(_data);
	movq	-24(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_10(D)->_data, _5
	movq	%rax, %rdi	# _5,
	call	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE5_DataES2_EvPT_	#
# ./core/list.h:372: 				_data = NULL;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	$0, (%rax)	#, this_10(D)->_data
.L3748:
# ./core/list.h:375: 			return ret;
	movzbl	-1(%rbp), %eax	# ret, _6
	jmp	.L3749	#
.L3747:
# ./core/list.h:378: 		return false;
	movl	$0, %eax	#, _6
.L3749:
# ./core/list.h:379: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3026:
	.size	_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE, .-_ZN4ListI7Variant16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv:
.LFB3027:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$40, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)	# this, this
# ./core/set.h:118: 			_root = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$56, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, %rbx	#, _11
	movq	%rbx, %rdi	# _11,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC1Ev	#
	movq	%rbx, -24(%rbp)	# _11, p_obj
	movq	-24(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -32(%rbp)	# tmp91, D.56378
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-24(%rbp), %rdx	# p_obj, D.56379
# ./core/set.h:118: 			_root = memnew_allocator(Element, A);
	movq	-40(%rbp), %rax	# this, tmp92
	movq	%rdx, (%rax)	# D.56379, this_14(D)->_root
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	-40(%rbp), %rax	# this, tmp93
	movq	(%rax), %rdx	# this_14(D)->_root, _2
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	-40(%rbp), %rax	# this, tmp94
	movq	8(%rax), %rax	# this_14(D)->_nil, _3
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	%rax, 8(%rdx)	# _3, _2->right
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	-40(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_14(D)->_root, _4
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	8(%rdx), %rdx	# _2->right, _5
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	%rdx, 16(%rax)	# _5, _4->left
	movq	-40(%rbp), %rdx	# this, tmp96
	movq	(%rdx), %rdx	# this_14(D)->_root, _6
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	16(%rax), %rax	# _4->left, _7
# ./core/set.h:119: 			_root->parent = _root->left = _root->right = _nil;
	movq	%rax, 24(%rdx)	# _7, _6->parent
# ./core/set.h:120: 			_root->color = BLACK;
	movq	-40(%rbp), %rax	# this, tmp97
	movq	(%rax), %rax	# this_14(D)->_root, _8
	movl	$1, (%rax)	#, _8->color
# ./core/set.h:121: 		}
	nop	
	addq	$40, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3027:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data12_create_rootEv
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_:
.LFB3028:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$120, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)	# this, this
	movq	%rsi, -128(%rbp)	# p_value, p_value
# ./core/set.h:320: 		Element *new_parent = _data._root;
	movq	-120(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_34(D)->_data._root, tmp114
	movq	%rax, -24(%rbp)	# tmp114, new_parent
# ./core/set.h:321: 		Element *node = _data._root->left;
	movq	-120(%rbp), %rax	# this, tmp115
	movq	(%rax), %rax	# this_34(D)->_data._root, _1
# ./core/set.h:321: 		Element *node = _data._root->left;
	movq	16(%rax), %rax	# _1->left, tmp116
	movq	%rax, -32(%rbp)	# tmp116, node
.L3760:
# ./core/set.h:324: 		while (node != _data._nil) {
	movq	-120(%rbp), %rax	# this, tmp117
	movq	8(%rax), %rax	# this_34(D)->_data._nil, _2
# ./core/set.h:324: 		while (node != _data._nil) {
	cmpq	%rax, -32(%rbp)	# _2, node
	je	.L3753	#,
# ./core/set.h:326: 			new_parent = node;
	movq	-32(%rbp), %rax	# node, tmp118
	movq	%rax, -24(%rbp)	# tmp118, new_parent
# ./core/set.h:328: 			if (less(p_value, node->value))
	movq	-32(%rbp), %rax	# node, tmp119
	leaq	48(%rax), %rdx	#, _3
	movq	-128(%rbp), %rax	# p_value, tmp120
	movq	%rax, -48(%rbp)	# tmp120, p_a
	movq	%rdx, -56(%rbp)	# _3, p_b
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	movq	-48(%rbp), %rax	# p_a, tmp121
	movq	(%rax), %rdx	# *p_a_69, _71
	movq	-56(%rbp), %rax	# p_b, tmp122
	movq	(%rax), %rax	# *p_b_70, _72
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	cmpq	%rax, %rdx	# _72, _71
	setb	%al	#, D.57326
# ./core/set.h:328: 			if (less(p_value, node->value))
	testb	%al, %al	# D.57326
	je	.L3755	#,
# ./core/set.h:329: 				node = node->left;
	movq	-32(%rbp), %rax	# node, tmp123
	movq	16(%rax), %rax	# node_20->left, tmp124
	movq	%rax, -32(%rbp)	# tmp124, node
	jmp	.L3760	#
.L3755:
# ./core/set.h:330: 			else if (less(node->value, p_value))
	movq	-32(%rbp), %rax	# node, tmp125
	addq	$48, %rax	#, _4
	movq	%rax, -64(%rbp)	# _4, p_a
	movq	-128(%rbp), %rax	# p_value, tmp126
	movq	%rax, -72(%rbp)	# tmp126, p_b
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	movq	-64(%rbp), %rax	# p_a, tmp127
	movq	(%rax), %rdx	# *p_a_74, _76
	movq	-72(%rbp), %rax	# p_b, tmp128
	movq	(%rax), %rax	# *p_b_75, _77
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	cmpq	%rax, %rdx	# _77, _76
	setb	%al	#, D.57332
# ./core/set.h:330: 			else if (less(node->value, p_value))
	testb	%al, %al	# D.57332
	je	.L3758	#,
# ./core/set.h:331: 				node = node->right;
	movq	-32(%rbp), %rax	# node, tmp129
	movq	8(%rax), %rax	# node_20->right, tmp130
	movq	%rax, -32(%rbp)	# tmp130, node
	jmp	.L3760	#
.L3758:
# ./core/set.h:333: 				return node; // Return existing node
	movq	-32(%rbp), %rax	# node, _22
	jmp	.L3770	#
.L3753:
# ./core/set.h:337: 		Element *new_node = memnew_allocator(Element, A);
	movl	$_ZN16DefaultAllocator5allocEm, %esi	#,
	movl	$56, %edi	#,
	call	_ZnwmPFPvmE	#
	movq	%rax, %rbx	#, _45
	movq	%rbx, %rdi	# _45,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC1Ev	#
	movq	%rbx, -80(%rbp)	# _45, p_obj
	movq	-80(%rbp), %rax	# p_obj, tmp131
	movq	%rax, -88(%rbp)	# tmp131, D.57336
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-80(%rbp), %rax	# p_obj, D.57337
# ./core/set.h:337: 		Element *new_node = memnew_allocator(Element, A);
	movq	%rax, -40(%rbp)	# D.57337, new_node
# ./core/set.h:338: 		new_node->parent = new_parent;
	movq	-40(%rbp), %rax	# new_node, tmp132
	movq	-24(%rbp), %rdx	# new_parent, tmp133
	movq	%rdx, 24(%rax)	# tmp133, new_node_48->parent
# ./core/set.h:339: 		new_node->right = _data._nil;
	movq	-120(%rbp), %rax	# this, tmp134
	movq	8(%rax), %rdx	# this_34(D)->_data._nil, _5
# ./core/set.h:339: 		new_node->right = _data._nil;
	movq	-40(%rbp), %rax	# new_node, tmp135
	movq	%rdx, 8(%rax)	# _5, new_node_48->right
# ./core/set.h:340: 		new_node->left = _data._nil;
	movq	-120(%rbp), %rax	# this, tmp136
	movq	8(%rax), %rdx	# this_34(D)->_data._nil, _6
# ./core/set.h:340: 		new_node->left = _data._nil;
	movq	-40(%rbp), %rax	# new_node, tmp137
	movq	%rdx, 16(%rax)	# _6, new_node_48->left
# ./core/set.h:341: 		new_node->value = p_value;
	movq	-128(%rbp), %rax	# p_value, tmp138
	movq	(%rax), %rdx	# *p_value_38(D), _7
	movq	-40(%rbp), %rax	# new_node, tmp139
	movq	%rdx, 48(%rax)	# _7, new_node_48->value
# ./core/set.h:344: 		if (new_parent == _data._root || less(p_value, new_parent->value)) {
	movq	-120(%rbp), %rax	# this, tmp140
	movq	(%rax), %rax	# this_34(D)->_data._root, _8
# ./core/set.h:344: 		if (new_parent == _data._root || less(p_value, new_parent->value)) {
	cmpq	%rax, -24(%rbp)	# _8, new_parent
	je	.L3762	#,
# ./core/set.h:344: 		if (new_parent == _data._root || less(p_value, new_parent->value)) {
	movq	-24(%rbp), %rax	# new_parent, tmp141
	leaq	48(%rax), %rdx	#, _9
	movq	-128(%rbp), %rax	# p_value, tmp142
	movq	%rax, -96(%rbp)	# tmp142, p_a
	movq	%rdx, -104(%rbp)	# _9, p_b
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	movq	-96(%rbp), %rax	# p_a, tmp143
	movq	(%rax), %rdx	# *p_a_82, _84
	movq	-104(%rbp), %rax	# p_b, tmp144
	movq	(%rax), %rax	# *p_b_83, _85
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	cmpq	%rax, %rdx	# _85, _84
	setb	%al	#, D.57343
# ./core/set.h:344: 		if (new_parent == _data._root || less(p_value, new_parent->value)) {
	testb	%al, %al	# D.57343
	je	.L3764	#,
.L3762:
# ./core/set.h:344: 		if (new_parent == _data._root || less(p_value, new_parent->value)) {
	movl	$1, %eax	#, iftmp.96_23
	jmp	.L3765	#
.L3764:
# ./core/set.h:344: 		if (new_parent == _data._root || less(p_value, new_parent->value)) {
	movl	$0, %eax	#, iftmp.96_23
.L3765:
# ./core/set.h:344: 		if (new_parent == _data._root || less(p_value, new_parent->value)) {
	testb	%al, %al	# iftmp.96_23
	je	.L3766	#,
# ./core/set.h:345: 			new_parent->left = new_node;
	movq	-24(%rbp), %rax	# new_parent, tmp145
	movq	-40(%rbp), %rdx	# new_node, tmp146
	movq	%rdx, 16(%rax)	# tmp146, new_parent_19->left
	jmp	.L3767	#
.L3766:
# ./core/set.h:347: 			new_parent->right = new_node;
	movq	-24(%rbp), %rax	# new_parent, tmp147
	movq	-40(%rbp), %rdx	# new_node, tmp148
	movq	%rdx, 8(%rax)	# tmp148, new_parent_19->right
.L3767:
# ./core/set.h:350: 		new_node->_next = _successor(new_node);
	movq	-40(%rbp), %rdx	# new_node, tmp149
	movq	-120(%rbp), %rax	# this, tmp150
	movq	%rdx, %rsi	# tmp149,
	movq	%rax, %rdi	# tmp150,
	call	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE	#
# ./core/set.h:350: 		new_node->_next = _successor(new_node);
	movq	-40(%rbp), %rdx	# new_node, tmp151
	movq	%rax, 32(%rdx)	# _11, new_node_48->_next
# ./core/set.h:351: 		new_node->_prev = _predecessor(new_node);
	movq	-40(%rbp), %rdx	# new_node, tmp152
	movq	-120(%rbp), %rax	# this, tmp153
	movq	%rdx, %rsi	# tmp152,
	movq	%rax, %rdi	# tmp153,
	call	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE	#
# ./core/set.h:351: 		new_node->_prev = _predecessor(new_node);
	movq	-40(%rbp), %rdx	# new_node, tmp154
	movq	%rax, 40(%rdx)	# _12, new_node_48->_prev
# ./core/set.h:352: 		if (new_node->_next)
	movq	-40(%rbp), %rax	# new_node, tmp155
	movq	32(%rax), %rax	# new_node_48->_next, _13
# ./core/set.h:352: 		if (new_node->_next)
	testq	%rax, %rax	# _13
	je	.L3768	#,
# ./core/set.h:353: 			new_node->_next->_prev = new_node;
	movq	-40(%rbp), %rax	# new_node, tmp156
	movq	32(%rax), %rax	# new_node_48->_next, _14
# ./core/set.h:353: 			new_node->_next->_prev = new_node;
	movq	-40(%rbp), %rdx	# new_node, tmp157
	movq	%rdx, 40(%rax)	# tmp157, _14->_prev
.L3768:
# ./core/set.h:354: 		if (new_node->_prev)
	movq	-40(%rbp), %rax	# new_node, tmp158
	movq	40(%rax), %rax	# new_node_48->_prev, _15
# ./core/set.h:354: 		if (new_node->_prev)
	testq	%rax, %rax	# _15
	je	.L3769	#,
# ./core/set.h:355: 			new_node->_prev->_next = new_node;
	movq	-40(%rbp), %rax	# new_node, tmp159
	movq	40(%rax), %rax	# new_node_48->_prev, _16
# ./core/set.h:355: 			new_node->_prev->_next = new_node;
	movq	-40(%rbp), %rdx	# new_node, tmp160
	movq	%rdx, 32(%rax)	# tmp160, _16->_next
.L3769:
# ./core/set.h:357: 		_data.size_cache++;
	movq	-120(%rbp), %rax	# this, tmp161
	movl	16(%rax), %eax	# this_34(D)->_data.size_cache, _17
# ./core/set.h:357: 		_data.size_cache++;
	leal	1(%rax), %edx	#, _18
	movq	-120(%rbp), %rax	# this, tmp162
	movl	%edx, 16(%rax)	# _18, this_34(D)->_data.size_cache
# ./core/set.h:358: 		_insert_rb_fix(new_node);
	movq	-40(%rbp), %rdx	# new_node, tmp163
	movq	-120(%rbp), %rax	# this, tmp164
	movq	%rdx, %rsi	# tmp163,
	movq	%rax, %rdi	# tmp164,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE	#
# ./core/set.h:359: 		return new_node;
	movq	-40(%rbp), %rax	# new_node, _22
.L3770:
# ./core/set.h:360: 	}
	addq	$120, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3028:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7_insertERKS1_
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_:
.LFB3029:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_value, p_value
# ./core/set.h:519: 		if (!_data._root)
	movq	-24(%rbp), %rax	# this, tmp85
	movq	(%rax), %rax	# this_5(D)->_data._root, _1
# ./core/set.h:519: 		if (!_data._root)
	testq	%rax, %rax	# _1
	jne	.L3772	#,
# ./core/set.h:520: 			return NULL;
	movl	$0, %eax	#, _2
	jmp	.L3773	#
.L3772:
# ./core/set.h:522: 		Element *res = _find(p_value);
	movq	-32(%rbp), %rdx	# p_value, tmp86
	movq	-24(%rbp), %rax	# this, tmp87
	movq	%rdx, %rsi	# tmp86,
	movq	%rax, %rdi	# tmp87,
	call	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_	#
	movq	%rax, -8(%rbp)	# tmp88, res
# ./core/set.h:523: 		return res;
	movq	-8(%rbp), %rax	# res, _2
.L3773:
# ./core/set.h:524: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3029:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE4findERKS1_
	.section	.rodata
	.align 8
.LC133:
	.string	"Condition ' rp == _data._nil ' is true."
.LC134:
	.string	"./core/set.h"
.LC135:
	.string	"_erase"
	.align 8
.LC136:
	.string	"Condition ' _data._nil->color == RED ' is true."
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE:
.LFB3030:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_node, p_node
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	movq	-48(%rbp), %rax	# p_node, tmp132
	movq	16(%rax), %rdx	# p_node_61(D)->left, _1
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	movq	-40(%rbp), %rax	# this, tmp133
	movq	8(%rax), %rax	# this_62(D)->_data._nil, _2
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	cmpq	%rax, %rdx	# _2, _1
	je	.L3775	#,
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	movq	-48(%rbp), %rax	# p_node, tmp134
	movq	8(%rax), %rdx	# p_node_61(D)->right, _3
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	movq	-40(%rbp), %rax	# this, tmp135
	movq	8(%rax), %rax	# this_62(D)->_data._nil, _4
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	cmpq	%rax, %rdx	# _4, _3
	je	.L3775	#,
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	movq	-48(%rbp), %rax	# p_node, tmp136
	movq	32(%rax), %rax	# p_node_61(D)->_next, iftmp.100_50
	jmp	.L3776	#
.L3775:
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	movq	-48(%rbp), %rax	# p_node, iftmp.100_50
.L3776:
# ./core/set.h:426: 		Element *rp = ((p_node->left == _data._nil) || (p_node->right == _data._nil)) ? p_node : p_node->_next;
	movq	%rax, -16(%rbp)	# iftmp.100_50, rp
# ./core/set.h:427: 		Element *node = (rp->left == _data._nil) ? rp->right : rp->left;
	movq	-16(%rbp), %rax	# rp, tmp137
	movq	16(%rax), %rdx	# rp_65->left, _5
# ./core/set.h:427: 		Element *node = (rp->left == _data._nil) ? rp->right : rp->left;
	movq	-40(%rbp), %rax	# this, tmp138
	movq	8(%rax), %rax	# this_62(D)->_data._nil, _6
# ./core/set.h:427: 		Element *node = (rp->left == _data._nil) ? rp->right : rp->left;
	cmpq	%rax, %rdx	# _6, _5
	jne	.L3777	#,
# ./core/set.h:427: 		Element *node = (rp->left == _data._nil) ? rp->right : rp->left;
	movq	-16(%rbp), %rax	# rp, tmp139
	movq	8(%rax), %rax	# rp_65->right, iftmp.101_51
	jmp	.L3778	#
.L3777:
# ./core/set.h:427: 		Element *node = (rp->left == _data._nil) ? rp->right : rp->left;
	movq	-16(%rbp), %rax	# rp, tmp140
	movq	16(%rax), %rax	# rp_65->left, iftmp.101_51
.L3778:
# ./core/set.h:427: 		Element *node = (rp->left == _data._nil) ? rp->right : rp->left;
	movq	%rax, -24(%rbp)	# iftmp.101_51, node
# ./core/set.h:430: 		if (rp == rp->parent->left) {
	movq	-16(%rbp), %rax	# rp, tmp141
	movq	24(%rax), %rax	# rp_65->parent, _7
# ./core/set.h:430: 		if (rp == rp->parent->left) {
	movq	16(%rax), %rax	# _7->left, _8
# ./core/set.h:430: 		if (rp == rp->parent->left) {
	cmpq	%rax, -16(%rbp)	# _8, rp
	jne	.L3779	#,
# ./core/set.h:431: 			rp->parent->left = node;
	movq	-16(%rbp), %rax	# rp, tmp142
	movq	24(%rax), %rax	# rp_65->parent, _9
# ./core/set.h:431: 			rp->parent->left = node;
	movq	-24(%rbp), %rdx	# node, tmp143
	movq	%rdx, 16(%rax)	# tmp143, _9->left
# ./core/set.h:432: 			sibling = rp->parent->right;
	movq	-16(%rbp), %rax	# rp, tmp144
	movq	24(%rax), %rax	# rp_65->parent, _10
# ./core/set.h:432: 			sibling = rp->parent->right;
	movq	8(%rax), %rax	# _10->right, tmp145
	movq	%rax, -8(%rbp)	# tmp145, sibling
	jmp	.L3780	#
.L3779:
# ./core/set.h:434: 			rp->parent->right = node;
	movq	-16(%rbp), %rax	# rp, tmp146
	movq	24(%rax), %rax	# rp_65->parent, _11
# ./core/set.h:434: 			rp->parent->right = node;
	movq	-24(%rbp), %rdx	# node, tmp147
	movq	%rdx, 8(%rax)	# tmp147, _11->right
# ./core/set.h:435: 			sibling = rp->parent->left;
	movq	-16(%rbp), %rax	# rp, tmp148
	movq	24(%rax), %rax	# rp_65->parent, _12
# ./core/set.h:435: 			sibling = rp->parent->left;
	movq	16(%rax), %rax	# _12->left, tmp149
	movq	%rax, -8(%rbp)	# tmp149, sibling
.L3780:
# ./core/set.h:438: 		if (node->color == RED) {
	movq	-24(%rbp), %rax	# node, tmp150
	movl	(%rax), %eax	# node_68->color, _13
# ./core/set.h:438: 		if (node->color == RED) {
	testl	%eax, %eax	# _13
	jne	.L3781	#,
# ./core/set.h:439: 			node->parent = rp->parent;
	movq	-16(%rbp), %rax	# rp, tmp151
	movq	24(%rax), %rdx	# rp_65->parent, _14
# ./core/set.h:439: 			node->parent = rp->parent;
	movq	-24(%rbp), %rax	# node, tmp152
	movq	%rdx, 24(%rax)	# _14, node_68->parent
# ./core/set.h:440: 			_set_color(node, BLACK);
	movq	-24(%rbp), %rcx	# node, tmp153
	movq	-40(%rbp), %rax	# this, tmp154
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp153,
	movq	%rax, %rdi	# tmp154,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
	jmp	.L3782	#
.L3781:
# ./core/set.h:441: 		} else if (rp->color == BLACK && rp->parent != _data._root) {
	movq	-16(%rbp), %rax	# rp, tmp155
	movl	(%rax), %eax	# rp_65->color, _15
# ./core/set.h:441: 		} else if (rp->color == BLACK && rp->parent != _data._root) {
	cmpl	$1, %eax	#, _15
	jne	.L3782	#,
# ./core/set.h:441: 		} else if (rp->color == BLACK && rp->parent != _data._root) {
	movq	-16(%rbp), %rax	# rp, tmp156
	movq	24(%rax), %rdx	# rp_65->parent, _16
# ./core/set.h:441: 		} else if (rp->color == BLACK && rp->parent != _data._root) {
	movq	-40(%rbp), %rax	# this, tmp157
	movq	(%rax), %rax	# this_62(D)->_data._root, _17
# ./core/set.h:441: 		} else if (rp->color == BLACK && rp->parent != _data._root) {
	cmpq	%rax, %rdx	# _17, _16
	je	.L3782	#,
# ./core/set.h:442: 			_erase_fix_rb(sibling);
	movq	-8(%rbp), %rdx	# sibling, tmp158
	movq	-40(%rbp), %rax	# this, tmp159
	movq	%rdx, %rsi	# tmp158,
	movq	%rax, %rdi	# tmp159,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE	#
.L3782:
# ./core/set.h:445: 		if (rp != p_node) {
	movq	-16(%rbp), %rax	# rp, tmp160
	cmpq	-48(%rbp), %rax	# p_node, tmp160
	je	.L3783	#,
# ./core/set.h:447: 			ERR_FAIL_COND(rp == _data._nil);
	movq	-40(%rbp), %rax	# this, tmp161
	movq	8(%rax), %rax	# this_62(D)->_data._nil, _18
	cmpq	%rax, -16(%rbp)	# _18, rp
	sete	%al	#, _19
	movzbl	%al, %eax	# _19, _20
	testq	%rax, %rax	# _21
	je	.L3784	#,
# ./core/set.h:447: 			ERR_FAIL_COND(rp == _data._nil);
	movl	$0, %r8d	#,
	movl	$.LC133, %ecx	#,
	movl	$447, %edx	#,
	movl	$.LC134, %esi	#,
	movl	$.LC135, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L3774	#
.L3784:
# ./core/set.h:447: 			ERR_FAIL_COND(rp == _data._nil);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/set.h:449: 			rp->left = p_node->left;
	movq	-48(%rbp), %rax	# p_node, tmp162
	movq	16(%rax), %rdx	# p_node_61(D)->left, _22
# ./core/set.h:449: 			rp->left = p_node->left;
	movq	-16(%rbp), %rax	# rp, tmp163
	movq	%rdx, 16(%rax)	# _22, rp_65->left
# ./core/set.h:450: 			rp->right = p_node->right;
	movq	-48(%rbp), %rax	# p_node, tmp164
	movq	8(%rax), %rdx	# p_node_61(D)->right, _23
# ./core/set.h:450: 			rp->right = p_node->right;
	movq	-16(%rbp), %rax	# rp, tmp165
	movq	%rdx, 8(%rax)	# _23, rp_65->right
# ./core/set.h:451: 			rp->parent = p_node->parent;
	movq	-48(%rbp), %rax	# p_node, tmp166
	movq	24(%rax), %rdx	# p_node_61(D)->parent, _24
# ./core/set.h:451: 			rp->parent = p_node->parent;
	movq	-16(%rbp), %rax	# rp, tmp167
	movq	%rdx, 24(%rax)	# _24, rp_65->parent
# ./core/set.h:452: 			rp->color = p_node->color;
	movq	-48(%rbp), %rax	# p_node, tmp168
	movl	(%rax), %edx	# p_node_61(D)->color, _25
# ./core/set.h:452: 			rp->color = p_node->color;
	movq	-16(%rbp), %rax	# rp, tmp169
	movl	%edx, (%rax)	# _25, rp_65->color
# ./core/set.h:453: 			if (p_node->left != _data._nil)
	movq	-48(%rbp), %rax	# p_node, tmp170
	movq	16(%rax), %rdx	# p_node_61(D)->left, _26
# ./core/set.h:453: 			if (p_node->left != _data._nil)
	movq	-40(%rbp), %rax	# this, tmp171
	movq	8(%rax), %rax	# this_62(D)->_data._nil, _27
# ./core/set.h:453: 			if (p_node->left != _data._nil)
	cmpq	%rax, %rdx	# _27, _26
	je	.L3786	#,
# ./core/set.h:454: 				p_node->left->parent = rp;
	movq	-48(%rbp), %rax	# p_node, tmp172
	movq	16(%rax), %rax	# p_node_61(D)->left, _28
# ./core/set.h:454: 				p_node->left->parent = rp;
	movq	-16(%rbp), %rdx	# rp, tmp173
	movq	%rdx, 24(%rax)	# tmp173, _28->parent
.L3786:
# ./core/set.h:455: 			if (p_node->right != _data._nil)
	movq	-48(%rbp), %rax	# p_node, tmp174
	movq	8(%rax), %rdx	# p_node_61(D)->right, _29
# ./core/set.h:455: 			if (p_node->right != _data._nil)
	movq	-40(%rbp), %rax	# this, tmp175
	movq	8(%rax), %rax	# this_62(D)->_data._nil, _30
# ./core/set.h:455: 			if (p_node->right != _data._nil)
	cmpq	%rax, %rdx	# _30, _29
	je	.L3787	#,
# ./core/set.h:456: 				p_node->right->parent = rp;
	movq	-48(%rbp), %rax	# p_node, tmp176
	movq	8(%rax), %rax	# p_node_61(D)->right, _31
# ./core/set.h:456: 				p_node->right->parent = rp;
	movq	-16(%rbp), %rdx	# rp, tmp177
	movq	%rdx, 24(%rax)	# tmp177, _31->parent
.L3787:
# ./core/set.h:458: 			if (p_node == p_node->parent->left) {
	movq	-48(%rbp), %rax	# p_node, tmp178
	movq	24(%rax), %rax	# p_node_61(D)->parent, _32
# ./core/set.h:458: 			if (p_node == p_node->parent->left) {
	movq	16(%rax), %rax	# _32->left, _33
# ./core/set.h:458: 			if (p_node == p_node->parent->left) {
	cmpq	%rax, -48(%rbp)	# _33, p_node
	jne	.L3788	#,
# ./core/set.h:459: 				p_node->parent->left = rp;
	movq	-48(%rbp), %rax	# p_node, tmp179
	movq	24(%rax), %rax	# p_node_61(D)->parent, _34
# ./core/set.h:459: 				p_node->parent->left = rp;
	movq	-16(%rbp), %rdx	# rp, tmp180
	movq	%rdx, 16(%rax)	# tmp180, _34->left
	jmp	.L3783	#
.L3788:
# ./core/set.h:461: 				p_node->parent->right = rp;
	movq	-48(%rbp), %rax	# p_node, tmp181
	movq	24(%rax), %rax	# p_node_61(D)->parent, _35
# ./core/set.h:461: 				p_node->parent->right = rp;
	movq	-16(%rbp), %rdx	# rp, tmp182
	movq	%rdx, 8(%rax)	# tmp182, _35->right
.L3783:
# ./core/set.h:465: 		if (p_node->_next)
	movq	-48(%rbp), %rax	# p_node, tmp183
	movq	32(%rax), %rax	# p_node_61(D)->_next, _36
# ./core/set.h:465: 		if (p_node->_next)
	testq	%rax, %rax	# _36
	je	.L3789	#,
# ./core/set.h:466: 			p_node->_next->_prev = p_node->_prev;
	movq	-48(%rbp), %rax	# p_node, tmp184
	movq	32(%rax), %rax	# p_node_61(D)->_next, _37
# ./core/set.h:466: 			p_node->_next->_prev = p_node->_prev;
	movq	-48(%rbp), %rdx	# p_node, tmp185
	movq	40(%rdx), %rdx	# p_node_61(D)->_prev, _38
# ./core/set.h:466: 			p_node->_next->_prev = p_node->_prev;
	movq	%rdx, 40(%rax)	# _38, _37->_prev
.L3789:
# ./core/set.h:467: 		if (p_node->_prev)
	movq	-48(%rbp), %rax	# p_node, tmp186
	movq	40(%rax), %rax	# p_node_61(D)->_prev, _39
# ./core/set.h:467: 		if (p_node->_prev)
	testq	%rax, %rax	# _39
	je	.L3790	#,
# ./core/set.h:468: 			p_node->_prev->_next = p_node->_next;
	movq	-48(%rbp), %rax	# p_node, tmp187
	movq	40(%rax), %rax	# p_node_61(D)->_prev, _40
# ./core/set.h:468: 			p_node->_prev->_next = p_node->_next;
	movq	-48(%rbp), %rdx	# p_node, tmp188
	movq	32(%rdx), %rdx	# p_node_61(D)->_next, _41
# ./core/set.h:468: 			p_node->_prev->_next = p_node->_next;
	movq	%rdx, 32(%rax)	# _41, _40->_next
.L3790:
# ./core/set.h:470: 		memdelete_allocator<Element, A>(p_node);
	movq	-48(%rbp), %rax	# p_node, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_	#
# ./core/set.h:471: 		_data.size_cache--;
	movq	-40(%rbp), %rax	# this, tmp190
	movl	16(%rax), %eax	# this_62(D)->_data.size_cache, _42
# ./core/set.h:471: 		_data.size_cache--;
	leal	-1(%rax), %edx	#, _43
	movq	-40(%rbp), %rax	# this, tmp191
	movl	%edx, 16(%rax)	# _43, this_62(D)->_data.size_cache
# ./core/set.h:472: 		ERR_FAIL_COND(_data._nil->color == RED);
	movq	-40(%rbp), %rax	# this, tmp192
	movq	8(%rax), %rax	# this_62(D)->_data._nil, _44
	movl	(%rax), %eax	# _44->color, _45
	testl	%eax, %eax	# _45
	sete	%al	#, _46
	movzbl	%al, %eax	# _46, _47
	testq	%rax, %rax	# _48
	je	.L3791	#,
# ./core/set.h:472: 		ERR_FAIL_COND(_data._nil->color == RED);
	movl	$0, %r8d	#,
	movl	$.LC136, %ecx	#,
	movl	$472, %edx	#,
	movl	$.LC134, %esi	#,
	movl	$.LC135, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L3774	#
.L3791:
# ./core/set.h:472: 		ERR_FAIL_COND(_data._nil->color == RED);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
.L3774:
# ./core/set.h:473: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3030:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE6_eraseEPNS5_7ElementE
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv:
.LFB3031:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/set.h:125: 			if (_root) {
	movq	-8(%rbp), %rax	# this, tmp84
	movq	(%rax), %rax	# this_5(D)->_root, _1
# ./core/set.h:125: 			if (_root) {
	testq	%rax, %rax	# _1
	je	.L3794	#,
# ./core/set.h:126: 				memdelete_allocator<Element, A>(_root);
	movq	-8(%rbp), %rax	# this, tmp85
	movq	(%rax), %rax	# this_5(D)->_root, _2
	movq	%rax, %rdi	# _2,
	call	_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_	#
# ./core/set.h:127: 				_root = NULL;
	movq	-8(%rbp), %rax	# this, tmp86
	movq	$0, (%rax)	#, this_5(D)->_root
.L3794:
# ./core/set.h:129: 		}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3031:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv
	.section	.text._ZN3RefI6ScriptEC2Ev,"axG",@progbits,_ZN3RefI6ScriptEC5Ev,comdat
	.align 2
	.weak	_ZN3RefI6ScriptEC2Ev
	.type	_ZN3RefI6ScriptEC2Ev, @function
_ZN3RefI6ScriptEC2Ev:
.LFB3034:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:293: 		reference = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->reference
# ./core/reference.h:294: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3034:
	.size	_ZN3RefI6ScriptEC2Ev, .-_ZN3RefI6ScriptEC2Ev
	.weak	_ZN3RefI6ScriptEC1Ev
	.set	_ZN3RefI6ScriptEC1Ev,_ZN3RefI6ScriptEC2Ev
	.section	.text._ZN6Object7cast_toI6ScriptEEPT_PS_,"axG",@progbits,_ZN6Object7cast_toI6ScriptEEPT_PS_,comdat
	.weak	_ZN6Object7cast_toI6ScriptEEPT_PS_
	.type	_ZN6Object7cast_toI6ScriptEEPT_PS_, @function
_ZN6Object7cast_toI6ScriptEEPT_PS_:
.LFB3036:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_object, p_object
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movq	-8(%rbp), %rax	# p_object, p_object.116_3
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	testq	%rax, %rax	# p_object.116_3
	je	.L3797	#,
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movl	$0, %ecx	#,
	movl	$_ZTI6Script, %edx	#,
	movl	$_ZTI6Object, %esi	#,
	movq	%rax, %rdi	# p_object.116_3,
	call	__dynamic_cast	#
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	jmp	.L3799	#
.L3797:
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movl	$0, %eax	#, iftmp.115_1
.L3799:
# core/object.h:610: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3036:
	.size	_ZN6Object7cast_toI6ScriptEEPT_PS_, .-_ZN6Object7cast_toI6ScriptEEPT_PS_
	.section	.text._ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E,"axG",@progbits,_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E,comdat
	.align 2
	.weak	_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E
	.type	_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E, @function
_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E:
.LFB3037:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3037
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_from, p_from
	movq	-64(%rbp), %rax	# p_from, tmp85
	movq	%rax, -32(%rbp)	# tmp85, this
# ./core/reference.h:127: 		return reference;
	movq	-32(%rbp), %rax	# this, tmp86
	movq	(%rax), %rax	# this_19->reference, D.57347
# ./core/reference.h:160: 		Reference *refb = const_cast<Reference *>(static_cast<const Reference *>(p_from.ptr()));
	movq	%rax, -24(%rbp)	# D.57347, refb
# ./core/reference.h:161: 		if (!refb) {
	cmpq	$0, -24(%rbp)	#, refb
	jne	.L3802	#,
# ./core/reference.h:162: 			unref();
	movq	-56(%rbp), %rax	# this, tmp87
	movq	%rax, %rdi	# tmp87,
.LEHB718:
	call	_ZN3RefI9ReferenceE5unrefEv	#
.LEHE718:
	jmp	.L3800	#
.L3802:
# ./core/reference.h:165: 		Ref r;
	leaq	-40(%rbp), %rax	#, tmp88
	movq	%rax, %rdi	# tmp88,
	call	_ZN3RefI9ReferenceEC1Ev	#
# ./core/reference.h:166: 		r.reference = Object::cast_to<T>(refb);
	movq	-24(%rbp), %rax	# refb, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN6Object7cast_toI9ReferenceEEPT_PS_	#
# ./core/reference.h:166: 		r.reference = Object::cast_to<T>(refb);
	movq	%rax, -40(%rbp)	# _1, r.reference
# ./core/reference.h:167: 		ref(r);
	leaq	-40(%rbp), %rdx	#, tmp90
	movq	-56(%rbp), %rax	# this, tmp91
	movq	%rdx, %rsi	# tmp90,
	movq	%rax, %rdi	# tmp91,
.LEHB719:
	call	_ZN3RefI9ReferenceE3refERKS1_	#
.LEHE719:
# ./core/reference.h:168: 		r.reference = NULL;
	movq	$0, -40(%rbp)	#, r.reference
# ./core/reference.h:165: 		Ref r;
	leaq	-40(%rbp), %rax	#, tmp92
	movq	%rax, %rdi	# tmp92,
	call	_ZN3RefI9ReferenceED1Ev	#
	jmp	.L3800	#
.L3805:
	movq	%rax, %rbx	#, tmp94
	leaq	-40(%rbp), %rax	#, tmp93
	movq	%rax, %rdi	# tmp93,
	call	_ZN3RefI9ReferenceED1Ev	#
	movq	%rbx, %rax	# tmp94, D.62157
	movq	%rax, %rdi	# D.62157,
.LEHB720:
	call	_Unwind_Resume	#
.LEHE720:
.L3800:
# ./core/reference.h:169: 	}
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3037:
	.section	.gcc_except_table
.LLSDA3037:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3037-.LLSDACSB3037
.LLSDACSB3037:
	.uleb128 .LEHB718-.LFB3037
	.uleb128 .LEHE718-.LEHB718
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB719-.LFB3037
	.uleb128 .LEHE719-.LEHB719
	.uleb128 .L3805-.LFB3037
	.uleb128 0
	.uleb128 .LEHB720-.LFB3037
	.uleb128 .LEHE720-.LEHB720
	.uleb128 0
	.uleb128 0
.LLSDACSE3037:
	.section	.text._ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E,"axG",@progbits,_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E,comdat
	.size	_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E, .-_ZN3RefI9ReferenceEaSI6ScriptEEvRKS_IT_E
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv,comdat
	.align 2
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv
	.type	_ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv, @function
_ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv:
.LFB3038:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
.L3814:
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rax, -8(%rbp)	# tmp89, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_8->_data, _9
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _9
	je	.L3807	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_8->_data, _10
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _10->first, D.59498
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3815	#
.L3807:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59498
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3815:
# ./core/list.h:403: 		while (front()) {
	testq	%rax, %rax	# D.59498
	setne	%al	#, retval.125_6
	testb	%al, %al	# retval.125_6
	je	.L3817	#,
	movq	-24(%rbp), %rax	# this, tmp92
	movq	%rax, -16(%rbp)	# tmp92, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_15->_data, _16
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _16
	je	.L3811	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_15->_data, _17
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _17->first, D.59503
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3816	#
.L3811:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.59503
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3816:
# ./core/list.h:404: 			erase(front());
	movq	-24(%rbp), %rdx	# this, tmp95
	movq	%rax, %rsi	# D.59503,
	movq	%rdx, %rdi	# tmp95,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE	#
# ./core/list.h:403: 		while (front()) {
	jmp	.L3814	#
.L3817:
# ./core/list.h:406: 	};
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3038:
	.size	_ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv, .-_ZN4ListI10MethodInfo16DefaultAllocatorE5clearEv
	.section	.text._Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_:
.LFB3039:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.55456
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55457
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.127_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.127_5
	jne	.L3822	#,
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, -16(%rbp)	# tmp85, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp86
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L3818	#
.L3822:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L3818:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3039:
	.size	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_
	.section	.text._ZN10PoolVectorI6StringE5WriteD2Ev,"axG",@progbits,_ZN10PoolVectorI6StringE5WriteD5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE5WriteD2Ev
	.type	_ZN10PoolVectorI6StringE5WriteD2Ev, @function
_ZN10PoolVectorI6StringE5WriteD2Ev:
.LFB3042:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:329: 	class Write : public Access {
	movl	$_ZTVN10PoolVectorI6StringE5WriteE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp84
	movq	%rdx, (%rax)	# _1, this_4(D)->D.43460._vptr.Access
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10PoolVectorI6StringE6AccessD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3042:
	.size	_ZN10PoolVectorI6StringE5WriteD2Ev, .-_ZN10PoolVectorI6StringE5WriteD2Ev
	.weak	_ZN10PoolVectorI6StringE5WriteD1Ev
	.set	_ZN10PoolVectorI6StringE5WriteD1Ev,_ZN10PoolVectorI6StringE5WriteD2Ev
	.section	.text._ZN10PoolVectorI6StringE5WriteD0Ev,"axG",@progbits,_ZN10PoolVectorI6StringE5WriteD5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE5WriteD0Ev
	.type	_ZN10PoolVectorI6StringE5WriteD0Ev, @function
_ZN10PoolVectorI6StringE5WriteD0Ev:
.LFB3044:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:329: 	class Write : public Access {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$24, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3044:
	.size	_ZN10PoolVectorI6StringE5WriteD0Ev, .-_ZN10PoolVectorI6StringE5WriteD0Ev
	.section	.text._ZN10PoolVectorI6StringE12_unreferenceEv,"axG",@progbits,_ZN10PoolVectorI6StringE12_unreferenceEv,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE12_unreferenceEv
	.type	_ZN10PoolVectorI6StringE12_unreferenceEv, @function
_ZN10PoolVectorI6StringE12_unreferenceEv:
.LFB3040:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
# ./core/pool_vector.h:209: 		if (!alloc)
	movq	-88(%rbp), %rax	# this, tmp126
	movq	(%rax), %rax	# this_36(D)->alloc, _1
# ./core/pool_vector.h:209: 		if (!alloc)
	testq	%rax, %rax	# _1
	je	.L3839	#,
# ./core/pool_vector.h:212: 		if (!alloc->refcount.unref()) {
	movq	-88(%rbp), %rax	# this, tmp127
	movq	(%rax), %rax	# this_36(D)->alloc, _2
	movq	%rax, -16(%rbp)	# _3, this
# ./core/safe_refcount.h:192: 		return atomic_decrement(&count) == 0;
	movq	-16(%rbp), %rax	# this, _58
	movq	%rax, -24(%rbp)	# _58, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-24(%rbp), %rdx	# pw, tmp128
	movl	$1, %eax	#, tmp130
	negl	%eax	# tmp130
	movl	%eax, %ecx	# tmp130, tmp129
	movl	%ecx, %eax	# tmp129, _60
	lock xaddl	%eax, (%rdx)	#, _60,
	addl	%ecx, %eax	# tmp129, _60
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/safe_refcount.h:192: 		return atomic_decrement(&count) == 0;
	testl	%eax, %eax	# _60
	sete	%al	#, D.57367
# ./core/pool_vector.h:212: 		if (!alloc->refcount.unref()) {
	xorl	$1, %eax	#, retval.151_38
# ./core/pool_vector.h:212: 		if (!alloc->refcount.unref()) {
	testb	%al, %al	# retval.151_38
	je	.L3830	#,
# ./core/pool_vector.h:213: 			alloc = NULL;
	movq	-88(%rbp), %rax	# this, tmp131
	movq	$0, (%rax)	#, this_36(D)->alloc
# ./core/pool_vector.h:214: 			return;
	jmp	.L3825	#
.L3830:
# ./core/pool_vector.h:220: 			int cur_elements = alloc->size / sizeof(T);
	movq	-88(%rbp), %rax	# this, tmp132
	movq	(%rax), %rax	# this_36(D)->alloc, _5
# ./core/pool_vector.h:220: 			int cur_elements = alloc->size / sizeof(T);
	movq	24(%rax), %rax	# _5->size, _6
# ./core/pool_vector.h:220: 			int cur_elements = alloc->size / sizeof(T);
	shrq	$3, %rax	#, _7
# ./core/pool_vector.h:220: 			int cur_elements = alloc->size / sizeof(T);
	movl	%eax, -8(%rbp)	# _7, cur_elements
# ./core/pool_vector.h:224: 			Write w;
	leaq	-80(%rbp), %rax	#, tmp133
	movq	%rax, %rdi	# tmp133,
	call	_ZN10PoolVectorI6StringE5WriteC1Ev	#
# ./core/pool_vector.h:226: 			w._ref(alloc);
	movq	-88(%rbp), %rax	# this, tmp134
	movq	(%rax), %rax	# this_36(D)->alloc, _8
	movq	%rax, -32(%rbp)	# _8, p_alloc
# ./core/pool_vector.h:269: 			alloc = p_alloc;
	movq	-32(%rbp), %rax	# p_alloc, tmp135
	movq	%rax, -72(%rbp)	# tmp135, MEM[(struct Access *)&w].alloc
# ./core/pool_vector.h:270: 			if (alloc) {
	movq	-72(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _65
# ./core/pool_vector.h:270: 			if (alloc) {
	testq	%rax, %rax	# _65
	je	.L3840	#,
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	movq	-72(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _66
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	addq	$4, %rax	#, _67
	movq	%rax, -40(%rbp)	# _67, pw
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	movq	-40(%rbp), %rdx	# pw, tmp136
	movl	$1, %eax	#, _69
	lock xaddl	%eax, (%rdx)	#, _69,
	addl	$1, %eax	#, _69
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	nop	
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	cmpl	$1, %eax	#, _69
	sete	%al	#, retval.163_72
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	testb	%al, %al	# retval.163_72
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	-72(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _74
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	8(%rax), %rax	# _74->mem, _75
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	%rax, -64(%rbp)	# _75, MEM[(struct Access *)&w].mem
.L3840:
# ./core/pool_vector.h:279: 		}
	nop	
# ./core/pool_vector.h:228: 			for (int i = 0; i < cur_elements; i++) {
	movl	$0, -4(%rbp)	#, i
.L3836:
# ./core/pool_vector.h:228: 			for (int i = 0; i < cur_elements; i++) {
	movl	-4(%rbp), %eax	# i, tmp137
	cmpl	-8(%rbp), %eax	# cur_elements, tmp137
	jge	.L3834	#,
	movl	-4(%rbp), %eax	# i, tmp138
	movl	%eax, -44(%rbp)	# tmp138, p_index
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movq	-64(%rbp), %rax	# w.D.43460.mem, _77
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movl	-44(%rbp), %edx	# p_index, tmp139
	movslq	%edx, %rdx	# tmp139, _78
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	salq	$3, %rdx	#, _79
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	addq	%rdx, %rax	# _79, D.57381
# ./core/pool_vector.h:230: 				w[i].~T();
	movq	%rax, %rdi	# D.57381,
	call	_ZN6StringD1Ev	#
# ./core/pool_vector.h:228: 			for (int i = 0; i < cur_elements; i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L3836	#
.L3834:
# ./core/pool_vector.h:224: 			Write w;
	leaq	-80(%rbp), %rax	#, tmp140
	movq	%rax, %rdi	# tmp140,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
# ./core/pool_vector.h:240: 		if (MemoryPool::memory_pool) {
	movq	_ZN10MemoryPool11memory_poolE(%rip), %rax	# memory_pool, memory_pool.152_10
	testq	%rax, %rax	# memory_pool.152_10
	jne	.L3837	#,
# ./core/pool_vector.h:246: 			memfree(alloc->mem);
	movq	-88(%rbp), %rax	# this, tmp141
	movq	(%rax), %rax	# this_36(D)->alloc, _11
	movq	8(%rax), %rax	# _11->mem, _12
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _12,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/pool_vector.h:247: 			alloc->mem = NULL;
	movq	-88(%rbp), %rax	# this, tmp142
	movq	(%rax), %rax	# this_36(D)->alloc, _13
	movq	$0, 8(%rax)	#, _13->mem
# ./core/pool_vector.h:248: 			alloc->size = 0;
	movq	-88(%rbp), %rax	# this, tmp143
	movq	(%rax), %rax	# this_36(D)->alloc, _14
	movq	$0, 24(%rax)	#, _14->size
# ./core/pool_vector.h:250: 			MemoryPool::alloc_mutex->lock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.153_15
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.155_17
	movq	(%rdx), %rdx	# alloc_mutex.155_17->_vptr.Mutex, _18
	movq	(%rdx), %rdx	# *_18, _19
	movq	%rax, %rdi	# alloc_mutex.153_15,
	call	*%rdx	# _19
# ./core/pool_vector.h:251: 			alloc->free_list = MemoryPool::free_list;
	movq	-88(%rbp), %rax	# this, tmp144
	movq	(%rax), %rax	# this_36(D)->alloc, _20
	movq	_ZN10MemoryPool9free_listE(%rip), %rdx	# free_list, free_list.156_21
	movq	%rdx, 32(%rax)	# free_list.156_21, _20->free_list
# ./core/pool_vector.h:252: 			MemoryPool::free_list = alloc;
	movq	-88(%rbp), %rax	# this, tmp145
	movq	(%rax), %rax	# this_36(D)->alloc, _22
# ./core/pool_vector.h:252: 			MemoryPool::free_list = alloc;
	movq	%rax, _ZN10MemoryPool9free_listE(%rip)	# _22, free_list
# ./core/pool_vector.h:253: 			MemoryPool::allocs_used--;
	movl	_ZN10MemoryPool11allocs_usedE(%rip), %eax	# allocs_used, allocs_used.157_23
	subl	$1, %eax	#, _24
	movl	%eax, _ZN10MemoryPool11allocs_usedE(%rip)	# _24, allocs_used
# ./core/pool_vector.h:254: 			MemoryPool::alloc_mutex->unlock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.158_25
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.160_27
	movq	(%rdx), %rdx	# alloc_mutex.160_27->_vptr.Mutex, _28
	addq	$8, %rdx	#, _29
	movq	(%rdx), %rdx	# *_29, _30
	movq	%rax, %rdi	# alloc_mutex.158_25,
	call	*%rdx	# _30
.L3837:
# ./core/pool_vector.h:257: 		alloc = NULL;
	movq	-88(%rbp), %rax	# this, tmp146
	movq	$0, (%rax)	#, this_36(D)->alloc
	jmp	.L3825	#
.L3839:
# ./core/pool_vector.h:210: 			return;
	nop	
.L3825:
# ./core/pool_vector.h:258: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3040:
	.size	_ZN10PoolVectorI6StringE12_unreferenceEv, .-_ZN10PoolVectorI6StringE12_unreferenceEv
	.section	.rodata
	.align 8
.LC137:
	.string	"Condition ' p_size < 0 ' is true. returned: ERR_INVALID_PARAMETER"
.LC138:
	.string	"./core/pool_vector.h"
.LC139:
	.string	"resize"
	.align 8
.LC140:
	.string	"Method/Function Failed, returning: ERR_OUT_OF_MEMORY"
	.align 8
.LC141:
	.string	"Condition ' alloc->lock > 0 ' is true. returned: ERR_LOCKED"
	.section	.text._ZN10PoolVectorI6StringE6resizeEi,"axG",@progbits,_ZN10PoolVectorI6StringE6resizeEi,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE6resizeEi
	.type	_ZN10PoolVectorI6StringE6resizeEi, @function
_ZN10PoolVectorI6StringE6resizeEi:
.LFB3045:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$200, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -200(%rbp)	# this, this
	movl	%esi, -204(%rbp)	# p_size, p_size
# ./core/pool_vector.h:516: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	-204(%rbp), %eax	# p_size, tmp175
	shrl	$31, %eax	#, tmp174
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L3842	#,
# ./core/pool_vector.h:516: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	$0, %r8d	#,
	movl	$.LC137, %ecx	#,
	movl	$516, %edx	#,
	movl	$.LC138, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$31, %eax	#, _83
	jmp	.L3843	#
.L3842:
# ./core/pool_vector.h:516: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/pool_vector.h:518: 	if (alloc == NULL) {
	movq	-200(%rbp), %rax	# this, tmp176
	movq	(%rax), %rax	# this_94(D)->alloc, _4
# ./core/pool_vector.h:518: 	if (alloc == NULL) {
	testq	%rax, %rax	# _4
	jne	.L3844	#,
# ./core/pool_vector.h:520: 		if (p_size == 0)
	cmpl	$0, -204(%rbp)	#, p_size
	jne	.L3845	#,
# ./core/pool_vector.h:521: 			return OK; //nothing to do here
	movl	$0, %eax	#, _83
	jmp	.L3843	#
.L3845:
# ./core/pool_vector.h:524: 		MemoryPool::alloc_mutex->lock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.128_5
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.130_7
	movq	(%rdx), %rdx	# alloc_mutex.130_7->_vptr.Mutex, _8
	movq	(%rdx), %rdx	# *_8, _9
	movq	%rax, %rdi	# alloc_mutex.128_5,
	call	*%rdx	# _9
# ./core/pool_vector.h:525: 		if (MemoryPool::allocs_used == MemoryPool::alloc_count) {
	movl	_ZN10MemoryPool11allocs_usedE(%rip), %edx	# allocs_used, allocs_used.131_10
	movl	_ZN10MemoryPool11alloc_countE(%rip), %eax	# alloc_count, alloc_count.132_11
# ./core/pool_vector.h:525: 		if (MemoryPool::allocs_used == MemoryPool::alloc_count) {
	cmpl	%eax, %edx	# alloc_count.132_11, allocs_used.131_10
	jne	.L3846	#,
# ./core/pool_vector.h:526: 			MemoryPool::alloc_mutex->unlock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.133_12
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.135_14
	movq	(%rdx), %rdx	# alloc_mutex.135_14->_vptr.Mutex, _15
	addq	$8, %rdx	#, _16
	movq	(%rdx), %rdx	# *_16, _17
	movq	%rax, %rdi	# alloc_mutex.133_12,
	call	*%rdx	# _17
# ./core/pool_vector.h:528: 			ERR_FAIL_V(ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC140, %ecx	#,
	movl	$528, %edx	#,
	movl	$.LC138, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$6, %eax	#, _83
	jmp	.L3843	#
.L3846:
# ./core/pool_vector.h:532: 		alloc = MemoryPool::free_list;
	movq	_ZN10MemoryPool9free_listE(%rip), %rdx	# free_list, free_list.136_18
	movq	-200(%rbp), %rax	# this, tmp177
	movq	%rdx, (%rax)	# free_list.136_18, this_94(D)->alloc
# ./core/pool_vector.h:533: 		MemoryPool::free_list = alloc->free_list;
	movq	-200(%rbp), %rax	# this, tmp178
	movq	(%rax), %rax	# this_94(D)->alloc, _19
# ./core/pool_vector.h:533: 		MemoryPool::free_list = alloc->free_list;
	movq	32(%rax), %rax	# _19->free_list, _20
# ./core/pool_vector.h:533: 		MemoryPool::free_list = alloc->free_list;
	movq	%rax, _ZN10MemoryPool9free_listE(%rip)	# _20, free_list
# ./core/pool_vector.h:535: 		MemoryPool::allocs_used++;
	movl	_ZN10MemoryPool11allocs_usedE(%rip), %eax	# allocs_used, allocs_used.137_21
	addl	$1, %eax	#, _22
	movl	%eax, _ZN10MemoryPool11allocs_usedE(%rip)	# _22, allocs_used
# ./core/pool_vector.h:538: 		alloc->size = 0;
	movq	-200(%rbp), %rax	# this, tmp179
	movq	(%rax), %rax	# this_94(D)->alloc, _23
	movq	$0, 24(%rax)	#, _23->size
# ./core/pool_vector.h:539: 		alloc->refcount.init();
	movq	-200(%rbp), %rax	# this, tmp180
	movq	(%rax), %rax	# this_94(D)->alloc, _24
	movq	%rax, -48(%rbp)	# _25, this
	movl	$1, -52(%rbp)	#, p_value
# ./core/safe_refcount.h:202: 		count = p_value;
	movq	-48(%rbp), %rax	# this, tmp181
	movl	-52(%rbp), %edx	# p_value, tmp182
	movl	%edx, (%rax)	# tmp182, this_153->count
# ./core/safe_refcount.h:203: 	}
	nop	
# ./core/pool_vector.h:540: 		alloc->pool_id = POOL_ALLOCATOR_INVALID_ID;
	movq	-200(%rbp), %rax	# this, tmp183
	movq	(%rax), %rax	# this_94(D)->alloc, _26
	movl	$-1, 16(%rax)	#, _26->pool_id
# ./core/pool_vector.h:541: 		MemoryPool::alloc_mutex->unlock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.138_27
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.140_29
	movq	(%rdx), %rdx	# alloc_mutex.140_29->_vptr.Mutex, _30
	addq	$8, %rdx	#, _31
	movq	(%rdx), %rdx	# *_31, _32
	movq	%rax, %rdi	# alloc_mutex.138_27,
	call	*%rdx	# _32
	jmp	.L3847	#
.L3844:
# ./core/pool_vector.h:545: 		ERR_FAIL_COND_V(alloc->lock > 0, ERR_LOCKED); //can't resize if locked!
	movq	-200(%rbp), %rax	# this, tmp184
	movq	(%rax), %rax	# this_94(D)->alloc, _33
	movl	4(%rax), %eax	# _33->lock, _34
	testl	%eax, %eax	# _34
	setne	%al	#, _35
	movzbl	%al, %eax	# _35, _36
	testq	%rax, %rax	# _37
	je	.L3848	#,
# ./core/pool_vector.h:545: 		ERR_FAIL_COND_V(alloc->lock > 0, ERR_LOCKED); //can't resize if locked!
	movl	$0, %r8d	#,
	movl	$.LC141, %ecx	#,
	movl	$545, %edx	#,
	movl	$.LC138, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$23, %eax	#, _83
	jmp	.L3843	#
.L3848:
# ./core/pool_vector.h:545: 		ERR_FAIL_COND_V(alloc->lock > 0, ERR_LOCKED); //can't resize if locked!
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
.L3847:
# ./core/pool_vector.h:548: 	size_t new_size = sizeof(T) * p_size;
	movl	-204(%rbp), %eax	# p_size, tmp185
	cltq
# ./core/pool_vector.h:548: 	size_t new_size = sizeof(T) * p_size;
	salq	$3, %rax	#, tmp186
	movq	%rax, -32(%rbp)	# tmp186, new_size
# ./core/pool_vector.h:550: 	if (alloc->size == new_size)
	movq	-200(%rbp), %rax	# this, tmp187
	movq	(%rax), %rax	# this_94(D)->alloc, _39
# ./core/pool_vector.h:550: 	if (alloc->size == new_size)
	movq	24(%rax), %rax	# _39->size, _40
# ./core/pool_vector.h:550: 	if (alloc->size == new_size)
	cmpq	%rax, -32(%rbp)	# _40, new_size
	jne	.L3849	#,
# ./core/pool_vector.h:551: 		return OK; //nothing to do
	movl	$0, %eax	#, _83
	jmp	.L3843	#
.L3849:
# ./core/pool_vector.h:553: 	if (p_size == 0) {
	cmpl	$0, -204(%rbp)	#, p_size
	jne	.L3850	#,
# ./core/pool_vector.h:554: 		_unreference();
	movq	-200(%rbp), %rax	# this, tmp188
	movq	%rax, %rdi	# tmp188,
	call	_ZN10PoolVectorI6StringE12_unreferenceEv	#
# ./core/pool_vector.h:555: 		return OK;
	movl	$0, %eax	#, _83
	jmp	.L3843	#
.L3850:
# ./core/pool_vector.h:558: 	_copy_on_write(); // make it unique
	movq	-200(%rbp), %rax	# this, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN10PoolVectorI6StringE14_copy_on_writeEv	#
# ./core/pool_vector.h:570: 	int cur_elements = alloc->size / sizeof(T);
	movq	-200(%rbp), %rax	# this, tmp190
	movq	(%rax), %rax	# this_94(D)->alloc, _41
# ./core/pool_vector.h:570: 	int cur_elements = alloc->size / sizeof(T);
	movq	24(%rax), %rax	# _41->size, _42
# ./core/pool_vector.h:570: 	int cur_elements = alloc->size / sizeof(T);
	shrq	$3, %rax	#, _43
# ./core/pool_vector.h:570: 	int cur_elements = alloc->size / sizeof(T);
	movl	%eax, -36(%rbp)	# _43, cur_elements
# ./core/pool_vector.h:572: 	if (p_size > cur_elements) {
	movl	-204(%rbp), %eax	# p_size, tmp191
	cmpl	-36(%rbp), %eax	# cur_elements, tmp191
	jle	.L3851	#,
# ./core/pool_vector.h:574: 		if (MemoryPool::memory_pool) {
	movq	_ZN10MemoryPool11memory_poolE(%rip), %rax	# memory_pool, memory_pool.141_44
	testq	%rax, %rax	# memory_pool.141_44
	jne	.L3852	#,
# ./core/pool_vector.h:580: 			if (alloc->size == 0) {
	movq	-200(%rbp), %rax	# this, tmp192
	movq	(%rax), %rax	# this_94(D)->alloc, _45
# ./core/pool_vector.h:580: 			if (alloc->size == 0) {
	movq	24(%rax), %rax	# _45->size, _46
# ./core/pool_vector.h:580: 			if (alloc->size == 0) {
	testq	%rax, %rax	# _46
	jne	.L3853	#,
# ./core/pool_vector.h:581: 				alloc->mem = memalloc(new_size);
	movq	-200(%rbp), %rax	# this, tmp193
	movq	(%rax), %rbx	# this_94(D)->alloc, _47
# ./core/pool_vector.h:581: 				alloc->mem = memalloc(new_size);
	movq	-32(%rbp), %rax	# new_size, tmp194
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp194,
	call	_ZN6Memory12alloc_staticEmb	#
# ./core/pool_vector.h:581: 				alloc->mem = memalloc(new_size);
	movq	%rax, 8(%rbx)	# _48, _47->mem
	jmp	.L3852	#
.L3853:
# ./core/pool_vector.h:583: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	-200(%rbp), %rax	# this, tmp195
	movq	(%rax), %rax	# this_94(D)->alloc, _49
	movq	8(%rax), %rax	# _49->mem, _50
# ./core/pool_vector.h:583: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	-200(%rbp), %rdx	# this, tmp196
	movq	(%rdx), %rbx	# this_94(D)->alloc, _51
# ./core/pool_vector.h:583: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	-32(%rbp), %rcx	# new_size, tmp197
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp197,
	movq	%rax, %rdi	# _50,
	call	_ZN6Memory14realloc_staticEPvmb	#
# ./core/pool_vector.h:583: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	%rax, 8(%rbx)	# _52, _51->mem
.L3852:
# ./core/pool_vector.h:587: 		alloc->size = new_size;
	movq	-200(%rbp), %rax	# this, tmp198
	movq	(%rax), %rax	# this_94(D)->alloc, _53
	movq	-32(%rbp), %rdx	# new_size, tmp199
	movq	%rdx, 24(%rax)	# tmp199, _53->size
# ./core/pool_vector.h:589: 		Write w = write();
	leaq	-160(%rbp), %rax	#, tmp200
	movq	-200(%rbp), %rdx	# this, tmp201
	movq	%rdx, %rsi	# tmp201,
	movq	%rax, %rdi	# tmp200,
	call	_ZN10PoolVectorI6StringE5writeEv	#
# ./core/pool_vector.h:591: 		for (int i = cur_elements; i < p_size; i++) {
	movl	-36(%rbp), %eax	# cur_elements, tmp202
	movl	%eax, -20(%rbp)	# tmp202, i
.L3858:
# ./core/pool_vector.h:591: 		for (int i = cur_elements; i < p_size; i++) {
	movl	-20(%rbp), %eax	# i, tmp203
	cmpl	-204(%rbp), %eax	# p_size, tmp203
	jge	.L3854	#,
	movl	-20(%rbp), %eax	# i, tmp204
	movl	%eax, -108(%rbp)	# tmp204, p_index
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movq	-144(%rbp), %rax	# w.D.43460.mem, _164
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movl	-108(%rbp), %edx	# p_index, tmp205
	movslq	%edx, %rdx	# tmp205, _165
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	salq	$3, %rdx	#, _166
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	addq	%rdx, %rax	# _166, D.57475
	movq	$8, -80(%rbp)	#, p_size
	movq	%rax, -88(%rbp)	# D.57475, p_pointer
	movq	$8, -96(%rbp)	#, check
	movq	$.LC27, -104(%rbp)	#, p_description
# ./core/os/memory.h:104: 	return p_pointer;
	movq	-88(%rbp), %rax	# p_pointer, D.57470
	movq	%rax, -64(%rbp)	# D.57470, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rdx	# this, _156
	movq	%rdx, -72(%rbp)	# _156, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rdx	# this, tmp206
	movq	$0, (%rdx)	#, this_157->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
	movq	%rax, -120(%rbp)	# D.57470, p_obj
	movq	-120(%rbp), %rax	# p_obj, tmp207
	movq	%rax, -128(%rbp)	# tmp207, D.57479
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	nop	
# ./core/pool_vector.h:591: 		for (int i = cur_elements; i < p_size; i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L3858	#
.L3854:
# ./core/pool_vector.h:589: 		Write w = write();
	leaq	-160(%rbp), %rax	#, tmp208
	movq	%rax, %rdi	# tmp208,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
	jmp	.L3859	#
.L3851:
# ./core/pool_vector.h:599: 			Write w = write();
	leaq	-192(%rbp), %rax	#, tmp209
	movq	-200(%rbp), %rdx	# this, tmp210
	movq	%rdx, %rsi	# tmp210,
	movq	%rax, %rdi	# tmp209,
	call	_ZN10PoolVectorI6StringE5writeEv	#
# ./core/pool_vector.h:600: 			for (int i = p_size; i < cur_elements; i++) {
	movl	-204(%rbp), %eax	# p_size, tmp211
	movl	%eax, -24(%rbp)	# tmp211, i
.L3862:
# ./core/pool_vector.h:600: 			for (int i = p_size; i < cur_elements; i++) {
	movl	-24(%rbp), %eax	# i, tmp212
	cmpl	-36(%rbp), %eax	# cur_elements, tmp212
	jge	.L3860	#,
	movl	-24(%rbp), %eax	# i, tmp213
	movl	%eax, -132(%rbp)	# tmp213, p_index
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movq	-176(%rbp), %rax	# w.D.43460.mem, _172
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movl	-132(%rbp), %edx	# p_index, tmp214
	movslq	%edx, %rdx	# tmp214, _173
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	salq	$3, %rdx	#, _174
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	addq	%rdx, %rax	# _174, D.57485
# ./core/pool_vector.h:602: 				w[i].~T();
	movq	%rax, %rdi	# D.57485,
	call	_ZN6StringD1Ev	#
# ./core/pool_vector.h:600: 			for (int i = p_size; i < cur_elements; i++) {
	addl	$1, -24(%rbp)	#, i
	jmp	.L3862	#
.L3860:
# ./core/pool_vector.h:599: 			Write w = write();
	leaq	-192(%rbp), %rax	#, tmp215
	movq	%rax, %rdi	# tmp215,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
# ./core/pool_vector.h:606: 		if (MemoryPool::memory_pool) {
	movq	_ZN10MemoryPool11memory_poolE(%rip), %rax	# memory_pool, memory_pool.142_55
	testq	%rax, %rax	# memory_pool.142_55
	jne	.L3859	#,
# ./core/pool_vector.h:612: 			if (new_size == 0) {
	cmpq	$0, -32(%rbp)	#, new_size
	jne	.L3863	#,
# ./core/pool_vector.h:613: 				memfree(alloc->mem);
	movq	-200(%rbp), %rax	# this, tmp216
	movq	(%rax), %rax	# this_94(D)->alloc, _56
	movq	8(%rax), %rax	# _56->mem, _57
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _57,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/pool_vector.h:614: 				alloc->mem = NULL;
	movq	-200(%rbp), %rax	# this, tmp217
	movq	(%rax), %rax	# this_94(D)->alloc, _58
	movq	$0, 8(%rax)	#, _58->mem
# ./core/pool_vector.h:615: 				alloc->size = 0;
	movq	-200(%rbp), %rax	# this, tmp218
	movq	(%rax), %rax	# this_94(D)->alloc, _59
	movq	$0, 24(%rax)	#, _59->size
# ./core/pool_vector.h:617: 				MemoryPool::alloc_mutex->lock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.143_60
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.145_62
	movq	(%rdx), %rdx	# alloc_mutex.145_62->_vptr.Mutex, _63
	movq	(%rdx), %rdx	# *_63, _64
	movq	%rax, %rdi	# alloc_mutex.143_60,
	call	*%rdx	# _64
# ./core/pool_vector.h:618: 				alloc->free_list = MemoryPool::free_list;
	movq	-200(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_94(D)->alloc, _65
	movq	_ZN10MemoryPool9free_listE(%rip), %rdx	# free_list, free_list.146_66
	movq	%rdx, 32(%rax)	# free_list.146_66, _65->free_list
# ./core/pool_vector.h:619: 				MemoryPool::free_list = alloc;
	movq	-200(%rbp), %rax	# this, tmp220
	movq	(%rax), %rax	# this_94(D)->alloc, _67
# ./core/pool_vector.h:619: 				MemoryPool::free_list = alloc;
	movq	%rax, _ZN10MemoryPool9free_listE(%rip)	# _67, free_list
# ./core/pool_vector.h:620: 				MemoryPool::allocs_used--;
	movl	_ZN10MemoryPool11allocs_usedE(%rip), %eax	# allocs_used, allocs_used.147_68
	subl	$1, %eax	#, _69
	movl	%eax, _ZN10MemoryPool11allocs_usedE(%rip)	# _69, allocs_used
# ./core/pool_vector.h:621: 				MemoryPool::alloc_mutex->unlock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.148_70
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.150_72
	movq	(%rdx), %rdx	# alloc_mutex.150_72->_vptr.Mutex, _73
	addq	$8, %rdx	#, _74
	movq	(%rdx), %rdx	# *_74, _75
	movq	%rax, %rdi	# alloc_mutex.148_70,
	call	*%rdx	# _75
	jmp	.L3859	#
.L3863:
# ./core/pool_vector.h:624: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	-200(%rbp), %rax	# this, tmp221
	movq	(%rax), %rax	# this_94(D)->alloc, _76
	movq	8(%rax), %rax	# _76->mem, _77
# ./core/pool_vector.h:624: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	-200(%rbp), %rdx	# this, tmp222
	movq	(%rdx), %rbx	# this_94(D)->alloc, _78
# ./core/pool_vector.h:624: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	-32(%rbp), %rcx	# new_size, tmp223
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp223,
	movq	%rax, %rdi	# _77,
	call	_ZN6Memory14realloc_staticEPvmb	#
# ./core/pool_vector.h:624: 				alloc->mem = memrealloc(alloc->mem, new_size);
	movq	%rax, 8(%rbx)	# _79, _78->mem
# ./core/pool_vector.h:625: 				alloc->size = new_size;
	movq	-200(%rbp), %rax	# this, tmp224
	movq	(%rax), %rax	# this_94(D)->alloc, _80
	movq	-32(%rbp), %rdx	# new_size, tmp225
	movq	%rdx, 24(%rax)	# tmp225, _80->size
.L3859:
# ./core/pool_vector.h:630: 	return OK;
	movl	$0, %eax	#, _83
.L3843:
# ./core/pool_vector.h:631: }
	addq	$200, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3045:
	.size	_ZN10PoolVectorI6StringE6resizeEi, .-_ZN10PoolVectorI6StringE6resizeEi
	.section	.text._ZNK10PoolVectorI6StringE4sizeEv,"axG",@progbits,_ZNK10PoolVectorI6StringE4sizeEv,comdat
	.align 2
	.weak	_ZNK10PoolVectorI6StringE4sizeEv
	.type	_ZNK10PoolVectorI6StringE4sizeEv, @function
_ZNK10PoolVectorI6StringE4sizeEv:
.LFB3046:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:479: 	return alloc ? alloc->size / sizeof(T) : 0;
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_7(D)->alloc, _1
# ./core/pool_vector.h:479: 	return alloc ? alloc->size / sizeof(T) : 0;
	testq	%rax, %rax	# _1
	je	.L3865	#,
# ./core/pool_vector.h:479: 	return alloc ? alloc->size / sizeof(T) : 0;
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_7(D)->alloc, _2
# ./core/pool_vector.h:479: 	return alloc ? alloc->size / sizeof(T) : 0;
	movq	24(%rax), %rax	# _2->size, _3
# ./core/pool_vector.h:479: 	return alloc ? alloc->size / sizeof(T) : 0;
	shrq	$3, %rax	#, _4
# ./core/pool_vector.h:479: 	return alloc ? alloc->size / sizeof(T) : 0;
	jmp	.L3867	#
.L3865:
# ./core/pool_vector.h:479: 	return alloc ? alloc->size / sizeof(T) : 0;
	movl	$0, %eax	#, iftmp.190_5
.L3867:
# ./core/pool_vector.h:480: }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3046:
	.size	_ZNK10PoolVectorI6StringE4sizeEv, .-_ZNK10PoolVectorI6StringE4sizeEv
	.section	.text._ZN10PoolVectorI6StringE3setEiRKS0_,"axG",@progbits,_ZN10PoolVectorI6StringE3setEiRKS0_,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE3setEiRKS0_
	.type	_ZN10PoolVectorI6StringE3setEiRKS0_, @function
_ZN10PoolVectorI6StringE3setEiRKS0_:
.LFB3047:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3047
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movl	%esi, -76(%rbp)	# p_index, p_index
	movq	%rdx, -88(%rbp)	# p_val, p_val
# ./core/pool_vector.h:491: 	ERR_FAIL_INDEX(p_index, size());
	movl	-76(%rbp), %eax	# p_index, tmp101
	shrl	$31, %eax	#, tmp100
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	jne	.L3869	#,
# ./core/pool_vector.h:491: 	ERR_FAIL_INDEX(p_index, size());
	movq	-72(%rbp), %rax	# this, tmp102
	movq	%rax, %rdi	# tmp102,
	call	_ZNK10PoolVectorI6StringE4sizeEv	#
	cmpl	%eax, -76(%rbp)	# _4, p_index
	setge	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L3870	#,
.L3869:
# ./core/pool_vector.h:491: 	ERR_FAIL_INDEX(p_index, size());
	movl	$1, %eax	#, iftmp.192_13
	jmp	.L3871	#
.L3870:
# ./core/pool_vector.h:491: 	ERR_FAIL_INDEX(p_index, size());
	movl	$0, %eax	#, iftmp.192_13
.L3871:
# ./core/pool_vector.h:491: 	ERR_FAIL_INDEX(p_index, size());
	movzbl	%al, %eax	# iftmp.192_13, _8
	testq	%rax, %rax	# _8
	setne	%al	#, retval.191_24
	testb	%al, %al	# retval.191_24
	je	.L3872	#,
# ./core/pool_vector.h:491: 	ERR_FAIL_INDEX(p_index, size());
	movq	-72(%rbp), %rax	# this, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZNK10PoolVectorI6StringE4sizeEv	#
	movslq	%eax, %rdx	# _9, _10
	movl	-76(%rbp), %eax	# p_index, tmp104
	cltq
	pushq	$0	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _10,
	movq	%rax, %rcx	# _11,
	movl	$491, %edx	#,
	movl	$.LC138, %esi	#,
	movl	$.LC66, %edi	#,
.LEHB721:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	jmp	.L3868	#
.L3872:
# ./core/pool_vector.h:491: 	ERR_FAIL_INDEX(p_index, size());
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/pool_vector.h:493: 	Write w = write();
	leaq	-64(%rbp), %rax	#, tmp105
	movq	-72(%rbp), %rdx	# this, tmp106
	movq	%rdx, %rsi	# tmp106,
	movq	%rax, %rdi	# tmp105,
	call	_ZN10PoolVectorI6StringE5writeEv	#
.LEHE721:
	movl	-76(%rbp), %eax	# p_index, tmp107
	movl	%eax, -20(%rbp)	# tmp107, p_index
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movq	-48(%rbp), %rax	# w.D.43460.mem, _39
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	movl	-20(%rbp), %edx	# p_index, tmp108
	movslq	%edx, %rdx	# tmp108, _40
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	salq	$3, %rdx	#, _41
# ./core/pool_vector.h:331: 		_FORCE_INLINE_ T &operator[](int p_index) const { return this->mem[p_index]; }
	leaq	(%rax,%rdx), %rcx	#, D.57459
# ./core/pool_vector.h:494: 	w[p_index] = p_val;
	leaq	-32(%rbp), %rax	#, tmp109
	movq	-88(%rbp), %rdx	# p_val, tmp110
	movq	%rcx, %rsi	# D.57459,
	movq	%rax, %rdi	# tmp109,
.LEHB722:
	call	_ZN6StringaSERKS_	#
.LEHE722:
# ./core/pool_vector.h:494: 	w[p_index] = p_val;
	leaq	-32(%rbp), %rax	#, tmp111
	movq	%rax, %rdi	# tmp111,
	call	_ZN6StringD1Ev	#
# ./core/pool_vector.h:493: 	Write w = write();
	leaq	-64(%rbp), %rax	#, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
	jmp	.L3868	#
.L3876:
	movq	%rax, %rbx	#, tmp114
# ./core/pool_vector.h:493: 	Write w = write();
	leaq	-64(%rbp), %rax	#, tmp113
	movq	%rax, %rdi	# tmp113,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
	movq	%rbx, %rax	# tmp114, D.62165
	movq	%rax, %rdi	# D.62165,
.LEHB723:
	call	_Unwind_Resume	#
.LEHE723:
.L3868:
# ./core/pool_vector.h:495: }
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3047:
	.section	.gcc_except_table
.LLSDA3047:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3047-.LLSDACSB3047
.LLSDACSB3047:
	.uleb128 .LEHB721-.LFB3047
	.uleb128 .LEHE721-.LEHB721
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB722-.LFB3047
	.uleb128 .LEHE722-.LEHB722
	.uleb128 .L3876-.LFB3047
	.uleb128 0
	.uleb128 .LEHB723-.LFB3047
	.uleb128 .LEHE723-.LEHB723
	.uleb128 0
	.uleb128 0
.LLSDACSE3047:
	.section	.text._ZN10PoolVectorI6StringE3setEiRKS0_,"axG",@progbits,_ZN10PoolVectorI6StringE3setEiRKS0_,comdat
	.size	_ZN10PoolVectorI6StringE3setEiRKS0_, .-_ZN10PoolVectorI6StringE3setEiRKS0_
	.section	.rodata
	.align 8
.LC142:
	.string	"Condition ' hash_table ' is true."
.LC143:
	.string	"make_hash_table"
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv:
.LFB3049:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_14(D)->hash_table, _1
	testq	%rax, %rax	# _1
	setne	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L3878	#,
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movl	$0, %r8d	#,
	movl	$.LC142, %ecx	#,
	movl	$103, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC143, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L3877	#
.L3878:
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movl	$.LC27, %esi	#,
	movl	$8, %edi	#,
	call	_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc	#
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movq	-24(%rbp), %rdx	# this, tmp92
	movq	%rax, (%rdx)	# _5, this_14(D)->hash_table
# ./core/hash_map.h:107: 		hash_table_power = MIN_HASH_TABLE_POWER;
	movq	-24(%rbp), %rax	# this, tmp93
	movb	$3, 8(%rax)	#, this_14(D)->hash_table_power
# ./core/hash_map.h:108: 		elements = 0;
	movq	-24(%rbp), %rax	# this, tmp94
	movl	$0, 12(%rax)	#, this_14(D)->elements
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	movl	$0, -4(%rbp)	#, i
.L3880:
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	cmpl	$7, -4(%rbp)	#, i
	jg	.L3877	#,
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_14(D)->hash_table, _6
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movl	-4(%rbp), %edx	# i, tmp96
	movslq	%edx, %rdx	# tmp96, _7
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	salq	$3, %rdx	#, _8
	addq	%rdx, %rax	# _8, _9
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	$0, (%rax)	#, *_9
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	addl	$1, -4(%rbp)	#, i
	jmp	.L3880	#
.L3877:
# ./core/hash_map.h:111: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3049:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv
	.section	.rodata
.LC144:
	.string	"create_element"
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_:
.LFB3051:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_key, p_key
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movl	$.LC27, %esi	#,
	movl	$128, %edi	#,
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _22
	movq	%rbx, %rdi	# _22,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC1Ev	#
	movq	%rbx, -40(%rbp)	# _22, p_obj
	movq	-40(%rbp), %rax	# p_obj, tmp106
	movq	%rax, -48(%rbp)	# tmp106, D.58238
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-40(%rbp), %rax	# p_obj, D.58239
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movq	%rax, -24(%rbp)	# D.58239, e
# ./core/hash_map.h:211: 		if (!e) {
	cmpq	$0, -24(%rbp)	#, e
	jne	.L3883	#,
# ./core/hash_map.h:213: 			ERR_FAIL_V(NULL);
	movl	$0, %r8d	#,
	movl	$.LC126, %ecx	#,
	movl	$213, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC144, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %eax	#, _18
	jmp	.L3884	#
.L3883:
	movq	-80(%rbp), %rax	# p_key, tmp107
	movq	%rax, -56(%rbp)	# tmp107, p_string_name
	movq	-56(%rbp), %rax	# p_string_name, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/string_name.h:112: 		if (_data)
	movq	-64(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_43->_data, _44
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _44
	je	.L3885	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-64(%rbp), %rax	# this, tmp110
	movq	(%rax), %rax	# this_43->_data, _45
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _45->hash, D.58245
	jmp	.L3886	#
.L3885:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, D.58245
.L3886:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:215: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -28(%rbp)	# D.58245, hash
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-72(%rbp), %rax	# this, tmp111
	movzbl	8(%rax), %eax	# this_28(D)->hash_table_power, _1
	movzbl	%al, %eax	# _1, _2
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp112
	movl	%eax, %ecx	# _2, tmp127
	sall	%cl, %edx	# tmp127, tmp112
	movl	%edx, %eax	# tmp112, _3
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _4
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-28(%rbp), %eax	# hash, tmp114
	movl	%eax, -32(%rbp)	# tmp114, index
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-72(%rbp), %rax	# this, tmp115
	movq	(%rax), %rax	# this_28(D)->hash_table, _6
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movl	-32(%rbp), %edx	# index, _7
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	salq	$3, %rdx	#, _8
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# *_9, _10
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-24(%rbp), %rax	# e, tmp116
	movq	%rdx, 8(%rax)	# _10, e_25->next
# ./core/hash_map.h:218: 		e->hash = hash;
	movq	-24(%rbp), %rax	# e, tmp117
	movl	-28(%rbp), %edx	# hash, tmp118
	movl	%edx, (%rax)	# tmp118, e_25->hash
# ./core/hash_map.h:219: 		e->pair.key = p_key;
	movq	-24(%rbp), %rax	# e, tmp119
	leaq	16(%rax), %rdx	#, _11
	movq	-80(%rbp), %rax	# p_key, tmp120
	movq	%rax, %rsi	# tmp120,
	movq	%rdx, %rdi	# _11,
	call	_ZN10StringNameaSERKS_	#
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-72(%rbp), %rax	# this, tmp121
	movq	(%rax), %rax	# this_28(D)->hash_table, _12
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movl	-32(%rbp), %edx	# index, _13
# ./core/hash_map.h:221: 		hash_table[index] = e;
	salq	$3, %rdx	#, _14
	addq	%rax, %rdx	# _12, _15
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-24(%rbp), %rax	# e, tmp122
	movq	%rax, (%rdx)	# tmp122, *_15
# ./core/hash_map.h:222: 		elements++;
	movq	-72(%rbp), %rax	# this, tmp123
	movl	12(%rax), %eax	# this_28(D)->elements, _16
	leal	1(%rax), %edx	#, _17
	movq	-72(%rbp), %rax	# this, tmp124
	movl	%edx, 12(%rax)	# _17, this_28(D)->elements
# ./core/hash_map.h:224: 		return e;
	movq	-24(%rbp), %rax	# e, _18
.L3884:
# ./core/hash_map.h:225: 	}
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3051:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_
	.section	.rodata
.LC145:
	.string	"Out of Memory"
.LC146:
	.string	"check_hash_table"
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv:
.LFB3052:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
# ./core/hash_map.h:125: 		int new_hash_table_power = -1;
	movl	$-1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp143
	movl	12(%rax), %eax	# this_73(D)->elements, _1
	movl	%eax, %edx	# _1, _2
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp144
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _3
	movzbl	%al, %eax	# _3, _4
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp145
	movl	%eax, %ecx	# _4, tmp192
	sall	%cl, %esi	# tmp192, tmp145
	movl	%esi, %eax	# tmp145, _5
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _5, _2
	jle	.L3889	#,
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	movq	-56(%rbp), %rax	# this, tmp146
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _6
	movzbl	%al, %eax	# _6, _7
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	addl	$1, %eax	#, tmp147
	movl	%eax, -4(%rbp)	# tmp147, new_hash_table_power
.L3891:
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp148
	movl	12(%rax), %eax	# this_73(D)->elements, _8
	movl	%eax, %edx	# _8, _9
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp149
	movl	$8, %esi	#, tmp150
	movl	%eax, %ecx	# tmp149, tmp194
	sall	%cl, %esi	# tmp194, tmp150
	movl	%esi, %eax	# tmp150, _10
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _10, _9
	jle	.L3890	#,
# ./core/hash_map.h:133: 				new_hash_table_power++;
	addl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	jmp	.L3891	#
.L3889:
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp151
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _11
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpb	$3, %al	#, _11
	jbe	.L3890	#,
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp152
	movl	12(%rax), %eax	# this_73(D)->elements, _12
	movl	%eax, %edx	# _12, _13
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp153
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _14
	movzbl	%al, %eax	# _14, _15
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	subl	$1, %eax	#, _16
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movl	$8, %esi	#, tmp154
	movl	%eax, %ecx	# _16, tmp196
	sall	%cl, %esi	# tmp196, tmp154
	movl	%esi, %eax	# tmp154, _17
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpl	%eax, %edx	# _17, _13
	jge	.L3890	#,
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	movq	-56(%rbp), %rax	# this, tmp155
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _18
	movzbl	%al, %eax	# _18, _19
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	subl	$1, %eax	#, tmp156
	movl	%eax, -4(%rbp)	# tmp156, new_hash_table_power
.L3893:
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp157
	movl	12(%rax), %eax	# this_73(D)->elements, _20
	movl	%eax, %edx	# _20, _21
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp158
	subl	$1, %eax	#, _22
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp159
	movl	%eax, %ecx	# _22, tmp198
	sall	%cl, %esi	# tmp198, tmp159
	movl	%esi, %eax	# tmp159, _23
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _23, _21
	jge	.L3892	#,
# ./core/hash_map.h:143: 				new_hash_table_power--;
	subl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	jmp	.L3893	#
.L3892:
# ./core/hash_map.h:146: 			if (new_hash_table_power < (int)MIN_HASH_TABLE_POWER)
	cmpl	$2, -4(%rbp)	#, new_hash_table_power
	jg	.L3890	#,
# ./core/hash_map.h:147: 				new_hash_table_power = MIN_HASH_TABLE_POWER;
	movl	$3, -4(%rbp)	#, new_hash_table_power
.L3890:
# ./core/hash_map.h:150: 		if (new_hash_table_power == -1)
	cmpl	$-1, -4(%rbp)	#, new_hash_table_power
	je	.L3904	#,
# ./core/hash_map.h:153: 		Element **new_hash_table = memnew_arr(Element *, ((uint64_t)1 << new_hash_table_power));
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp160
	movl	$1, %edx	#, tmp161
	movl	%eax, %ecx	# tmp160, tmp200
	salq	%cl, %rdx	# tmp200, tmp161
	movq	%rdx, %rax	# tmp161, _24
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# _24,
	call	_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc	#
	movq	%rax, -24(%rbp)	# _80, new_hash_table
# ./core/hash_map.h:154: 		if (!new_hash_table) {
	cmpq	$0, -24(%rbp)	#, new_hash_table
	jne	.L3896	#,
# ./core/hash_map.h:156: 			ERR_PRINT("Out of Memory");
	movl	$0, %r8d	#,
	movl	$.LC145, %ecx	#,
	movl	$156, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC146, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:157: 			return;
	jmp	.L3888	#
.L3896:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	$0, -8(%rbp)	#, i
.L3898:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp162
	movl	$1, %edx	#, tmp163
	movl	%eax, %ecx	# tmp162, tmp202
	sall	%cl, %edx	# tmp202, tmp163
	movl	%edx, %eax	# tmp163, _25
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	cmpl	%eax, -8(%rbp)	# _25, i
	jge	.L3897	#,
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movl	-8(%rbp), %eax	# i, tmp164
	cltq
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	leaq	0(,%rax,8), %rdx	#, _27
	movq	-24(%rbp), %rax	# new_hash_table, tmp165
	addq	%rdx, %rax	# _27, _28
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movq	$0, (%rax)	#, *_28
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L3898	#
.L3897:
# ./core/hash_map.h:165: 		if (hash_table) {
	movq	-56(%rbp), %rax	# this, tmp166
	movq	(%rax), %rax	# this_73(D)->hash_table, _29
# ./core/hash_map.h:165: 		if (hash_table) {
	testq	%rax, %rax	# _29
	je	.L3899	#,
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -12(%rbp)	#, i
.L3903:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-56(%rbp), %rax	# this, tmp167
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _30
	movzbl	%al, %eax	# _30, _31
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp168
	movl	%eax, %ecx	# _31, tmp204
	sall	%cl, %edx	# tmp204, tmp168
	movl	%edx, %eax	# tmp168, _32
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -12(%rbp)	# _32, i
	jge	.L3900	#,
.L3902:
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movq	-56(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_73(D)->hash_table, _33
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movl	-12(%rbp), %edx	# i, tmp170
	movslq	%edx, %rdx	# tmp170, _34
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	salq	$3, %rdx	#, _35
	addq	%rdx, %rax	# _35, _36
	movq	(%rax), %rax	# *_36, _37
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	testq	%rax, %rax	# _37
	je	.L3901	#,
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	-56(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_73(D)->hash_table, _38
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movl	-12(%rbp), %edx	# i, tmp172
	movslq	%edx, %rdx	# tmp172, _39
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	salq	$3, %rdx	#, _40
	addq	%rdx, %rax	# _40, _41
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	(%rax), %rax	# *_41, tmp173
	movq	%rax, -32(%rbp)	# tmp173, se
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-56(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_73(D)->hash_table, _42
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movl	-12(%rbp), %edx	# i, tmp175
	movslq	%edx, %rdx	# tmp175, _43
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	salq	$3, %rdx	#, _44
	addq	%rax, %rdx	# _42, _45
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-32(%rbp), %rax	# se, tmp176
	movq	8(%rax), %rax	# se_86->next, _46
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	%rax, (%rdx)	# _46, *_45
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movq	-32(%rbp), %rax	# se, tmp177
	movl	(%rax), %edx	# se_86->hash, _47
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp178
	movl	$1, %esi	#, tmp179
	movl	%eax, %ecx	# tmp178, tmp206
	sall	%cl, %esi	# tmp206, tmp179
	movl	%esi, %eax	# tmp179, _48
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	subl	$1, %eax	#, _49
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	andl	%edx, %eax	# _47, _51
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	%eax, -36(%rbp)	# _51, new_pos
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movl	-36(%rbp), %eax	# new_pos, tmp180
	cltq
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	leaq	0(,%rax,8), %rdx	#, _53
	movq	-24(%rbp), %rax	# new_hash_table, tmp181
	addq	%rdx, %rax	# _53, _54
	movq	(%rax), %rdx	# *_54, _55
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movq	-32(%rbp), %rax	# se, tmp182
	movq	%rdx, 8(%rax)	# _55, se_86->next
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movl	-36(%rbp), %eax	# new_pos, tmp183
	cltq
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	leaq	0(,%rax,8), %rdx	#, _57
	movq	-24(%rbp), %rax	# new_hash_table, tmp184
	addq	%rax, %rdx	# tmp184, _58
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movq	-32(%rbp), %rax	# se, tmp185
	movq	%rax, (%rdx)	# tmp185, *_58
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	jmp	.L3902	#
.L3901:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -12(%rbp)	#, i
	jmp	.L3903	#
.L3900:
# ./core/hash_map.h:178: 			memdelete_arr(hash_table);
	movq	-56(%rbp), %rax	# this, tmp186
	movq	(%rax), %rax	# this_73(D)->hash_table, _59
	movq	%rax, %rdi	# _59,
	call	_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_	#
.L3899:
# ./core/hash_map.h:180: 		hash_table = new_hash_table;
	movq	-56(%rbp), %rax	# this, tmp187
	movq	-24(%rbp), %rdx	# new_hash_table, tmp188
	movq	%rdx, (%rax)	# tmp188, this_73(D)->hash_table
# ./core/hash_map.h:181: 		hash_table_power = new_hash_table_power;
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp189
	movl	%eax, %edx	# tmp189, _60
	movq	-56(%rbp), %rax	# this, tmp190
	movb	%dl, 8(%rax)	# _60, this_73(D)->hash_table_power
	jmp	.L3888	#
.L3904:
# ./core/hash_map.h:151: 			return;
	nop	
.L3888:
# ./core/hash_map.h:182: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3052:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv
	.section	.text._ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_,"axG",@progbits,_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_,comdat
	.align 2
	.weak	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_
	.type	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_, @function
_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_:
.LFB3053:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_from, p_from
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	movq	-40(%rbp), %rax	# this, tmp95
	movq	(%rax), %rdx	# this_10(D)->_ptr, _1
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	movq	-48(%rbp), %rax	# p_from, tmp96
	movq	(%rax), %rax	# p_from_11(D)->_ptr, _2
# ./core/cowdata.h:346: 	if (_ptr == p_from._ptr)
	cmpq	%rax, %rdx	# _2, _1
	je	.L3915	#,
# ./core/cowdata.h:349: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp97
	movq	(%rax), %rdx	# this_10(D)->_ptr, _3
# ./core/cowdata.h:349: 	_unref(_ptr);
	movq	-40(%rbp), %rax	# this, tmp98
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp98,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv	#
# ./core/cowdata.h:350: 	_ptr = NULL;
	movq	-40(%rbp), %rax	# this, tmp99
	movq	$0, (%rax)	#, this_10(D)->_ptr
# ./core/cowdata.h:352: 	if (!p_from._ptr)
	movq	-48(%rbp), %rax	# p_from, tmp100
	movq	(%rax), %rax	# p_from_11(D)->_ptr, _4
# ./core/cowdata.h:352: 	if (!p_from._ptr)
	testq	%rax, %rax	# _4
	je	.L3916	#,
	movq	-48(%rbp), %rax	# p_from, tmp101
	movq	%rax, -24(%rbp)	# tmp101, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_24->_ptr, _25
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _25
	jne	.L3909	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.56021
	jmp	.L3910	#
.L3909:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-24(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_24->_ptr, _27
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.56021
.L3910:
	movq	%rax, -8(%rbp)	# D.56021, pw
.L3914:
# ./core/safe_refcount.h:107: 		T tmp = static_cast<T const volatile &>(*pw);
	movq	-8(%rbp), %rax	# pw, tmp104
	movl	(%rax), %eax	# MEM[(const unsigned int &)pw_16], tmp105
	movl	%eax, -12(%rbp)	# tmp105, tmp
# ./core/safe_refcount.h:108: 		if (tmp == 0)
	cmpl	$0, -12(%rbp)	#, tmp
	jne	.L3911	#,
# ./core/safe_refcount.h:109: 			return 0; // if zero, can't add to it anymore
	movl	$0, %eax	#, D.56016
	jmp	.L3912	#
.L3911:
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	movl	-12(%rbp), %eax	# tmp, tmp106
	leal	1(%rax), %ecx	#, _19
	movq	-8(%rbp), %rdx	# pw, tmp107
	movl	-12(%rbp), %eax	# tmp, tmp108
	lock cmpxchgl	%ecx, (%rdx)	#, _19,
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	cmpl	%eax, -12(%rbp)	# _20, tmp
	sete	%al	#, retval.8_21
# ./core/safe_refcount.h:110: 		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp)
	testb	%al, %al	# retval.8_21
	je	.L3914	#,
# ./core/safe_refcount.h:111: 			return tmp + 1;
	movl	-12(%rbp), %eax	# tmp, tmp110
	addl	$1, %eax	#, D.56016
.L3912:
# ./core/cowdata.h:355: 	if (atomic_conditional_increment(p_from._get_refcount()) > 0) { // could reference
	testl	%eax, %eax	# D.56016
	setne	%al	#, retval.198_14
# ./core/cowdata.h:355: 	if (atomic_conditional_increment(p_from._get_refcount()) > 0) { // could reference
	testb	%al, %al	# retval.198_14
	je	.L3905	#,
# ./core/cowdata.h:356: 		_ptr = p_from._ptr;
	movq	-48(%rbp), %rax	# p_from, tmp111
	movq	(%rax), %rdx	# p_from_11(D)->_ptr, _7
# ./core/cowdata.h:356: 		_ptr = p_from._ptr;
	movq	-40(%rbp), %rax	# this, tmp112
	movq	%rdx, (%rax)	# _7, this_10(D)->_ptr
	jmp	.L3905	#
.L3915:
# ./core/cowdata.h:347: 		return; // self assign, do nothing.
	nop	
	jmp	.L3905	#
.L3916:
# ./core/cowdata.h:353: 		return; //nothing to do
	nop	
.L3905:
# ./core/cowdata.h:358: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3053:
	.size	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_, .-_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE4_refERKS7_
	.section	.rodata
	.align 8
.LC147:
	.string	"Condition ' !res ' is true. returned: *res"
	.section	.text._ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_,"axG",@progbits,_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_,comdat
	.align 2
	.weak	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_
	.type	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_, @function
_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_:
.LFB3054:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_key, p_key
	movq	-88(%rbp), %rax	# this, tmp109
	movq	%rax, -16(%rbp)	# tmp109, this
	movq	-96(%rbp), %rax	# p_key, tmp110
	movq	%rax, -24(%rbp)	# tmp110, p_key
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	movq	-16(%rbp), %rax	# this, tmp111
	movq	(%rax), %rax	# this_15->hash_table, _17
	testq	%rax, %rax	# _17
	sete	%al	#, _18
	movzbl	%al, %eax	# _18, _19
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _20
	je	.L3918	#,
# ./core/hash_map.h:335: 			return NULL;
	movl	$0, %eax	#, D.55561
	jmp	.L3919	#
.L3918:
	movq	-16(%rbp), %rax	# this, tmp112
	movq	%rax, -32(%rbp)	# tmp112, this
	movq	-24(%rbp), %rax	# p_key, tmp113
	movq	%rax, -40(%rbp)	# tmp113, p_key
	movq	-40(%rbp), %rax	# p_key, tmp114
	movq	%rax, -48(%rbp)	# tmp114, p_string_name
	movq	-48(%rbp), %rax	# p_string_name, tmp115
	movq	%rax, -56(%rbp)	# tmp115, this
# ./core/string_name.h:112: 		if (_data)
	movq	-56(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_25->_data, _26
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _26
	je	.L3920	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-56(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_25->_data, _27
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _27->hash, _28
	jmp	.L3921	#
.L3920:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _28
.L3921:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -60(%rbp)	# _28, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-32(%rbp), %rax	# this, tmp118
	movzbl	8(%rax), %eax	# this_22->hash_table_power, _35
	movzbl	%al, %eax	# _35, _36
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp119
	movl	%eax, %ecx	# _36, tmp132
	sall	%cl, %edx	# tmp132, tmp119
	movl	%edx, %eax	# tmp119, _37
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _38
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-60(%rbp), %eax	# hash, tmp121
	movl	%eax, -64(%rbp)	# tmp121, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-32(%rbp), %rax	# this, tmp122
	movq	(%rax), %rax	# this_22->hash_table, _41
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-64(%rbp), %edx	# index, _42
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _43
	addq	%rdx, %rax	# _43, _44
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_44, tmp123
	movq	%rax, -72(%rbp)	# tmp123, e
.L3928:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -72(%rbp)	#, e
	je	.L3923	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-72(%rbp), %rax	# e, tmp124
	movl	(%rax), %eax	# e_46->hash, _47
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -60(%rbp)	# _47, hash
	jne	.L3924	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-72(%rbp), %rax	# e, tmp125
	leaq	16(%rax), %rdx	#, _48
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-40(%rbp), %rax	# p_key, tmp126
	movq	%rax, %rsi	# tmp126,
	movq	%rdx, %rdi	# _48,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _49
	je	.L3924	#,
	movl	$1, %eax	#, iftmp.197_50
	jmp	.L3925	#
.L3924:
	movl	$0, %eax	#, iftmp.197_50
.L3925:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.197_50
	je	.L3926	#,
# ./core/hash_map.h:198: 				return e;
	movq	-72(%rbp), %rax	# e, _54
	jmp	.L3927	#
.L3926:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-72(%rbp), %rax	# e, tmp127
	movq	8(%rax), %rax	# e_46->next, tmp128
	movq	%rax, -72(%rbp)	# tmp128, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L3928	#
.L3923:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _54
.L3927:
# ./core/hash_map.h:337: 		const Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -80(%rbp)	# _54, e
# ./core/hash_map.h:339: 		if (e)
	cmpq	$0, -80(%rbp)	#, e
	je	.L3929	#,
# ./core/hash_map.h:340: 			return &e->pair.data;
	movq	-80(%rbp), %rax	# e, tmp129
	addq	$24, %rax	#, D.55561
	jmp	.L3919	#
.L3929:
# ./core/hash_map.h:342: 		return NULL;
	movl	$0, %eax	#, D.55561
.L3919:
# ./core/hash_map.h:302: 		const TData *res = getptr(p_key);
	movq	%rax, -8(%rbp)	# D.55561, res
# ./core/hash_map.h:303: 		ERR_FAIL_COND_V(!res, *res);
	cmpq	$0, -8(%rbp)	#, res
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L3930	#,
# ./core/hash_map.h:303: 		ERR_FAIL_COND_V(!res, *res);
	movl	$0, %r8d	#,
	movl	$.LC147, %ecx	#,
	movl	$303, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC10, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-8(%rbp), %rax	# res, _4
	jmp	.L3931	#
.L3930:
# ./core/hash_map.h:303: 		ERR_FAIL_COND_V(!res, *res);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:304: 		return *res;
	movq	-8(%rbp), %rax	# res, _4
.L3931:
# ./core/hash_map.h:305: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3054:
	.size	_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_, .-_ZNK7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3getERKS0_
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv:
.LFB3055:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
.L3940:
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rax, -8(%rbp)	# tmp89, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_8->_data, _9
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _9
	je	.L3933	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_8->_data, _10
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _10->first, D.57634
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3941	#
.L3933:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.57634
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3941:
# ./core/list.h:403: 		while (front()) {
	testq	%rax, %rax	# D.57634
	setne	%al	#, retval.234_6
	testb	%al, %al	# retval.234_6
	je	.L3943	#,
	movq	-24(%rbp), %rax	# this, tmp92
	movq	%rax, -16(%rbp)	# tmp92, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_15->_data, _16
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _16
	je	.L3937	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_15->_data, _17
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _17->first, D.57639
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L3942	#
.L3937:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.57639
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L3942:
# ./core/list.h:404: 			erase(front());
	movq	-24(%rbp), %rdx	# this, tmp95
	movq	%rax, %rsi	# D.57639,
	movq	%rdx, %rdi	# tmp95,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE	#
# ./core/list.h:403: 		while (front()) {
	jmp	.L3940	#
.L3943:
# ./core/list.h:406: 	};
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3055:
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5clearEv
	.section	.text._Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_:
.LFB3056:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.55594
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55595
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.232_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.232_5
	jne	.L3948	#,
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, -16(%rbp)	# tmp85, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp86
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L3944	#
.L3948:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L3944:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3056:
	.size	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_
	.section	.rodata
	.align 8
.LC148:
	.string	"Condition ' !_get_alloc_size_checked(p_size, &alloc_size) ' is true. returned: ERR_OUT_OF_MEMORY"
	.align 8
.LC149:
	.string	"Condition ' !ptr ' is true. returned: ERR_OUT_OF_MEMORY"
	.align 8
.LC150:
	.string	"Condition ' !_ptrnew ' is true. returned: ERR_OUT_OF_MEMORY"
	.section	.text._ZN7CowDataIPK7VariantE6resizeEi,"axG",@progbits,_ZN7CowDataIPK7VariantE6resizeEi,comdat
	.align 2
	.weak	_ZN7CowDataIPK7VariantE6resizeEi
	.type	_ZN7CowDataIPK7VariantE6resizeEi, @function
_ZN7CowDataIPK7VariantE6resizeEi:
.LFB3065:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$208, %rsp	#,
	movq	%rdi, -200(%rbp)	# this, this
	movl	%esi, -204(%rbp)	# p_size, p_size
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	-204(%rbp), %eax	# p_size, tmp166
	shrl	$31, %eax	#, tmp165
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L3950	#,
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	$0, %r8d	#,
	movl	$.LC137, %ecx	#,
	movl	$252, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$31, %eax	#, _34
	jmp	.L3991	#
.L3950:
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-200(%rbp), %rax	# this, tmp167
	movq	%rax, -32(%rbp)	# tmp167, this
	movq	-32(%rbp), %rax	# this, tmp168
	movq	%rax, -40(%rbp)	# tmp168, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-40(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_91->_ptr, _92
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _92
	jne	.L3952	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _93
	jmp	.L3953	#
.L3952:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-40(%rbp), %rax	# this, tmp170
	movq	(%rax), %rax	# this_91->_ptr, _94
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _93
.L3953:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -48(%rbp)	# _93, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -48(%rbp)	#, size
	je	.L3954	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-48(%rbp), %rax	# size, tmp171
	movl	(%rax), %eax	# *size_98, _99
	jmp	.L3955	#
.L3954:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57572
.L3955:
# ./core/cowdata.h:254: 	if (p_size == size())
	cmpl	%eax, -204(%rbp)	# D.57572, p_size
	sete	%al	#, retval.211_44
# ./core/cowdata.h:254: 	if (p_size == size())
	testb	%al, %al	# retval.211_44
	je	.L3956	#,
# ./core/cowdata.h:255: 		return OK;
	movl	$0, %eax	#, _34
	jmp	.L3991	#
.L3956:
# ./core/cowdata.h:257: 	if (p_size == 0) {
	cmpl	$0, -204(%rbp)	#, p_size
	jne	.L3957	#,
# ./core/cowdata.h:259: 		_unref(_ptr);
	movq	-200(%rbp), %rax	# this, tmp172
	movq	(%rax), %rdx	# this_28(D)->_ptr, _5
# ./core/cowdata.h:259: 		_unref(_ptr);
	movq	-200(%rbp), %rax	# this, tmp173
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp173,
	call	_ZN7CowDataIPK7VariantE6_unrefEPv	#
# ./core/cowdata.h:260: 		_ptr = NULL;
	movq	-200(%rbp), %rax	# this, tmp174
	movq	$0, (%rax)	#, this_28(D)->_ptr
# ./core/cowdata.h:261: 		return OK;
	movl	$0, %eax	#, _34
	jmp	.L3991	#
.L3957:
# ./core/cowdata.h:265: 	_copy_on_write();
	movq	-200(%rbp), %rax	# this, tmp175
	movq	%rax, %rdi	# tmp175,
	call	_ZN7CowDataIPK7VariantE14_copy_on_writeEv	#
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movl	-204(%rbp), %eax	# p_size, tmp176
	cltq
	movq	-200(%rbp), %rdx	# this, tmp177
	movq	%rdx, -56(%rbp)	# tmp177, this
	movq	%rax, -64(%rbp)	# _6, p_elements
	leaq	-176(%rbp), %rax	#, tmp178
	movq	%rax, -72(%rbp)	# tmp178, out
# ./core/cowdata.h:92: 		if (_mul_overflow(p_elements, sizeof(T), &o)) {
	movl	$0, %ecx	#, _106
	movq	-64(%rbp), %rax	# p_elements, tmp180
	leaq	0(,%rax,8), %rdx	#, tmp179
	movq	-64(%rbp), %rax	# p_elements, tmp182
	shrq	$61, %rax	#, tmp181
	testq	%rax, %rax	# tmp181
	je	.L3958	#,
	movl	$1, %ecx	#, _106
.L3958:
	movq	%rdx, %rax	# tmp179, _106
	movq	%rax, -184(%rbp)	# _107, o
	movq	%rcx, %rax	# _106, _108
	andl	$1, %eax	#, retval.223_109
# ./core/cowdata.h:92: 		if (_mul_overflow(p_elements, sizeof(T), &o)) {
	testb	%al, %al	# retval.223_109
	je	.L3960	#,
# ./core/cowdata.h:93: 			*out = 0;
	movq	-72(%rbp), %rax	# out, tmp183
	movq	$0, (%rax)	#, *out_105
# ./core/cowdata.h:94: 			return false;
	movl	$0, %eax	#, D.57584
	jmp	.L3966	#
.L3960:
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movq	-184(%rbp), %rax	# o, o.224_111
	movl	%eax, -76(%rbp)	# _112, x
# ./core/typedefs.h:178: 	--x;
	subl	$1, -76(%rbp)	#, x
# ./core/typedefs.h:179: 	x |= x >> 1;
	movl	-76(%rbp), %eax	# x, tmp184
	shrl	%eax	# _115
# ./core/typedefs.h:179: 	x |= x >> 1;
	orl	%eax, -76(%rbp)	# _115, x
# ./core/typedefs.h:180: 	x |= x >> 2;
	movl	-76(%rbp), %eax	# x, tmp185
	shrl	$2, %eax	#, _117
# ./core/typedefs.h:180: 	x |= x >> 2;
	orl	%eax, -76(%rbp)	# _117, x
# ./core/typedefs.h:181: 	x |= x >> 4;
	movl	-76(%rbp), %eax	# x, tmp186
	shrl	$4, %eax	#, _119
# ./core/typedefs.h:181: 	x |= x >> 4;
	orl	%eax, -76(%rbp)	# _119, x
# ./core/typedefs.h:182: 	x |= x >> 8;
	movl	-76(%rbp), %eax	# x, tmp187
	shrl	$8, %eax	#, _121
# ./core/typedefs.h:182: 	x |= x >> 8;
	orl	%eax, -76(%rbp)	# _121, x
# ./core/typedefs.h:183: 	x |= x >> 16;
	movl	-76(%rbp), %eax	# x, tmp188
	shrl	$16, %eax	#, _123
# ./core/typedefs.h:183: 	x |= x >> 16;
	orl	%eax, -76(%rbp)	# _123, x
# ./core/typedefs.h:185: 	return ++x;
	addl	$1, -76(%rbp)	#, x
	movl	-76(%rbp), %eax	# x, _126
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movl	%eax, %edx	# _126, _129
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movq	-72(%rbp), %rax	# out, tmp189
	movq	%rdx, (%rax)	# _129, *out_105
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	movq	-184(%rbp), %rax	# o, o.226_130
	movl	$0, %edx	#, _131
	addq	$32, %rax	#, tmp190
	jnc	.L3963	#,
	movl	$1, %edx	#, _131
.L3963:
	movq	%rax, -192(%rbp)	# _132, p
	movq	%rdx, %rax	# _131, _133
	andl	$1, %eax	#, retval.225_134
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	testb	%al, %al	# retval.225_134
	je	.L3965	#,
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	movl	$0, %eax	#, D.57584
	jmp	.L3966	#
.L3965:
# ./core/cowdata.h:98: 		return true;
	movl	$1, %eax	#, D.57584
.L3966:
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	xorl	$1, %eax	#, _8
	movzbl	%al, %eax	# _8, _9
	testq	%rax, %rax	# _10
	setne	%al	#, retval.212_46
	testb	%al, %al	# retval.212_46
	je	.L3967	#,
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC148, %ecx	#,
	movl	$268, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _34
	jmp	.L3991	#
.L3967:
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-200(%rbp), %rax	# this, tmp191
	movq	%rax, -88(%rbp)	# tmp191, this
	movq	-88(%rbp), %rax	# this, tmp192
	movq	%rax, -96(%rbp)	# tmp192, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-96(%rbp), %rax	# this, tmp193
	movq	(%rax), %rax	# this_139->_ptr, _140
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _140
	jne	.L3968	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _141
	jmp	.L3969	#
.L3968:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-96(%rbp), %rax	# this, tmp194
	movq	(%rax), %rax	# this_139->_ptr, _142
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _141
.L3969:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -104(%rbp)	# _141, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -104(%rbp)	#, size
	je	.L3970	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-104(%rbp), %rax	# size, tmp195
	movl	(%rax), %eax	# *size_146, _147
	jmp	.L3971	#
.L3970:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57597
.L3971:
# ./core/cowdata.h:270: 	if (p_size > size()) {
	cmpl	%eax, -204(%rbp)	# D.57597, p_size
	setg	%al	#, retval.213_49
# ./core/cowdata.h:270: 	if (p_size > size()) {
	testb	%al, %al	# retval.213_49
	je	.L3972	#,
	movq	-200(%rbp), %rax	# this, tmp196
	movq	%rax, -112(%rbp)	# tmp196, this
	movq	-112(%rbp), %rax	# this, tmp197
	movq	%rax, -120(%rbp)	# tmp197, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-120(%rbp), %rax	# this, tmp198
	movq	(%rax), %rax	# this_152->_ptr, _153
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _153
	jne	.L3973	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _154
	jmp	.L3974	#
.L3973:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-120(%rbp), %rax	# this, tmp199
	movq	(%rax), %rax	# this_152->_ptr, _155
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _154
.L3974:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -128(%rbp)	# _154, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -128(%rbp)	#, size
	je	.L3975	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-128(%rbp), %rax	# size, tmp200
	movl	(%rax), %eax	# *size_159, _160
	jmp	.L3976	#
.L3975:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57606
.L3976:
# ./core/cowdata.h:272: 		if (size() == 0) {
	testl	%eax, %eax	# D.57606
	sete	%al	#, retval.214_61
# ./core/cowdata.h:272: 		if (size() == 0) {
	testb	%al, %al	# retval.214_61
	je	.L3977	#,
# ./core/cowdata.h:274: 			uint32_t *ptr = (uint32_t *)Memory::alloc_static(alloc_size, true);
	movq	-176(%rbp), %rax	# alloc_size, alloc_size.215_13
	movl	$1, %esi	#,
	movq	%rax, %rdi	# alloc_size.215_13,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -24(%rbp)	# _70, ptr
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	cmpq	$0, -24(%rbp)	#, ptr
	sete	%al	#, _14
	movzbl	%al, %eax	# _14, _15
	testq	%rax, %rax	# _16
	je	.L3978	#,
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC149, %ecx	#,
	movl	$275, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _34
	jmp	.L3991	#
.L3978:
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:276: 			*(ptr - 1) = 0; //size, currently none
	movq	-24(%rbp), %rax	# ptr, tmp201
	subq	$4, %rax	#, _17
# ./core/cowdata.h:276: 			*(ptr - 1) = 0; //size, currently none
	movl	$0, (%rax)	#, *_17
# ./core/cowdata.h:277: 			*(ptr - 2) = 1; //refcount
	movq	-24(%rbp), %rax	# ptr, tmp202
	subq	$8, %rax	#, _18
# ./core/cowdata.h:277: 			*(ptr - 2) = 1; //refcount
	movl	$1, (%rax)	#, *_18
# ./core/cowdata.h:279: 			_ptr = (T *)ptr;
	movq	-200(%rbp), %rax	# this, tmp203
	movq	-24(%rbp), %rdx	# ptr, tmp204
	movq	%rdx, (%rax)	# tmp204, this_28(D)->_ptr
	jmp	.L3979	#
.L3977:
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-176(%rbp), %rcx	# alloc_size, alloc_size.216_19
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-200(%rbp), %rax	# this, tmp205
	movq	(%rax), %rax	# this_28(D)->_ptr, _20
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# alloc_size.216_19,
	movq	%rax, %rdi	# _20,
	call	_ZN6Memory14realloc_staticEPvmb	#
	movq	%rax, -16(%rbp)	# _63, _ptrnew
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	cmpq	$0, -16(%rbp)	#, _ptrnew
	sete	%al	#, _21
	movzbl	%al, %eax	# _21, _22
	testq	%rax, %rax	# _23
	je	.L3980	#,
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC150, %ecx	#,
	movl	$283, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _34
	jmp	.L3991	#
.L3980:
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:284: 			_ptr = (T *)(_ptrnew);
	movq	-200(%rbp), %rax	# this, tmp206
	movq	-16(%rbp), %rdx	# _ptrnew, tmp207
	movq	%rdx, (%rax)	# tmp207, this_28(D)->_ptr
.L3979:
	movq	-200(%rbp), %rax	# this, tmp208
	movq	%rax, -136(%rbp)	# tmp208, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-136(%rbp), %rax	# this, tmp209
	movq	(%rax), %rax	# this_164->_ptr, _165
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _165
	jne	.L3981	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57612
	jmp	.L3982	#
.L3981:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-136(%rbp), %rax	# this, tmp210
	movq	(%rax), %rax	# this_164->_ptr, _167
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57612
.L3982:
# ./core/cowdata.h:297: 		*_get_size() = p_size;
	movl	-204(%rbp), %edx	# p_size, p_size.217_30
# ./core/cowdata.h:297: 		*_get_size() = p_size;
	movl	%edx, (%rax)	# p_size.217_30, *_29
	jmp	.L3983	#
.L3972:
	movq	-200(%rbp), %rax	# this, tmp211
	movq	%rax, -144(%rbp)	# tmp211, this
	movq	-144(%rbp), %rax	# this, tmp212
	movq	%rax, -152(%rbp)	# tmp212, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp213
	movq	(%rax), %rax	# this_171->_ptr, _172
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _172
	jne	.L3984	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _173
	jmp	.L3985	#
.L3984:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp214
	movq	(%rax), %rax	# this_171->_ptr, _174
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _173
.L3985:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _173, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L3986	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp215
	movl	(%rax), %eax	# *size_178, _179
	jmp	.L3987	#
.L3986:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57619
.L3987:
# ./core/cowdata.h:299: 	} else if (p_size < size()) {
	cmpl	%eax, -204(%rbp)	# D.57619, p_size
	setl	%al	#, retval.218_51
# ./core/cowdata.h:299: 	} else if (p_size < size()) {
	testb	%al, %al	# retval.218_51
	je	.L3983	#,
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-176(%rbp), %rcx	# alloc_size, alloc_size.220_37
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-200(%rbp), %rax	# this, tmp216
	movq	(%rax), %rax	# this_28(D)->_ptr, _38
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# alloc_size.220_37,
	movq	%rax, %rdi	# _38,
	call	_ZN6Memory14realloc_staticEPvmb	#
	movq	%rax, -8(%rbp)	# _53, _ptrnew
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	cmpq	$0, -8(%rbp)	#, _ptrnew
	sete	%al	#, _39
	movzbl	%al, %eax	# _39, _40
	testq	%rax, %rax	# _41
	je	.L3988	#,
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC150, %ecx	#,
	movl	$310, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _34
	jmp	.L3991	#
.L3988:
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:312: 		_ptr = (T *)(_ptrnew);
	movq	-200(%rbp), %rax	# this, tmp217
	movq	-8(%rbp), %rdx	# _ptrnew, tmp218
	movq	%rdx, (%rax)	# tmp218, this_28(D)->_ptr
	movq	-200(%rbp), %rax	# this, tmp219
	movq	%rax, -168(%rbp)	# tmp219, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp220
	movq	(%rax), %rax	# this_183->_ptr, _184
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _184
	jne	.L3989	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57625
	jmp	.L3990	#
.L3989:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp221
	movq	(%rax), %rax	# this_183->_ptr, _186
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57625
.L3990:
# ./core/cowdata.h:314: 		*_get_size() = p_size;
	movl	-204(%rbp), %edx	# p_size, p_size.221_43
# ./core/cowdata.h:314: 		*_get_size() = p_size;
	movl	%edx, (%rax)	# p_size.221_43, *_42
.L3983:
# ./core/cowdata.h:317: 	return OK;
	movl	$0, %eax	#, _34
.L3991:
# ./core/cowdata.h:318: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3065:
	.size	_ZN7CowDataIPK7VariantE6resizeEi, .-_ZN7CowDataIPK7VariantE6resizeEi
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE:
.LFB3074:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_I, p_I
# ./core/list.h:367: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_10(D)->_data, _1
# ./core/list.h:367: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L3993	#,
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_10(D)->_data, _2
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-32(%rbp), %rdx	# p_I, tmp92
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# _2,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE	#
	movb	%al, -1(%rbp)	# _14, ret
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movq	-24(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_10(D)->_data, _3
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movl	16(%rax), %eax	# _3->size_cache, _4
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	testl	%eax, %eax	# _4
	jne	.L3994	#,
# ./core/list.h:371: 				memdelete_allocator<_Data, A>(_data);
	movq	-24(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_10(D)->_data, _5
	movq	%rax, %rdi	# _5,
	call	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_DataES2_EvPT_	#
# ./core/list.h:372: 				_data = NULL;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	$0, (%rax)	#, this_10(D)->_data
.L3994:
# ./core/list.h:375: 			return ret;
	movzbl	-1(%rbp), %eax	# ret, _6
	jmp	.L3995	#
.L3993:
# ./core/list.h:378: 		return false;
	movl	$0, %eax	#, _6
.L3995:
# ./core/list.h:379: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3074:
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv,comdat
	.align 2
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv
	.type	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv, @function
_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv:
.LFB3075:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
.L4004:
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rax, -8(%rbp)	# tmp89, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_8->_data, _9
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _9
	je	.L3997	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_8->_data, _10
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _10->first, D.56988
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L4005	#
.L3997:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.56988
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L4005:
# ./core/list.h:403: 		while (front()) {
	testq	%rax, %rax	# D.56988
	setne	%al	#, retval.241_6
	testb	%al, %al	# retval.241_6
	je	.L4007	#,
	movq	-24(%rbp), %rax	# this, tmp92
	movq	%rax, -16(%rbp)	# tmp92, this
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_15->_data, _16
# ./core/list.h:195: 		return _data ? _data->first : 0;
	testq	%rax, %rax	# _16
	je	.L4001	#,
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	-16(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_15->_data, _17
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movq	(%rax), %rax	# _17->first, D.56993
# ./core/list.h:195: 		return _data ? _data->first : 0;
	jmp	.L4006	#
.L4001:
# ./core/list.h:195: 		return _data ? _data->first : 0;
	movl	$0, %eax	#, D.56993
# ./core/list.h:195: 		return _data ? _data->first : 0;
	nop	
.L4006:
# ./core/list.h:404: 			erase(front());
	movq	-24(%rbp), %rdx	# this, tmp95
	movq	%rax, %rsi	# D.56993,
	movq	%rdx, %rdi	# tmp95,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5eraseEPKNS3_7ElementE	#
# ./core/list.h:403: 		while (front()) {
	jmp	.L4004	#
.L4007:
# ./core/list.h:406: 	};
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3075:
	.size	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv, .-_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5clearEv
	.section	.text._Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_
	.type	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_, @function
_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_:
.LFB3076:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.55614
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55615
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.243_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.243_5
	jne	.L4012	#,
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, -16(%rbp)	# tmp85, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp86
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L4008	#
.L4012:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L4008:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3076:
	.size	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_, .-_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE5_DataES3_EvPT_
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_:
.LFB3089:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3089
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$440, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -424(%rbp)	# this, this
	movq	%rsi, -432(%rbp)	# p_key, p_key
	movq	%rdx, -440(%rbp)	# p_val, p_val
	movq	-424(%rbp), %rax	# this, tmp181
	movq	%rax, -32(%rbp)	# tmp181, this
	movq	-432(%rbp), %rax	# p_key, tmp182
	movq	%rax, -40(%rbp)	# tmp182, p_val
# ./core/vmap.h:59: 		r_exact = false;
	movb	$0, -401(%rbp)	#, exact
# ./core/vmap.h:60: 		if (_cowdata.empty())
	movq	-32(%rbp), %rax	# this, _28
	movq	%rax, -48(%rbp)	# _28, this
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	movq	-48(%rbp), %rax	# this, tmp183
	movq	(%rax), %rax	# this_29->_ptr, _30
# ./core/cowdata.h:133: 	_FORCE_INLINE_ bool empty() const { return _ptr == 0; }
	testq	%rax, %rax	# _30
	sete	%al	#, _31
# ./core/vmap.h:60: 		if (_cowdata.empty())
	testb	%al, %al	# _31
	je	.L4015	#,
# ./core/vmap.h:61: 			return 0;
	movl	$0, %eax	#, D.57920
	jmp	.L4016	#
.L4015:
# ./core/vmap.h:63: 		int low = 0;
	movl	$0, -52(%rbp)	#, low
# ./core/vmap.h:64: 		int high = _cowdata.size() - 1;
	movq	-32(%rbp), %rax	# this, _36
	movq	%rax, -64(%rbp)	# _36, this
	movq	-64(%rbp), %rax	# this, tmp184
	movq	%rax, -72(%rbp)	# tmp184, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-72(%rbp), %rax	# this, tmp185
	movq	(%rax), %rax	# this_38->_ptr, _39
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _39
	jne	.L4017	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _40
	jmp	.L4018	#
.L4017:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-72(%rbp), %rax	# this, tmp186
	movq	(%rax), %rax	# this_38->_ptr, _41
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _40
.L4018:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -80(%rbp)	# _40, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -80(%rbp)	#, size
	je	.L4019	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-80(%rbp), %rax	# size, tmp187
	movl	(%rax), %eax	# *size_45, _46
	jmp	.L4020	#
.L4019:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _47
.L4020:
# ./core/vmap.h:64: 		int high = _cowdata.size() - 1;
	subl	$1, %eax	#, tmp188
	movl	%eax, -84(%rbp)	# tmp188, high
# ./core/vmap.h:65: 		const Pair *a = _cowdata.ptr();
	movq	-32(%rbp), %rax	# this, _54
	movq	%rax, -96(%rbp)	# _54, this
	movq	-96(%rbp), %rax	# this, tmp189
	movq	%rax, -104(%rbp)	# tmp189, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-104(%rbp), %rax	# this, tmp190
	movq	(%rax), %rax	# this_56->_ptr, _57
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _57
	jne	.L4021	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, _58
	jmp	.L4022	#
.L4021:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-104(%rbp), %rax	# this, tmp191
	movq	(%rax), %rax	# this_56->_ptr, _58
.L4022:
# ./core/cowdata.h:121: 		return _get_data();
	nop	
# ./core/vmap.h:65: 		const Pair *a = _cowdata.ptr();
	movq	%rax, -112(%rbp)	# _58, a
# ./core/vmap.h:66: 		int middle = 0;
	movl	$0, -116(%rbp)	#, middle
.L4036:
# ./core/vmap.h:72: 		while (low <= high) {
	movl	-52(%rbp), %eax	# low, tmp192
	cmpl	-84(%rbp), %eax	# high, tmp192
	jg	.L4024	#,
# ./core/vmap.h:73: 			middle = (low + high) / 2;
	movl	-52(%rbp), %edx	# low, tmp193
	movl	-84(%rbp), %eax	# high, tmp194
	addl	%edx, %eax	# tmp193, _68
# ./core/vmap.h:73: 			middle = (low + high) / 2;
	movl	%eax, %edx	# _68, tmp195
	shrl	$31, %edx	#, tmp195
	addl	%edx, %eax	# tmp195, tmp196
	sarl	%eax	# tmp197
	movl	%eax, -116(%rbp)	# tmp197, middle
# ./core/vmap.h:75: 			if (p_val < a[middle].key) {
	movl	-116(%rbp), %eax	# middle, tmp198
	movslq	%eax, %rdx	# tmp198, _70
# ./core/vmap.h:75: 			if (p_val < a[middle].key) {
	movq	%rdx, %rax	# _70, tmp199
	salq	$2, %rax	#, tmp199
	addq	%rdx, %rax	# _70, tmp199
	addq	%rax, %rax	# tmp199
	addq	%rdx, %rax	# _70, tmp199
	salq	$3, %rax	#, tmp200
	movq	%rax, %rdx	# tmp199, _71
	movq	-112(%rbp), %rax	# a, tmp201
	addq	%rdx, %rax	# _71, _72
# ./core/vmap.h:75: 			if (p_val < a[middle].key) {
	movq	%rax, %rdx	# _72, _73
	movq	-40(%rbp), %rax	# p_val, tmp202
	movq	%rax, -128(%rbp)	# tmp202, this
	movq	%rdx, -136(%rbp)	# _73, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-128(%rbp), %rax	# this, tmp203
	movq	(%rax), %rdx	# this_74->_id, _76
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# p_target, tmp204
	movq	(%rax), %rax	# p_target_75->_id, _77
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _77, _76
	jne	.L4025	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# p_target, tmp205
	addq	$8, %rax	#, _78
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-128(%rbp), %rdx	# this, tmp206
	addq	$8, %rdx	#, _79
	movq	%rdx, -144(%rbp)	# _79, this
	movq	%rax, -152(%rbp)	# _78, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-144(%rbp), %rax	# this, tmp207
	movq	(%rax), %rdx	# this_80->_data, _82
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-152(%rbp), %rax	# p_name, tmp208
	movq	(%rax), %rax	# p_name_81->_data, _83
	cmpq	%rax, %rdx	# _83, _82
	setb	%al	#, _84
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _84, _87
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _87
	setne	%al	#, iftmp.267_88
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L4067	#
.L4025:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-128(%rbp), %rax	# this, tmp209
	movq	(%rax), %rdx	# this_74->_id, _89
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-136(%rbp), %rax	# p_target, tmp210
	movq	(%rax), %rax	# p_target_75->_id, _90
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _90, _89
	setb	%al	#, iftmp.267_88
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L4067:
# ./core/vmap.h:75: 			if (p_val < a[middle].key) {
	testb	%al, %al	# iftmp.267_88
	je	.L4029	#,
# ./core/vmap.h:76: 				high = middle - 1; //search low end of array
	movl	-116(%rbp), %eax	# middle, tmp214
	subl	$1, %eax	#, tmp213
	movl	%eax, -84(%rbp)	# tmp213, high
	jmp	.L4036	#
.L4029:
# ./core/vmap.h:77: 			} else if (a[middle].key < p_val) {
	movl	-116(%rbp), %eax	# middle, tmp215
	movslq	%eax, %rdx	# tmp215, _97
# ./core/vmap.h:77: 			} else if (a[middle].key < p_val) {
	movq	%rdx, %rax	# _97, tmp216
	salq	$2, %rax	#, tmp216
	addq	%rdx, %rax	# _97, tmp216
	addq	%rax, %rax	# tmp216
	addq	%rdx, %rax	# _97, tmp216
	salq	$3, %rax	#, tmp217
	movq	%rax, %rdx	# tmp216, _98
	movq	-112(%rbp), %rax	# a, tmp218
	addq	%rdx, %rax	# _98, _99
	movq	%rax, -160(%rbp)	# _100, this
	movq	-40(%rbp), %rax	# p_val, tmp219
	movq	%rax, -168(%rbp)	# tmp219, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-160(%rbp), %rax	# this, tmp220
	movq	(%rax), %rdx	# this_101->_id, _103
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-168(%rbp), %rax	# p_target, tmp221
	movq	(%rax), %rax	# p_target_102->_id, _104
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _104, _103
	jne	.L4031	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-168(%rbp), %rax	# p_target, tmp222
	addq	$8, %rax	#, _105
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-160(%rbp), %rdx	# this, tmp223
	addq	$8, %rdx	#, _106
	movq	%rdx, -176(%rbp)	# _106, this
	movq	%rax, -184(%rbp)	# _105, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-176(%rbp), %rax	# this, tmp224
	movq	(%rax), %rdx	# this_107->_data, _109
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-184(%rbp), %rax	# p_name, tmp225
	movq	(%rax), %rax	# p_name_108->_data, _110
	cmpq	%rax, %rdx	# _110, _109
	setb	%al	#, _111
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _111, _114
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _114
	setne	%al	#, iftmp.267_115
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L4068	#
.L4031:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-160(%rbp), %rax	# this, tmp226
	movq	(%rax), %rdx	# this_101->_id, _116
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-168(%rbp), %rax	# p_target, tmp227
	movq	(%rax), %rax	# p_target_102->_id, _117
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _117, _116
	setb	%al	#, iftmp.267_115
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L4068:
# ./core/vmap.h:77: 			} else if (a[middle].key < p_val) {
	testb	%al, %al	# iftmp.267_115
	je	.L4035	#,
# ./core/vmap.h:78: 				low = middle + 1; //search high end of array
	movl	-116(%rbp), %eax	# middle, tmp231
	addl	$1, %eax	#, tmp230
	movl	%eax, -52(%rbp)	# tmp230, low
	jmp	.L4036	#
.L4035:
# ./core/vmap.h:80: 				r_exact = true;
	movb	$1, -401(%rbp)	#, exact
# ./core/vmap.h:81: 				return middle;
	movl	-116(%rbp), %eax	# middle, D.57920
	jmp	.L4016	#
.L4024:
# ./core/vmap.h:86: 		if (a[middle].key < p_val)
	movl	-116(%rbp), %eax	# middle, tmp232
	movslq	%eax, %rdx	# tmp232, _126
# ./core/vmap.h:86: 		if (a[middle].key < p_val)
	movq	%rdx, %rax	# _126, tmp233
	salq	$2, %rax	#, tmp233
	addq	%rdx, %rax	# _126, tmp233
	addq	%rax, %rax	# tmp233
	addq	%rdx, %rax	# _126, tmp233
	salq	$3, %rax	#, tmp234
	movq	%rax, %rdx	# tmp233, _127
	movq	-112(%rbp), %rax	# a, tmp235
	addq	%rdx, %rax	# _127, _128
	movq	%rax, -192(%rbp)	# _129, this
	movq	-40(%rbp), %rax	# p_val, tmp236
	movq	%rax, -200(%rbp)	# tmp236, p_target
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-192(%rbp), %rax	# this, tmp237
	movq	(%rax), %rdx	# this_130->_id, _132
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-200(%rbp), %rax	# p_target, tmp238
	movq	(%rax), %rax	# p_target_131->_id, _133
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _133, _132
	jne	.L4037	#,
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-200(%rbp), %rax	# p_target, tmp239
	addq	$8, %rax	#, _134
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-192(%rbp), %rdx	# this, tmp240
	addq	$8, %rdx	#, _135
	movq	%rdx, -208(%rbp)	# _135, this
	movq	%rax, -216(%rbp)	# _134, p_name
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-208(%rbp), %rax	# this, tmp241
	movq	(%rax), %rdx	# this_136->_data, _138
# ./core/string_name.h:103: 		return _data < p_name._data;
	movq	-216(%rbp), %rax	# p_name, tmp242
	movq	(%rax), %rax	# p_name_137->_data, _139
	cmpq	%rax, %rdx	# _139, _138
	setb	%al	#, _140
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movzbl	%al, %eax	# _140, _143
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	testl	%eax, %eax	# _143
	setne	%al	#, iftmp.267_144
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	jmp	.L4069	#
.L4037:
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-192(%rbp), %rax	# this, tmp243
	movq	(%rax), %rdx	# this_130->_id, _145
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	movq	-200(%rbp), %rax	# p_target, tmp244
	movq	(%rax), %rax	# p_target_131->_id, _146
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	cmpq	%rax, %rdx	# _146, _145
	setb	%al	#, iftmp.267_144
# core/object.h:449: 			_FORCE_INLINE_ bool operator<(const Target &p_target) const { return (_id == p_target._id) ? (method < p_target.method) : (_id < p_target._id); }
	nop	
.L4069:
# ./core/vmap.h:86: 		if (a[middle].key < p_val)
	testb	%al, %al	# iftmp.267_144
	je	.L4041	#,
# ./core/vmap.h:87: 			middle++;
	addl	$1, -116(%rbp)	#, middle
.L4041:
# ./core/vmap.h:88: 		return middle;
	movl	-116(%rbp), %eax	# middle, D.57920
.L4016:
# ./core/vmap.h:120: 		int pos = _find(p_key, exact);
	movl	%eax, -20(%rbp)	# D.57920, pos
# ./core/vmap.h:121: 		if (exact) {
	movzbl	-401(%rbp), %eax	# exact, exact.268_1
	testb	%al, %al	# exact.268_1
	je	.L4042	#,
# ./core/vmap.h:122: 			_cowdata.get_m(pos).value = p_val;
	movq	-424(%rbp), %rax	# this, _2
	movq	%rax, -224(%rbp)	# _2, this
	movl	-20(%rbp), %eax	# pos, tmp245
	movl	%eax, -228(%rbp)	# tmp245, p_index
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	movl	-228(%rbp), %eax	# p_index, tmp247
	shrl	$31, %eax	#, tmp246
	movzbl	%al, %eax	# _160, _161
	testq	%rax, %rax	# _162
	jne	.L4043	#,
	movq	-224(%rbp), %rax	# this, tmp248
	movq	%rax, -240(%rbp)	# tmp248, this
	movq	-240(%rbp), %rax	# this, tmp249
	movq	%rax, -248(%rbp)	# tmp249, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-248(%rbp), %rax	# this, tmp250
	movq	(%rax), %rax	# this_164->_ptr, _165
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _165
	jne	.L4044	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _166
	jmp	.L4045	#
.L4044:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-248(%rbp), %rax	# this, tmp251
	movq	(%rax), %rax	# this_164->_ptr, _167
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _166
.L4045:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -256(%rbp)	# _166, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -256(%rbp)	#, size
	je	.L4046	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-256(%rbp), %rax	# size, tmp252
	movl	(%rax), %eax	# *size_171, _172
	jmp	.L4047	#
.L4046:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _173
.L4047:
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -228(%rbp)	# _173, p_index
	setge	%al	#, _179
	movzbl	%al, %eax	# _179, _180
	testq	%rax, %rax	# _181
	je	.L4048	#,
.L4043:
	movl	$1, %eax	#, iftmp.210_182
	jmp	.L4049	#
.L4048:
	movl	$0, %eax	#, iftmp.210_182
.L4049:
	movzbl	%al, %eax	# iftmp.210_182, _185
	testq	%rax, %rax	# _185
	setne	%al	#, retval.209_186
	testb	%al, %al	# retval.209_186
	je	.L4050	#,
	movq	-224(%rbp), %rax	# this, tmp253
	movq	%rax, -264(%rbp)	# tmp253, this
	movq	-264(%rbp), %rax	# this, tmp254
	movq	%rax, -272(%rbp)	# tmp254, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp255
	movq	(%rax), %rax	# this_188->_ptr, _189
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _189
	jne	.L4051	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _190
	jmp	.L4052	#
.L4051:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp256
	movq	(%rax), %rax	# this_188->_ptr, _191
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _190
.L4052:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _190, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L4053	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp257
	movl	(%rax), %eax	# *size_195, _196
	jmp	.L4054	#
.L4053:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _197
.L4054:
# ./core/cowdata.h:144: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _197, _203
	movl	-228(%rbp), %eax	# p_index, tmp258
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _203,
	movq	%rax, %rcx	# _204,
	movl	$144, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC124, %edi	#,
.LEHB724:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L4050:
# ./core/cowdata.h:145: 		_copy_on_write();
	movq	-224(%rbp), %rax	# this, tmp259
	movq	%rax, %rdi	# tmp259,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
	movq	-224(%rbp), %rax	# this, tmp260
	movq	%rax, -288(%rbp)	# tmp260, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-288(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_205->_ptr, _206
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _206
	jne	.L4055	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _207
	jmp	.L4056	#
.L4055:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-288(%rbp), %rax	# this, tmp262
	movq	(%rax), %rcx	# this_205->_ptr, _207
.L4056:
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	movl	-228(%rbp), %eax	# p_index, tmp263
	movslq	%eax, %rdx	# tmp263, _212
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _212, tmp264
	salq	$2, %rax	#, tmp264
	addq	%rdx, %rax	# _212, tmp264
	addq	%rax, %rax	# tmp264
	addq	%rdx, %rax	# _212, tmp264
	salq	$3, %rax	#, tmp265
# ./core/cowdata.h:146: 		return _get_data()[p_index];
	addq	%rcx, %rax	# _207, D.57967
# ./core/vmap.h:122: 			_cowdata.get_m(pos).value = p_val;
	leaq	16(%rax), %rdx	#, _4
	movq	-440(%rbp), %rax	# p_val, tmp266
	movq	%rax, %rsi	# tmp266,
	movq	%rdx, %rdi	# _4,
	call	_ZN6Object6Signal4SlotaSERKS1_	#
# ./core/vmap.h:123: 			return pos;
	movl	-20(%rbp), %eax	# pos, _6
	jmp	.L4071	#
.L4042:
# ./core/vmap.h:125: 		_cowdata.insert(pos, Pair(p_key, p_val));
	movq	-424(%rbp), %rbx	# this, _5
	movq	-432(%rbp), %rax	# p_key, tmp267
	movq	%rax, -296(%rbp)	# tmp267, p_key
	movq	-440(%rbp), %rax	# p_val, tmp268
	movq	%rax, -304(%rbp)	# tmp268, p_value
# ./core/vmap.h:47: 		_FORCE_INLINE_ Pair(const T &p_key, const V &p_value) {
	leaq	-400(%rbp), %rax	#, _217
	movq	%rax, %rdi	# _217,
	call	_ZN6Object6Signal6TargetC1Ev	#
.LEHE724:
	leaq	-400(%rbp), %rax	#, tmp269
	addq	$16, %rax	#, _218
	movq	%rax, %rdi	# _218,
.LEHB725:
	call	_ZN6Object6Signal4SlotC1Ev	#
.LEHE725:
# ./core/vmap.h:49: 			key = p_key;
	leaq	-400(%rbp), %rax	#, _219
	movq	-296(%rbp), %rdx	# p_key, tmp270
	movq	%rdx, %rsi	# tmp270,
	movq	%rax, %rdi	# _219,
.LEHB726:
	call	_ZN6Object6Signal6TargetaSERKS1_	#
# ./core/vmap.h:50: 			value = p_value;
	leaq	-400(%rbp), %rax	#, tmp271
	leaq	16(%rax), %rdx	#, _220
	movq	-304(%rbp), %rax	# p_value, tmp272
	movq	%rax, %rsi	# tmp272,
	movq	%rdx, %rdi	# _220,
	call	_ZN6Object6Signal4SlotaSERKS1_	#
.LEHE726:
# ./core/vmap.h:51: 		}
	jmp	.L4070	#
.L4066:
	movq	%rax, %rbx	#, tmp275
# ./core/vmap.h:47: 		_FORCE_INLINE_ Pair(const T &p_key, const V &p_value) {
	leaq	-400(%rbp), %rax	#, tmp273
	addq	$16, %rax	#, _221
	movq	%rax, %rdi	# _221,
	call	_ZN6Object6Signal4SlotD1Ev	#
	jmp	.L4061	#
.L4065:
	movq	%rax, %rbx	#, tmp274
.L4061:
	leaq	-400(%rbp), %rax	#, _222
	movq	%rax, %rdi	# _222,
	call	_ZN6Object6Signal6TargetD1Ev	#
	movq	%rbx, %rax	# tmp274, D.62177
	movq	%rax, %rdi	# D.62177,
.LEHB727:
	call	_Unwind_Resume	#
.LEHE727:
.L4070:
# ./core/vmap.h:125: 		_cowdata.insert(pos, Pair(p_key, p_val));
	leaq	-400(%rbp), %rdx	#, tmp278
	movl	-20(%rbp), %eax	# pos, tmp279
	movl	%eax, %esi	# tmp279,
	movq	%rbx, %rdi	# _5,
.LEHB728:
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_	#
.LEHE728:
# ./core/vmap.h:125: 		_cowdata.insert(pos, Pair(p_key, p_val));
	leaq	-400(%rbp), %rax	#, tmp280
	movq	%rax, %rdi	# tmp280,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD1Ev	#
# ./core/vmap.h:126: 		return pos;
	movl	-20(%rbp), %eax	# pos, _6
	jmp	.L4071	#
.L4064:
	movq	%rax, %rbx	#, tmp283
# ./core/vmap.h:125: 		_cowdata.insert(pos, Pair(p_key, p_val));
	leaq	-400(%rbp), %rax	#, tmp282
	movq	%rax, %rdi	# tmp282,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD1Ev	#
	movq	%rbx, %rax	# tmp283, D.62178
	movq	%rax, %rdi	# D.62178,
.LEHB729:
	call	_Unwind_Resume	#
.LEHE729:
.L4071:
# ./core/vmap.h:127: 	}
	movq	-8(%rbp), %rbx	#,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3089:
	.section	.gcc_except_table
.LLSDA3089:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3089-.LLSDACSB3089
.LLSDACSB3089:
	.uleb128 .LEHB724-.LFB3089
	.uleb128 .LEHE724-.LEHB724
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB725-.LFB3089
	.uleb128 .LEHE725-.LEHB725
	.uleb128 .L4065-.LFB3089
	.uleb128 0
	.uleb128 .LEHB726-.LFB3089
	.uleb128 .LEHE726-.LEHB726
	.uleb128 .L4066-.LFB3089
	.uleb128 0
	.uleb128 .LEHB727-.LFB3089
	.uleb128 .LEHE727-.LEHB727
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB728-.LFB3089
	.uleb128 .LEHE728-.LEHB728
	.uleb128 .L4064-.LFB3089
	.uleb128 0
	.uleb128 .LEHB729-.LFB3089
	.uleb128 .LEHE729-.LEHB729
	.uleb128 0
	.uleb128 0
.LLSDACSE3089:
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_,comdat
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE6insertERKS2_RKS3_
	.section	.rodata
	.align 8
.LC151:
	.string	"Condition ' !p_I ' is true. returned: false"
.LC152:
	.string	"erase"
	.align 8
.LC153:
	.string	"Condition ' p_I->data != this ' is true. returned: false"
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE,comdat
	.align 2
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE
	.type	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE, @function
_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE:
.LFB3090:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_I, p_I
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	cmpq	$0, -16(%rbp)	#, p_I
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L4073	#,
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movl	$0, %r8d	#,
	movl	$.LC151, %ecx	#,
	movl	$157, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L4074	#
.L4073:
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movq	-16(%rbp), %rax	# p_I, tmp103
	movq	72(%rax), %rax	# p_I_26(D)->data, _4
	cmpq	%rax, -8(%rbp)	# _4, this
	setne	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L4075	#,
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movl	$0, %r8d	#,
	movl	$.LC153, %ecx	#,
	movl	$158, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L4074	#
.L4075:
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:160: 			if (first == p_I) {
	movq	-8(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_29(D)->first, _8
# ./core/list.h:160: 			if (first == p_I) {
	cmpq	%rax, -16(%rbp)	# _8, p_I
	jne	.L4076	#,
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp105
	movq	56(%rax), %rdx	# p_I_26(D)->next_ptr, _9
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-8(%rbp), %rax	# this, tmp106
	movq	%rdx, (%rax)	# _9, this_29(D)->first
.L4076:
# ./core/list.h:164: 			if (last == p_I)
	movq	-8(%rbp), %rax	# this, tmp107
	movq	8(%rax), %rax	# this_29(D)->last, _10
# ./core/list.h:164: 			if (last == p_I)
	cmpq	%rax, -16(%rbp)	# _10, p_I
	jne	.L4077	#,
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp108
	movq	64(%rax), %rdx	# p_I_26(D)->prev_ptr, _11
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-8(%rbp), %rax	# this, tmp109
	movq	%rdx, 8(%rax)	# _11, this_29(D)->last
.L4077:
# ./core/list.h:167: 			if (p_I->prev_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp110
	movq	64(%rax), %rax	# p_I_26(D)->prev_ptr, _12
# ./core/list.h:167: 			if (p_I->prev_ptr)
	testq	%rax, %rax	# _12
	je	.L4078	#,
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp111
	movq	64(%rax), %rax	# p_I_26(D)->prev_ptr, _13
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp112
	movq	56(%rdx), %rdx	# p_I_26(D)->next_ptr, _14
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	%rdx, 56(%rax)	# _14, _13->next_ptr
.L4078:
# ./core/list.h:170: 			if (p_I->next_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp113
	movq	56(%rax), %rax	# p_I_26(D)->next_ptr, _15
# ./core/list.h:170: 			if (p_I->next_ptr)
	testq	%rax, %rax	# _15
	je	.L4079	#,
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp114
	movq	56(%rax), %rax	# p_I_26(D)->next_ptr, _16
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp115
	movq	64(%rdx), %rdx	# p_I_26(D)->prev_ptr, _17
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	%rdx, 64(%rax)	# _17, _16->prev_ptr
.L4079:
# ./core/list.h:173: 			memdelete_allocator<Element, A>(const_cast<Element *>(p_I));
	movq	-16(%rbp), %rax	# p_I, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_	#
# ./core/list.h:174: 			size_cache--;
	movq	-8(%rbp), %rax	# this, tmp117
	movl	16(%rax), %eax	# this_29(D)->size_cache, _18
	leal	-1(%rax), %edx	#, _19
	movq	-8(%rbp), %rax	# this, tmp118
	movl	%edx, 16(%rax)	# _19, this_29(D)->size_cache
# ./core/list.h:176: 			return true;
	movl	$1, %eax	#, _20
.L4074:
# ./core/list.h:177: 		}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3090:
	.size	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE, .-_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE5_Data5eraseEPKNS3_7ElementE
	.section	.text._ZN6Object6Signal6TargetaSERKS1_,"axG",@progbits,_ZN6Object6Signal6TargetaSERKS1_,comdat
	.align 2
	.weak	_ZN6Object6Signal6TargetaSERKS1_
	.type	_ZN6Object6Signal6TargetaSERKS1_, @function
_ZN6Object6Signal6TargetaSERKS1_:
.LFB3093:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.43716, D.43716
# core/object.h:444: 		struct Target {
	movq	-16(%rbp), %rax	# D.43716, tmp87
	movq	(%rax), %rdx	# _5(D)->_id, _1
	movq	-8(%rbp), %rax	# this, tmp88
	movq	%rdx, (%rax)	# _1, this_6(D)->_id
	movq	-16(%rbp), %rax	# D.43716, tmp89
	leaq	8(%rax), %rdx	#, _2
	movq	-8(%rbp), %rax	# this, tmp90
	addq	$8, %rax	#, _3
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# _3,
	call	_ZN10StringNameaSERKS_	#
	movq	-8(%rbp), %rax	# this, _9
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3093:
	.size	_ZN6Object6Signal6TargetaSERKS1_, .-_ZN6Object6Signal6TargetaSERKS1_
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_:
.LFB3092:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.43722, D.43722
# ./core/vmap.h:40: 	struct Pair {
	movq	-16(%rbp), %rdx	# D.43722, _1
	movq	-8(%rbp), %rax	# this, _2
	movq	%rdx, %rsi	# _1,
	movq	%rax, %rdi	# _2,
	call	_ZN6Object6Signal6TargetaSERKS1_	#
	movq	-16(%rbp), %rax	# D.43722, tmp88
	leaq	16(%rax), %rdx	#, _3
	movq	-8(%rbp), %rax	# this, tmp89
	addq	$16, %rax	#, _4
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _4,
	call	_ZN6Object6Signal4SlotaSERKS1_	#
	movq	-8(%rbp), %rax	# this, _10
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3092:
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_
	.section	.text._ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_,"axG",@progbits,_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_,comdat
	.weak	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_
	.type	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_, @function
_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_:
.LFB3095:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# p_lhs, p_lhs
	movq	%rsi, -32(%rbp)	# p_rhs, p_rhs
	movq	-24(%rbp), %rax	# p_lhs, tmp86
	movq	%rax, -8(%rbp)	# tmp86, this
	movq	-32(%rbp), %rax	# p_rhs, tmp87
	movq	%rax, -16(%rbp)	# tmp87, p_name
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rdx	# this_5->_data, _7
# ./core/string_name.h:108: 		return _data == p_name._data;
	movq	-16(%rbp), %rax	# p_name, tmp89
	movq	(%rax), %rax	# p_name_6->_data, _8
	cmpq	%rax, %rdx	# _8, _7
	sete	%al	#, D.55629
# ./core/hashfuncs.h:162: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3095:
	.size	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_, .-_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD2Ev
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD2Ev, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD2Ev:
.LFB3099:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:61: 	struct Pair {
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$8, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN6Object6SignalD1Ev	#
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3099:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD2Ev, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD2Ev
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD1Ev
	.set	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD1Ev,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD2Ev
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD2Ev
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD2Ev, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD2Ev:
.LFB3101:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:73: 	struct Element {
	movq	-8(%rbp), %rax	# this, tmp83
	addq	$16, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3101:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD2Ev, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD2Ev
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD1Ev
	.set	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD1Ev,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD2Ev
	.section	.text._Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_,"axG",@progbits,_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_,comdat
	.weak	_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_
	.type	_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_, @function
_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_:
.LFB3096:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.58268
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.58269
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.305_5
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.305_5
	jne	.L4093	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, %rdi	# tmp85,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementD1Ev	#
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-24(%rbp), %rax	# p_class, tmp86
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4089	#
.L4093:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L4089:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3096:
	.size	_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_, .-_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_
	.section	.rodata
	.align 8
.LC154:
	.string	"Condition ' elements ' is true."
.LC155:
	.string	"erase_hash_table"
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv:
.LFB3103:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movq	-8(%rbp), %rax	# this, tmp87
	movl	12(%rax), %eax	# this_8(D)->elements, _1
	testl	%eax, %eax	# _1
	setne	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4095	#,
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movl	$0, %r8d	#,
	movl	$.LC154, %ecx	#,
	movl	$115, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC155, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4094	#
.L4095:
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:117: 		memdelete_arr(hash_table);
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_8(D)->hash_table, _5
	movq	%rax, %rdi	# _5,
	call	_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:118: 		hash_table = 0;
	movq	-8(%rbp), %rax	# this, tmp89
	movq	$0, (%rax)	#, this_8(D)->hash_table
# ./core/hash_map.h:119: 		hash_table_power = 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movb	$0, 8(%rax)	#, this_8(D)->hash_table_power
# ./core/hash_map.h:120: 		elements = 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movl	$0, 12(%rax)	#, this_8(D)->elements
.L4094:
# ./core/hash_map.h:121: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3103:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16erase_hash_tableEv
	.section	.text._ZN6Object7cast_toI8ResourceEEPT_PS_,"axG",@progbits,_ZN6Object7cast_toI8ResourceEEPT_PS_,comdat
	.weak	_ZN6Object7cast_toI8ResourceEEPT_PS_
	.type	_ZN6Object7cast_toI8ResourceEEPT_PS_, @function
_ZN6Object7cast_toI8ResourceEEPT_PS_:
.LFB3107:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_object, p_object
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movq	-8(%rbp), %rax	# p_object, p_object.323_3
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	testq	%rax, %rax	# p_object.323_3
	je	.L4098	#,
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movl	$0, %ecx	#,
	movl	$_ZTI8Resource, %edx	#,
	movl	$_ZTI6Object, %esi	#,
	movq	%rax, %rdi	# p_object.323_3,
	call	__dynamic_cast	#
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	jmp	.L4100	#
.L4098:
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movl	$0, %eax	#, iftmp.322_1
.L4100:
# core/object.h:610: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3107:
	.size	_ZN6Object7cast_toI8ResourceEEPT_PS_, .-_ZN6Object7cast_toI8ResourceEEPT_PS_
	.section	.text._ZN3RefI8ResourceE3refERKS1_,"axG",@progbits,_ZN3RefI8ResourceE3refERKS1_,comdat
	.align 2
	.weak	_ZN3RefI8ResourceE3refERKS1_
	.type	_ZN3RefI8ResourceE3refERKS1_, @function
_ZN3RefI8ResourceE3refERKS1_:
.LFB3108:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_from, p_from
# ./core/reference.h:70: 		if (p_from.reference == reference)
	movq	-16(%rbp), %rax	# p_from, tmp88
	movq	(%rax), %rdx	# p_from_9(D)->reference, _1
# ./core/reference.h:70: 		if (p_from.reference == reference)
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_10(D)->reference, _2
# ./core/reference.h:70: 		if (p_from.reference == reference)
	cmpq	%rax, %rdx	# _2, _1
	je	.L4104	#,
# ./core/reference.h:73: 		unref();
	movq	-8(%rbp), %rax	# this, tmp90
	movq	%rax, %rdi	# tmp90,
	call	_ZN3RefI8ResourceE5unrefEv	#
# ./core/reference.h:75: 		reference = p_from.reference;
	movq	-16(%rbp), %rax	# p_from, tmp91
	movq	(%rax), %rdx	# p_from_9(D)->reference, _3
# ./core/reference.h:75: 		reference = p_from.reference;
	movq	-8(%rbp), %rax	# this, tmp92
	movq	%rdx, (%rax)	# _3, this_10(D)->reference
# ./core/reference.h:76: 		if (reference)
	movq	-8(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_10(D)->reference, _4
# ./core/reference.h:76: 		if (reference)
	testq	%rax, %rax	# _4
	je	.L4101	#,
# ./core/reference.h:77: 			reference->reference();
	movq	-8(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_10(D)->reference, _5
	movq	%rax, %rdi	# _6,
	call	_ZN9Reference9referenceEv	#
	jmp	.L4101	#
.L4104:
# ./core/reference.h:71: 			return;
	nop	
.L4101:
# ./core/reference.h:78: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3108:
	.size	_ZN3RefI8ResourceE3refERKS1_, .-_ZN3RefI8ResourceE3refERKS1_
	.section	.text._Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE,comdat
	.weak	_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE
	.type	_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE, @function
_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE:
.LFB3109:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3109
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB730:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind0RCI6StringEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57038
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57039
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movq	%rax, -24(%rbp)	# D.57039, a
# ./core/method_bind.gen.inc:625: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:626: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE730:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB731:
	call	_ZN10StringNameC1ERK6String	#
.LEHE731:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB732:
	call	_ZN10StringNameaSERKS_	#
.LEHE732:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:628: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4112	#
.L4111:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4109	#
.L4110:
	movq	%rax, %rbx	#, tmp104
.L4109:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62184
	movq	%rax, %rdi	# D.62184,
.LEHB733:
	call	_Unwind_Resume	#
.LEHE733:
.L4112:
# ./core/method_bind.gen.inc:629: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3109:
	.section	.gcc_except_table
.LLSDA3109:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3109-.LLSDACSB3109
.LLSDACSB3109:
	.uleb128 .LEHB730-.LFB3109
	.uleb128 .LEHE730-.LEHB730
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB731-.LFB3109
	.uleb128 .LEHE731-.LEHB731
	.uleb128 .L4110-.LFB3109
	.uleb128 0
	.uleb128 .LEHB732-.LFB3109
	.uleb128 .LEHE732-.LEHB732
	.uleb128 .L4111-.LFB3109
	.uleb128 0
	.uleb128 .LEHB733-.LFB3109
	.uleb128 .LEHE733-.LEHB733
	.uleb128 0
	.uleb128 0
.LLSDACSE3109:
	.section	.text._Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE,comdat
	.size	_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE, .-_Z18create_method_bindI6Object6StringEP10MethodBindMT_KFT0_vE
	.section	.text._Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E,comdat
	.weak	_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E
	.type	_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E, @function
_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E:
.LFB3110:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3110
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB734:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind1RCIbRK6StringEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57044
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57045
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movq	%rax, -24(%rbp)	# D.57045, a
# ./core/method_bind.gen.inc:1365: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1366: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE734:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB735:
	call	_ZN10StringNameC1ERK6String	#
.LEHE735:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB736:
	call	_ZN10StringNameaSERKS_	#
.LEHE736:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1368: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4120	#
.L4119:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4117	#
.L4118:
	movq	%rax, %rbx	#, tmp104
.L4117:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62186
	movq	%rax, %rdi	# D.62186,
.LEHB737:
	call	_Unwind_Resume	#
.LEHE737:
.L4120:
# ./core/method_bind.gen.inc:1369: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3110:
	.section	.gcc_except_table
.LLSDA3110:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3110-.LLSDACSB3110
.LLSDACSB3110:
	.uleb128 .LEHB734-.LFB3110
	.uleb128 .LEHE734-.LEHB734
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB735-.LFB3110
	.uleb128 .LEHE735-.LEHB735
	.uleb128 .L4118-.LFB3110
	.uleb128 0
	.uleb128 .LEHB736-.LFB3110
	.uleb128 .LEHE736-.LEHB736
	.uleb128 .L4119-.LFB3110
	.uleb128 0
	.uleb128 .LEHB737-.LFB3110
	.uleb128 .LEHE737-.LEHB737
	.uleb128 0
	.uleb128 0
.LLSDACSE3110:
	.section	.text._Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E,comdat
	.size	_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E, .-_Z18create_method_bindI6ObjectbRK6StringEP10MethodBindMT_KFT0_T1_E
	.section	.text._Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E,comdat
	.weak	_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E
	.type	_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E, @function
_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E:
.LFB3111:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3111
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB738:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind2IRK6StringRK7VariantEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57050
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57051
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movq	%rax, -24(%rbp)	# D.57051, a
# ./core/method_bind.gen.inc:1555: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1556: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE738:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB739:
	call	_ZN10StringNameC1ERK6String	#
.LEHE739:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB740:
	call	_ZN10StringNameaSERKS_	#
.LEHE740:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1558: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4128	#
.L4127:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4125	#
.L4126:
	movq	%rax, %rbx	#, tmp104
.L4125:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62188
	movq	%rax, %rdi	# D.62188,
.LEHB741:
	call	_Unwind_Resume	#
.LEHE741:
.L4128:
# ./core/method_bind.gen.inc:1559: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3111:
	.section	.gcc_except_table
.LLSDA3111:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3111-.LLSDACSB3111
.LLSDACSB3111:
	.uleb128 .LEHB738-.LFB3111
	.uleb128 .LEHE738-.LEHB738
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB739-.LFB3111
	.uleb128 .LEHE739-.LEHB739
	.uleb128 .L4126-.LFB3111
	.uleb128 0
	.uleb128 .LEHB740-.LFB3111
	.uleb128 .LEHE740-.LEHB740
	.uleb128 .L4127-.LFB3111
	.uleb128 0
	.uleb128 .LEHB741-.LFB3111
	.uleb128 .LEHE741-.LEHB741
	.uleb128 0
	.uleb128 0
.LLSDACSE3111:
	.section	.text._Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E,comdat
	.size	_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E, .-_Z18create_method_bindI6ObjectRK6StringRK7VariantEP10MethodBindMT_FvT0_T1_E
	.section	.text._Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E,comdat
	.weak	_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E
	.type	_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E, @function
_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E:
.LFB3112:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3112
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB742:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind1RCI7VariantRK6StringEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57056
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57057
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movq	%rax, -24(%rbp)	# D.57057, a
# ./core/method_bind.gen.inc:1365: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1366: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE742:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB743:
	call	_ZN10StringNameC1ERK6String	#
.LEHE743:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB744:
	call	_ZN10StringNameaSERKS_	#
.LEHE744:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1368: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4136	#
.L4135:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4133	#
.L4134:
	movq	%rax, %rbx	#, tmp104
.L4133:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62190
	movq	%rax, %rdi	# D.62190,
.LEHB745:
	call	_Unwind_Resume	#
.LEHE745:
.L4136:
# ./core/method_bind.gen.inc:1369: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3112:
	.section	.gcc_except_table
.LLSDA3112:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3112-.LLSDACSB3112
.LLSDACSB3112:
	.uleb128 .LEHB742-.LFB3112
	.uleb128 .LEHE742-.LEHB742
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB743-.LFB3112
	.uleb128 .LEHE743-.LEHB743
	.uleb128 .L4134-.LFB3112
	.uleb128 0
	.uleb128 .LEHB744-.LFB3112
	.uleb128 .LEHE744-.LEHB744
	.uleb128 .L4135-.LFB3112
	.uleb128 0
	.uleb128 .LEHB745-.LFB3112
	.uleb128 .LEHE745-.LEHB745
	.uleb128 0
	.uleb128 0
.LLSDACSE3112:
	.section	.text._Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E,comdat
	.size	_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E, .-_Z18create_method_bindI6Object7VariantRK6StringEP10MethodBindMT_KFT0_T1_E
	.section	.text._Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E,comdat
	.weak	_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E
	.type	_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E, @function
_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E:
.LFB3113:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3113
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB746:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind2IRK8NodePathRK7VariantEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57062
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57063
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movq	%rax, -24(%rbp)	# D.57063, a
# ./core/method_bind.gen.inc:1555: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1556: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE746:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB747:
	call	_ZN10StringNameC1ERK6String	#
.LEHE747:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB748:
	call	_ZN10StringNameaSERKS_	#
.LEHE748:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1558: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4144	#
.L4143:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4141	#
.L4142:
	movq	%rax, %rbx	#, tmp104
.L4141:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62192
	movq	%rax, %rdi	# D.62192,
.LEHB749:
	call	_Unwind_Resume	#
.LEHE749:
.L4144:
# ./core/method_bind.gen.inc:1559: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3113:
	.section	.gcc_except_table
.LLSDA3113:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3113-.LLSDACSB3113
.LLSDACSB3113:
	.uleb128 .LEHB746-.LFB3113
	.uleb128 .LEHE746-.LEHB746
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB747-.LFB3113
	.uleb128 .LEHE747-.LEHB747
	.uleb128 .L4142-.LFB3113
	.uleb128 0
	.uleb128 .LEHB748-.LFB3113
	.uleb128 .LEHE748-.LEHB748
	.uleb128 .L4143-.LFB3113
	.uleb128 0
	.uleb128 .LEHB749-.LFB3113
	.uleb128 .LEHE749-.LEHB749
	.uleb128 0
	.uleb128 0
.LLSDACSE3113:
	.section	.text._Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E,comdat
	.size	_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E, .-_Z18create_method_bindI6ObjectRK8NodePathRK7VariantEP10MethodBindMT_FvT0_T1_E
	.section	.text._Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E,comdat
	.weak	_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E
	.type	_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E, @function
_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E:
.LFB3114:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3114
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB750:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind1RCI7VariantRK8NodePathEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57068
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57069
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movq	%rax, -24(%rbp)	# D.57069, a
# ./core/method_bind.gen.inc:1365: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1366: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE750:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB751:
	call	_ZN10StringNameC1ERK6String	#
.LEHE751:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB752:
	call	_ZN10StringNameaSERKS_	#
.LEHE752:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1368: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4152	#
.L4151:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4149	#
.L4150:
	movq	%rax, %rbx	#, tmp104
.L4149:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62194
	movq	%rax, %rdi	# D.62194,
.LEHB753:
	call	_Unwind_Resume	#
.LEHE753:
.L4152:
# ./core/method_bind.gen.inc:1369: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3114:
	.section	.gcc_except_table
.LLSDA3114:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3114-.LLSDACSB3114
.LLSDACSB3114:
	.uleb128 .LEHB750-.LFB3114
	.uleb128 .LEHE750-.LEHB750
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB751-.LFB3114
	.uleb128 .LEHE751-.LEHB751
	.uleb128 .L4150-.LFB3114
	.uleb128 0
	.uleb128 .LEHB752-.LFB3114
	.uleb128 .LEHE752-.LEHB752
	.uleb128 .L4151-.LFB3114
	.uleb128 0
	.uleb128 .LEHB753-.LFB3114
	.uleb128 .LEHE753-.LEHB753
	.uleb128 0
	.uleb128 0
.LLSDACSE3114:
	.section	.text._Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E,comdat
	.size	_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E, .-_Z18create_method_bindI6Object7VariantRK8NodePathEP10MethodBindMT_KFT0_T1_E
	.section	.text._Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE,comdat
	.weak	_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE
	.type	_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE, @function
_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE:
.LFB3115:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3115
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB754:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind0RCI5ArrayEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57074
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57075
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movq	%rax, -24(%rbp)	# D.57075, a
# ./core/method_bind.gen.inc:625: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:626: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE754:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB755:
	call	_ZN10StringNameC1ERK6String	#
.LEHE755:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB756:
	call	_ZN10StringNameaSERKS_	#
.LEHE756:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:628: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4160	#
.L4159:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4157	#
.L4158:
	movq	%rax, %rbx	#, tmp104
.L4157:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62196
	movq	%rax, %rdi	# D.62196,
.LEHB757:
	call	_Unwind_Resume	#
.LEHE757:
.L4160:
# ./core/method_bind.gen.inc:629: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3115:
	.section	.gcc_except_table
.LLSDA3115:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3115-.LLSDACSB3115
.LLSDACSB3115:
	.uleb128 .LEHB754-.LFB3115
	.uleb128 .LEHE754-.LEHB754
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB755-.LFB3115
	.uleb128 .LEHE755-.LEHB755
	.uleb128 .L4158-.LFB3115
	.uleb128 0
	.uleb128 .LEHB756-.LFB3115
	.uleb128 .LEHE756-.LEHB756
	.uleb128 .L4159-.LFB3115
	.uleb128 0
	.uleb128 .LEHB757-.LFB3115
	.uleb128 .LEHE757-.LEHB757
	.uleb128 0
	.uleb128 0
.LLSDACSE3115:
	.section	.text._Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE,comdat
	.size	_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE, .-_Z18create_method_bindI6Object5ArrayEP10MethodBindMT_KFT0_vE
	.section	.text._Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E,comdat
	.weak	_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E
	.type	_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E, @function
_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E:
.LFB3116:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3116
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB758:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind2IibEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57080
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57081
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movq	%rax, -24(%rbp)	# D.57081, a
# ./core/method_bind.gen.inc:1555: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1556: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE758:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB759:
	call	_ZN10StringNameC1ERK6String	#
.LEHE759:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB760:
	call	_ZN10StringNameaSERKS_	#
.LEHE760:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1558: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4168	#
.L4167:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4165	#
.L4166:
	movq	%rax, %rbx	#, tmp104
.L4165:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62198
	movq	%rax, %rdi	# D.62198,
.LEHB761:
	call	_Unwind_Resume	#
.LEHE761:
.L4168:
# ./core/method_bind.gen.inc:1559: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3116:
	.section	.gcc_except_table
.LLSDA3116:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3116-.LLSDACSB3116
.LLSDACSB3116:
	.uleb128 .LEHB758-.LFB3116
	.uleb128 .LEHE758-.LEHB758
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB759-.LFB3116
	.uleb128 .LEHE759-.LEHB759
	.uleb128 .L4166-.LFB3116
	.uleb128 0
	.uleb128 .LEHB760-.LFB3116
	.uleb128 .LEHE760-.LEHB760
	.uleb128 .L4167-.LFB3116
	.uleb128 0
	.uleb128 .LEHB761-.LFB3116
	.uleb128 .LEHE761-.LEHB761
	.uleb128 0
	.uleb128 0
.LLSDACSE3116:
	.section	.text._Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E,comdat
	.size	_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E, .-_Z18create_method_bindI6ObjectibEP10MethodBindMT_FvT0_T1_E
	.section	.text._Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE,"axG",@progbits,_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE,comdat
	.weak	_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE
	.type	_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE, @function
_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE:
.LFB3117:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3117
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:263: 	MethodBind0R <  R   > * a = memnew( (MethodBind0R < R   >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB762:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN12MethodBind0RI6StringEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57086
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57087
# ./core/method_bind.gen.inc:263: 	MethodBind0R <  R   > * a = memnew( (MethodBind0R < R   >) );
	movq	%rax, -24(%rbp)	# D.57087, a
# ./core/method_bind.gen.inc:269: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:270: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:271: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE762:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB763:
	call	_ZN10StringNameC1ERK6String	#
.LEHE763:
# ./core/method_bind.gen.inc:271: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB764:
	call	_ZN10StringNameaSERKS_	#
.LEHE764:
# ./core/method_bind.gen.inc:271: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:272: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4176	#
.L4175:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:271: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4173	#
.L4174:
	movq	%rax, %rbx	#, tmp104
.L4173:
# ./core/method_bind.gen.inc:271: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62200
	movq	%rax, %rdi	# D.62200,
.LEHB765:
	call	_Unwind_Resume	#
.LEHE765:
.L4176:
# ./core/method_bind.gen.inc:273: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3117:
	.section	.gcc_except_table
.LLSDA3117:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3117-.LLSDACSB3117
.LLSDACSB3117:
	.uleb128 .LEHB762-.LFB3117
	.uleb128 .LEHE762-.LEHB762
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB763-.LFB3117
	.uleb128 .LEHE763-.LEHB763
	.uleb128 .L4174-.LFB3117
	.uleb128 0
	.uleb128 .LEHB764-.LFB3117
	.uleb128 .LEHE764-.LEHB764
	.uleb128 .L4175-.LFB3117
	.uleb128 0
	.uleb128 .LEHB765-.LFB3117
	.uleb128 .LEHE765-.LEHB765
	.uleb128 0
	.uleb128 0
.LLSDACSE3117:
	.section	.text._Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE,"axG",@progbits,_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE,comdat
	.size	_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE, .-_Z18create_method_bindI6Object6StringEP10MethodBindMT_FT0_vE
	.section	.text._Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE,comdat
	.weak	_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE
	.type	_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE, @function
_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE:
.LFB3118:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3118
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB766:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind0RCImEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57092
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57093
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movq	%rax, -24(%rbp)	# D.57093, a
# ./core/method_bind.gen.inc:625: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:626: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE766:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB767:
	call	_ZN10StringNameC1ERK6String	#
.LEHE767:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB768:
	call	_ZN10StringNameaSERKS_	#
.LEHE768:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:628: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4184	#
.L4183:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4181	#
.L4182:
	movq	%rax, %rbx	#, tmp104
.L4181:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62202
	movq	%rax, %rdi	# D.62202,
.LEHB769:
	call	_Unwind_Resume	#
.LEHE769:
.L4184:
# ./core/method_bind.gen.inc:629: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3118:
	.section	.gcc_except_table
.LLSDA3118:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3118-.LLSDACSB3118
.LLSDACSB3118:
	.uleb128 .LEHB766-.LFB3118
	.uleb128 .LEHE766-.LEHB766
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB767-.LFB3118
	.uleb128 .LEHE767-.LEHB767
	.uleb128 .L4182-.LFB3118
	.uleb128 0
	.uleb128 .LEHB768-.LFB3118
	.uleb128 .LEHE768-.LEHB768
	.uleb128 .L4183-.LFB3118
	.uleb128 0
	.uleb128 .LEHB769-.LFB3118
	.uleb128 .LEHE769-.LEHB769
	.uleb128 0
	.uleb128 0
.LLSDACSE3118:
	.section	.text._Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE,comdat
	.size	_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE, .-_Z18create_method_bindI6ObjectmEP10MethodBindMT_KFT0_vE
	.section	.text._Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E,comdat
	.weak	_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E
	.type	_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E, @function
_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E:
.LFB3119:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3119
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:801: 	MethodBind1 <    P1 > * a = memnew( (MethodBind1 <   P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB770:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind1IRK6RefPtrEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57098
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57099
# ./core/method_bind.gen.inc:801: 	MethodBind1 <    P1 > * a = memnew( (MethodBind1 <   P1 >) );
	movq	%rax, -24(%rbp)	# D.57099, a
# ./core/method_bind.gen.inc:807: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:808: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE770:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB771:
	call	_ZN10StringNameC1ERK6String	#
.LEHE771:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB772:
	call	_ZN10StringNameaSERKS_	#
.LEHE772:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:810: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4192	#
.L4191:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4189	#
.L4190:
	movq	%rax, %rbx	#, tmp104
.L4189:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62204
	movq	%rax, %rdi	# D.62204,
.LEHB773:
	call	_Unwind_Resume	#
.LEHE773:
.L4192:
# ./core/method_bind.gen.inc:811: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3119:
	.section	.gcc_except_table
.LLSDA3119:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3119-.LLSDACSB3119
.LLSDACSB3119:
	.uleb128 .LEHB770-.LFB3119
	.uleb128 .LEHE770-.LEHB770
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB771-.LFB3119
	.uleb128 .LEHE771-.LEHB771
	.uleb128 .L4190-.LFB3119
	.uleb128 0
	.uleb128 .LEHB772-.LFB3119
	.uleb128 .LEHE772-.LEHB772
	.uleb128 .L4191-.LFB3119
	.uleb128 0
	.uleb128 .LEHB773-.LFB3119
	.uleb128 .LEHE773-.LEHB773
	.uleb128 0
	.uleb128 0
.LLSDACSE3119:
	.section	.text._Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E,comdat
	.size	_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E, .-_Z18create_method_bindI6ObjectRK6RefPtrEP10MethodBindMT_FvT0_E
	.section	.text._Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE,comdat
	.weak	_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE
	.type	_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE, @function
_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE:
.LFB3120:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3120
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB774:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind0RCI6RefPtrEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57104
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57105
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movq	%rax, -24(%rbp)	# D.57105, a
# ./core/method_bind.gen.inc:625: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:626: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE774:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB775:
	call	_ZN10StringNameC1ERK6String	#
.LEHE775:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB776:
	call	_ZN10StringNameaSERKS_	#
.LEHE776:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:628: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4200	#
.L4199:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4197	#
.L4198:
	movq	%rax, %rbx	#, tmp104
.L4197:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62206
	movq	%rax, %rdi	# D.62206,
.LEHB777:
	call	_Unwind_Resume	#
.LEHE777:
.L4200:
# ./core/method_bind.gen.inc:629: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3120:
	.section	.gcc_except_table
.LLSDA3120:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3120-.LLSDACSB3120
.LLSDACSB3120:
	.uleb128 .LEHB774-.LFB3120
	.uleb128 .LEHE774-.LEHB774
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB775-.LFB3120
	.uleb128 .LEHE775-.LEHB775
	.uleb128 .L4198-.LFB3120
	.uleb128 0
	.uleb128 .LEHB776-.LFB3120
	.uleb128 .LEHE776-.LEHB776
	.uleb128 .L4199-.LFB3120
	.uleb128 0
	.uleb128 .LEHB777-.LFB3120
	.uleb128 .LEHE777-.LEHB777
	.uleb128 0
	.uleb128 0
.LLSDACSE3120:
	.section	.text._Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE,comdat
	.size	_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE, .-_Z18create_method_bindI6Object6RefPtrEP10MethodBindMT_KFT0_vE
	.section	.text._Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E,comdat
	.weak	_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E
	.type	_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E, @function
_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E:
.LFB3121:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3121
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:801: 	MethodBind1 <    P1 > * a = memnew( (MethodBind1 <   P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB778:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind1IRK6StringEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57110
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57111
# ./core/method_bind.gen.inc:801: 	MethodBind1 <    P1 > * a = memnew( (MethodBind1 <   P1 >) );
	movq	%rax, -24(%rbp)	# D.57111, a
# ./core/method_bind.gen.inc:807: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:808: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE778:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB779:
	call	_ZN10StringNameC1ERK6String	#
.LEHE779:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB780:
	call	_ZN10StringNameaSERKS_	#
.LEHE780:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:810: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4208	#
.L4207:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4205	#
.L4206:
	movq	%rax, %rbx	#, tmp104
.L4205:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62208
	movq	%rax, %rdi	# D.62208,
.LEHB781:
	call	_Unwind_Resume	#
.LEHE781:
.L4208:
# ./core/method_bind.gen.inc:811: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3121:
	.section	.gcc_except_table
.LLSDA3121:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3121-.LLSDACSB3121
.LLSDACSB3121:
	.uleb128 .LEHB778-.LFB3121
	.uleb128 .LEHE778-.LEHB778
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB779-.LFB3121
	.uleb128 .LEHE779-.LEHB779
	.uleb128 .L4206-.LFB3121
	.uleb128 0
	.uleb128 .LEHB780-.LFB3121
	.uleb128 .LEHE780-.LEHB780
	.uleb128 .L4207-.LFB3121
	.uleb128 0
	.uleb128 .LEHB781-.LFB3121
	.uleb128 .LEHE781-.LEHB781
	.uleb128 0
	.uleb128 0
.LLSDACSE3121:
	.section	.text._Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E,comdat
	.size	_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E, .-_Z18create_method_bindI6ObjectRK6StringEP10MethodBindMT_FvT0_E
	.section	.text._Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE,comdat
	.weak	_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE
	.type	_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE, @function
_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE:
.LFB3122:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3122
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB782:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind0RCI10PoolVectorI6StringEEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57116
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57117
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movq	%rax, -24(%rbp)	# D.57117, a
# ./core/method_bind.gen.inc:625: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:626: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE782:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB783:
	call	_ZN10StringNameC1ERK6String	#
.LEHE783:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB784:
	call	_ZN10StringNameaSERKS_	#
.LEHE784:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:628: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4216	#
.L4215:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4213	#
.L4214:
	movq	%rax, %rbx	#, tmp104
.L4213:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62210
	movq	%rax, %rdi	# D.62210,
.LEHB785:
	call	_Unwind_Resume	#
.LEHE785:
.L4216:
# ./core/method_bind.gen.inc:629: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3122:
	.section	.gcc_except_table
.LLSDA3122:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3122-.LLSDACSB3122
.LLSDACSB3122:
	.uleb128 .LEHB782-.LFB3122
	.uleb128 .LEHE782-.LEHB782
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB783-.LFB3122
	.uleb128 .LEHE783-.LEHB783
	.uleb128 .L4214-.LFB3122
	.uleb128 0
	.uleb128 .LEHB784-.LFB3122
	.uleb128 .LEHE784-.LEHB784
	.uleb128 .L4215-.LFB3122
	.uleb128 0
	.uleb128 .LEHB785-.LFB3122
	.uleb128 .LEHE785-.LEHB785
	.uleb128 0
	.uleb128 0
.LLSDACSE3122:
	.section	.text._Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE,comdat
	.size	_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE, .-_Z18create_method_bindI6Object10PoolVectorI6StringEEP10MethodBindMT_KFT0_vE
	.section	.text._Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E,comdat
	.weak	_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E
	.type	_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E, @function
_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E:
.LFB3123:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3123
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB786:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind2IRK6StringRK5ArrayEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57122
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57123
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movq	%rax, -24(%rbp)	# D.57123, a
# ./core/method_bind.gen.inc:1555: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1556: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE786:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB787:
	call	_ZN10StringNameC1ERK6String	#
.LEHE787:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB788:
	call	_ZN10StringNameaSERKS_	#
.LEHE788:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1558: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4224	#
.L4223:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4221	#
.L4222:
	movq	%rax, %rbx	#, tmp104
.L4221:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62212
	movq	%rax, %rdi	# D.62212,
.LEHB789:
	call	_Unwind_Resume	#
.LEHE789:
.L4224:
# ./core/method_bind.gen.inc:1559: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3123:
	.section	.gcc_except_table
.LLSDA3123:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3123-.LLSDACSB3123
.LLSDACSB3123:
	.uleb128 .LEHB786-.LFB3123
	.uleb128 .LEHE786-.LEHB786
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB787-.LFB3123
	.uleb128 .LEHE787-.LEHB787
	.uleb128 .L4222-.LFB3123
	.uleb128 0
	.uleb128 .LEHB788-.LFB3123
	.uleb128 .LEHE788-.LEHB788
	.uleb128 .L4223-.LFB3123
	.uleb128 0
	.uleb128 .LEHB789-.LFB3123
	.uleb128 .LEHE789-.LEHB789
	.uleb128 0
	.uleb128 0
.LLSDACSE3123:
	.section	.text._Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E,comdat
	.size	_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E, .-_Z18create_method_bindI6ObjectRK6StringRK5ArrayEP10MethodBindMT_FvT0_T1_E
	.section	.text._Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E,comdat
	.weak	_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E
	.type	_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E, @function
_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E:
.LFB3124:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3124
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB790:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind1RCIbRK10StringNameEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57128
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57129
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movq	%rax, -24(%rbp)	# D.57129, a
# ./core/method_bind.gen.inc:1365: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1366: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE790:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB791:
	call	_ZN10StringNameC1ERK6String	#
.LEHE791:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB792:
	call	_ZN10StringNameaSERKS_	#
.LEHE792:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1368: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4232	#
.L4231:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4229	#
.L4230:
	movq	%rax, %rbx	#, tmp104
.L4229:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62214
	movq	%rax, %rdi	# D.62214,
.LEHB793:
	call	_Unwind_Resume	#
.LEHE793:
.L4232:
# ./core/method_bind.gen.inc:1369: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3124:
	.section	.gcc_except_table
.LLSDA3124:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3124-.LLSDACSB3124
.LLSDACSB3124:
	.uleb128 .LEHB790-.LFB3124
	.uleb128 .LEHE790-.LEHB790
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB791-.LFB3124
	.uleb128 .LEHE791-.LEHB791
	.uleb128 .L4230-.LFB3124
	.uleb128 0
	.uleb128 .LEHB792-.LFB3124
	.uleb128 .LEHE792-.LEHB792
	.uleb128 .L4231-.LFB3124
	.uleb128 0
	.uleb128 .LEHB793-.LFB3124
	.uleb128 .LEHE793-.LEHB793
	.uleb128 0
	.uleb128 0
.LLSDACSE3124:
	.section	.text._Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E,comdat
	.size	_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E, .-_Z18create_method_bindI6ObjectbRK10StringNameEP10MethodBindMT_KFT0_T1_E
	.section	.text._Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo,"axG",@progbits,_Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo,comdat
	.weak	_Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo
	.type	_Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo, @function
_Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo:
.LFB3125:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rcx	# p_method, tmp87
	movq	%rsi, %rax	# p_method, tmp88
	movq	%rax, %rbx	# tmp88,
	movq	%rcx, -64(%rbp)	# tmp86, p_method
	movq	%rbx, -56(%rbp)	#, p_method
	movq	%rdx, -72(%rbp)	# p_info, p_info
# ./core/method_bind.h:396: 	MethodBindVarArg<T> *a = memnew((MethodBindVarArg<T>));
	movl	$.LC27, %esi	#,
	movl	$72, %edi	#,
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _3
	movq	%rbx, %rdi	# _3,
	call	_ZN16MethodBindVarArgI6ObjectEC1Ev	#
	movq	%rbx, -32(%rbp)	# _3, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp89
	movq	%rax, -40(%rbp)	# tmp89, D.58094
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.58095
# ./core/method_bind.h:396: 	MethodBindVarArg<T> *a = memnew((MethodBindVarArg<T>));
	movq	%rax, -24(%rbp)	# D.58095, a
# ./core/method_bind.h:397: 	a->set_method(p_method);
	movq	-64(%rbp), %rcx	# p_method, tmp90
	movq	-56(%rbp), %rdx	# p_method, tmp91
	movq	-24(%rbp), %rax	# a, tmp92
	movq	%rcx, %rsi	# tmp90,
	movq	%rax, %rdi	# tmp92,
	call	_ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE	#
# ./core/method_bind.h:398: 	a->set_method_info(p_info);
	movq	-72(%rbp), %rdx	# p_info, tmp93
	movq	-24(%rbp), %rax	# a, tmp94
	movq	%rdx, %rsi	# tmp93,
	movq	%rax, %rdi	# tmp94,
	call	_ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo	#
# ./core/method_bind.h:399: 	return a;
	movq	-24(%rbp), %rax	# a, _10
# ./core/method_bind.h:400: }
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3125:
	.size	_Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo, .-_Z25create_vararg_method_bindI6ObjectEP10MethodBindMT_F7VariantPPKS4_iRNS4_9CallErrorEERK10MethodInfo
	.section	.text._Z9memdeleteI10MethodBindEvPT_,"axG",@progbits,_Z9memdeleteI10MethodBindEvPT_,comdat
	.weak	_Z9memdeleteI10MethodBindEvPT_
	.type	_Z9memdeleteI10MethodBindEvPT_, @function
_Z9memdeleteI10MethodBindEvPT_:
.LFB3127:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp87
	movq	%rax, -8(%rbp)	# tmp87, D.55633
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55634
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.347_8
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.347_8
	jne	.L4240	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp88
	movq	(%rax), %rax	# p_class_7(D)->_vptr.MethodBind, _2
	addq	$24, %rax	#, _3
	movq	(%rax), %rdx	# *_3, _4
	movq	-24(%rbp), %rax	# p_class, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _4
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-24(%rbp), %rax	# p_class, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4236	#
.L4240:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L4236:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3127:
	.size	_Z9memdeleteI10MethodBindEvPT_, .-_Z9memdeleteI10MethodBindEvPT_
	.section	.text._ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_,"axG",@progbits,_ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_,comdat
	.align 2
	.weak	_ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_
	.type	_ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_, @function
_ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_:
.LFB3128:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_key, p_key
	movq	-88(%rbp), %rax	# this, tmp106
	movq	%rax, -8(%rbp)	# tmp106, this
	movq	-96(%rbp), %rax	# p_key, tmp107
	movq	%rax, -16(%rbp)	# tmp107, p_key
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	movq	-8(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_7->hash_table, _9
	testq	%rax, %rax	# _9
	sete	%al	#, _10
	movzbl	%al, %eax	# _10, _11
# ./core/hash_map.h:334: 		if (unlikely(!hash_table))
	testq	%rax, %rax	# _12
	je	.L4242	#,
# ./core/hash_map.h:335: 			return NULL;
	movl	$0, %eax	#, D.57198
	jmp	.L4243	#
.L4242:
	movq	-8(%rbp), %rax	# this, tmp109
	movq	%rax, -24(%rbp)	# tmp109, this
	movq	-16(%rbp), %rax	# p_key, tmp110
	movq	%rax, -32(%rbp)	# tmp110, p_key
	movq	-32(%rbp), %rax	# p_key, tmp111
	movq	%rax, -40(%rbp)	# tmp111, p_string_name
	movq	-40(%rbp), %rax	# p_string_name, tmp112
	movq	%rax, -48(%rbp)	# tmp112, this
# ./core/string_name.h:112: 		if (_data)
	movq	-48(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_17->_data, _18
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _18
	je	.L4244	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-48(%rbp), %rax	# this, tmp114
	movq	(%rax), %rax	# this_17->_data, _19
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _19->hash, _20
	jmp	.L4245	#
.L4244:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _20
.L4245:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -52(%rbp)	# _20, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-24(%rbp), %rax	# this, tmp115
	movzbl	8(%rax), %eax	# this_14->hash_table_power, _27
	movzbl	%al, %eax	# _27, _28
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp116
	movl	%eax, %ecx	# _28, tmp129
	sall	%cl, %edx	# tmp129, tmp116
	movl	%edx, %eax	# tmp116, _29
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _30
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-52(%rbp), %eax	# hash, tmp118
	movl	%eax, -56(%rbp)	# tmp118, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-24(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_14->hash_table, _33
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-56(%rbp), %edx	# index, _34
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _35
	addq	%rdx, %rax	# _35, _36
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_36, tmp120
	movq	%rax, -64(%rbp)	# tmp120, e
.L4252:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -64(%rbp)	#, e
	je	.L4247	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# e, tmp121
	movl	(%rax), %eax	# e_38->hash, _39
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -52(%rbp)	# _39, hash
	jne	.L4248	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-64(%rbp), %rax	# e, tmp122
	leaq	16(%rax), %rdx	#, _40
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-32(%rbp), %rax	# p_key, tmp123
	movq	%rax, %rsi	# tmp123,
	movq	%rdx, %rdi	# _40,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _41
	je	.L4248	#,
	movl	$1, %eax	#, iftmp.346_42
	jmp	.L4249	#
.L4248:
	movl	$0, %eax	#, iftmp.346_42
.L4249:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.346_42
	je	.L4250	#,
# ./core/hash_map.h:198: 				return e;
	movq	-64(%rbp), %rax	# e, _46
	jmp	.L4251	#
.L4250:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-64(%rbp), %rax	# e, tmp124
	movq	8(%rax), %rax	# e_38->next, tmp125
	movq	%rax, -64(%rbp)	# tmp125, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L4252	#
.L4247:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, _46
.L4251:
# ./core/hash_map.h:337: 		const Element *e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -72(%rbp)	# _46, e
# ./core/hash_map.h:339: 		if (e)
	cmpq	$0, -72(%rbp)	#, e
	je	.L4253	#,
# ./core/hash_map.h:340: 			return &e->pair.data;
	movq	-72(%rbp), %rax	# e, tmp126
	addq	$24, %rax	#, D.57198
	jmp	.L4243	#
.L4253:
# ./core/hash_map.h:342: 		return NULL;
	movl	$0, %eax	#, D.57198
.L4243:
# ./core/hash_map.h:291: 		return getptr(p_key) != NULL;
	testq	%rax, %rax	# D.57198
	setne	%al	#, _6
# ./core/hash_map.h:292: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3128:
	.size	_ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_, .-_ZNK7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE3hasERKS0_
	.section	.text._ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_,"axG",@progbits,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_
	.type	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_, @function
_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_:
.LFB3129:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_key, p_key
# ./core/hash_map.h:452: 		Element *e = NULL;
	movq	$0, -8(%rbp)	#, e
# ./core/hash_map.h:453: 		if (!hash_table)
	movq	-72(%rbp), %rax	# this, tmp106
	movq	(%rax), %rax	# this_11(D)->hash_table, _1
# ./core/hash_map.h:453: 		if (!hash_table)
	testq	%rax, %rax	# _1
	jne	.L4256	#,
# ./core/hash_map.h:454: 			make_hash_table(); // if no table, make one
	movq	-72(%rbp), %rax	# this, tmp107
	movq	%rax, %rdi	# tmp107,
	call	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv	#
	jmp	.L4257	#
.L4256:
	movq	-72(%rbp), %rax	# this, tmp108
	movq	%rax, -16(%rbp)	# tmp108, this
	movq	-80(%rbp), %rax	# p_key, tmp109
	movq	%rax, -24(%rbp)	# tmp109, p_key
	movq	-24(%rbp), %rax	# p_key, tmp110
	movq	%rax, -32(%rbp)	# tmp110, p_string_name
	movq	-32(%rbp), %rax	# p_string_name, tmp111
	movq	%rax, -40(%rbp)	# tmp111, this
# ./core/string_name.h:112: 		if (_data)
	movq	-40(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_25->_data, _26
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _26
	je	.L4258	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-40(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_25->_data, _27
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _27->hash, _28
	jmp	.L4259	#
.L4258:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, _28
.L4259:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:187: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -44(%rbp)	# _28, hash
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-16(%rbp), %rax	# this, tmp114
	movzbl	8(%rax), %eax	# this_22->hash_table_power, _35
	movzbl	%al, %eax	# _35, _36
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp115
	movl	%eax, %ecx	# _36, tmp131
	sall	%cl, %edx	# tmp131, tmp115
	movl	%edx, %eax	# tmp115, _37
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _38
# ./core/hash_map.h:188: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-44(%rbp), %eax	# hash, tmp117
	movl	%eax, -48(%rbp)	# tmp117, index
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	-16(%rbp), %rax	# this, tmp118
	movq	(%rax), %rax	# this_22->hash_table, _41
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movl	-48(%rbp), %edx	# index, _42
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	salq	$3, %rdx	#, _43
	addq	%rdx, %rax	# _43, _44
# ./core/hash_map.h:190: 		Element *e = hash_table[index];
	movq	(%rax), %rax	# *_44, tmp119
	movq	%rax, -56(%rbp)	# tmp119, e
.L4266:
# ./core/hash_map.h:192: 		while (e) {
	cmpq	$0, -56(%rbp)	#, e
	je	.L4261	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-56(%rbp), %rax	# e, tmp120
	movl	(%rax), %eax	# e_46->hash, _47
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	cmpl	%eax, -44(%rbp)	# _47, hash
	jne	.L4262	#,
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-56(%rbp), %rax	# e, tmp121
	leaq	16(%rax), %rdx	#, _48
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	movq	-24(%rbp), %rax	# p_key, tmp122
	movq	%rax, %rsi	# tmp122,
	movq	%rdx, %rdi	# _48,
	call	_ZN24HashMapComparatorDefaultI10StringNameE7compareERKS0_S3_	#
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# _49
	je	.L4262	#,
	movl	$1, %eax	#, iftmp.346_50
	jmp	.L4263	#
.L4262:
	movl	$0, %eax	#, iftmp.346_50
.L4263:
# ./core/hash_map.h:195: 			if (e->hash == hash && Comparator::compare(e->pair.key, p_key)) {
	testb	%al, %al	# iftmp.346_50
	je	.L4264	#,
# ./core/hash_map.h:198: 				return e;
	movq	-56(%rbp), %rax	# e, D.59559
	jmp	.L4265	#
.L4264:
# ./core/hash_map.h:201: 			e = e->next;
	movq	-56(%rbp), %rax	# e, tmp123
	movq	8(%rax), %rax	# e_46->next, tmp124
	movq	%rax, -56(%rbp)	# tmp124, e
# ./core/hash_map.h:192: 		while (e) {
	jmp	.L4266	#
.L4261:
# ./core/hash_map.h:204: 		return NULL;
	movl	$0, %eax	#, D.59559
.L4265:
# ./core/hash_map.h:456: 			e = const_cast<Element *>(get_element(p_key));
	movq	%rax, -8(%rbp)	# D.59559, e
.L4257:
# ./core/hash_map.h:459: 		if (!e) {
	cmpq	$0, -8(%rbp)	#, e
	jne	.L4267	#,
# ./core/hash_map.h:461: 			e = create_element(p_key);
	movq	-80(%rbp), %rdx	# p_key, tmp125
	movq	-72(%rbp), %rax	# this, tmp126
	movq	%rdx, %rsi	# tmp125,
	movq	%rax, %rdi	# tmp126,
	call	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_	#
	movq	%rax, -8(%rbp)	# _16, e
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	cmpq	$0, -8(%rbp)	#, e
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4268	#,
# ./core/hash_map.h:462: 			CRASH_COND(!e);
	movl	$0, %r8d	#,
	movl	$.LC122, %ecx	#,
	movl	$462, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC48, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	ud2	
.L4268:
# ./core/hash_map.h:463: 			check_hash_table(); // perform mantenience routine
	movq	-72(%rbp), %rax	# this, tmp127
	movq	%rax, %rdi	# tmp127,
	call	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv	#
.L4267:
# ./core/hash_map.h:466: 		return e->pair.data;
	movq	-8(%rbp), %rax	# e, tmp128
	addq	$24, %rax	#, _21
# ./core/hash_map.h:467: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3129:
	.size	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_, .-_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EEixERKS0_
	.section	.text._Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E,comdat
	.weak	_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E
	.type	_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E, @function
_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E:
.LFB3130:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3130
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB794:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind2IRK10StringNameRK7VariantEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57211
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57212
# ./core/method_bind.gen.inc:1549: 	MethodBind2 <    P1, P2 > * a = memnew( (MethodBind2 <   P1, P2 >) );
	movq	%rax, -24(%rbp)	# D.57212, a
# ./core/method_bind.gen.inc:1555: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1556: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE794:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB795:
	call	_ZN10StringNameC1ERK6String	#
.LEHE795:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB796:
	call	_ZN10StringNameaSERKS_	#
.LEHE796:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1558: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4277	#
.L4276:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4274	#
.L4275:
	movq	%rax, %rbx	#, tmp104
.L4274:
# ./core/method_bind.gen.inc:1557: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62216
	movq	%rax, %rdi	# D.62216,
.LEHB797:
	call	_Unwind_Resume	#
.LEHE797:
.L4277:
# ./core/method_bind.gen.inc:1559: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3130:
	.section	.gcc_except_table
.LLSDA3130:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3130-.LLSDACSB3130
.LLSDACSB3130:
	.uleb128 .LEHB794-.LFB3130
	.uleb128 .LEHE794-.LEHB794
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB795-.LFB3130
	.uleb128 .LEHE795-.LEHB795
	.uleb128 .L4275-.LFB3130
	.uleb128 0
	.uleb128 .LEHB796-.LFB3130
	.uleb128 .LEHE796-.LEHB796
	.uleb128 .L4276-.LFB3130
	.uleb128 0
	.uleb128 .LEHB797-.LFB3130
	.uleb128 .LEHE797-.LEHB797
	.uleb128 0
	.uleb128 0
.LLSDACSE3130:
	.section	.text._Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E,comdat
	.size	_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E, .-_Z18create_method_bindI6ObjectRK10StringNameRK7VariantEP10MethodBindMT_FvT0_T1_E
	.section	.text._Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E,"axG",@progbits,_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E,comdat
	.weak	_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E
	.type	_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E, @function
_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E:
.LFB3131:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3131
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1743: 	MethodBind2R <  R , P1, P2 > * a = memnew( (MethodBind2R < R , P1, P2 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB798:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57217
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57218
# ./core/method_bind.gen.inc:1743: 	MethodBind2R <  R , P1, P2 > * a = memnew( (MethodBind2R < R , P1, P2 >) );
	movq	%rax, -24(%rbp)	# D.57218, a
# ./core/method_bind.gen.inc:1749: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1750: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1751: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE798:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB799:
	call	_ZN10StringNameC1ERK6String	#
.LEHE799:
# ./core/method_bind.gen.inc:1751: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB800:
	call	_ZN10StringNameaSERKS_	#
.LEHE800:
# ./core/method_bind.gen.inc:1751: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1752: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4285	#
.L4284:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1751: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4282	#
.L4283:
	movq	%rax, %rbx	#, tmp104
.L4282:
# ./core/method_bind.gen.inc:1751: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62218
	movq	%rax, %rdi	# D.62218,
.LEHB801:
	call	_Unwind_Resume	#
.LEHE801:
.L4285:
# ./core/method_bind.gen.inc:1753: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3131:
	.section	.gcc_except_table
.LLSDA3131:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3131-.LLSDACSB3131
.LLSDACSB3131:
	.uleb128 .LEHB798-.LFB3131
	.uleb128 .LEHE798-.LEHB798
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB799-.LFB3131
	.uleb128 .LEHE799-.LEHB799
	.uleb128 .L4283-.LFB3131
	.uleb128 0
	.uleb128 .LEHB800-.LFB3131
	.uleb128 .LEHE800-.LEHB800
	.uleb128 .L4284-.LFB3131
	.uleb128 0
	.uleb128 .LEHB801-.LFB3131
	.uleb128 .LEHE801-.LEHB801
	.uleb128 0
	.uleb128 0
.LLSDACSE3131:
	.section	.text._Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E,"axG",@progbits,_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E,comdat
	.size	_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E, .-_Z18create_method_bindI6Object7VariantRK10StringNameRK5ArrayEP10MethodBindMT_FT0_T1_T2_E
	.section	.text._Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E,comdat
	.weak	_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E
	.type	_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E, @function
_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E:
.LFB3132:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3132
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB802:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind1RCI5ArrayRK6StringEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57223
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57224
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movq	%rax, -24(%rbp)	# D.57224, a
# ./core/method_bind.gen.inc:1365: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1366: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE802:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB803:
	call	_ZN10StringNameC1ERK6String	#
.LEHE803:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB804:
	call	_ZN10StringNameaSERKS_	#
.LEHE804:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1368: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4293	#
.L4292:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4290	#
.L4291:
	movq	%rax, %rbx	#, tmp104
.L4290:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62220
	movq	%rax, %rdi	# D.62220,
.LEHB805:
	call	_Unwind_Resume	#
.LEHE805:
.L4293:
# ./core/method_bind.gen.inc:1369: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3132:
	.section	.gcc_except_table
.LLSDA3132:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3132-.LLSDACSB3132
.LLSDACSB3132:
	.uleb128 .LEHB802-.LFB3132
	.uleb128 .LEHE802-.LEHB802
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB803-.LFB3132
	.uleb128 .LEHE803-.LEHB803
	.uleb128 .L4291-.LFB3132
	.uleb128 0
	.uleb128 .LEHB804-.LFB3132
	.uleb128 .LEHE804-.LEHB804
	.uleb128 .L4292-.LFB3132
	.uleb128 0
	.uleb128 .LEHB805-.LFB3132
	.uleb128 .LEHE805-.LEHB805
	.uleb128 0
	.uleb128 0
.LLSDACSE3132:
	.section	.text._Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E,comdat
	.size	_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E, .-_Z18create_method_bindI6Object5ArrayRK6StringEP10MethodBindMT_KFT0_T1_E
	.section	.text._Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E,"axG",@progbits,_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E,comdat
	.weak	_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E
	.type	_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E, @function
_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E:
.LFB3133:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3133
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:4203: 	MethodBind5R <  R , P1, P2, P3, P4, P5 > * a = memnew( (MethodBind5R < R , P1, P2, P3, P4, P5 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB806:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57229
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57230
# ./core/method_bind.gen.inc:4203: 	MethodBind5R <  R , P1, P2, P3, P4, P5 > * a = memnew( (MethodBind5R < R , P1, P2, P3, P4, P5 >) );
	movq	%rax, -24(%rbp)	# D.57230, a
# ./core/method_bind.gen.inc:4209: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:4210: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:4211: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE806:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB807:
	call	_ZN10StringNameC1ERK6String	#
.LEHE807:
# ./core/method_bind.gen.inc:4211: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB808:
	call	_ZN10StringNameaSERKS_	#
.LEHE808:
# ./core/method_bind.gen.inc:4211: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:4212: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4301	#
.L4300:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:4211: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4298	#
.L4299:
	movq	%rax, %rbx	#, tmp104
.L4298:
# ./core/method_bind.gen.inc:4211: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62222
	movq	%rax, %rdi	# D.62222,
.LEHB809:
	call	_Unwind_Resume	#
.LEHE809:
.L4301:
# ./core/method_bind.gen.inc:4213: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3133:
	.section	.gcc_except_table
.LLSDA3133:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3133-.LLSDACSB3133
.LLSDACSB3133:
	.uleb128 .LEHB806-.LFB3133
	.uleb128 .LEHE806-.LEHB806
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB807-.LFB3133
	.uleb128 .LEHE807-.LEHB807
	.uleb128 .L4299-.LFB3133
	.uleb128 0
	.uleb128 .LEHB808-.LFB3133
	.uleb128 .LEHE808-.LEHB808
	.uleb128 .L4300-.LFB3133
	.uleb128 0
	.uleb128 .LEHB809-.LFB3133
	.uleb128 .LEHE809-.LEHB809
	.uleb128 0
	.uleb128 0
.LLSDACSE3133:
	.section	.text._Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E,"axG",@progbits,_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E,comdat
	.size	_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E, .-_Z18create_method_bindI6Object5ErrorRK10StringNamePS0_S4_RK6VectorI7VariantEjEP10MethodBindMT_FT0_T1_T2_T3_T4_T5_E
	.section	.text._Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E,comdat
	.weak	_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E
	.type	_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E, @function
_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E:
.LFB3134:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3134
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:2329: 	MethodBind3 <    P1, P2, P3 > * a = memnew( (MethodBind3 <   P1, P2, P3 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB810:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57235
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57236
# ./core/method_bind.gen.inc:2329: 	MethodBind3 <    P1, P2, P3 > * a = memnew( (MethodBind3 <   P1, P2, P3 >) );
	movq	%rax, -24(%rbp)	# D.57236, a
# ./core/method_bind.gen.inc:2335: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:2336: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:2337: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE810:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB811:
	call	_ZN10StringNameC1ERK6String	#
.LEHE811:
# ./core/method_bind.gen.inc:2337: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB812:
	call	_ZN10StringNameaSERKS_	#
.LEHE812:
# ./core/method_bind.gen.inc:2337: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:2338: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4309	#
.L4308:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:2337: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4306	#
.L4307:
	movq	%rax, %rbx	#, tmp104
.L4306:
# ./core/method_bind.gen.inc:2337: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62224
	movq	%rax, %rdi	# D.62224,
.LEHB813:
	call	_Unwind_Resume	#
.LEHE813:
.L4309:
# ./core/method_bind.gen.inc:2339: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3134:
	.section	.gcc_except_table
.LLSDA3134:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3134-.LLSDACSB3134
.LLSDACSB3134:
	.uleb128 .LEHB810-.LFB3134
	.uleb128 .LEHE810-.LEHB810
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB811-.LFB3134
	.uleb128 .LEHE811-.LEHB811
	.uleb128 .L4307-.LFB3134
	.uleb128 0
	.uleb128 .LEHB812-.LFB3134
	.uleb128 .LEHE812-.LEHB812
	.uleb128 .L4308-.LFB3134
	.uleb128 0
	.uleb128 .LEHB813-.LFB3134
	.uleb128 .LEHE813-.LEHB813
	.uleb128 0
	.uleb128 0
.LLSDACSE3134:
	.section	.text._Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E,"axG",@progbits,_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E,comdat
	.size	_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E, .-_Z18create_method_bindI6ObjectRK10StringNamePS0_S3_EP10MethodBindMT_FvT0_T1_T2_E
	.section	.text._Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E,"axG",@progbits,_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E,comdat
	.weak	_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E
	.type	_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E, @function
_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E:
.LFB3135:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3135
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:2935: 	MethodBind3RC <  R , P1, P2, P3 > * a = memnew( (MethodBind3RC < R , P1, P2, P3 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB814:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57241
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57242
# ./core/method_bind.gen.inc:2935: 	MethodBind3RC <  R , P1, P2, P3 > * a = memnew( (MethodBind3RC < R , P1, P2, P3 >) );
	movq	%rax, -24(%rbp)	# D.57242, a
# ./core/method_bind.gen.inc:2941: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:2942: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:2943: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE814:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB815:
	call	_ZN10StringNameC1ERK6String	#
.LEHE815:
# ./core/method_bind.gen.inc:2943: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB816:
	call	_ZN10StringNameaSERKS_	#
.LEHE816:
# ./core/method_bind.gen.inc:2943: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:2944: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4317	#
.L4316:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:2943: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4314	#
.L4315:
	movq	%rax, %rbx	#, tmp104
.L4314:
# ./core/method_bind.gen.inc:2943: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62226
	movq	%rax, %rdi	# D.62226,
.LEHB817:
	call	_Unwind_Resume	#
.LEHE817:
.L4317:
# ./core/method_bind.gen.inc:2945: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3135:
	.section	.gcc_except_table
.LLSDA3135:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3135-.LLSDACSB3135
.LLSDACSB3135:
	.uleb128 .LEHB814-.LFB3135
	.uleb128 .LEHE814-.LEHB814
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB815-.LFB3135
	.uleb128 .LEHE815-.LEHB815
	.uleb128 .L4315-.LFB3135
	.uleb128 0
	.uleb128 .LEHB816-.LFB3135
	.uleb128 .LEHE816-.LEHB816
	.uleb128 .L4316-.LFB3135
	.uleb128 0
	.uleb128 .LEHB817-.LFB3135
	.uleb128 .LEHE817-.LEHB817
	.uleb128 0
	.uleb128 0
.LLSDACSE3135:
	.section	.text._Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E,"axG",@progbits,_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E,comdat
	.size	_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E, .-_Z18create_method_bindI6ObjectbRK10StringNamePS0_S3_EP10MethodBindMT_KFT0_T1_T2_T3_E
	.section	.text._Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E,"axG",@progbits,_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E,comdat
	.weak	_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E
	.type	_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E, @function
_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E:
.LFB3136:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3136
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:801: 	MethodBind1 <    P1 > * a = memnew( (MethodBind1 <   P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB818:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind1IbEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57247
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57248
# ./core/method_bind.gen.inc:801: 	MethodBind1 <    P1 > * a = memnew( (MethodBind1 <   P1 >) );
	movq	%rax, -24(%rbp)	# D.57248, a
# ./core/method_bind.gen.inc:807: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:808: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE818:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB819:
	call	_ZN10StringNameC1ERK6String	#
.LEHE819:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB820:
	call	_ZN10StringNameaSERKS_	#
.LEHE820:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:810: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4325	#
.L4324:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4322	#
.L4323:
	movq	%rax, %rbx	#, tmp104
.L4322:
# ./core/method_bind.gen.inc:809: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62228
	movq	%rax, %rdi	# D.62228,
.LEHB821:
	call	_Unwind_Resume	#
.LEHE821:
.L4325:
# ./core/method_bind.gen.inc:811: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3136:
	.section	.gcc_except_table
.LLSDA3136:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3136-.LLSDACSB3136
.LLSDACSB3136:
	.uleb128 .LEHB818-.LFB3136
	.uleb128 .LEHE818-.LEHB818
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB819-.LFB3136
	.uleb128 .LEHE819-.LEHB819
	.uleb128 .L4323-.LFB3136
	.uleb128 0
	.uleb128 .LEHB820-.LFB3136
	.uleb128 .LEHE820-.LEHB820
	.uleb128 .L4324-.LFB3136
	.uleb128 0
	.uleb128 .LEHB821-.LFB3136
	.uleb128 .LEHE821-.LEHB821
	.uleb128 0
	.uleb128 0
.LLSDACSE3136:
	.section	.text._Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E,"axG",@progbits,_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E,comdat
	.size	_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E, .-_Z18create_method_bindI6ObjectbEP10MethodBindMT_FvT0_E
	.section	.text._Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE,comdat
	.weak	_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE
	.type	_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE, @function
_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE:
.LFB3137:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3137
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB822:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind0RCIbEC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57253
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57254
# ./core/method_bind.gen.inc:619: 	MethodBind0RC <  R   > * a = memnew( (MethodBind0RC < R   >) );
	movq	%rax, -24(%rbp)	# D.57254, a
# ./core/method_bind.gen.inc:625: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:626: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE822:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB823:
	call	_ZN10StringNameC1ERK6String	#
.LEHE823:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB824:
	call	_ZN10StringNameaSERKS_	#
.LEHE824:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:628: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4333	#
.L4332:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4330	#
.L4331:
	movq	%rax, %rbx	#, tmp104
.L4330:
# ./core/method_bind.gen.inc:627: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62230
	movq	%rax, %rdi	# D.62230,
.LEHB825:
	call	_Unwind_Resume	#
.LEHE825:
.L4333:
# ./core/method_bind.gen.inc:629: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3137:
	.section	.gcc_except_table
.LLSDA3137:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3137-.LLSDACSB3137
.LLSDACSB3137:
	.uleb128 .LEHB822-.LFB3137
	.uleb128 .LEHE822-.LEHB822
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB823-.LFB3137
	.uleb128 .LEHE823-.LEHB823
	.uleb128 .L4331-.LFB3137
	.uleb128 0
	.uleb128 .LEHB824-.LFB3137
	.uleb128 .LEHE824-.LEHB824
	.uleb128 .L4332-.LFB3137
	.uleb128 0
	.uleb128 .LEHB825-.LFB3137
	.uleb128 .LEHE825-.LEHB825
	.uleb128 0
	.uleb128 0
.LLSDACSE3137:
	.section	.text._Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE,"axG",@progbits,_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE,comdat
	.size	_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE, .-_Z18create_method_bindI6ObjectbEP10MethodBindMT_KFT0_vE
	.section	.text._Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE,"axG",@progbits,_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE,comdat
	.weak	_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE
	.type	_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE, @function
_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE:
.LFB3138:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3138
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:85: 	MethodBind0       * a = memnew( (MethodBind0     ) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB826:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN11MethodBind0C1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57259
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57260
# ./core/method_bind.gen.inc:85: 	MethodBind0       * a = memnew( (MethodBind0     ) );
	movq	%rax, -24(%rbp)	# D.57260, a
# ./core/method_bind.gen.inc:91: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:92: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:93: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE826:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB827:
	call	_ZN10StringNameC1ERK6String	#
.LEHE827:
# ./core/method_bind.gen.inc:93: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB828:
	call	_ZN10StringNameaSERKS_	#
.LEHE828:
# ./core/method_bind.gen.inc:93: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:94: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4341	#
.L4340:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:93: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4338	#
.L4339:
	movq	%rax, %rbx	#, tmp104
.L4338:
# ./core/method_bind.gen.inc:93: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62232
	movq	%rax, %rdi	# D.62232,
.LEHB829:
	call	_Unwind_Resume	#
.LEHE829:
.L4341:
# ./core/method_bind.gen.inc:95: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3138:
	.section	.gcc_except_table
.LLSDA3138:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3138-.LLSDACSB3138
.LLSDACSB3138:
	.uleb128 .LEHB826-.LFB3138
	.uleb128 .LEHE826-.LEHB826
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB827-.LFB3138
	.uleb128 .LEHE827-.LEHB827
	.uleb128 .L4339-.LFB3138
	.uleb128 0
	.uleb128 .LEHB828-.LFB3138
	.uleb128 .LEHE828-.LEHB828
	.uleb128 .L4340-.LFB3138
	.uleb128 0
	.uleb128 .LEHB829-.LFB3138
	.uleb128 .LEHE829-.LEHB829
	.uleb128 0
	.uleb128 0
.LLSDACSE3138:
	.section	.text._Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE,"axG",@progbits,_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE,comdat
	.size	_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE, .-_Z18create_method_bindI6ObjectEP10MethodBindMT_FvvE
	.section	.text._Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E,comdat
	.weak	_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E
	.type	_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E, @function
_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E:
.LFB3139:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3139
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, %rax	# p_method, tmp89
	movq	%rsi, %rcx	# p_method, tmp90
	movq	%rcx, %rdx	# tmp90,
	movq	%rax, -96(%rbp)	# tmp88, p_method
	movq	%rdx, -88(%rbp)	#, p_method
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movl	$.LC27, %esi	#,
	movl	$80, %edi	#,
.LEHB830:
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _6
	movq	%rbx, %rdi	# _6,
	call	_ZN13MethodBind1RCI10StringNameRKS0_EC1Ev	#
	movq	%rbx, -32(%rbp)	# _6, p_obj
	movq	-32(%rbp), %rax	# p_obj, tmp91
	movq	%rax, -40(%rbp)	# tmp91, D.57265
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-32(%rbp), %rax	# p_obj, D.57266
# ./core/method_bind.gen.inc:1359: 	MethodBind1RC <  R , P1 > * a = memnew( (MethodBind1RC < R , P1 >) );
	movq	%rax, -24(%rbp)	# D.57266, a
# ./core/method_bind.gen.inc:1365: 	u.sm=p_method;
	movq	-96(%rbp), %rax	# p_method, tmp92
	movq	-88(%rbp), %rdx	# p_method,
	movq	%rax, -80(%rbp)	# tmp92, u.sm
	movq	%rdx, -72(%rbp)	#, u.sm
# ./core/method_bind.gen.inc:1366: 	a->method=u.dm;
	movq	-24(%rbp), %rcx	# a, tmp93
	movq	-80(%rbp), %rax	# u.dm, tmp94
	movq	-72(%rbp), %rdx	# u.dm,
	movq	%rax, 64(%rcx)	# tmp94, a_9->method
	movq	%rdx, 72(%rcx)	#, a_9->method
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp95
	movq	%rax, %rdi	# tmp95,
	call	_ZN6Object16get_class_staticEv	#
.LEHE830:
	leaq	-48(%rbp), %rdx	#, tmp96
	leaq	-56(%rbp), %rax	#, tmp97
	movq	%rdx, %rsi	# tmp96,
	movq	%rax, %rdi	# tmp97,
.LEHB831:
	call	_ZN10StringNameC1ERK6String	#
.LEHE831:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	movq	-24(%rbp), %rax	# a, tmp98
	leaq	56(%rax), %rdx	#, _1
	leaq	-56(%rbp), %rax	#, tmp99
	movq	%rax, %rsi	# tmp99,
	movq	%rdx, %rdi	# _1,
.LEHB832:
	call	_ZN10StringNameaSERKS_	#
.LEHE832:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp100
	movq	%rax, %rdi	# tmp100,
	call	_ZN10StringNameD1Ev	#
	leaq	-48(%rbp), %rax	#, tmp101
	movq	%rax, %rdi	# tmp101,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:1368: 	return a;
	movq	-24(%rbp), %rax	# a, _19
	jmp	.L4349	#
.L4348:
	movq	%rax, %rbx	#, tmp105
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-56(%rbp), %rax	#, tmp103
	movq	%rax, %rdi	# tmp103,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4346	#
.L4347:
	movq	%rax, %rbx	#, tmp104
.L4346:
# ./core/method_bind.gen.inc:1367: 	a->type_name=T::get_class_static();
	leaq	-48(%rbp), %rax	#, tmp108
	movq	%rax, %rdi	# tmp108,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp104, D.62234
	movq	%rax, %rdi	# D.62234,
.LEHB833:
	call	_Unwind_Resume	#
.LEHE833:
.L4349:
# ./core/method_bind.gen.inc:1369: }
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3139:
	.section	.gcc_except_table
.LLSDA3139:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3139-.LLSDACSB3139
.LLSDACSB3139:
	.uleb128 .LEHB830-.LFB3139
	.uleb128 .LEHE830-.LEHB830
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB831-.LFB3139
	.uleb128 .LEHE831-.LEHB831
	.uleb128 .L4347-.LFB3139
	.uleb128 0
	.uleb128 .LEHB832-.LFB3139
	.uleb128 .LEHE832-.LEHB832
	.uleb128 .L4348-.LFB3139
	.uleb128 0
	.uleb128 .LEHB833-.LFB3139
	.uleb128 .LEHE833-.LEHB833
	.uleb128 0
	.uleb128 0
.LLSDACSE3139:
	.section	.text._Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E,"axG",@progbits,_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E,comdat
	.size	_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E, .-_Z18create_method_bindI6Object10StringNameRKS1_EP10MethodBindMT_KFT0_T1_E
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv:
.LFB3140:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:539: 		if (hash_table) {
	movq	-24(%rbp), %rax	# this, tmp101
	movq	(%rax), %rax	# this_25(D)->hash_table, _1
# ./core/hash_map.h:539: 		if (hash_table) {
	testq	%rax, %rax	# _1
	je	.L4351	#,
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -4(%rbp)	#, i
.L4355:
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-24(%rbp), %rax	# this, tmp102
	movzbl	8(%rax), %eax	# this_25(D)->hash_table_power, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp103
	movl	%eax, %ecx	# _3, tmp118
	sall	%cl, %edx	# tmp118, tmp103
	movl	%edx, %eax	# tmp103, _4
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -4(%rbp)	# _4, i
	jge	.L4352	#,
.L4354:
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	movq	-24(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_25(D)->hash_table, _5
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	movl	-4(%rbp), %edx	# i, tmp105
	movslq	%edx, %rdx	# tmp105, _6
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	salq	$3, %rdx	#, _7
	addq	%rdx, %rax	# _7, _8
	movq	(%rax), %rax	# *_8, _9
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	testq	%rax, %rax	# _9
	je	.L4353	#,
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movq	-24(%rbp), %rax	# this, tmp106
	movq	(%rax), %rax	# this_25(D)->hash_table, _10
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movl	-4(%rbp), %edx	# i, tmp107
	movslq	%edx, %rdx	# tmp107, _11
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	salq	$3, %rdx	#, _12
	addq	%rdx, %rax	# _12, _13
# ./core/hash_map.h:544: 					Element *e = hash_table[i];
	movq	(%rax), %rax	# *_13, tmp108
	movq	%rax, -16(%rbp)	# tmp108, e
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	-24(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_25(D)->hash_table, _14
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movl	-4(%rbp), %edx	# i, tmp110
	movslq	%edx, %rdx	# tmp110, _15
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	salq	$3, %rdx	#, _16
	addq	%rax, %rdx	# _14, _17
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	-16(%rbp), %rax	# e, tmp111
	movq	8(%rax), %rax	# e_27->next, _18
# ./core/hash_map.h:545: 					hash_table[i] = e->next;
	movq	%rax, (%rdx)	# _18, *_17
# ./core/hash_map.h:546: 					memdelete(e);
	movq	-16(%rbp), %rax	# e, tmp112
	movq	%rax, %rdi	# tmp112,
	call	_Z9memdeleteIN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:542: 				while (hash_table[i]) {
	jmp	.L4354	#
.L4353:
# ./core/hash_map.h:540: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L4355	#
.L4352:
# ./core/hash_map.h:550: 			memdelete_arr(hash_table);
	movq	-24(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_25(D)->hash_table, _19
	movq	%rax, %rdi	# _19,
	call	_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_	#
.L4351:
# ./core/hash_map.h:553: 		hash_table = 0;
	movq	-24(%rbp), %rax	# this, tmp114
	movq	$0, (%rax)	#, this_25(D)->hash_table
# ./core/hash_map.h:554: 		hash_table_power = 0;
	movq	-24(%rbp), %rax	# this, tmp115
	movb	$0, 8(%rax)	#, this_25(D)->hash_table_power
# ./core/hash_map.h:555: 		elements = 0;
	movq	-24(%rbp), %rax	# this, tmp116
	movl	$0, 12(%rax)	#, this_25(D)->elements
# ./core/hash_map.h:556: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3140:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE5clearEv
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD5Ev,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev:
.LFB3145:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3145
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/set.h:133: 			_free_root();
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv	#
# ./core/set.h:138: 		}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3145:
	.section	.gcc_except_table
.LLSDA3145:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3145-.LLSDACSB3145
.LLSDACSB3145:
.LLSDACSE3145:
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD5Ev,comdat
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD1Ev
	.set	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD1Ev,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_DataD2Ev
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv:
.LFB3147:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/set.h:613: 		if (!_data._root)
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_9(D)->_data._root, _1
# ./core/set.h:613: 		if (!_data._root)
	testq	%rax, %rax	# _1
	je	.L4360	#,
# ./core/set.h:616: 		_cleanup_tree(_data._root->left);
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_9(D)->_data._root, _2
# ./core/set.h:616: 		_cleanup_tree(_data._root->left);
	movq	16(%rax), %rdx	# _2->left, _3
	movq	-8(%rbp), %rax	# this, tmp90
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp90,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE	#
# ./core/set.h:617: 		_data._root->left = _data._nil;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_9(D)->_data._root, _4
# ./core/set.h:617: 		_data._root->left = _data._nil;
	movq	-8(%rbp), %rdx	# this, tmp92
	movq	8(%rdx), %rdx	# this_9(D)->_data._nil, _5
# ./core/set.h:617: 		_data._root->left = _data._nil;
	movq	%rdx, 16(%rax)	# _5, _4->left
# ./core/set.h:618: 		_data.size_cache = 0;
	movq	-8(%rbp), %rax	# this, tmp93
	movl	$0, 16(%rax)	#, this_9(D)->_data.size_cache
# ./core/set.h:619: 		_data._free_root();
	movq	-8(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_Data10_free_rootEv	#
	jmp	.L4357	#
.L4360:
# ./core/set.h:614: 			return;
	nop	
.L4357:
# ./core/set.h:620: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3147:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5clearEv
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv:
.LFB3149:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_14(D)->hash_table, _1
	testq	%rax, %rax	# _1
	setne	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4362	#,
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movl	$0, %r8d	#,
	movl	$.LC142, %ecx	#,
	movl	$103, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC143, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4361	#
.L4362:
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movl	$.LC27, %esi	#,
	movl	$8, %edi	#,
	call	_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc	#
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movq	-24(%rbp), %rdx	# this, tmp92
	movq	%rax, (%rdx)	# _5, this_14(D)->hash_table
# ./core/hash_map.h:107: 		hash_table_power = MIN_HASH_TABLE_POWER;
	movq	-24(%rbp), %rax	# this, tmp93
	movb	$3, 8(%rax)	#, this_14(D)->hash_table_power
# ./core/hash_map.h:108: 		elements = 0;
	movq	-24(%rbp), %rax	# this, tmp94
	movl	$0, 12(%rax)	#, this_14(D)->elements
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	movl	$0, -4(%rbp)	#, i
.L4364:
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	cmpl	$7, -4(%rbp)	#, i
	jg	.L4361	#,
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_14(D)->hash_table, _6
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movl	-4(%rbp), %edx	# i, tmp96
	movslq	%edx, %rdx	# tmp96, _7
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	salq	$3, %rdx	#, _8
	addq	%rdx, %rax	# _8, _9
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	$0, (%rax)	#, *_9
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	addl	$1, -4(%rbp)	#, i
	jmp	.L4364	#
.L4361:
# ./core/hash_map.h:111: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3149:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE15make_hash_tableEv
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm:
.LFB3151:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_key, p_key
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movl	$.LC27, %esi	#,
	movl	$32, %edi	#,
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _23
	movq	%rbx, %rdi	# _23,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC1Ev	#
	movq	%rbx, -40(%rbp)	# _23, p_obj
	movq	-40(%rbp), %rax	# p_obj, tmp105
	movq	%rax, -48(%rbp)	# tmp105, D.58100
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-40(%rbp), %rax	# p_obj, D.58101
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movq	%rax, -24(%rbp)	# D.58101, e
# ./core/hash_map.h:211: 		if (!e) {
	cmpq	$0, -24(%rbp)	#, e
	jne	.L4367	#,
# ./core/hash_map.h:213: 			ERR_FAIL_V(NULL);
	movl	$0, %r8d	#,
	movl	$.LC126, %ecx	#,
	movl	$213, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC144, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %eax	#, _19
	jmp	.L4368	#
.L4367:
# ./core/hash_map.h:215: 		uint32_t hash = Hasher::hash(p_key);
	movq	-80(%rbp), %rax	# p_key, tmp106
	movq	(%rax), %rax	# *p_key_27(D), _1
	movq	%rax, -56(%rbp)	# _1, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-56(%rbp), %rax	# p_int, tmp107
	movq	%rax, %rdi	# tmp107,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# ./core/hash_map.h:215: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -28(%rbp)	# D.58105, hash
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-72(%rbp), %rax	# this, tmp108
	movzbl	8(%rax), %eax	# this_29(D)->hash_table_power, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp109
	movl	%eax, %ecx	# _3, tmp124
	sall	%cl, %edx	# tmp124, tmp109
	movl	%edx, %eax	# tmp109, _4
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _5
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-28(%rbp), %eax	# hash, tmp111
	movl	%eax, -32(%rbp)	# tmp111, index
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-72(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_29(D)->hash_table, _7
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movl	-32(%rbp), %edx	# index, _8
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	salq	$3, %rdx	#, _9
	addq	%rdx, %rax	# _9, _10
	movq	(%rax), %rdx	# *_10, _11
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-24(%rbp), %rax	# e, tmp113
	movq	%rdx, 8(%rax)	# _11, e_26->next
# ./core/hash_map.h:218: 		e->hash = hash;
	movq	-24(%rbp), %rax	# e, tmp114
	movl	-28(%rbp), %edx	# hash, tmp115
	movl	%edx, (%rax)	# tmp115, e_26->hash
# ./core/hash_map.h:219: 		e->pair.key = p_key;
	movq	-80(%rbp), %rax	# p_key, tmp116
	movq	(%rax), %rdx	# *p_key_27(D), _12
	movq	-24(%rbp), %rax	# e, tmp117
	movq	%rdx, 16(%rax)	# _12, e_26->pair.key
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-72(%rbp), %rax	# this, tmp118
	movq	(%rax), %rax	# this_29(D)->hash_table, _13
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movl	-32(%rbp), %edx	# index, _14
# ./core/hash_map.h:221: 		hash_table[index] = e;
	salq	$3, %rdx	#, _15
	addq	%rax, %rdx	# _13, _16
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-24(%rbp), %rax	# e, tmp119
	movq	%rax, (%rdx)	# tmp119, *_16
# ./core/hash_map.h:222: 		elements++;
	movq	-72(%rbp), %rax	# this, tmp120
	movl	12(%rax), %eax	# this_29(D)->elements, _17
	leal	1(%rax), %edx	#, _18
	movq	-72(%rbp), %rax	# this, tmp121
	movl	%edx, 12(%rax)	# _18, this_29(D)->elements
# ./core/hash_map.h:224: 		return e;
	movq	-24(%rbp), %rax	# e, _19
.L4368:
# ./core/hash_map.h:225: 	}
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3151:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE14create_elementERKm
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv:
.LFB3152:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
# ./core/hash_map.h:125: 		int new_hash_table_power = -1;
	movl	$-1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp143
	movl	12(%rax), %eax	# this_73(D)->elements, _1
	movl	%eax, %edx	# _1, _2
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp144
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _3
	movzbl	%al, %eax	# _3, _4
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp145
	movl	%eax, %ecx	# _4, tmp192
	sall	%cl, %esi	# tmp192, tmp145
	movl	%esi, %eax	# tmp145, _5
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _5, _2
	jle	.L4371	#,
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	movq	-56(%rbp), %rax	# this, tmp146
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _6
	movzbl	%al, %eax	# _6, _7
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	addl	$1, %eax	#, tmp147
	movl	%eax, -4(%rbp)	# tmp147, new_hash_table_power
.L4373:
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp148
	movl	12(%rax), %eax	# this_73(D)->elements, _8
	movl	%eax, %edx	# _8, _9
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp149
	movl	$8, %esi	#, tmp150
	movl	%eax, %ecx	# tmp149, tmp194
	sall	%cl, %esi	# tmp194, tmp150
	movl	%esi, %eax	# tmp150, _10
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _10, _9
	jle	.L4372	#,
# ./core/hash_map.h:133: 				new_hash_table_power++;
	addl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	jmp	.L4373	#
.L4371:
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp151
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _11
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpb	$3, %al	#, _11
	jbe	.L4372	#,
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp152
	movl	12(%rax), %eax	# this_73(D)->elements, _12
	movl	%eax, %edx	# _12, _13
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp153
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _14
	movzbl	%al, %eax	# _14, _15
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	subl	$1, %eax	#, _16
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movl	$8, %esi	#, tmp154
	movl	%eax, %ecx	# _16, tmp196
	sall	%cl, %esi	# tmp196, tmp154
	movl	%esi, %eax	# tmp154, _17
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpl	%eax, %edx	# _17, _13
	jge	.L4372	#,
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	movq	-56(%rbp), %rax	# this, tmp155
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _18
	movzbl	%al, %eax	# _18, _19
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	subl	$1, %eax	#, tmp156
	movl	%eax, -4(%rbp)	# tmp156, new_hash_table_power
.L4375:
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp157
	movl	12(%rax), %eax	# this_73(D)->elements, _20
	movl	%eax, %edx	# _20, _21
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp158
	subl	$1, %eax	#, _22
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp159
	movl	%eax, %ecx	# _22, tmp198
	sall	%cl, %esi	# tmp198, tmp159
	movl	%esi, %eax	# tmp159, _23
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _23, _21
	jge	.L4374	#,
# ./core/hash_map.h:143: 				new_hash_table_power--;
	subl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	jmp	.L4375	#
.L4374:
# ./core/hash_map.h:146: 			if (new_hash_table_power < (int)MIN_HASH_TABLE_POWER)
	cmpl	$2, -4(%rbp)	#, new_hash_table_power
	jg	.L4372	#,
# ./core/hash_map.h:147: 				new_hash_table_power = MIN_HASH_TABLE_POWER;
	movl	$3, -4(%rbp)	#, new_hash_table_power
.L4372:
# ./core/hash_map.h:150: 		if (new_hash_table_power == -1)
	cmpl	$-1, -4(%rbp)	#, new_hash_table_power
	je	.L4386	#,
# ./core/hash_map.h:153: 		Element **new_hash_table = memnew_arr(Element *, ((uint64_t)1 << new_hash_table_power));
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp160
	movl	$1, %edx	#, tmp161
	movl	%eax, %ecx	# tmp160, tmp200
	salq	%cl, %rdx	# tmp200, tmp161
	movq	%rdx, %rax	# tmp161, _24
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# _24,
	call	_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc	#
	movq	%rax, -24(%rbp)	# _80, new_hash_table
# ./core/hash_map.h:154: 		if (!new_hash_table) {
	cmpq	$0, -24(%rbp)	#, new_hash_table
	jne	.L4378	#,
# ./core/hash_map.h:156: 			ERR_PRINT("Out of Memory");
	movl	$0, %r8d	#,
	movl	$.LC145, %ecx	#,
	movl	$156, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC146, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:157: 			return;
	jmp	.L4370	#
.L4378:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	$0, -8(%rbp)	#, i
.L4380:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp162
	movl	$1, %edx	#, tmp163
	movl	%eax, %ecx	# tmp162, tmp202
	sall	%cl, %edx	# tmp202, tmp163
	movl	%edx, %eax	# tmp163, _25
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	cmpl	%eax, -8(%rbp)	# _25, i
	jge	.L4379	#,
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movl	-8(%rbp), %eax	# i, tmp164
	cltq
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	leaq	0(,%rax,8), %rdx	#, _27
	movq	-24(%rbp), %rax	# new_hash_table, tmp165
	addq	%rdx, %rax	# _27, _28
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movq	$0, (%rax)	#, *_28
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L4380	#
.L4379:
# ./core/hash_map.h:165: 		if (hash_table) {
	movq	-56(%rbp), %rax	# this, tmp166
	movq	(%rax), %rax	# this_73(D)->hash_table, _29
# ./core/hash_map.h:165: 		if (hash_table) {
	testq	%rax, %rax	# _29
	je	.L4381	#,
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -12(%rbp)	#, i
.L4385:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-56(%rbp), %rax	# this, tmp167
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _30
	movzbl	%al, %eax	# _30, _31
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp168
	movl	%eax, %ecx	# _31, tmp204
	sall	%cl, %edx	# tmp204, tmp168
	movl	%edx, %eax	# tmp168, _32
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -12(%rbp)	# _32, i
	jge	.L4382	#,
.L4384:
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movq	-56(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_73(D)->hash_table, _33
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movl	-12(%rbp), %edx	# i, tmp170
	movslq	%edx, %rdx	# tmp170, _34
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	salq	$3, %rdx	#, _35
	addq	%rdx, %rax	# _35, _36
	movq	(%rax), %rax	# *_36, _37
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	testq	%rax, %rax	# _37
	je	.L4383	#,
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	-56(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_73(D)->hash_table, _38
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movl	-12(%rbp), %edx	# i, tmp172
	movslq	%edx, %rdx	# tmp172, _39
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	salq	$3, %rdx	#, _40
	addq	%rdx, %rax	# _40, _41
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	(%rax), %rax	# *_41, tmp173
	movq	%rax, -32(%rbp)	# tmp173, se
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-56(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_73(D)->hash_table, _42
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movl	-12(%rbp), %edx	# i, tmp175
	movslq	%edx, %rdx	# tmp175, _43
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	salq	$3, %rdx	#, _44
	addq	%rax, %rdx	# _42, _45
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-32(%rbp), %rax	# se, tmp176
	movq	8(%rax), %rax	# se_86->next, _46
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	%rax, (%rdx)	# _46, *_45
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movq	-32(%rbp), %rax	# se, tmp177
	movl	(%rax), %edx	# se_86->hash, _47
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp178
	movl	$1, %esi	#, tmp179
	movl	%eax, %ecx	# tmp178, tmp206
	sall	%cl, %esi	# tmp206, tmp179
	movl	%esi, %eax	# tmp179, _48
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	subl	$1, %eax	#, _49
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	andl	%edx, %eax	# _47, _51
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	%eax, -36(%rbp)	# _51, new_pos
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movl	-36(%rbp), %eax	# new_pos, tmp180
	cltq
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	leaq	0(,%rax,8), %rdx	#, _53
	movq	-24(%rbp), %rax	# new_hash_table, tmp181
	addq	%rdx, %rax	# _53, _54
	movq	(%rax), %rdx	# *_54, _55
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movq	-32(%rbp), %rax	# se, tmp182
	movq	%rdx, 8(%rax)	# _55, se_86->next
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movl	-36(%rbp), %eax	# new_pos, tmp183
	cltq
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	leaq	0(,%rax,8), %rdx	#, _57
	movq	-24(%rbp), %rax	# new_hash_table, tmp184
	addq	%rax, %rdx	# tmp184, _58
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movq	-32(%rbp), %rax	# se, tmp185
	movq	%rax, (%rdx)	# tmp185, *_58
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	jmp	.L4384	#
.L4383:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -12(%rbp)	#, i
	jmp	.L4385	#
.L4382:
# ./core/hash_map.h:178: 			memdelete_arr(hash_table);
	movq	-56(%rbp), %rax	# this, tmp186
	movq	(%rax), %rax	# this_73(D)->hash_table, _59
	movq	%rax, %rdi	# _59,
	call	_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_	#
.L4381:
# ./core/hash_map.h:180: 		hash_table = new_hash_table;
	movq	-56(%rbp), %rax	# this, tmp187
	movq	-24(%rbp), %rdx	# new_hash_table, tmp188
	movq	%rdx, (%rax)	# tmp188, this_73(D)->hash_table
# ./core/hash_map.h:181: 		hash_table_power = new_hash_table_power;
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp189
	movl	%eax, %edx	# tmp189, _60
	movq	-56(%rbp), %rax	# this, tmp190
	movb	%dl, 8(%rax)	# _60, this_73(D)->hash_table_power
	jmp	.L4370	#
.L4386:
# ./core/hash_map.h:151: 			return;
	nop	
.L4370:
# ./core/hash_map.h:182: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3152:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16check_hash_tableEv
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv:
.LFB3153:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_14(D)->hash_table, _1
	testq	%rax, %rax	# _1
	setne	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4388	#,
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movl	$0, %r8d	#,
	movl	$.LC142, %ecx	#,
	movl	$103, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC143, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4387	#
.L4388:
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movl	$.LC27, %esi	#,
	movl	$8, %edi	#,
	call	_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc	#
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movq	-24(%rbp), %rdx	# this, tmp92
	movq	%rax, (%rdx)	# _5, this_14(D)->hash_table
# ./core/hash_map.h:107: 		hash_table_power = MIN_HASH_TABLE_POWER;
	movq	-24(%rbp), %rax	# this, tmp93
	movb	$3, 8(%rax)	#, this_14(D)->hash_table_power
# ./core/hash_map.h:108: 		elements = 0;
	movq	-24(%rbp), %rax	# this, tmp94
	movl	$0, 12(%rax)	#, this_14(D)->elements
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	movl	$0, -4(%rbp)	#, i
.L4390:
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	cmpl	$7, -4(%rbp)	#, i
	jg	.L4387	#,
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_14(D)->hash_table, _6
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movl	-4(%rbp), %edx	# i, tmp96
	movslq	%edx, %rdx	# tmp96, _7
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	salq	$3, %rdx	#, _8
	addq	%rdx, %rax	# _8, _9
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	$0, (%rax)	#, *_9
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	addl	$1, -4(%rbp)	#, i
	jmp	.L4390	#
.L4387:
# ./core/hash_map.h:111: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3153:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE15make_hash_tableEv
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_:
.LFB3155:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# this, this
	movq	%rsi, -96(%rbp)	# p_key, p_key
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movl	$.LC27, %esi	#,
	movl	$32, %edi	#,
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _23
	movq	%rbx, %rdi	# _23,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC1Ev	#
	movq	%rbx, -40(%rbp)	# _23, p_obj
	movq	-40(%rbp), %rax	# p_obj, tmp106
	movq	%rax, -48(%rbp)	# tmp106, D.58176
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-40(%rbp), %rax	# p_obj, D.58177
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movq	%rax, -24(%rbp)	# D.58177, e
# ./core/hash_map.h:211: 		if (!e) {
	cmpq	$0, -24(%rbp)	#, e
	jne	.L4393	#,
# ./core/hash_map.h:213: 			ERR_FAIL_V(NULL);
	movl	$0, %r8d	#,
	movl	$.LC126, %ecx	#,
	movl	$213, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC144, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %eax	#, _19
	jmp	.L4394	#
.L4393:
# ./core/hash_map.h:215: 		uint32_t hash = Hasher::hash(p_key);
	movq	-96(%rbp), %rax	# p_key, tmp107
	movq	(%rax), %rax	# *p_key_27(D), _1
	movq	%rax, -56(%rbp)	# _1, p_obj
# core/object.h:770: 			u.p = p_obj;
	movq	-56(%rbp), %rax	# p_obj, tmp108
	movq	%rax, -72(%rbp)	# tmp108, u.p
# core/object.h:771: 			return HashMapHasherDefault::hash((uint64_t)u.i);
	movq	-72(%rbp), %rax	# u.i, _44
	movq	%rax, -64(%rbp)	# _44, p_int
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	movq	-64(%rbp), %rax	# p_int, tmp109
	movq	%rax, %rdi	# tmp109,
	call	_ZL15hash_one_uint64m	#
# ./core/hashfuncs.h:139: 	static _FORCE_INLINE_ uint32_t hash(const uint64_t p_int) { return hash_one_uint64(p_int); }
	nop	
# core/object.h:771: 			return HashMapHasherDefault::hash((uint64_t)u.i);
	nop	
# ./core/hash_map.h:215: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -28(%rbp)	# D.58185, hash
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-88(%rbp), %rax	# this, tmp110
	movzbl	8(%rax), %eax	# this_29(D)->hash_table_power, _2
	movzbl	%al, %eax	# _2, _3
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp111
	movl	%eax, %ecx	# _3, tmp126
	sall	%cl, %edx	# tmp126, tmp111
	movl	%edx, %eax	# tmp111, _4
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _5
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-28(%rbp), %eax	# hash, tmp113
	movl	%eax, -32(%rbp)	# tmp113, index
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-88(%rbp), %rax	# this, tmp114
	movq	(%rax), %rax	# this_29(D)->hash_table, _7
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movl	-32(%rbp), %edx	# index, _8
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	salq	$3, %rdx	#, _9
	addq	%rdx, %rax	# _9, _10
	movq	(%rax), %rdx	# *_10, _11
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-24(%rbp), %rax	# e, tmp115
	movq	%rdx, 8(%rax)	# _11, e_26->next
# ./core/hash_map.h:218: 		e->hash = hash;
	movq	-24(%rbp), %rax	# e, tmp116
	movl	-28(%rbp), %edx	# hash, tmp117
	movl	%edx, (%rax)	# tmp117, e_26->hash
# ./core/hash_map.h:219: 		e->pair.key = p_key;
	movq	-96(%rbp), %rax	# p_key, tmp118
	movq	(%rax), %rdx	# *p_key_27(D), _12
	movq	-24(%rbp), %rax	# e, tmp119
	movq	%rdx, 16(%rax)	# _12, e_26->pair.key
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-88(%rbp), %rax	# this, tmp120
	movq	(%rax), %rax	# this_29(D)->hash_table, _13
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movl	-32(%rbp), %edx	# index, _14
# ./core/hash_map.h:221: 		hash_table[index] = e;
	salq	$3, %rdx	#, _15
	addq	%rax, %rdx	# _13, _16
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-24(%rbp), %rax	# e, tmp121
	movq	%rax, (%rdx)	# tmp121, *_16
# ./core/hash_map.h:222: 		elements++;
	movq	-88(%rbp), %rax	# this, tmp122
	movl	12(%rax), %eax	# this_29(D)->elements, _17
	leal	1(%rax), %edx	#, _18
	movq	-88(%rbp), %rax	# this, tmp123
	movl	%edx, 12(%rax)	# _18, this_29(D)->elements
# ./core/hash_map.h:224: 		return e;
	movq	-24(%rbp), %rax	# e, _19
.L4394:
# ./core/hash_map.h:225: 	}
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3155:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE14create_elementERKS1_
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv:
.LFB3156:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
# ./core/hash_map.h:125: 		int new_hash_table_power = -1;
	movl	$-1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp143
	movl	12(%rax), %eax	# this_73(D)->elements, _1
	movl	%eax, %edx	# _1, _2
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp144
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _3
	movzbl	%al, %eax	# _3, _4
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp145
	movl	%eax, %ecx	# _4, tmp192
	sall	%cl, %esi	# tmp192, tmp145
	movl	%esi, %eax	# tmp145, _5
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _5, _2
	jle	.L4398	#,
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	movq	-56(%rbp), %rax	# this, tmp146
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _6
	movzbl	%al, %eax	# _6, _7
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	addl	$1, %eax	#, tmp147
	movl	%eax, -4(%rbp)	# tmp147, new_hash_table_power
.L4400:
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp148
	movl	12(%rax), %eax	# this_73(D)->elements, _8
	movl	%eax, %edx	# _8, _9
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp149
	movl	$8, %esi	#, tmp150
	movl	%eax, %ecx	# tmp149, tmp194
	sall	%cl, %esi	# tmp194, tmp150
	movl	%esi, %eax	# tmp150, _10
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _10, _9
	jle	.L4399	#,
# ./core/hash_map.h:133: 				new_hash_table_power++;
	addl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	jmp	.L4400	#
.L4398:
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp151
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _11
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpb	$3, %al	#, _11
	jbe	.L4399	#,
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp152
	movl	12(%rax), %eax	# this_73(D)->elements, _12
	movl	%eax, %edx	# _12, _13
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp153
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _14
	movzbl	%al, %eax	# _14, _15
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	subl	$1, %eax	#, _16
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movl	$8, %esi	#, tmp154
	movl	%eax, %ecx	# _16, tmp196
	sall	%cl, %esi	# tmp196, tmp154
	movl	%esi, %eax	# tmp154, _17
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpl	%eax, %edx	# _17, _13
	jge	.L4399	#,
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	movq	-56(%rbp), %rax	# this, tmp155
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _18
	movzbl	%al, %eax	# _18, _19
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	subl	$1, %eax	#, tmp156
	movl	%eax, -4(%rbp)	# tmp156, new_hash_table_power
.L4402:
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp157
	movl	12(%rax), %eax	# this_73(D)->elements, _20
	movl	%eax, %edx	# _20, _21
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp158
	subl	$1, %eax	#, _22
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp159
	movl	%eax, %ecx	# _22, tmp198
	sall	%cl, %esi	# tmp198, tmp159
	movl	%esi, %eax	# tmp159, _23
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _23, _21
	jge	.L4401	#,
# ./core/hash_map.h:143: 				new_hash_table_power--;
	subl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	jmp	.L4402	#
.L4401:
# ./core/hash_map.h:146: 			if (new_hash_table_power < (int)MIN_HASH_TABLE_POWER)
	cmpl	$2, -4(%rbp)	#, new_hash_table_power
	jg	.L4399	#,
# ./core/hash_map.h:147: 				new_hash_table_power = MIN_HASH_TABLE_POWER;
	movl	$3, -4(%rbp)	#, new_hash_table_power
.L4399:
# ./core/hash_map.h:150: 		if (new_hash_table_power == -1)
	cmpl	$-1, -4(%rbp)	#, new_hash_table_power
	je	.L4413	#,
# ./core/hash_map.h:153: 		Element **new_hash_table = memnew_arr(Element *, ((uint64_t)1 << new_hash_table_power));
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp160
	movl	$1, %edx	#, tmp161
	movl	%eax, %ecx	# tmp160, tmp200
	salq	%cl, %rdx	# tmp200, tmp161
	movq	%rdx, %rax	# tmp161, _24
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# _24,
	call	_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc	#
	movq	%rax, -24(%rbp)	# _80, new_hash_table
# ./core/hash_map.h:154: 		if (!new_hash_table) {
	cmpq	$0, -24(%rbp)	#, new_hash_table
	jne	.L4405	#,
# ./core/hash_map.h:156: 			ERR_PRINT("Out of Memory");
	movl	$0, %r8d	#,
	movl	$.LC145, %ecx	#,
	movl	$156, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC146, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:157: 			return;
	jmp	.L4397	#
.L4405:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	$0, -8(%rbp)	#, i
.L4407:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp162
	movl	$1, %edx	#, tmp163
	movl	%eax, %ecx	# tmp162, tmp202
	sall	%cl, %edx	# tmp202, tmp163
	movl	%edx, %eax	# tmp163, _25
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	cmpl	%eax, -8(%rbp)	# _25, i
	jge	.L4406	#,
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movl	-8(%rbp), %eax	# i, tmp164
	cltq
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	leaq	0(,%rax,8), %rdx	#, _27
	movq	-24(%rbp), %rax	# new_hash_table, tmp165
	addq	%rdx, %rax	# _27, _28
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movq	$0, (%rax)	#, *_28
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L4407	#
.L4406:
# ./core/hash_map.h:165: 		if (hash_table) {
	movq	-56(%rbp), %rax	# this, tmp166
	movq	(%rax), %rax	# this_73(D)->hash_table, _29
# ./core/hash_map.h:165: 		if (hash_table) {
	testq	%rax, %rax	# _29
	je	.L4408	#,
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -12(%rbp)	#, i
.L4412:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-56(%rbp), %rax	# this, tmp167
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _30
	movzbl	%al, %eax	# _30, _31
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp168
	movl	%eax, %ecx	# _31, tmp204
	sall	%cl, %edx	# tmp204, tmp168
	movl	%edx, %eax	# tmp168, _32
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -12(%rbp)	# _32, i
	jge	.L4409	#,
.L4411:
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movq	-56(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_73(D)->hash_table, _33
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movl	-12(%rbp), %edx	# i, tmp170
	movslq	%edx, %rdx	# tmp170, _34
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	salq	$3, %rdx	#, _35
	addq	%rdx, %rax	# _35, _36
	movq	(%rax), %rax	# *_36, _37
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	testq	%rax, %rax	# _37
	je	.L4410	#,
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	-56(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_73(D)->hash_table, _38
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movl	-12(%rbp), %edx	# i, tmp172
	movslq	%edx, %rdx	# tmp172, _39
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	salq	$3, %rdx	#, _40
	addq	%rdx, %rax	# _40, _41
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	(%rax), %rax	# *_41, tmp173
	movq	%rax, -32(%rbp)	# tmp173, se
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-56(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_73(D)->hash_table, _42
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movl	-12(%rbp), %edx	# i, tmp175
	movslq	%edx, %rdx	# tmp175, _43
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	salq	$3, %rdx	#, _44
	addq	%rax, %rdx	# _42, _45
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-32(%rbp), %rax	# se, tmp176
	movq	8(%rax), %rax	# se_86->next, _46
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	%rax, (%rdx)	# _46, *_45
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movq	-32(%rbp), %rax	# se, tmp177
	movl	(%rax), %edx	# se_86->hash, _47
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp178
	movl	$1, %esi	#, tmp179
	movl	%eax, %ecx	# tmp178, tmp206
	sall	%cl, %esi	# tmp206, tmp179
	movl	%esi, %eax	# tmp179, _48
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	subl	$1, %eax	#, _49
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	andl	%edx, %eax	# _47, _51
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	%eax, -36(%rbp)	# _51, new_pos
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movl	-36(%rbp), %eax	# new_pos, tmp180
	cltq
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	leaq	0(,%rax,8), %rdx	#, _53
	movq	-24(%rbp), %rax	# new_hash_table, tmp181
	addq	%rdx, %rax	# _53, _54
	movq	(%rax), %rdx	# *_54, _55
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movq	-32(%rbp), %rax	# se, tmp182
	movq	%rdx, 8(%rax)	# _55, se_86->next
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movl	-36(%rbp), %eax	# new_pos, tmp183
	cltq
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	leaq	0(,%rax,8), %rdx	#, _57
	movq	-24(%rbp), %rax	# new_hash_table, tmp184
	addq	%rax, %rdx	# tmp184, _58
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movq	-32(%rbp), %rax	# se, tmp185
	movq	%rax, (%rdx)	# tmp185, *_58
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	jmp	.L4411	#
.L4410:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -12(%rbp)	#, i
	jmp	.L4412	#
.L4409:
# ./core/hash_map.h:178: 			memdelete_arr(hash_table);
	movq	-56(%rbp), %rax	# this, tmp186
	movq	(%rax), %rax	# this_73(D)->hash_table, _59
	movq	%rax, %rdi	# _59,
	call	_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_	#
.L4408:
# ./core/hash_map.h:180: 		hash_table = new_hash_table;
	movq	-56(%rbp), %rax	# this, tmp187
	movq	-24(%rbp), %rdx	# new_hash_table, tmp188
	movq	%rdx, (%rax)	# tmp188, this_73(D)->hash_table
# ./core/hash_map.h:181: 		hash_table_power = new_hash_table_power;
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp189
	movl	%eax, %edx	# tmp189, _60
	movq	-56(%rbp), %rax	# this, tmp190
	movb	%dl, 8(%rax)	# _60, this_73(D)->hash_table_power
	jmp	.L4397	#
.L4413:
# ./core/hash_map.h:151: 			return;
	nop	
.L4397:
# ./core/hash_map.h:182: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3156:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16check_hash_tableEv
	.section	.text._ZN24HashMapComparatorDefaultImE7compareERKmS2_,"axG",@progbits,_ZN24HashMapComparatorDefaultImE7compareERKmS2_,comdat
	.weak	_ZN24HashMapComparatorDefaultImE7compareERKmS2_
	.type	_ZN24HashMapComparatorDefaultImE7compareERKmS2_, @function
_ZN24HashMapComparatorDefaultImE7compareERKmS2_:
.LFB3157:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# p_lhs, p_lhs
	movq	%rsi, -16(%rbp)	# p_rhs, p_rhs
# ./core/hashfuncs.h:161: 		return p_lhs == p_rhs;
	movq	-8(%rbp), %rax	# p_lhs, tmp86
	movq	(%rax), %rdx	# *p_lhs_4(D), _1
	movq	-16(%rbp), %rax	# p_rhs, tmp87
	movq	(%rax), %rax	# *p_rhs_5(D), _2
# ./core/hashfuncs.h:161: 		return p_lhs == p_rhs;
	cmpq	%rax, %rdx	# _2, _1
	sete	%al	#, _6
# ./core/hashfuncs.h:162: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3157:
	.size	_ZN24HashMapComparatorDefaultImE7compareERKmS2_, .-_ZN24HashMapComparatorDefaultImE7compareERKmS2_
	.section	.text._Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_,"axG",@progbits,_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_,comdat
	.weak	_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_
	.type	_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_, @function
_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_:
.LFB3158:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.55701
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55702
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.399_5
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.399_5
	jne	.L4420	#,
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-24(%rbp), %rax	# p_class, tmp85
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp85,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4416	#
.L4420:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L4416:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3158:
	.size	_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_, .-_Z9memdeleteIN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv:
.LFB3159:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movq	-8(%rbp), %rax	# this, tmp87
	movl	12(%rax), %eax	# this_8(D)->elements, _1
	testl	%eax, %eax	# _1
	setne	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4422	#,
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movl	$0, %r8d	#,
	movl	$.LC154, %ecx	#,
	movl	$115, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC155, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4421	#
.L4422:
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:117: 		memdelete_arr(hash_table);
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_8(D)->hash_table, _5
	movq	%rax, %rdi	# _5,
	call	_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:118: 		hash_table = 0;
	movq	-8(%rbp), %rax	# this, tmp89
	movq	$0, (%rax)	#, this_8(D)->hash_table
# ./core/hash_map.h:119: 		hash_table_power = 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movb	$0, 8(%rax)	#, this_8(D)->hash_table_power
# ./core/hash_map.h:120: 		elements = 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movl	$0, 12(%rax)	#, this_8(D)->elements
.L4421:
# ./core/hash_map.h:121: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3159:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE16erase_hash_tableEv
	.section	.text._ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_,"axG",@progbits,_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_,comdat
	.weak	_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_
	.type	_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_, @function
_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_:
.LFB3160:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# p_lhs, p_lhs
	movq	%rsi, -16(%rbp)	# p_rhs, p_rhs
# ./core/hashfuncs.h:161: 		return p_lhs == p_rhs;
	movq	-8(%rbp), %rax	# p_lhs, tmp86
	movq	(%rax), %rdx	# *p_lhs_4(D), _1
	movq	-16(%rbp), %rax	# p_rhs, tmp87
	movq	(%rax), %rax	# *p_rhs_5(D), _2
# ./core/hashfuncs.h:161: 		return p_lhs == p_rhs;
	cmpq	%rax, %rdx	# _2, _1
	sete	%al	#, _6
# ./core/hashfuncs.h:162: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3160:
	.size	_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_, .-_ZN24HashMapComparatorDefaultIP6ObjectE7compareERKS1_S4_
	.section	.text._Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_,"axG",@progbits,_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_,comdat
	.weak	_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_
	.type	_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_, @function
_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_:
.LFB3161:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.55705
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.55706
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.402_5
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.402_5
	jne	.L4430	#,
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-24(%rbp), %rax	# p_class, tmp85
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp85,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4426	#
.L4430:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L4426:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3161:
	.size	_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_, .-_Z9memdeleteIN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv:
.LFB3162:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movq	-8(%rbp), %rax	# this, tmp87
	movl	12(%rax), %eax	# this_8(D)->elements, _1
	testl	%eax, %eax	# _1
	setne	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4432	#,
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movl	$0, %r8d	#,
	movl	$.LC154, %ecx	#,
	movl	$115, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC155, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4431	#
.L4432:
# ./core/hash_map.h:115: 		ERR_FAIL_COND(elements);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:117: 		memdelete_arr(hash_table);
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_8(D)->hash_table, _5
	movq	%rax, %rdi	# _5,
	call	_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_	#
# ./core/hash_map.h:118: 		hash_table = 0;
	movq	-8(%rbp), %rax	# this, tmp89
	movq	$0, (%rax)	#, this_8(D)->hash_table
# ./core/hash_map.h:119: 		hash_table_power = 0;
	movq	-8(%rbp), %rax	# this, tmp90
	movb	$0, 8(%rax)	#, this_8(D)->hash_table_power
# ./core/hash_map.h:120: 		elements = 0;
	movq	-8(%rbp), %rax	# this, tmp91
	movl	$0, 12(%rax)	#, this_8(D)->elements
.L4431:
# ./core/hash_map.h:121: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3162:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE16erase_hash_tableEv
	.section	.text._Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_,"axG",@progbits,_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_,comdat
	.weak	_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_
	.type	_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_, @function
_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_:
.LFB3163:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
# ./core/os/memory.h:184: 	uint64_t *ptr = (uint64_t *)p_class;
	movq	-24(%rbp), %rax	# p_class, tmp82
	movq	%rax, -8(%rbp)	# tmp82, ptr
# ./core/os/memory.h:194: 	Memory::free_static(ptr, true);
	movq	-8(%rbp), %rax	# ptr, tmp83
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:195: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3163:
	.size	_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_, .-_Z13memdelete_arrIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEvPT_
	.section	.text._Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_,"axG",@progbits,_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_,comdat
	.weak	_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_
	.type	_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_, @function
_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_:
.LFB3164:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
# ./core/os/memory.h:184: 	uint64_t *ptr = (uint64_t *)p_class;
	movq	-24(%rbp), %rax	# p_class, tmp82
	movq	%rax, -8(%rbp)	# tmp82, ptr
# ./core/os/memory.h:194: 	Memory::free_static(ptr, true);
	movq	-8(%rbp), %rax	# ptr, tmp83
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:195: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3164:
	.size	_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_, .-_Z13memdelete_arrIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEvPT_
	.section	.text._ZN7CowDataI7VariantE6_unrefEPv,"axG",@progbits,_ZN7CowDataI7VariantE6_unrefEPv,comdat
	.align 2
	.weak	_ZN7CowDataI7VariantE6_unrefEPv
	.type	_ZN7CowDataI7VariantE6_unrefEPv, @function
_ZN7CowDataI7VariantE6_unrefEPv:
.LFB3169:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3169
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_data, p_data
# ./core/cowdata.h:192: 	if (!p_data)
	cmpq	$0, -80(%rbp)	#, p_data
	je	.L4449	#,
	movq	-72(%rbp), %rax	# this, tmp95
	movq	%rax, -48(%rbp)	# tmp95, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp96
	movq	(%rax), %rax	# this_21->_ptr, _22
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _22
	jne	.L4439	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.56055
	jmp	.L4440	#
.L4439:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-48(%rbp), %rax	# this, tmp97
	movq	(%rax), %rax	# this_21->_ptr, _24
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.56055
.L4440:
# ./core/cowdata.h:195: 	uint32_t *refc = _get_refcount();
	movq	%rax, -16(%rbp)	# D.56055, refc
	movq	-16(%rbp), %rax	# refc, tmp98
	movq	%rax, -40(%rbp)	# tmp98, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-40(%rbp), %rdx	# pw, tmp99
	movl	$1, %eax	#, tmp101
	negl	%eax	# tmp101
	movl	%eax, %ecx	# tmp101, tmp100
	movl	%ecx, %eax	# tmp100, D.56051
	lock xaddl	%eax, (%rdx)	#, D.56051,
	addl	%ecx, %eax	# tmp100, D.56051
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testl	%eax, %eax	# D.56051
	setne	%al	#, retval.35_13
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testb	%al, %al	# retval.35_13
	jne	.L4450	#,
	movq	-72(%rbp), %rax	# this, tmp102
	movq	%rax, -56(%rbp)	# tmp102, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-56(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_27->_ptr, _28
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _28
	jne	.L4443	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.56059
	jmp	.L4444	#
.L4443:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-56(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_27->_ptr, _30
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.56059
.L4444:
# ./core/cowdata.h:202: 		uint32_t *count = _get_size();
	movq	%rax, -24(%rbp)	# D.56059, count
# ./core/cowdata.h:203: 		T *data = (T *)(count + 1);
	movq	-24(%rbp), %rax	# count, tmp108
	addq	$4, %rax	#, tmp107
	movq	%rax, -32(%rbp)	# tmp107, data
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	movl	$0, -4(%rbp)	#, i
.L4447:
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	movq	-24(%rbp), %rax	# count, tmp109
	movl	(%rax), %eax	# *count_14, _2
	cmpl	%eax, -4(%rbp)	# _2, i
	jnb	.L4445	#,
# ./core/cowdata.h:207: 			data[i].~T();
	movl	-4(%rbp), %edx	# i, _3
# ./core/cowdata.h:207: 			data[i].~T();
	movq	%rdx, %rax	# _3, tmp110
	addq	%rax, %rax	# tmp110
	addq	%rdx, %rax	# _3, tmp110
	salq	$3, %rax	#, tmp111
	movq	%rax, %rdx	# tmp110, _4
# ./core/cowdata.h:207: 			data[i].~T();
	movq	-32(%rbp), %rax	# data, tmp112
	addq	%rdx, %rax	# _4, _5
	movq	%rax, -64(%rbp)	# _5, this
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movq	-64(%rbp), %rax	# this, tmp113
	movl	(%rax), %eax	# this_33->type, _34
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _34
	je	.L4451	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movq	-64(%rbp), %rax	# this, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN7Variant5clearEv	#
.L4451:
# ./core/variant.h:423: 	}
	nop	
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L4447	#
.L4445:
# ./core/cowdata.h:212: 	Memory::free_static((uint8_t *)p_data, true);
	movq	-80(%rbp), %rax	# p_data, tmp115
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp115,
.LEHB834:
	call	_ZN6Memory11free_staticEPvb	#
.LEHE834:
	jmp	.L4436	#
.L4449:
# ./core/cowdata.h:193: 		return;
	nop	
	jmp	.L4436	#
.L4450:
# ./core/cowdata.h:198: 		return; // still in use
	nop	
.L4436:
# ./core/cowdata.h:213: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3169:
	.section	.gcc_except_table
.LLSDA3169:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3169-.LLSDACSB3169
.LLSDACSB3169:
	.uleb128 .LEHB834-.LFB3169
	.uleb128 .LEHE834-.LEHB834
	.uleb128 0
	.uleb128 0
.LLSDACSE3169:
	.section	.text._ZN7CowDataI7VariantE6_unrefEPv,"axG",@progbits,_ZN7CowDataI7VariantE6_unrefEPv,comdat
	.size	_ZN7CowDataI7VariantE6_unrefEPv, .-_ZN7CowDataI7VariantE6_unrefEPv
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE:
.LFB3170:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_I, p_I
# ./core/list.h:367: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_10(D)->_data, _1
# ./core/list.h:367: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L4453	#,
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_10(D)->_data, _2
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-32(%rbp), %rdx	# p_I, tmp92
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# _2,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE	#
	movb	%al, -1(%rbp)	# _14, ret
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movq	-24(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_10(D)->_data, _3
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movl	16(%rax), %eax	# _3->size_cache, _4
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	testl	%eax, %eax	# _4
	jne	.L4454	#,
# ./core/list.h:371: 				memdelete_allocator<_Data, A>(_data);
	movq	-24(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_10(D)->_data, _5
	movq	%rax, %rdi	# _5,
	call	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE5_DataES2_EvPT_	#
# ./core/list.h:372: 				_data = NULL;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	$0, (%rax)	#, this_10(D)->_data
.L4454:
# ./core/list.h:375: 			return ret;
	movzbl	-1(%rbp), %eax	# ret, _6
	jmp	.L4455	#
.L4453:
# ./core/list.h:378: 		return false;
	movl	$0, %eax	#, _6
.L4455:
# ./core/list.h:379: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3170:
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE, .-_ZN4ListI12PropertyInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.section	.text._Z9memdeleteI8ResourceEvPT_,"axG",@progbits,_Z9memdeleteI8ResourceEvPT_,comdat
	.weak	_Z9memdeleteI8ResourceEvPT_
	.type	_Z9memdeleteI8ResourceEvPT_, @function
_Z9memdeleteI8ResourceEvPT_:
.LFB3176:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_class, p_class
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	movq	-8(%rbp), %rax	# p_class, tmp87
	movq	%rax, %rdi	# tmp87,
	call	_Z17predelete_handlerP6Object	#
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.321_10
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.321_10
	jne	.L4459	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-8(%rbp), %rax	# p_class, tmp88
	movq	(%rax), %rax	# p_class_7(D)->D.27638.D.26671._vptr.Object, _2
	addq	$152, %rax	#, _3
	movq	(%rax), %rdx	# *_3, _4
	movq	-8(%rbp), %rax	# p_class, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _4
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-8(%rbp), %rax	# p_class, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4456	#
.L4459:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L4456:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3176:
	.size	_Z9memdeleteI8ResourceEvPT_, .-_Z9memdeleteI8ResourceEvPT_
	.section	.text._Z9memdeleteI6ScriptEvPT_,"axG",@progbits,_Z9memdeleteI6ScriptEvPT_,comdat
	.weak	_Z9memdeleteI6ScriptEvPT_
	.type	_Z9memdeleteI6ScriptEvPT_, @function
_Z9memdeleteI6ScriptEvPT_:
.LFB3182:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_class, p_class
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	movq	-8(%rbp), %rax	# p_class, tmp87
	movq	%rax, %rdi	# tmp87,
	call	_Z17predelete_handlerP6Object	#
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.114_10
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.114_10
	jne	.L4463	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-8(%rbp), %rax	# p_class, tmp88
	movq	(%rax), %rax	# p_class_7(D)->D.33053.D.27638.D.26671._vptr.Object, _2
	addq	$152, %rax	#, _3
	movq	(%rax), %rdx	# *_3, _4
	movq	-8(%rbp), %rax	# p_class, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _4
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-8(%rbp), %rax	# p_class, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4460	#
.L4463:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L4460:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3182:
	.size	_Z9memdeleteI6ScriptEvPT_, .-_Z9memdeleteI6ScriptEvPT_
	.section	.text._ZN7CowDataI7VariantE6resizeEi,"axG",@progbits,_ZN7CowDataI7VariantE6resizeEi,comdat
	.align 2
	.weak	_ZN7CowDataI7VariantE6resizeEi
	.type	_ZN7CowDataI7VariantE6resizeEi, @function
_ZN7CowDataI7VariantE6resizeEi:
.LFB3200:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3200
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$336, %rsp	#,
	movq	%rdi, -328(%rbp)	# this, this
	movl	%esi, -332(%rbp)	# p_size, p_size
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	-332(%rbp), %eax	# p_size, tmp187
	shrl	$31, %eax	#, tmp186
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L4465	#,
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	$0, %r8d	#,
	movl	$.LC137, %ecx	#,
	movl	$252, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
.LEHB835:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$31, %eax	#, _46
	jmp	.L4521	#
.L4465:
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-328(%rbp), %rax	# this, tmp188
	movq	%rax, -56(%rbp)	# tmp188, this
	movq	-56(%rbp), %rax	# this, tmp189
	movq	%rax, -64(%rbp)	# tmp189, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp190
	movq	(%rax), %rax	# this_113->_ptr, _114
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _114
	jne	.L4467	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _115
	jmp	.L4468	#
.L4467:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp191
	movq	(%rax), %rax	# this_113->_ptr, _116
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _115
.L4468:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _115, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L4469	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp192
	movl	(%rax), %eax	# *size_120, _121
	jmp	.L4470	#
.L4469:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.59326
.L4470:
# ./core/cowdata.h:254: 	if (p_size == size())
	cmpl	%eax, -332(%rbp)	# D.59326, p_size
	sete	%al	#, retval.24_58
# ./core/cowdata.h:254: 	if (p_size == size())
	testb	%al, %al	# retval.24_58
	je	.L4471	#,
# ./core/cowdata.h:255: 		return OK;
	movl	$0, %eax	#, _46
	jmp	.L4521	#
.L4471:
# ./core/cowdata.h:257: 	if (p_size == 0) {
	cmpl	$0, -332(%rbp)	#, p_size
	jne	.L4472	#,
# ./core/cowdata.h:259: 		_unref(_ptr);
	movq	-328(%rbp), %rax	# this, tmp193
	movq	(%rax), %rdx	# this_56(D)->_ptr, _5
# ./core/cowdata.h:259: 		_unref(_ptr);
	movq	-328(%rbp), %rax	# this, tmp194
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp194,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:260: 		_ptr = NULL;
	movq	-328(%rbp), %rax	# this, tmp195
	movq	$0, (%rax)	#, this_56(D)->_ptr
# ./core/cowdata.h:261: 		return OK;
	movl	$0, %eax	#, _46
	jmp	.L4521	#
.L4472:
# ./core/cowdata.h:265: 	_copy_on_write();
	movq	-328(%rbp), %rax	# this, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN7CowDataI7VariantE14_copy_on_writeEv	#
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movl	-332(%rbp), %eax	# p_size, tmp197
	cltq
	movq	-328(%rbp), %rdx	# this, tmp198
	movq	%rdx, -80(%rbp)	# tmp198, this
	movq	%rax, -88(%rbp)	# _6, p_elements
	leaq	-296(%rbp), %rax	#, tmp199
	movq	%rax, -96(%rbp)	# tmp199, out
# ./core/cowdata.h:92: 		if (_mul_overflow(p_elements, sizeof(T), &o)) {
	movl	$0, %ecx	#, _128
	movl	$24, %edx	#, tmp201
	movq	%rdx, %rax	# tmp201, tmp201
	mulq	-88(%rbp)	# p_elements
	jno	.L4473	#,
	movl	$1, %ecx	#, _128
.L4473:
	movq	%rax, -304(%rbp)	# _129, o
	movq	%rcx, %rax	# _128, _130
	andl	$1, %eax	#, retval.36_131
# ./core/cowdata.h:92: 		if (_mul_overflow(p_elements, sizeof(T), &o)) {
	testb	%al, %al	# retval.36_131
	je	.L4475	#,
# ./core/cowdata.h:93: 			*out = 0;
	movq	-96(%rbp), %rax	# out, tmp202
	movq	$0, (%rax)	#, *out_127
# ./core/cowdata.h:94: 			return false;
	movl	$0, %eax	#, D.59338
	jmp	.L4481	#
.L4475:
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movq	-304(%rbp), %rax	# o, o.37_133
	movl	%eax, -100(%rbp)	# _134, x
# ./core/typedefs.h:178: 	--x;
	subl	$1, -100(%rbp)	#, x
# ./core/typedefs.h:179: 	x |= x >> 1;
	movl	-100(%rbp), %eax	# x, tmp203
	shrl	%eax	# _137
# ./core/typedefs.h:179: 	x |= x >> 1;
	orl	%eax, -100(%rbp)	# _137, x
# ./core/typedefs.h:180: 	x |= x >> 2;
	movl	-100(%rbp), %eax	# x, tmp204
	shrl	$2, %eax	#, _139
# ./core/typedefs.h:180: 	x |= x >> 2;
	orl	%eax, -100(%rbp)	# _139, x
# ./core/typedefs.h:181: 	x |= x >> 4;
	movl	-100(%rbp), %eax	# x, tmp205
	shrl	$4, %eax	#, _141
# ./core/typedefs.h:181: 	x |= x >> 4;
	orl	%eax, -100(%rbp)	# _141, x
# ./core/typedefs.h:182: 	x |= x >> 8;
	movl	-100(%rbp), %eax	# x, tmp206
	shrl	$8, %eax	#, _143
# ./core/typedefs.h:182: 	x |= x >> 8;
	orl	%eax, -100(%rbp)	# _143, x
# ./core/typedefs.h:183: 	x |= x >> 16;
	movl	-100(%rbp), %eax	# x, tmp207
	shrl	$16, %eax	#, _145
# ./core/typedefs.h:183: 	x |= x >> 16;
	orl	%eax, -100(%rbp)	# _145, x
# ./core/typedefs.h:185: 	return ++x;
	addl	$1, -100(%rbp)	#, x
	movl	-100(%rbp), %eax	# x, _148
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movl	%eax, %edx	# _148, _151
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movq	-96(%rbp), %rax	# out, tmp208
	movq	%rdx, (%rax)	# _151, *out_127
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	movq	-304(%rbp), %rax	# o, o.39_152
	movl	$0, %edx	#, _153
	addq	$32, %rax	#, tmp209
	jnc	.L4478	#,
	movl	$1, %edx	#, _153
.L4478:
	movq	%rax, -312(%rbp)	# _154, p
	movq	%rdx, %rax	# _153, _155
	andl	$1, %eax	#, retval.38_156
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	testb	%al, %al	# retval.38_156
	je	.L4480	#,
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	movl	$0, %eax	#, D.59338
	jmp	.L4481	#
.L4480:
# ./core/cowdata.h:98: 		return true;
	movl	$1, %eax	#, D.59338
.L4481:
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	xorl	$1, %eax	#, _8
	movzbl	%al, %eax	# _8, _9
	testq	%rax, %rax	# _10
	setne	%al	#, retval.25_60
	testb	%al, %al	# retval.25_60
	je	.L4482	#,
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC148, %ecx	#,
	movl	$268, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _46
	jmp	.L4521	#
.L4482:
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-328(%rbp), %rax	# this, tmp210
	movq	%rax, -112(%rbp)	# tmp210, this
	movq	-112(%rbp), %rax	# this, tmp211
	movq	%rax, -120(%rbp)	# tmp211, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-120(%rbp), %rax	# this, tmp212
	movq	(%rax), %rax	# this_161->_ptr, _162
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _162
	jne	.L4483	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _163
	jmp	.L4484	#
.L4483:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-120(%rbp), %rax	# this, tmp213
	movq	(%rax), %rax	# this_161->_ptr, _164
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _163
.L4484:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -128(%rbp)	# _163, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -128(%rbp)	#, size
	je	.L4485	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-128(%rbp), %rax	# size, tmp214
	movl	(%rax), %eax	# *size_168, _169
	jmp	.L4486	#
.L4485:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.59351
.L4486:
# ./core/cowdata.h:270: 	if (p_size > size()) {
	cmpl	%eax, -332(%rbp)	# D.59351, p_size
	setg	%al	#, retval.26_63
# ./core/cowdata.h:270: 	if (p_size > size()) {
	testb	%al, %al	# retval.26_63
	je	.L4487	#,
	movq	-328(%rbp), %rax	# this, tmp215
	movq	%rax, -136(%rbp)	# tmp215, this
	movq	-136(%rbp), %rax	# this, tmp216
	movq	%rax, -144(%rbp)	# tmp216, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp217
	movq	(%rax), %rax	# this_174->_ptr, _175
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _175
	jne	.L4488	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _176
	jmp	.L4489	#
.L4488:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-144(%rbp), %rax	# this, tmp218
	movq	(%rax), %rax	# this_174->_ptr, _177
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _176
.L4489:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -152(%rbp)	# _176, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -152(%rbp)	#, size
	je	.L4490	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-152(%rbp), %rax	# size, tmp219
	movl	(%rax), %eax	# *size_181, _182
	jmp	.L4491	#
.L4490:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.59360
.L4491:
# ./core/cowdata.h:272: 		if (size() == 0) {
	testl	%eax, %eax	# D.59360
	sete	%al	#, retval.27_79
# ./core/cowdata.h:272: 		if (size() == 0) {
	testb	%al, %al	# retval.27_79
	je	.L4492	#,
# ./core/cowdata.h:274: 			uint32_t *ptr = (uint32_t *)Memory::alloc_static(alloc_size, true);
	movq	-296(%rbp), %rax	# alloc_size, alloc_size.28_13
	movl	$1, %esi	#,
	movq	%rax, %rdi	# alloc_size.28_13,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -40(%rbp)	# _88, ptr
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	cmpq	$0, -40(%rbp)	#, ptr
	sete	%al	#, _14
	movzbl	%al, %eax	# _14, _15
	testq	%rax, %rax	# _16
	je	.L4493	#,
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC149, %ecx	#,
	movl	$275, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _46
	jmp	.L4521	#
.L4493:
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:276: 			*(ptr - 1) = 0; //size, currently none
	movq	-40(%rbp), %rax	# ptr, tmp220
	subq	$4, %rax	#, _17
# ./core/cowdata.h:276: 			*(ptr - 1) = 0; //size, currently none
	movl	$0, (%rax)	#, *_17
# ./core/cowdata.h:277: 			*(ptr - 2) = 1; //refcount
	movq	-40(%rbp), %rax	# ptr, tmp221
	subq	$8, %rax	#, _18
# ./core/cowdata.h:277: 			*(ptr - 2) = 1; //refcount
	movl	$1, (%rax)	#, *_18
# ./core/cowdata.h:279: 			_ptr = (T *)ptr;
	movq	-328(%rbp), %rax	# this, tmp222
	movq	-40(%rbp), %rdx	# ptr, tmp223
	movq	%rdx, (%rax)	# tmp223, this_56(D)->_ptr
	jmp	.L4494	#
.L4492:
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-296(%rbp), %rcx	# alloc_size, alloc_size.29_19
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-328(%rbp), %rax	# this, tmp224
	movq	(%rax), %rax	# this_56(D)->_ptr, _20
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# alloc_size.29_19,
	movq	%rax, %rdi	# _20,
	call	_ZN6Memory14realloc_staticEPvmb	#
	movq	%rax, -32(%rbp)	# _81, _ptrnew
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	cmpq	$0, -32(%rbp)	#, _ptrnew
	sete	%al	#, _21
	movzbl	%al, %eax	# _21, _22
	testq	%rax, %rax	# _23
	je	.L4495	#,
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC150, %ecx	#,
	movl	$283, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
.LEHE835:
	movl	$6, %eax	#, _46
	jmp	.L4521	#
.L4495:
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:284: 			_ptr = (T *)(_ptrnew);
	movq	-328(%rbp), %rax	# this, tmp225
	movq	-32(%rbp), %rdx	# _ptrnew, tmp226
	movq	%rdx, (%rax)	# tmp226, this_56(D)->_ptr
.L4494:
	movq	-328(%rbp), %rax	# this, tmp227
	movq	%rax, -168(%rbp)	# tmp227, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp228
	movq	(%rax), %rax	# this_192->_ptr, _193
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _193
	jne	.L4496	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, D.59370
	jmp	.L4497	#
.L4496:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp229
	movq	(%rax), %rax	# this_192->_ptr, D.59370
.L4497:
# ./core/cowdata.h:290: 			T *elems = _get_data();
	movq	%rax, -48(%rbp)	# D.59370, elems
	movq	-328(%rbp), %rax	# this, tmp230
	movq	%rax, -160(%rbp)	# tmp230, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-160(%rbp), %rax	# this, tmp231
	movq	(%rax), %rax	# this_186->_ptr, _187
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _187
	jne	.L4498	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.59366
	jmp	.L4499	#
.L4498:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-160(%rbp), %rax	# this, tmp232
	movq	(%rax), %rax	# this_186->_ptr, _189
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.59366
.L4499:
# ./core/cowdata.h:292: 			for (int i = *_get_size(); i < p_size; i++) {
	movl	(%rax), %eax	# *_24, _25
	movl	%eax, -4(%rbp)	# _25, i
.L4503:
# ./core/cowdata.h:292: 			for (int i = *_get_size(); i < p_size; i++) {
	movl	-4(%rbp), %eax	# i, tmp233
	cmpl	-332(%rbp), %eax	# p_size, tmp233
	jge	.L4500	#,
# ./core/cowdata.h:293: 				memnew_placement(&elems[i], T);
	movl	-4(%rbp), %eax	# i, tmp234
	movslq	%eax, %rdx	# tmp234, _26
	movq	%rdx, %rax	# _26, tmp235
	addq	%rax, %rax	# tmp235
	addq	%rdx, %rax	# _26, tmp235
	salq	$3, %rax	#, tmp236
	movq	%rax, %rdx	# tmp235, _27
	movq	-48(%rbp), %rax	# elems, tmp237
	addq	%rdx, %rax	# _27, _28
	movq	$24, -200(%rbp)	#, p_size
	movq	%rax, -208(%rbp)	# _28, p_pointer
	movq	$24, -216(%rbp)	#, check
	movq	$.LC27, -224(%rbp)	#, p_description
# ./core/os/memory.h:104: 	return p_pointer;
	movq	-208(%rbp), %rax	# p_pointer, D.59383
	movq	%rax, -192(%rbp)	# D.59383, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-192(%rbp), %rdx	# this, tmp238
	movl	$0, (%rdx)	#, this_200->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
	movq	%rax, -176(%rbp)	# D.59383, p_obj
	movq	-176(%rbp), %rax	# p_obj, tmp239
	movq	%rax, -184(%rbp)	# tmp239, D.59374
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	nop	
# ./core/cowdata.h:292: 			for (int i = *_get_size(); i < p_size; i++) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L4503	#
.L4500:
	movq	-328(%rbp), %rax	# this, tmp240
	movq	%rax, -232(%rbp)	# tmp240, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-232(%rbp), %rax	# this, tmp241
	movq	(%rax), %rax	# this_206->_ptr, _207
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _207
	jne	.L4504	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.59387
	jmp	.L4505	#
.L4504:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-232(%rbp), %rax	# this, tmp242
	movq	(%rax), %rax	# this_206->_ptr, _209
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.59387
.L4505:
# ./core/cowdata.h:297: 		*_get_size() = p_size;
	movl	-332(%rbp), %edx	# p_size, p_size.30_30
# ./core/cowdata.h:297: 		*_get_size() = p_size;
	movl	%edx, (%rax)	# p_size.30_30, *_29
	jmp	.L4506	#
.L4487:
	movq	-328(%rbp), %rax	# this, tmp243
	movq	%rax, -240(%rbp)	# tmp243, this
	movq	-240(%rbp), %rax	# this, tmp244
	movq	%rax, -248(%rbp)	# tmp244, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-248(%rbp), %rax	# this, tmp245
	movq	(%rax), %rax	# this_213->_ptr, _214
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _214
	jne	.L4507	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _215
	jmp	.L4508	#
.L4507:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-248(%rbp), %rax	# this, tmp246
	movq	(%rax), %rax	# this_213->_ptr, _216
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _215
.L4508:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -256(%rbp)	# _215, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -256(%rbp)	#, size
	je	.L4509	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-256(%rbp), %rax	# size, tmp247
	movl	(%rax), %eax	# *size_220, _221
	jmp	.L4510	#
.L4509:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.59394
.L4510:
# ./core/cowdata.h:299: 	} else if (p_size < size()) {
	cmpl	%eax, -332(%rbp)	# D.59394, p_size
	setl	%al	#, retval.31_65
# ./core/cowdata.h:299: 	} else if (p_size < size()) {
	testb	%al, %al	# retval.31_65
	je	.L4506	#,
# ./core/cowdata.h:303: 			for (uint32_t i = p_size; i < *_get_size(); i++) {
	movl	-332(%rbp), %eax	# p_size, tmp248
	movl	%eax, -8(%rbp)	# tmp248, i
.L4517:
	movq	-328(%rbp), %rax	# this, tmp249
	movq	%rax, -264(%rbp)	# tmp249, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-264(%rbp), %rax	# this, tmp250
	movq	(%rax), %rax	# this_225->_ptr, _226
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _226
	jne	.L4511	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.59400
	jmp	.L4512	#
.L4511:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-264(%rbp), %rax	# this, tmp251
	movq	(%rax), %rax	# this_225->_ptr, _228
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.59400
.L4512:
# ./core/cowdata.h:303: 			for (uint32_t i = p_size; i < *_get_size(); i++) {
	movl	(%rax), %eax	# *_32, _33
	cmpl	%eax, -8(%rbp)	# _33, i
	setb	%al	#, retval.32_67
	testb	%al, %al	# retval.32_67
	je	.L4513	#,
	movq	-328(%rbp), %rax	# this, tmp252
	movq	%rax, -280(%rbp)	# tmp252, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-280(%rbp), %rax	# this, tmp253
	movq	(%rax), %rax	# this_233->_ptr, _234
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _234
	jne	.L4514	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, D.59405
	jmp	.L4515	#
.L4514:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-280(%rbp), %rax	# this, tmp254
	movq	(%rax), %rcx	# this_233->_ptr, D.59405
.L4515:
# ./core/cowdata.h:304: 				T *t = &_get_data()[i];
	movl	-8(%rbp), %edx	# i, _35
# ./core/cowdata.h:304: 				T *t = &_get_data()[i];
	movq	%rdx, %rax	# _35, tmp255
	addq	%rax, %rax	# tmp255
	addq	%rdx, %rax	# _35, tmp255
	salq	$3, %rax	#, tmp256
# ./core/cowdata.h:304: 				T *t = &_get_data()[i];
	addq	%rcx, %rax	# D.59405, tmp257
	movq	%rax, -24(%rbp)	# tmp257, t
	movq	-24(%rbp), %rax	# t, tmp258
	movq	%rax, -272(%rbp)	# tmp258, this
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movq	-272(%rbp), %rax	# this, tmp259
	movl	(%rax), %eax	# this_231->type, _232
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _232
	je	.L4523	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movq	-272(%rbp), %rax	# this, tmp260
	movq	%rax, %rdi	# tmp260,
	call	_ZN7Variant5clearEv	#
.L4523:
# ./core/variant.h:423: 	}
	nop	
# ./core/cowdata.h:303: 			for (uint32_t i = p_size; i < *_get_size(); i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L4517	#
.L4513:
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-296(%rbp), %rcx	# alloc_size, alloc_size.33_37
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-328(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_56(D)->_ptr, _38
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# alloc_size.33_37,
	movq	%rax, %rdi	# _38,
.LEHB836:
	call	_ZN6Memory14realloc_staticEPvmb	#
	movq	%rax, -16(%rbp)	# _69, _ptrnew
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	cmpq	$0, -16(%rbp)	#, _ptrnew
	sete	%al	#, _39
	movzbl	%al, %eax	# _39, _40
	testq	%rax, %rax	# _41
	je	.L4518	#,
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC150, %ecx	#,
	movl	$310, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
.LEHE836:
	movl	$6, %eax	#, _46
	jmp	.L4521	#
.L4518:
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:312: 		_ptr = (T *)(_ptrnew);
	movq	-328(%rbp), %rax	# this, tmp262
	movq	-16(%rbp), %rdx	# _ptrnew, tmp263
	movq	%rdx, (%rax)	# tmp263, this_56(D)->_ptr
	movq	-328(%rbp), %rax	# this, tmp264
	movq	%rax, -288(%rbp)	# tmp264, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-288(%rbp), %rax	# this, tmp265
	movq	(%rax), %rax	# this_238->_ptr, _239
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _239
	jne	.L4519	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.59409
	jmp	.L4520	#
.L4519:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-288(%rbp), %rax	# this, tmp266
	movq	(%rax), %rax	# this_238->_ptr, _241
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.59409
.L4520:
# ./core/cowdata.h:314: 		*_get_size() = p_size;
	movl	-332(%rbp), %edx	# p_size, p_size.34_43
# ./core/cowdata.h:314: 		*_get_size() = p_size;
	movl	%edx, (%rax)	# p_size.34_43, *_42
.L4506:
# ./core/cowdata.h:317: 	return OK;
	movl	$0, %eax	#, _46
.L4521:
# ./core/cowdata.h:318: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3200:
	.section	.gcc_except_table
.LLSDA3200:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3200-.LLSDACSB3200
.LLSDACSB3200:
	.uleb128 .LEHB835-.LFB3200
	.uleb128 .LEHE835-.LEHB835
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB836-.LFB3200
	.uleb128 .LEHE836-.LEHB836
	.uleb128 0
	.uleb128 0
.LLSDACSE3200:
	.section	.text._ZN7CowDataI7VariantE6resizeEi,"axG",@progbits,_ZN7CowDataI7VariantE6resizeEi,comdat
	.size	_ZN7CowDataI7VariantE6resizeEi, .-_ZN7CowDataI7VariantE6resizeEi
	.section	.text._ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.type	_ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, @function
_ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE:
.LFB3202:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_I, p_I
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	cmpq	$0, -16(%rbp)	#, p_I
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L4525	#,
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movl	$0, %r8d	#,
	movl	$.LC151, %ecx	#,
	movl	$157, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L4526	#
.L4525:
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movq	-16(%rbp), %rax	# p_I, tmp103
	movq	40(%rax), %rax	# p_I_26(D)->data, _4
	cmpq	%rax, -8(%rbp)	# _4, this
	setne	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L4527	#,
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movl	$0, %r8d	#,
	movl	$.LC153, %ecx	#,
	movl	$158, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L4526	#
.L4527:
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:160: 			if (first == p_I) {
	movq	-8(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_29(D)->first, _8
# ./core/list.h:160: 			if (first == p_I) {
	cmpq	%rax, -16(%rbp)	# _8, p_I
	jne	.L4528	#,
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp105
	movq	24(%rax), %rdx	# p_I_26(D)->next_ptr, _9
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-8(%rbp), %rax	# this, tmp106
	movq	%rdx, (%rax)	# _9, this_29(D)->first
.L4528:
# ./core/list.h:164: 			if (last == p_I)
	movq	-8(%rbp), %rax	# this, tmp107
	movq	8(%rax), %rax	# this_29(D)->last, _10
# ./core/list.h:164: 			if (last == p_I)
	cmpq	%rax, -16(%rbp)	# _10, p_I
	jne	.L4529	#,
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp108
	movq	32(%rax), %rdx	# p_I_26(D)->prev_ptr, _11
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-8(%rbp), %rax	# this, tmp109
	movq	%rdx, 8(%rax)	# _11, this_29(D)->last
.L4529:
# ./core/list.h:167: 			if (p_I->prev_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp110
	movq	32(%rax), %rax	# p_I_26(D)->prev_ptr, _12
# ./core/list.h:167: 			if (p_I->prev_ptr)
	testq	%rax, %rax	# _12
	je	.L4530	#,
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp111
	movq	32(%rax), %rax	# p_I_26(D)->prev_ptr, _13
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp112
	movq	24(%rdx), %rdx	# p_I_26(D)->next_ptr, _14
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	%rdx, 24(%rax)	# _14, _13->next_ptr
.L4530:
# ./core/list.h:170: 			if (p_I->next_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp113
	movq	24(%rax), %rax	# p_I_26(D)->next_ptr, _15
# ./core/list.h:170: 			if (p_I->next_ptr)
	testq	%rax, %rax	# _15
	je	.L4531	#,
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp114
	movq	24(%rax), %rax	# p_I_26(D)->next_ptr, _16
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp115
	movq	32(%rdx), %rdx	# p_I_26(D)->prev_ptr, _17
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	%rdx, 32(%rax)	# _17, _16->prev_ptr
.L4531:
# ./core/list.h:173: 			memdelete_allocator<Element, A>(const_cast<Element *>(p_I));
	movq	-16(%rbp), %rax	# p_I, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_	#
# ./core/list.h:174: 			size_cache--;
	movq	-8(%rbp), %rax	# this, tmp117
	movl	16(%rax), %eax	# this_29(D)->size_cache, _18
	leal	-1(%rax), %edx	#, _19
	movq	-8(%rbp), %rax	# this, tmp118
	movl	%edx, 16(%rax)	# _19, this_29(D)->size_cache
# ./core/list.h:176: 			return true;
	movl	$1, %eax	#, _20
.L4526:
# ./core/list.h:177: 		}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3202:
	.size	_ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, .-_ZN4ListI7Variant16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC2Ev,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC5Ev,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC2Ev
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC2Ev, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC2Ev:
.LFB3204:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/set.h:88: 			color = RED;
	movq	-8(%rbp), %rax	# this, tmp82
	movl	$0, (%rax)	#, this_2(D)->color
# ./core/set.h:89: 			right = NULL;
	movq	-8(%rbp), %rax	# this, tmp83
	movq	$0, 8(%rax)	#, this_2(D)->right
# ./core/set.h:90: 			left = NULL;
	movq	-8(%rbp), %rax	# this, tmp84
	movq	$0, 16(%rax)	#, this_2(D)->left
# ./core/set.h:91: 			parent = NULL;
	movq	-8(%rbp), %rax	# this, tmp85
	movq	$0, 24(%rax)	#, this_2(D)->parent
# ./core/set.h:92: 			_next = NULL;
	movq	-8(%rbp), %rax	# this, tmp86
	movq	$0, 32(%rax)	#, this_2(D)->_next
# ./core/set.h:93: 			_prev = NULL;
	movq	-8(%rbp), %rax	# this, tmp87
	movq	$0, 40(%rax)	#, this_2(D)->_prev
# ./core/set.h:94: 		};
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3204:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC2Ev, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC2Ev
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC1Ev
	.set	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC1Ev,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE7ElementC2Ev
	.section	.text._ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE,"axG",@progbits,_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE
	.type	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE, @function
_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE:
.LFB3208:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_node, p_node
# ./core/set.h:183: 		Element *node = p_node;
	movq	-32(%rbp), %rax	# p_node, tmp92
	movq	%rax, -8(%rbp)	# tmp92, node
# ./core/set.h:185: 		if (node->right != _data._nil) {
	movq	-8(%rbp), %rax	# node, tmp93
	movq	8(%rax), %rdx	# node_13->right, _1
# ./core/set.h:185: 		if (node->right != _data._nil) {
	movq	-24(%rbp), %rax	# this, tmp94
	movq	8(%rax), %rax	# this_15(D)->_data._nil, _2
# ./core/set.h:185: 		if (node->right != _data._nil) {
	cmpq	%rax, %rdx	# _2, _1
	je	.L4534	#,
# ./core/set.h:187: 			node = node->right;
	movq	-8(%rbp), %rax	# node, tmp95
	movq	8(%rax), %rax	# node_13->right, tmp96
	movq	%rax, -8(%rbp)	# tmp96, node
.L4536:
# ./core/set.h:188: 			while (node->left != _data._nil) { /* returns the minimum of the right subtree of node */
	movq	-8(%rbp), %rax	# node, tmp97
	movq	16(%rax), %rdx	# node_9->left, _3
# ./core/set.h:188: 			while (node->left != _data._nil) { /* returns the minimum of the right subtree of node */
	movq	-24(%rbp), %rax	# this, tmp98
	movq	8(%rax), %rax	# this_15(D)->_data._nil, _4
# ./core/set.h:188: 			while (node->left != _data._nil) { /* returns the minimum of the right subtree of node */
	cmpq	%rax, %rdx	# _4, _3
	je	.L4535	#,
# ./core/set.h:189: 				node = node->left;
	movq	-8(%rbp), %rax	# node, tmp99
	movq	16(%rax), %rax	# node_9->left, tmp100
	movq	%rax, -8(%rbp)	# tmp100, node
# ./core/set.h:188: 			while (node->left != _data._nil) { /* returns the minimum of the right subtree of node */
	jmp	.L4536	#
.L4535:
# ./core/set.h:191: 			return node;
	movq	-8(%rbp), %rax	# node, _11
	jmp	.L4537	#
.L4534:
# ./core/set.h:194: 			while (node == node->parent->right) {
	movq	-8(%rbp), %rax	# node, tmp101
	movq	24(%rax), %rax	# node_10->parent, _5
# ./core/set.h:194: 			while (node == node->parent->right) {
	movq	8(%rax), %rax	# _5->right, _6
# ./core/set.h:194: 			while (node == node->parent->right) {
	cmpq	%rax, -8(%rbp)	# _6, node
	jne	.L4538	#,
# ./core/set.h:195: 				node = node->parent;
	movq	-8(%rbp), %rax	# node, tmp102
	movq	24(%rax), %rax	# node_10->parent, tmp103
	movq	%rax, -8(%rbp)	# tmp103, node
# ./core/set.h:194: 			while (node == node->parent->right) {
	jmp	.L4534	#
.L4538:
# ./core/set.h:198: 			if (node->parent == _data._root)
	movq	-8(%rbp), %rax	# node, tmp104
	movq	24(%rax), %rdx	# node_10->parent, _7
# ./core/set.h:198: 			if (node->parent == _data._root)
	movq	-24(%rbp), %rax	# this, tmp105
	movq	(%rax), %rax	# this_15(D)->_data._root, _8
# ./core/set.h:198: 			if (node->parent == _data._root)
	cmpq	%rax, %rdx	# _8, _7
	jne	.L4539	#,
# ./core/set.h:199: 				return NULL; // No successor, as p_node = last node
	movl	$0, %eax	#, _11
	jmp	.L4537	#
.L4539:
# ./core/set.h:200: 			return node->parent;
	movq	-8(%rbp), %rax	# node, tmp106
	movq	24(%rax), %rax	# node_10->parent, _11
.L4537:
# ./core/set.h:202: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3208:
	.size	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE, .-_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_successorEPNS5_7ElementE
	.section	.text._ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE,"axG",@progbits,_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE
	.type	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE, @function
_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE:
.LFB3209:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_node, p_node
# ./core/set.h:205: 		Element *node = p_node;
	movq	-32(%rbp), %rax	# p_node, tmp91
	movq	%rax, -8(%rbp)	# tmp91, node
# ./core/set.h:207: 		if (node->left != _data._nil) {
	movq	-8(%rbp), %rax	# node, tmp92
	movq	16(%rax), %rdx	# node_12->left, _1
# ./core/set.h:207: 		if (node->left != _data._nil) {
	movq	-24(%rbp), %rax	# this, tmp93
	movq	8(%rax), %rax	# this_14(D)->_data._nil, _2
# ./core/set.h:207: 		if (node->left != _data._nil) {
	cmpq	%rax, %rdx	# _2, _1
	je	.L4541	#,
# ./core/set.h:209: 			node = node->left;
	movq	-8(%rbp), %rax	# node, tmp94
	movq	16(%rax), %rax	# node_12->left, tmp95
	movq	%rax, -8(%rbp)	# tmp95, node
.L4543:
# ./core/set.h:210: 			while (node->right != _data._nil) { /* returns the minimum of the left subtree of node */
	movq	-8(%rbp), %rax	# node, tmp96
	movq	8(%rax), %rdx	# node_8->right, _3
# ./core/set.h:210: 			while (node->right != _data._nil) { /* returns the minimum of the left subtree of node */
	movq	-24(%rbp), %rax	# this, tmp97
	movq	8(%rax), %rax	# this_14(D)->_data._nil, _4
# ./core/set.h:210: 			while (node->right != _data._nil) { /* returns the minimum of the left subtree of node */
	cmpq	%rax, %rdx	# _4, _3
	je	.L4542	#,
# ./core/set.h:211: 				node = node->right;
	movq	-8(%rbp), %rax	# node, tmp98
	movq	8(%rax), %rax	# node_8->right, tmp99
	movq	%rax, -8(%rbp)	# tmp99, node
# ./core/set.h:210: 			while (node->right != _data._nil) { /* returns the minimum of the left subtree of node */
	jmp	.L4543	#
.L4542:
# ./core/set.h:213: 			return node;
	movq	-8(%rbp), %rax	# node, _10
	jmp	.L4544	#
.L4541:
# ./core/set.h:216: 			while (node == node->parent->left) {
	movq	-8(%rbp), %rax	# node, tmp100
	movq	24(%rax), %rax	# node_9->parent, _5
# ./core/set.h:216: 			while (node == node->parent->left) {
	movq	16(%rax), %rax	# _5->left, _6
# ./core/set.h:216: 			while (node == node->parent->left) {
	cmpq	%rax, -8(%rbp)	# _6, node
	jne	.L4545	#,
# ./core/set.h:217: 				node = node->parent;
	movq	-8(%rbp), %rax	# node, tmp101
	movq	24(%rax), %rax	# node_9->parent, tmp102
	movq	%rax, -8(%rbp)	# tmp102, node
# ./core/set.h:216: 			while (node == node->parent->left) {
	jmp	.L4541	#
.L4545:
# ./core/set.h:220: 			if (node == _data._root)
	movq	-24(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_14(D)->_data._root, _7
# ./core/set.h:220: 			if (node == _data._root)
	cmpq	%rax, -8(%rbp)	# _7, node
	jne	.L4546	#,
# ./core/set.h:221: 				return NULL; // No predecessor, as p_node = first node.
	movl	$0, %eax	#, _10
	jmp	.L4544	#
.L4546:
# ./core/set.h:222: 			return node->parent;
	movq	-8(%rbp), %rax	# node, tmp104
	movq	24(%rax), %rax	# node_9->parent, _10
.L4544:
# ./core/set.h:224: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3209:
	.size	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE, .-_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_predecessorEPNS5_7ElementE
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE:
.LFB3210:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_new_node, p_new_node
# ./core/set.h:271: 		Element *node = p_new_node;
	movq	-48(%rbp), %rax	# p_new_node, tmp94
	movq	%rax, -8(%rbp)	# tmp94, node
# ./core/set.h:272: 		Element *nparent = node->parent;
	movq	-8(%rbp), %rax	# node, tmp95
	movq	24(%rax), %rax	# node_26->parent, tmp96
	movq	%rax, -16(%rbp)	# tmp96, nparent
.L4555:
# ./core/set.h:275: 		while (nparent->color == RED) {
	movq	-16(%rbp), %rax	# nparent, tmp97
	movl	(%rax), %eax	# nparent_17->color, _1
# ./core/set.h:275: 		while (nparent->color == RED) {
	testl	%eax, %eax	# _1
	jne	.L4548	#,
# ./core/set.h:276: 			ngrand_parent = nparent->parent;
	movq	-16(%rbp), %rax	# nparent, tmp98
	movq	24(%rax), %rax	# nparent_17->parent, tmp99
	movq	%rax, -24(%rbp)	# tmp99, ngrand_parent
# ./core/set.h:278: 			if (nparent == ngrand_parent->left) {
	movq	-24(%rbp), %rax	# ngrand_parent, tmp100
	movq	16(%rax), %rax	# ngrand_parent_29->left, _2
# ./core/set.h:278: 			if (nparent == ngrand_parent->left) {
	cmpq	%rax, -16(%rbp)	# _2, nparent
	jne	.L4549	#,
# ./core/set.h:279: 				if (ngrand_parent->right->color == RED) {
	movq	-24(%rbp), %rax	# ngrand_parent, tmp101
	movq	8(%rax), %rax	# ngrand_parent_29->right, _3
# ./core/set.h:279: 				if (ngrand_parent->right->color == RED) {
	movl	(%rax), %eax	# _3->color, _4
# ./core/set.h:279: 				if (ngrand_parent->right->color == RED) {
	testl	%eax, %eax	# _4
	jne	.L4550	#,
# ./core/set.h:280: 					_set_color(nparent, BLACK);
	movq	-16(%rbp), %rcx	# nparent, tmp102
	movq	-40(%rbp), %rax	# this, tmp103
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp102,
	movq	%rax, %rdi	# tmp103,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:281: 					_set_color(ngrand_parent->right, BLACK);
	movq	-24(%rbp), %rax	# ngrand_parent, tmp104
	movq	8(%rax), %rcx	# ngrand_parent_29->right, _5
	movq	-40(%rbp), %rax	# this, tmp105
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# _5,
	movq	%rax, %rdi	# tmp105,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:282: 					_set_color(ngrand_parent, RED);
	movq	-24(%rbp), %rcx	# ngrand_parent, tmp106
	movq	-40(%rbp), %rax	# this, tmp107
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp106,
	movq	%rax, %rdi	# tmp107,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:283: 					node = ngrand_parent;
	movq	-24(%rbp), %rax	# ngrand_parent, tmp108
	movq	%rax, -8(%rbp)	# tmp108, node
# ./core/set.h:284: 					nparent = node->parent;
	movq	-8(%rbp), %rax	# node, tmp109
	movq	24(%rax), %rax	# node_51->parent, tmp110
	movq	%rax, -16(%rbp)	# tmp110, nparent
	jmp	.L4555	#
.L4550:
# ./core/set.h:286: 					if (node == nparent->right) {
	movq	-16(%rbp), %rax	# nparent, tmp111
	movq	8(%rax), %rax	# nparent_17->right, _6
# ./core/set.h:286: 					if (node == nparent->right) {
	cmpq	%rax, -8(%rbp)	# _6, node
	jne	.L4552	#,
# ./core/set.h:287: 						_rotate_left(nparent);
	movq	-16(%rbp), %rdx	# nparent, tmp112
	movq	-40(%rbp), %rax	# this, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE	#
# ./core/set.h:288: 						node = nparent;
	movq	-16(%rbp), %rax	# nparent, tmp114
	movq	%rax, -8(%rbp)	# tmp114, node
# ./core/set.h:289: 						nparent = node->parent;
	movq	-8(%rbp), %rax	# node, tmp115
	movq	24(%rax), %rax	# node_43->parent, tmp116
	movq	%rax, -16(%rbp)	# tmp116, nparent
.L4552:
# ./core/set.h:291: 					_set_color(nparent, BLACK);
	movq	-16(%rbp), %rcx	# nparent, tmp117
	movq	-40(%rbp), %rax	# this, tmp118
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp117,
	movq	%rax, %rdi	# tmp118,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:292: 					_set_color(ngrand_parent, RED);
	movq	-24(%rbp), %rcx	# ngrand_parent, tmp119
	movq	-40(%rbp), %rax	# this, tmp120
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp119,
	movq	%rax, %rdi	# tmp120,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:293: 					_rotate_right(ngrand_parent);
	movq	-24(%rbp), %rdx	# ngrand_parent, tmp121
	movq	-40(%rbp), %rax	# this, tmp122
	movq	%rdx, %rsi	# tmp121,
	movq	%rax, %rdi	# tmp122,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE	#
	jmp	.L4555	#
.L4549:
# ./core/set.h:296: 				if (ngrand_parent->left->color == RED) {
	movq	-24(%rbp), %rax	# ngrand_parent, tmp123
	movq	16(%rax), %rax	# ngrand_parent_29->left, _7
# ./core/set.h:296: 				if (ngrand_parent->left->color == RED) {
	movl	(%rax), %eax	# _7->color, _8
# ./core/set.h:296: 				if (ngrand_parent->left->color == RED) {
	testl	%eax, %eax	# _8
	jne	.L4553	#,
# ./core/set.h:297: 					_set_color(nparent, BLACK);
	movq	-16(%rbp), %rcx	# nparent, tmp124
	movq	-40(%rbp), %rax	# this, tmp125
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp124,
	movq	%rax, %rdi	# tmp125,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:298: 					_set_color(ngrand_parent->left, BLACK);
	movq	-24(%rbp), %rax	# ngrand_parent, tmp126
	movq	16(%rax), %rcx	# ngrand_parent_29->left, _9
	movq	-40(%rbp), %rax	# this, tmp127
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# _9,
	movq	%rax, %rdi	# tmp127,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:299: 					_set_color(ngrand_parent, RED);
	movq	-24(%rbp), %rcx	# ngrand_parent, tmp128
	movq	-40(%rbp), %rax	# this, tmp129
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp128,
	movq	%rax, %rdi	# tmp129,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:300: 					node = ngrand_parent;
	movq	-24(%rbp), %rax	# ngrand_parent, tmp130
	movq	%rax, -8(%rbp)	# tmp130, node
# ./core/set.h:301: 					nparent = node->parent;
	movq	-8(%rbp), %rax	# node, tmp131
	movq	24(%rax), %rax	# node_40->parent, tmp132
	movq	%rax, -16(%rbp)	# tmp132, nparent
	jmp	.L4555	#
.L4553:
# ./core/set.h:303: 					if (node == nparent->left) {
	movq	-16(%rbp), %rax	# nparent, tmp133
	movq	16(%rax), %rax	# nparent_17->left, _10
# ./core/set.h:303: 					if (node == nparent->left) {
	cmpq	%rax, -8(%rbp)	# _10, node
	jne	.L4554	#,
# ./core/set.h:304: 						_rotate_right(nparent);
	movq	-16(%rbp), %rdx	# nparent, tmp134
	movq	-40(%rbp), %rax	# this, tmp135
	movq	%rdx, %rsi	# tmp134,
	movq	%rax, %rdi	# tmp135,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE	#
# ./core/set.h:305: 						node = nparent;
	movq	-16(%rbp), %rax	# nparent, tmp136
	movq	%rax, -8(%rbp)	# tmp136, node
# ./core/set.h:306: 						nparent = node->parent;
	movq	-8(%rbp), %rax	# node, tmp137
	movq	24(%rax), %rax	# node_32->parent, tmp138
	movq	%rax, -16(%rbp)	# tmp138, nparent
.L4554:
# ./core/set.h:308: 					_set_color(nparent, BLACK);
	movq	-16(%rbp), %rcx	# nparent, tmp139
	movq	-40(%rbp), %rax	# this, tmp140
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp139,
	movq	%rax, %rdi	# tmp140,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:309: 					_set_color(ngrand_parent, RED);
	movq	-24(%rbp), %rcx	# ngrand_parent, tmp141
	movq	-40(%rbp), %rax	# this, tmp142
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp141,
	movq	%rax, %rdi	# tmp142,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:310: 					_rotate_left(ngrand_parent);
	movq	-24(%rbp), %rdx	# ngrand_parent, tmp143
	movq	-40(%rbp), %rax	# this, tmp144
	movq	%rdx, %rsi	# tmp143,
	movq	%rax, %rdi	# tmp144,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE	#
# ./core/set.h:275: 		while (nparent->color == RED) {
	jmp	.L4555	#
.L4548:
# ./core/set.h:315: 		_set_color(_data._root->left, BLACK);
	movq	-40(%rbp), %rax	# this, tmp145
	movq	(%rax), %rax	# this_30(D)->_data._root, _11
# ./core/set.h:315: 		_set_color(_data._root->left, BLACK);
	movq	16(%rax), %rcx	# _11->left, _12
	movq	-40(%rbp), %rax	# this, tmp146
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# _12,
	movq	%rax, %rdi	# tmp146,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:316: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3210:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE14_insert_rb_fixEPNS5_7ElementE
	.section	.text._ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_,"axG",@progbits,_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_,comdat
	.align 2
	.weak	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_
	.type	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_, @function
_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_:
.LFB3211:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -56(%rbp)	# this, this
	movq	%rsi, -64(%rbp)	# p_value, p_value
# ./core/set.h:228: 		Element *node = _data._root->left;
	movq	-56(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_12(D)->_data._root, _1
# ./core/set.h:228: 		Element *node = _data._root->left;
	movq	16(%rax), %rax	# _1->left, tmp95
	movq	%rax, -8(%rbp)	# tmp95, node
.L4564:
# ./core/set.h:231: 		while (node != _data._nil) {
	movq	-56(%rbp), %rax	# this, tmp96
	movq	8(%rax), %rax	# this_12(D)->_data._nil, _2
# ./core/set.h:231: 		while (node != _data._nil) {
	cmpq	%rax, -8(%rbp)	# _2, node
	je	.L4557	#,
# ./core/set.h:232: 			if (less(p_value, node->value))
	movq	-8(%rbp), %rax	# node, tmp97
	leaq	48(%rax), %rdx	#, _3
	movq	-64(%rbp), %rax	# p_value, tmp98
	movq	%rax, -16(%rbp)	# tmp98, p_a
	movq	%rdx, -24(%rbp)	# _3, p_b
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	movq	-16(%rbp), %rax	# p_a, tmp99
	movq	(%rax), %rdx	# *p_a_22, _24
	movq	-24(%rbp), %rax	# p_b, tmp100
	movq	(%rax), %rax	# *p_b_23, _25
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	cmpq	%rax, %rdx	# _25, _24
	setb	%al	#, D.56385
# ./core/set.h:232: 			if (less(p_value, node->value))
	testb	%al, %al	# D.56385
	je	.L4559	#,
# ./core/set.h:233: 				node = node->left;
	movq	-8(%rbp), %rax	# node, tmp101
	movq	16(%rax), %rax	# node_5->left, tmp102
	movq	%rax, -8(%rbp)	# tmp102, node
	jmp	.L4564	#
.L4559:
# ./core/set.h:234: 			else if (less(node->value, p_value))
	movq	-8(%rbp), %rax	# node, tmp103
	addq	$48, %rax	#, _4
	movq	%rax, -32(%rbp)	# _4, p_a
	movq	-64(%rbp), %rax	# p_value, tmp104
	movq	%rax, -40(%rbp)	# tmp104, p_b
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	movq	-32(%rbp), %rax	# p_a, tmp105
	movq	(%rax), %rdx	# *p_a_27, _29
	movq	-40(%rbp), %rax	# p_b, tmp106
	movq	(%rax), %rax	# *p_b_28, _30
# ./core/typedefs.h:290: 	_ALWAYS_INLINE_ bool operator()(const T &p_a, const T &p_b) const { return (p_a < p_b); }
	cmpq	%rax, %rdx	# _30, _29
	setb	%al	#, D.56391
# ./core/set.h:234: 			else if (less(node->value, p_value))
	testb	%al, %al	# D.56391
	je	.L4562	#,
# ./core/set.h:235: 				node = node->right;
	movq	-8(%rbp), %rax	# node, tmp107
	movq	8(%rax), %rax	# node_5->right, tmp108
	movq	%rax, -8(%rbp)	# tmp108, node
	jmp	.L4564	#
.L4562:
# ./core/set.h:237: 				return node; // found
	movq	-8(%rbp), %rax	# node, _7
	jmp	.L4565	#
.L4557:
# ./core/set.h:240: 		return NULL;
	movl	$0, %eax	#, _7
.L4565:
# ./core/set.h:241: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3211:
	.size	_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_, .-_ZNK3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE5_findERKS1_
	.section	.rodata
	.align 8
.LC156:
	.string	"Condition ' p_node == _data._nil && p_color == RED ' is true."
.LC157:
	.string	"_set_color"
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi:
.LFB3212:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_node, p_node
	movl	%edx, -20(%rbp)	# p_color, p_color
# ./core/set.h:145: 		ERR_FAIL_COND(p_node == _data._nil && p_color == RED);
	movq	-8(%rbp), %rax	# this, tmp91
	movq	8(%rax), %rax	# this_12(D)->_data._nil, _1
	cmpq	%rax, -16(%rbp)	# _1, p_node
	sete	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4567	#,
# ./core/set.h:145: 		ERR_FAIL_COND(p_node == _data._nil && p_color == RED);
	cmpl	$0, -20(%rbp)	#, p_color
	sete	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L4567	#,
# ./core/set.h:145: 		ERR_FAIL_COND(p_node == _data._nil && p_color == RED);
	movl	$1, %eax	#, iftmp.97_9
	jmp	.L4568	#
.L4567:
# ./core/set.h:145: 		ERR_FAIL_COND(p_node == _data._nil && p_color == RED);
	movl	$0, %eax	#, iftmp.97_9
.L4568:
# ./core/set.h:145: 		ERR_FAIL_COND(p_node == _data._nil && p_color == RED);
	movzbl	%al, %eax	# iftmp.97_9, _8
	testq	%rax, %rax	# _8
	je	.L4569	#,
# ./core/set.h:145: 		ERR_FAIL_COND(p_node == _data._nil && p_color == RED);
	movl	$0, %r8d	#,
	movl	$.LC156, %ecx	#,
	movl	$145, %edx	#,
	movl	$.LC134, %esi	#,
	movl	$.LC157, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4566	#
.L4569:
# ./core/set.h:145: 		ERR_FAIL_COND(p_node == _data._nil && p_color == RED);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/set.h:146: 		p_node->color = p_color;
	movq	-16(%rbp), %rax	# p_node, tmp92
	movl	-20(%rbp), %edx	# p_color, tmp93
	movl	%edx, (%rax)	# tmp93, p_node_13(D)->color
.L4566:
# ./core/set.h:147: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3212:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi
	.section	.rodata
	.align 8
.LC158:
	.string	"Condition ' _data._nil->color != BLACK ' is true."
.LC159:
	.string	"_erase_fix_rb"
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE:
.LFB3213:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_node, p_node
# ./core/set.h:364: 		Element *root = _data._root->left;
	movq	-40(%rbp), %rax	# this, tmp108
	movq	(%rax), %rax	# this_40(D)->_data._root, _1
# ./core/set.h:364: 		Element *root = _data._root->left;
	movq	16(%rax), %rax	# _1->left, tmp109
	movq	%rax, -32(%rbp)	# tmp109, root
# ./core/set.h:365: 		Element *node = _data._nil;
	movq	-40(%rbp), %rax	# this, tmp110
	movq	8(%rax), %rax	# this_40(D)->_data._nil, tmp111
	movq	%rax, -8(%rbp)	# tmp111, node
# ./core/set.h:366: 		Element *sibling = p_node;
	movq	-48(%rbp), %rax	# p_node, tmp112
	movq	%rax, -16(%rbp)	# tmp112, sibling
# ./core/set.h:367: 		Element *parent = sibling->parent;
	movq	-16(%rbp), %rax	# sibling, tmp113
	movq	24(%rax), %rax	# sibling_44->parent, tmp114
	movq	%rax, -24(%rbp)	# tmp114, parent
.L4583:
# ./core/set.h:369: 		while (node != root) { // If red node found, will exit at a break
	movq	-8(%rbp), %rax	# node, tmp115
	cmpq	-32(%rbp), %rax	# root, tmp115
	je	.L4572	#,
# ./core/set.h:370: 			if (sibling->color == RED) {
	movq	-16(%rbp), %rax	# sibling, tmp116
	movl	(%rax), %eax	# sibling_27->color, _2
# ./core/set.h:370: 			if (sibling->color == RED) {
	testl	%eax, %eax	# _2
	jne	.L4573	#,
# ./core/set.h:371: 				_set_color(sibling, BLACK);
	movq	-16(%rbp), %rcx	# sibling, tmp117
	movq	-40(%rbp), %rax	# this, tmp118
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp117,
	movq	%rax, %rdi	# tmp118,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:372: 				_set_color(parent, RED);
	movq	-24(%rbp), %rcx	# parent, tmp119
	movq	-40(%rbp), %rax	# this, tmp120
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp119,
	movq	%rax, %rdi	# tmp120,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:373: 				if (sibling == parent->right) {
	movq	-24(%rbp), %rax	# parent, tmp121
	movq	8(%rax), %rax	# parent_31->right, _3
# ./core/set.h:373: 				if (sibling == parent->right) {
	cmpq	%rax, -16(%rbp)	# _3, sibling
	jne	.L4574	#,
# ./core/set.h:374: 					sibling = sibling->left;
	movq	-16(%rbp), %rax	# sibling, tmp122
	movq	16(%rax), %rax	# sibling_27->left, tmp123
	movq	%rax, -16(%rbp)	# tmp123, sibling
# ./core/set.h:375: 					_rotate_left(parent);
	movq	-24(%rbp), %rdx	# parent, tmp124
	movq	-40(%rbp), %rax	# this, tmp125
	movq	%rdx, %rsi	# tmp124,
	movq	%rax, %rdi	# tmp125,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE	#
	jmp	.L4573	#
.L4574:
# ./core/set.h:377: 					sibling = sibling->right;
	movq	-16(%rbp), %rax	# sibling, tmp126
	movq	8(%rax), %rax	# sibling_27->right, tmp127
	movq	%rax, -16(%rbp)	# tmp127, sibling
# ./core/set.h:378: 					_rotate_right(parent);
	movq	-24(%rbp), %rdx	# parent, tmp128
	movq	-40(%rbp), %rax	# this, tmp129
	movq	%rdx, %rsi	# tmp128,
	movq	%rax, %rdi	# tmp129,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE	#
.L4573:
# ./core/set.h:381: 			if ((sibling->left->color == BLACK) && (sibling->right->color == BLACK)) {
	movq	-16(%rbp), %rax	# sibling, tmp130
	movq	16(%rax), %rax	# sibling_28->left, _4
# ./core/set.h:381: 			if ((sibling->left->color == BLACK) && (sibling->right->color == BLACK)) {
	movl	(%rax), %eax	# _4->color, _5
# ./core/set.h:381: 			if ((sibling->left->color == BLACK) && (sibling->right->color == BLACK)) {
	cmpl	$1, %eax	#, _5
	jne	.L4575	#,
# ./core/set.h:381: 			if ((sibling->left->color == BLACK) && (sibling->right->color == BLACK)) {
	movq	-16(%rbp), %rax	# sibling, tmp131
	movq	8(%rax), %rax	# sibling_28->right, _6
# ./core/set.h:381: 			if ((sibling->left->color == BLACK) && (sibling->right->color == BLACK)) {
	movl	(%rax), %eax	# _6->color, _7
# ./core/set.h:381: 			if ((sibling->left->color == BLACK) && (sibling->right->color == BLACK)) {
	cmpl	$1, %eax	#, _7
	jne	.L4575	#,
# ./core/set.h:382: 				_set_color(sibling, RED);
	movq	-16(%rbp), %rcx	# sibling, tmp132
	movq	-40(%rbp), %rax	# this, tmp133
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp132,
	movq	%rax, %rdi	# tmp133,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:383: 				if (parent->color == RED) {
	movq	-24(%rbp), %rax	# parent, tmp134
	movl	(%rax), %eax	# parent_31->color, _8
# ./core/set.h:383: 				if (parent->color == RED) {
	testl	%eax, %eax	# _8
	jne	.L4576	#,
# ./core/set.h:384: 					_set_color(parent, BLACK);
	movq	-24(%rbp), %rcx	# parent, tmp135
	movq	-40(%rbp), %rax	# this, tmp136
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp135,
	movq	%rax, %rdi	# tmp136,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:385: 					break;
	jmp	.L4572	#
.L4576:
# ./core/set.h:387: 					node = parent;
	movq	-24(%rbp), %rax	# parent, tmp137
	movq	%rax, -8(%rbp)	# tmp137, node
# ./core/set.h:388: 					parent = node->parent;
	movq	-8(%rbp), %rax	# node, tmp138
	movq	24(%rax), %rax	# node_53->parent, tmp139
	movq	%rax, -24(%rbp)	# tmp139, parent
# ./core/set.h:389: 					sibling = (node == parent->left) ? parent->right : parent->left;
	movq	-24(%rbp), %rax	# parent, tmp140
	movq	16(%rax), %rax	# parent_54->left, _9
# ./core/set.h:389: 					sibling = (node == parent->left) ? parent->right : parent->left;
	cmpq	%rax, -8(%rbp)	# _9, node
	jne	.L4577	#,
# ./core/set.h:389: 					sibling = (node == parent->left) ? parent->right : parent->left;
	movq	-24(%rbp), %rax	# parent, tmp141
	movq	8(%rax), %rax	# parent_54->right, iftmp.102_32
	jmp	.L4578	#
.L4577:
# ./core/set.h:389: 					sibling = (node == parent->left) ? parent->right : parent->left;
	movq	-24(%rbp), %rax	# parent, tmp142
	movq	16(%rax), %rax	# parent_54->left, iftmp.102_32
.L4578:
# ./core/set.h:389: 					sibling = (node == parent->left) ? parent->right : parent->left;
	movq	%rax, -16(%rbp)	# iftmp.102_32, sibling
# ./core/set.h:383: 				if (parent->color == RED) {
	jmp	.L4586	#
.L4575:
# ./core/set.h:392: 				if (sibling == parent->right) {
	movq	-24(%rbp), %rax	# parent, tmp143
	movq	8(%rax), %rax	# parent_31->right, _10
# ./core/set.h:392: 				if (sibling == parent->right) {
	cmpq	%rax, -16(%rbp)	# _10, sibling
	jne	.L4580	#,
# ./core/set.h:393: 					if (sibling->right->color == BLACK) {
	movq	-16(%rbp), %rax	# sibling, tmp144
	movq	8(%rax), %rax	# sibling_28->right, _11
# ./core/set.h:393: 					if (sibling->right->color == BLACK) {
	movl	(%rax), %eax	# _11->color, _12
# ./core/set.h:393: 					if (sibling->right->color == BLACK) {
	cmpl	$1, %eax	#, _12
	jne	.L4581	#,
# ./core/set.h:394: 						_set_color(sibling->left, BLACK);
	movq	-16(%rbp), %rax	# sibling, tmp145
	movq	16(%rax), %rcx	# sibling_28->left, _13
	movq	-40(%rbp), %rax	# this, tmp146
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# _13,
	movq	%rax, %rdi	# tmp146,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:395: 						_set_color(sibling, RED);
	movq	-16(%rbp), %rcx	# sibling, tmp147
	movq	-40(%rbp), %rax	# this, tmp148
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp147,
	movq	%rax, %rdi	# tmp148,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:396: 						_rotate_right(sibling);
	movq	-16(%rbp), %rdx	# sibling, tmp149
	movq	-40(%rbp), %rax	# this, tmp150
	movq	%rdx, %rsi	# tmp149,
	movq	%rax, %rdi	# tmp150,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE	#
# ./core/set.h:397: 						sibling = sibling->parent;
	movq	-16(%rbp), %rax	# sibling, tmp151
	movq	24(%rax), %rax	# sibling_28->parent, tmp152
	movq	%rax, -16(%rbp)	# tmp152, sibling
.L4581:
# ./core/set.h:399: 					_set_color(sibling, parent->color);
	movq	-24(%rbp), %rax	# parent, tmp153
	movl	(%rax), %edx	# parent_31->color, _14
	movq	-16(%rbp), %rcx	# sibling, tmp154
	movq	-40(%rbp), %rax	# this, tmp155
	movq	%rcx, %rsi	# tmp154,
	movq	%rax, %rdi	# tmp155,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:400: 					_set_color(parent, BLACK);
	movq	-24(%rbp), %rcx	# parent, tmp156
	movq	-40(%rbp), %rax	# this, tmp157
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp156,
	movq	%rax, %rdi	# tmp157,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:401: 					_set_color(sibling->right, BLACK);
	movq	-16(%rbp), %rax	# sibling, tmp158
	movq	8(%rax), %rcx	# sibling_29->right, _15
	movq	-40(%rbp), %rax	# this, tmp159
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# _15,
	movq	%rax, %rdi	# tmp159,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:402: 					_rotate_left(parent);
	movq	-24(%rbp), %rdx	# parent, tmp160
	movq	-40(%rbp), %rax	# this, tmp161
	movq	%rdx, %rsi	# tmp160,
	movq	%rax, %rdi	# tmp161,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE	#
# ./core/set.h:403: 					break;
	jmp	.L4572	#
.L4580:
# ./core/set.h:405: 					if (sibling->left->color == BLACK) {
	movq	-16(%rbp), %rax	# sibling, tmp162
	movq	16(%rax), %rax	# sibling_28->left, _16
# ./core/set.h:405: 					if (sibling->left->color == BLACK) {
	movl	(%rax), %eax	# _16->color, _17
# ./core/set.h:405: 					if (sibling->left->color == BLACK) {
	cmpl	$1, %eax	#, _17
	jne	.L4582	#,
# ./core/set.h:406: 						_set_color(sibling->right, BLACK);
	movq	-16(%rbp), %rax	# sibling, tmp163
	movq	8(%rax), %rcx	# sibling_28->right, _18
	movq	-40(%rbp), %rax	# this, tmp164
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# _18,
	movq	%rax, %rdi	# tmp164,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:407: 						_set_color(sibling, RED);
	movq	-16(%rbp), %rcx	# sibling, tmp165
	movq	-40(%rbp), %rax	# this, tmp166
	movl	$0, %edx	#,
	movq	%rcx, %rsi	# tmp165,
	movq	%rax, %rdi	# tmp166,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:408: 						_rotate_left(sibling);
	movq	-16(%rbp), %rdx	# sibling, tmp167
	movq	-40(%rbp), %rax	# this, tmp168
	movq	%rdx, %rsi	# tmp167,
	movq	%rax, %rdi	# tmp168,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE	#
# ./core/set.h:409: 						sibling = sibling->parent;
	movq	-16(%rbp), %rax	# sibling, tmp169
	movq	24(%rax), %rax	# sibling_28->parent, tmp170
	movq	%rax, -16(%rbp)	# tmp170, sibling
.L4582:
# ./core/set.h:412: 					_set_color(sibling, parent->color);
	movq	-24(%rbp), %rax	# parent, tmp171
	movl	(%rax), %edx	# parent_31->color, _19
	movq	-16(%rbp), %rcx	# sibling, tmp172
	movq	-40(%rbp), %rax	# this, tmp173
	movq	%rcx, %rsi	# tmp172,
	movq	%rax, %rdi	# tmp173,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:413: 					_set_color(parent, BLACK);
	movq	-24(%rbp), %rcx	# parent, tmp174
	movq	-40(%rbp), %rax	# this, tmp175
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# tmp174,
	movq	%rax, %rdi	# tmp175,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:414: 					_set_color(sibling->left, BLACK);
	movq	-16(%rbp), %rax	# sibling, tmp176
	movq	16(%rax), %rcx	# sibling_30->left, _20
	movq	-40(%rbp), %rax	# this, tmp177
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# _20,
	movq	%rax, %rdi	# tmp177,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE10_set_colorEPNS5_7ElementEi	#
# ./core/set.h:415: 					_rotate_right(parent);
	movq	-24(%rbp), %rdx	# parent, tmp178
	movq	-40(%rbp), %rax	# this, tmp179
	movq	%rdx, %rsi	# tmp178,
	movq	%rax, %rdi	# tmp179,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE	#
# ./core/set.h:416: 					break;
	jmp	.L4572	#
.L4586:
# ./core/set.h:369: 		while (node != root) { // If red node found, will exit at a break
	jmp	.L4583	#
.L4572:
# ./core/set.h:421: 		ERR_FAIL_COND(_data._nil->color != BLACK);
	movq	-40(%rbp), %rax	# this, tmp180
	movq	8(%rax), %rax	# this_40(D)->_data._nil, _21
	movl	(%rax), %eax	# _21->color, _22
	cmpl	$1, %eax	#, _22
	setne	%al	#, _23
	movzbl	%al, %eax	# _23, _24
	testq	%rax, %rax	# _25
	je	.L4584	#,
# ./core/set.h:421: 		ERR_FAIL_COND(_data._nil->color != BLACK);
	movl	$0, %r8d	#,
	movl	$.LC158, %ecx	#,
	movl	$421, %edx	#,
	movl	$.LC134, %esi	#,
	movl	$.LC159, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4571	#
.L4584:
# ./core/set.h:421: 		ERR_FAIL_COND(_data._nil->color != BLACK);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
.L4571:
# ./core/set.h:422: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3213:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_erase_fix_rbEPNS5_7ElementE
	.section	.text._Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_
	.type	_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_, @function
_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_:
.LFB3214:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.56394
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.56395
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.103_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.103_5
	jne	.L4591	#,
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, -16(%rbp)	# tmp85, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp86
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp86,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L4587	#
.L4591:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L4587:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3214:
	.size	_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_, .-_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_
	.section	.text._ZN3RefI9ReferenceE5unrefEv,"axG",@progbits,_ZN3RefI9ReferenceE5unrefEv,comdat
	.align 2
	.weak	_ZN3RefI9ReferenceE5unrefEv
	.type	_ZN3RefI9ReferenceE5unrefEv, @function
_ZN3RefI9ReferenceE5unrefEv:
.LFB3216:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	-8(%rbp), %rax	# this, tmp87
	movq	(%rax), %rax	# this_10(D)->reference, _1
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	testq	%rax, %rax	# _1
	je	.L4593	#,
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_10(D)->reference, _2
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movq	%rax, %rdi	# _2,
	call	_ZN9Reference11unreferenceEv	#
	testb	%al, %al	# _3
	je	.L4593	#,
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movl	$1, %eax	#, iftmp.118_5
	jmp	.L4594	#
.L4593:
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	movl	$0, %eax	#, iftmp.118_5
.L4594:
# ./core/reference.h:280: 		if (reference && reference->unreference()) {
	testb	%al, %al	# iftmp.118_5
	je	.L4595	#,
# ./core/reference.h:282: 			memdelete(reference);
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_10(D)->reference, _4
	movq	%rax, %rdi	# _4,
	call	_Z9memdeleteI9ReferenceEvPT_	#
.L4595:
# ./core/reference.h:284: 		reference = NULL;
	movq	-8(%rbp), %rax	# this, tmp90
	movq	$0, (%rax)	#, this_10(D)->reference
# ./core/reference.h:285: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3216:
	.size	_ZN3RefI9ReferenceE5unrefEv, .-_ZN3RefI9ReferenceE5unrefEv
	.section	.text._ZN3RefI9ReferenceEC2Ev,"axG",@progbits,_ZN3RefI9ReferenceEC5Ev,comdat
	.align 2
	.weak	_ZN3RefI9ReferenceEC2Ev
	.type	_ZN3RefI9ReferenceEC2Ev, @function
_ZN3RefI9ReferenceEC2Ev:
.LFB3218:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:293: 		reference = NULL;
	movq	-8(%rbp), %rax	# this, tmp82
	movq	$0, (%rax)	#, this_2(D)->reference
# ./core/reference.h:294: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3218:
	.size	_ZN3RefI9ReferenceEC2Ev, .-_ZN3RefI9ReferenceEC2Ev
	.weak	_ZN3RefI9ReferenceEC1Ev
	.set	_ZN3RefI9ReferenceEC1Ev,_ZN3RefI9ReferenceEC2Ev
	.section	.text._ZN3RefI9ReferenceED2Ev,"axG",@progbits,_ZN3RefI9ReferenceED5Ev,comdat
	.align 2
	.weak	_ZN3RefI9ReferenceED2Ev
	.type	_ZN3RefI9ReferenceED2Ev, @function
_ZN3RefI9ReferenceED2Ev:
.LFB3221:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3221
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/reference.h:298: 		unref();
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN3RefI9ReferenceE5unrefEv	#
# ./core/reference.h:299: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3221:
	.section	.gcc_except_table
.LLSDA3221:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3221-.LLSDACSB3221
.LLSDACSB3221:
.LLSDACSE3221:
	.section	.text._ZN3RefI9ReferenceED2Ev,"axG",@progbits,_ZN3RefI9ReferenceED5Ev,comdat
	.size	_ZN3RefI9ReferenceED2Ev, .-_ZN3RefI9ReferenceED2Ev
	.weak	_ZN3RefI9ReferenceED1Ev
	.set	_ZN3RefI9ReferenceED1Ev,_ZN3RefI9ReferenceED2Ev
	.section	.text._ZN6Object7cast_toI9ReferenceEEPT_PS_,"axG",@progbits,_ZN6Object7cast_toI9ReferenceEEPT_PS_,comdat
	.weak	_ZN6Object7cast_toI9ReferenceEEPT_PS_
	.type	_ZN6Object7cast_toI9ReferenceEEPT_PS_, @function
_ZN6Object7cast_toI9ReferenceEEPT_PS_:
.LFB3223:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_object, p_object
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movq	-8(%rbp), %rax	# p_object, p_object.121_3
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	testq	%rax, %rax	# p_object.121_3
	je	.L4599	#,
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movl	$0, %ecx	#,
	movl	$_ZTI9Reference, %edx	#,
	movl	$_ZTI6Object, %esi	#,
	movq	%rax, %rdi	# p_object.121_3,
	call	__dynamic_cast	#
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	jmp	.L4601	#
.L4599:
# core/object.h:601: 		return dynamic_cast<T *>(p_object);
	movl	$0, %eax	#, iftmp.120_1
.L4601:
# core/object.h:610: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3223:
	.size	_ZN6Object7cast_toI9ReferenceEEPT_PS_, .-_ZN6Object7cast_toI9ReferenceEEPT_PS_
	.section	.text._ZN3RefI9ReferenceE3refERKS1_,"axG",@progbits,_ZN3RefI9ReferenceE3refERKS1_,comdat
	.align 2
	.weak	_ZN3RefI9ReferenceE3refERKS1_
	.type	_ZN3RefI9ReferenceE3refERKS1_, @function
_ZN3RefI9ReferenceE3refERKS1_:
.LFB3224:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_from, p_from
# ./core/reference.h:70: 		if (p_from.reference == reference)
	movq	-16(%rbp), %rax	# p_from, tmp87
	movq	(%rax), %rdx	# p_from_8(D)->reference, _1
# ./core/reference.h:70: 		if (p_from.reference == reference)
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_9(D)->reference, _2
# ./core/reference.h:70: 		if (p_from.reference == reference)
	cmpq	%rax, %rdx	# _2, _1
	je	.L4605	#,
# ./core/reference.h:73: 		unref();
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rax, %rdi	# tmp89,
	call	_ZN3RefI9ReferenceE5unrefEv	#
# ./core/reference.h:75: 		reference = p_from.reference;
	movq	-16(%rbp), %rax	# p_from, tmp90
	movq	(%rax), %rdx	# p_from_8(D)->reference, _3
# ./core/reference.h:75: 		reference = p_from.reference;
	movq	-8(%rbp), %rax	# this, tmp91
	movq	%rdx, (%rax)	# _3, this_9(D)->reference
# ./core/reference.h:76: 		if (reference)
	movq	-8(%rbp), %rax	# this, tmp92
	movq	(%rax), %rax	# this_9(D)->reference, _4
# ./core/reference.h:76: 		if (reference)
	testq	%rax, %rax	# _4
	je	.L4602	#,
# ./core/reference.h:77: 			reference->reference();
	movq	-8(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_9(D)->reference, _5
	movq	%rax, %rdi	# _5,
	call	_ZN9Reference9referenceEv	#
	jmp	.L4602	#
.L4605:
# ./core/reference.h:71: 			return;
	nop	
.L4602:
# ./core/reference.h:78: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3224:
	.size	_ZN3RefI9ReferenceE3refERKS1_, .-_ZN3RefI9ReferenceE3refERKS1_
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.type	_ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE, @function
_ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE:
.LFB3225:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_I, p_I
# ./core/list.h:367: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp90
	movq	(%rax), %rax	# this_10(D)->_data, _1
# ./core/list.h:367: 		if (_data) {
	testq	%rax, %rax	# _1
	je	.L4607	#,
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_10(D)->_data, _2
# ./core/list.h:368: 			bool ret = _data->erase(p_I);
	movq	-32(%rbp), %rdx	# p_I, tmp92
	movq	%rdx, %rsi	# tmp92,
	movq	%rax, %rdi	# _2,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE	#
	movb	%al, -1(%rbp)	# _14, ret
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movq	-24(%rbp), %rax	# this, tmp93
	movq	(%rax), %rax	# this_10(D)->_data, _3
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	movl	16(%rax), %eax	# _3->size_cache, _4
# ./core/list.h:370: 			if (_data->size_cache == 0) {
	testl	%eax, %eax	# _4
	jne	.L4608	#,
# ./core/list.h:371: 				memdelete_allocator<_Data, A>(_data);
	movq	-24(%rbp), %rax	# this, tmp94
	movq	(%rax), %rax	# this_10(D)->_data, _5
	movq	%rax, %rdi	# _5,
	call	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE5_DataES2_EvPT_	#
# ./core/list.h:372: 				_data = NULL;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	$0, (%rax)	#, this_10(D)->_data
.L4608:
# ./core/list.h:375: 			return ret;
	movzbl	-1(%rbp), %eax	# ret, _6
	jmp	.L4609	#
.L4607:
# ./core/list.h:378: 		return false;
	movl	$0, %eax	#, _6
.L4609:
# ./core/list.h:379: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3225:
	.size	_ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE, .-_ZN4ListI10MethodInfo16DefaultAllocatorE5eraseEPKNS2_7ElementE
	.section	.text._ZN10PoolVectorI6StringE5WriteC2Ev,"axG",@progbits,_ZN10PoolVectorI6StringE5WriteC5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE5WriteC2Ev
	.type	_ZN10PoolVectorI6StringE5WriteC2Ev, @function
_ZN10PoolVectorI6StringE5WriteC2Ev:
.LFB3227:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:345: 		Write() {}
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10PoolVectorI6StringE6AccessC2Ev	#
	movl	$_ZTVN10PoolVectorI6StringE5WriteE+16, %edx	#, _2
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _2, this_5(D)->D.43460._vptr.Access
# ./core/pool_vector.h:345: 		Write() {}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3227:
	.size	_ZN10PoolVectorI6StringE5WriteC2Ev, .-_ZN10PoolVectorI6StringE5WriteC2Ev
	.weak	_ZN10PoolVectorI6StringE5WriteC1Ev
	.set	_ZN10PoolVectorI6StringE5WriteC1Ev,_ZN10PoolVectorI6StringE5WriteC2Ev
	.section	.text._ZN10PoolVectorI6StringE6AccessD2Ev,"axG",@progbits,_ZN10PoolVectorI6StringE6AccessD5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE6AccessD2Ev
	.type	_ZN10PoolVectorI6StringE6AccessD2Ev, @function
_ZN10PoolVectorI6StringE6AccessD2Ev:
.LFB3230:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# this, this
# ./core/pool_vector.h:303: 		}
	movl	$_ZTVN10PoolVectorI6StringE6AccessE+16, %edx	#, _1
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Access
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rax, -8(%rbp)	# tmp90, this
# ./core/pool_vector.h:283: 			if (alloc) {
	movq	-8(%rbp), %rax	# this, tmp91
	movq	8(%rax), %rax	# this_6->alloc, _7
# ./core/pool_vector.h:283: 			if (alloc) {
	testq	%rax, %rax	# _7
	je	.L4616	#,
# ./core/pool_vector.h:284: 				if (atomic_decrement(&alloc->lock) == 0) {
	movq	-8(%rbp), %rax	# this, tmp92
	movq	8(%rax), %rax	# this_6->alloc, _8
# ./core/pool_vector.h:284: 				if (atomic_decrement(&alloc->lock) == 0) {
	addq	$4, %rax	#, _9
	movq	%rax, -16(%rbp)	# _9, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-16(%rbp), %rdx	# pw, tmp93
	movl	$1, %eax	#, tmp95
	negl	%eax	# tmp95
	movl	%eax, %ecx	# tmp95, tmp94
	movl	%ecx, %eax	# tmp94, _11
	lock xaddl	%eax, (%rdx)	#, _11,
	addl	%ecx, %eax	# tmp94, _11
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/pool_vector.h:284: 				if (atomic_decrement(&alloc->lock) == 0) {
	testl	%eax, %eax	# _11
	sete	%al	#, retval.161_14
# ./core/pool_vector.h:284: 				if (atomic_decrement(&alloc->lock) == 0) {
	testb	%al, %al	# retval.161_14
# ./core/pool_vector.h:290: 				mem = NULL;
	movq	-8(%rbp), %rax	# this, tmp96
	movq	$0, 16(%rax)	#, this_6->mem
# ./core/pool_vector.h:291: 				alloc = NULL;
	movq	-8(%rbp), %rax	# this, tmp97
	movq	$0, 8(%rax)	#, this_6->alloc
.L4616:
# ./core/pool_vector.h:293: 		}
	nop	
# ./core/pool_vector.h:303: 		}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3230:
	.size	_ZN10PoolVectorI6StringE6AccessD2Ev, .-_ZN10PoolVectorI6StringE6AccessD2Ev
	.weak	_ZN10PoolVectorI6StringE6AccessD1Ev
	.set	_ZN10PoolVectorI6StringE6AccessD1Ev,_ZN10PoolVectorI6StringE6AccessD2Ev
	.section	.text._ZN10PoolVectorI6StringE6AccessD0Ev,"axG",@progbits,_ZN10PoolVectorI6StringE6AccessD5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE6AccessD0Ev
	.type	_ZN10PoolVectorI6StringE6AccessD0Ev, @function
_ZN10PoolVectorI6StringE6AccessD0Ev:
.LFB3232:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:303: 		}
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN10PoolVectorI6StringE6AccessD1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$24, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3232:
	.size	_ZN10PoolVectorI6StringE6AccessD0Ev, .-_ZN10PoolVectorI6StringE6AccessD0Ev
	.section	.text._ZN10PoolVectorI6StringE4ReadD2Ev,"axG",@progbits,_ZN10PoolVectorI6StringE4ReadD5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE4ReadD2Ev
	.type	_ZN10PoolVectorI6StringE4ReadD2Ev, @function
_ZN10PoolVectorI6StringE4ReadD2Ev:
.LFB3237:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:310: 	class Read : public Access {
	movl	$_ZTVN10PoolVectorI6StringE4ReadE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp84
	movq	%rdx, (%rax)	# _1, this_4(D)->D.46989._vptr.Access
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10PoolVectorI6StringE6AccessD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3237:
	.size	_ZN10PoolVectorI6StringE4ReadD2Ev, .-_ZN10PoolVectorI6StringE4ReadD2Ev
	.weak	_ZN10PoolVectorI6StringE4ReadD1Ev
	.set	_ZN10PoolVectorI6StringE4ReadD1Ev,_ZN10PoolVectorI6StringE4ReadD2Ev
	.section	.text._ZN10PoolVectorI6StringE4ReadD0Ev,"axG",@progbits,_ZN10PoolVectorI6StringE4ReadD5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE4ReadD0Ev
	.type	_ZN10PoolVectorI6StringE4ReadD0Ev, @function
_ZN10PoolVectorI6StringE4ReadD0Ev:
.LFB3239:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:310: 	class Read : public Access {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN10PoolVectorI6StringE4ReadD1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$24, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3239:
	.size	_ZN10PoolVectorI6StringE4ReadD0Ev, .-_ZN10PoolVectorI6StringE4ReadD0Ev
	.section	.rodata
.LC160:
	.string	"_copy_on_write"
	.section	.text._ZN10PoolVectorI6StringE14_copy_on_writeEv,"axG",@progbits,_ZN10PoolVectorI6StringE14_copy_on_writeEv,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE14_copy_on_writeEv
	.type	_ZN10PoolVectorI6StringE14_copy_on_writeEv, @function
_ZN10PoolVectorI6StringE14_copy_on_writeEv:
.LFB3235:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3235
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$344, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -344(%rbp)	# this, this
# ./core/pool_vector.h:91: 		if (!alloc)
	movq	-344(%rbp), %rax	# this, tmp192
	movq	(%rax), %rax	# this_80(D)->alloc, _1
# ./core/pool_vector.h:91: 		if (!alloc)
	testq	%rax, %rax	# _1
	je	.L4654	#,
# ./core/pool_vector.h:97: 		if (alloc->refcount.get() == 1)
	movq	-344(%rbp), %rax	# this, tmp193
	movq	(%rax), %rax	# this_80(D)->alloc, _2
	movq	%rax, -80(%rbp)	# _3, this
# ./core/safe_refcount.h:197: 		return count;
	movq	-80(%rbp), %rax	# this, tmp194
	movl	(%rax), %eax	# this_132->count, D.57387
# ./core/pool_vector.h:97: 		if (alloc->refcount.get() == 1)
	cmpl	$1, %eax	#, D.57387
	sete	%al	#, retval.165_81
# ./core/pool_vector.h:97: 		if (alloc->refcount.get() == 1)
	testb	%al, %al	# retval.165_81
	jne	.L4655	#,
# ./core/pool_vector.h:102: 		MemoryPool::alloc_mutex->lock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.166_5
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.168_7
	movq	(%rdx), %rdx	# alloc_mutex.168_7->_vptr.Mutex, _8
	movq	(%rdx), %rdx	# *_8, _9
	movq	%rax, %rdi	# alloc_mutex.166_5,
.LEHB837:
	call	*%rdx	# _9
# ./core/pool_vector.h:103: 		if (MemoryPool::allocs_used == MemoryPool::alloc_count) {
	movl	_ZN10MemoryPool11allocs_usedE(%rip), %edx	# allocs_used, allocs_used.169_10
	movl	_ZN10MemoryPool11alloc_countE(%rip), %eax	# alloc_count, alloc_count.170_11
# ./core/pool_vector.h:103: 		if (MemoryPool::allocs_used == MemoryPool::alloc_count) {
	cmpl	%eax, %edx	# alloc_count.170_11, allocs_used.169_10
	jne	.L4625	#,
# ./core/pool_vector.h:104: 			MemoryPool::alloc_mutex->unlock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.171_12
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.173_14
	movq	(%rdx), %rdx	# alloc_mutex.173_14->_vptr.Mutex, _15
	addq	$8, %rdx	#, _16
	movq	(%rdx), %rdx	# *_16, _17
	movq	%rax, %rdi	# alloc_mutex.171_12,
	call	*%rdx	# _17
# ./core/pool_vector.h:106: 			ERR_FAIL();
	movl	$0, %r8d	#,
	movl	$.LC61, %ecx	#,
	movl	$106, %edx	#,
	movl	$.LC138, %esi	#,
	movl	$.LC160, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	jmp	.L4620	#
.L4625:
# ./core/pool_vector.h:109: 		MemoryPool::Alloc *old_alloc = alloc;
	movq	-344(%rbp), %rax	# this, tmp195
	movq	(%rax), %rax	# this_80(D)->alloc, tmp196
	movq	%rax, -32(%rbp)	# tmp196, old_alloc
# ./core/pool_vector.h:112: 		alloc = MemoryPool::free_list;
	movq	_ZN10MemoryPool9free_listE(%rip), %rdx	# free_list, free_list.174_18
	movq	-344(%rbp), %rax	# this, tmp197
	movq	%rdx, (%rax)	# free_list.174_18, this_80(D)->alloc
# ./core/pool_vector.h:113: 		MemoryPool::free_list = alloc->free_list;
	movq	-344(%rbp), %rax	# this, tmp198
	movq	(%rax), %rax	# this_80(D)->alloc, _19
# ./core/pool_vector.h:113: 		MemoryPool::free_list = alloc->free_list;
	movq	32(%rax), %rax	# _19->free_list, _20
# ./core/pool_vector.h:113: 		MemoryPool::free_list = alloc->free_list;
	movq	%rax, _ZN10MemoryPool9free_listE(%rip)	# _20, free_list
# ./core/pool_vector.h:115: 		MemoryPool::allocs_used++;
	movl	_ZN10MemoryPool11allocs_usedE(%rip), %eax	# allocs_used, allocs_used.175_21
	addl	$1, %eax	#, _22
	movl	%eax, _ZN10MemoryPool11allocs_usedE(%rip)	# _22, allocs_used
# ./core/pool_vector.h:118: 		alloc->size = old_alloc->size;
	movq	-344(%rbp), %rax	# this, tmp199
	movq	(%rax), %rax	# this_80(D)->alloc, _23
# ./core/pool_vector.h:118: 		alloc->size = old_alloc->size;
	movq	-32(%rbp), %rdx	# old_alloc, tmp200
	movq	24(%rdx), %rdx	# old_alloc_83->size, _24
# ./core/pool_vector.h:118: 		alloc->size = old_alloc->size;
	movq	%rdx, 24(%rax)	# _24, _23->size
# ./core/pool_vector.h:119: 		alloc->refcount.init();
	movq	-344(%rbp), %rax	# this, tmp201
	movq	(%rax), %rax	# this_80(D)->alloc, _25
	movq	%rax, -88(%rbp)	# _26, this
	movl	$1, -92(%rbp)	#, p_value
# ./core/safe_refcount.h:202: 		count = p_value;
	movq	-88(%rbp), %rax	# this, tmp202
	movl	-92(%rbp), %edx	# p_value, tmp203
	movl	%edx, (%rax)	# tmp203, this_134->count
# ./core/safe_refcount.h:203: 	}
	nop	
# ./core/pool_vector.h:120: 		alloc->pool_id = POOL_ALLOCATOR_INVALID_ID;
	movq	-344(%rbp), %rax	# this, tmp204
	movq	(%rax), %rax	# this_80(D)->alloc, _27
	movl	$-1, 16(%rax)	#, _27->pool_id
# ./core/pool_vector.h:121: 		alloc->lock = 0;
	movq	-344(%rbp), %rax	# this, tmp205
	movq	(%rax), %rax	# this_80(D)->alloc, _28
	movl	$0, 4(%rax)	#, _28->lock
# ./core/pool_vector.h:130: 		MemoryPool::alloc_mutex->unlock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.176_29
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.178_31
	movq	(%rdx), %rdx	# alloc_mutex.178_31->_vptr.Mutex, _32
	addq	$8, %rdx	#, _33
	movq	(%rdx), %rdx	# *_33, _34
	movq	%rax, %rdi	# alloc_mutex.176_29,
	call	*%rdx	# _34
# ./core/pool_vector.h:132: 		if (MemoryPool::memory_pool) {
	movq	_ZN10MemoryPool11memory_poolE(%rip), %rax	# memory_pool, memory_pool.179_35
	testq	%rax, %rax	# memory_pool.179_35
	jne	.L4626	#,
# ./core/pool_vector.h:135: 			alloc->mem = memalloc(alloc->size);
	movq	-344(%rbp), %rax	# this, tmp206
	movq	(%rax), %rax	# this_80(D)->alloc, _36
	movq	24(%rax), %rax	# _36->size, _37
# ./core/pool_vector.h:135: 			alloc->mem = memalloc(alloc->size);
	movq	-344(%rbp), %rdx	# this, tmp207
	movq	(%rdx), %rbx	# this_80(D)->alloc, _38
# ./core/pool_vector.h:135: 			alloc->mem = memalloc(alloc->size);
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _37,
	call	_ZN6Memory12alloc_staticEmb	#
.LEHE837:
# ./core/pool_vector.h:135: 			alloc->mem = memalloc(alloc->size);
	movq	%rax, 8(%rbx)	# _39, _38->mem
.L4626:
# ./core/pool_vector.h:139: 			Write w;
	leaq	-272(%rbp), %rax	#, tmp208
	movq	%rax, %rdi	# tmp208,
	call	_ZN10PoolVectorI6StringE5WriteC1Ev	#
# ./core/pool_vector.h:140: 			w._ref(alloc);
	movq	-344(%rbp), %rax	# this, tmp209
	movq	(%rax), %rax	# this_80(D)->alloc, _40
	movq	%rax, -120(%rbp)	# _40, p_alloc
# ./core/pool_vector.h:269: 			alloc = p_alloc;
	movq	-120(%rbp), %rax	# p_alloc, tmp210
	movq	%rax, -264(%rbp)	# tmp210, MEM[(struct Access *)&w].alloc
# ./core/pool_vector.h:270: 			if (alloc) {
	movq	-264(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _151
# ./core/pool_vector.h:270: 			if (alloc) {
	testq	%rax, %rax	# _151
	je	.L4656	#,
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	movq	-264(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _152
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	addq	$4, %rax	#, _153
	movq	%rax, -128(%rbp)	# _153, pw
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	movq	-128(%rbp), %rdx	# pw, tmp211
	movl	$1, %eax	#, _155
	lock xaddl	%eax, (%rdx)	#, _155,
	addl	$1, %eax	#, _155
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	nop	
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	cmpl	$1, %eax	#, _155
	sete	%al	#, retval.163_158
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	testb	%al, %al	# retval.163_158
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	-264(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _160
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	8(%rax), %rax	# _160->mem, _161
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	%rax, -256(%rbp)	# _161, MEM[(struct Access *)&w].mem
.L4656:
# ./core/pool_vector.h:279: 		}
	nop	
# ./core/pool_vector.h:141: 			Read r;
	leaq	-304(%rbp), %rax	#, tmp212
	movq	%rax, %rdi	# tmp212,
	call	_ZN10PoolVectorI6StringE4ReadC1Ev	#
	movq	-32(%rbp), %rax	# old_alloc, tmp213
	movq	%rax, -104(%rbp)	# tmp213, p_alloc
# ./core/pool_vector.h:269: 			alloc = p_alloc;
	movq	-104(%rbp), %rax	# p_alloc, tmp214
	movq	%rax, -296(%rbp)	# tmp214, MEM[(struct Access *)&r].alloc
# ./core/pool_vector.h:270: 			if (alloc) {
	movq	-296(%rbp), %rax	# MEM[(struct Access *)&r].alloc, _139
# ./core/pool_vector.h:270: 			if (alloc) {
	testq	%rax, %rax	# _139
	je	.L4657	#,
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	movq	-296(%rbp), %rax	# MEM[(struct Access *)&r].alloc, _140
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	addq	$4, %rax	#, _141
	movq	%rax, -112(%rbp)	# _141, pw
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	movq	-112(%rbp), %rdx	# pw, tmp215
	movl	$1, %eax	#, _143
	lock xaddl	%eax, (%rdx)	#, _143,
	addl	$1, %eax	#, _143
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	nop	
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	cmpl	$1, %eax	#, _143
	sete	%al	#, retval.163_146
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	testb	%al, %al	# retval.163_146
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	-296(%rbp), %rax	# MEM[(struct Access *)&r].alloc, _148
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	8(%rax), %rax	# _148->mem, _149
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	%rax, -288(%rbp)	# _149, MEM[(struct Access *)&r].mem
.L4657:
# ./core/pool_vector.h:279: 		}
	nop	
# ./core/pool_vector.h:144: 			int cur_elements = alloc->size / sizeof(T);
	movq	-344(%rbp), %rax	# this, tmp216
	movq	(%rax), %rax	# this_80(D)->alloc, _41
# ./core/pool_vector.h:144: 			int cur_elements = alloc->size / sizeof(T);
	movq	24(%rax), %rax	# _41->size, _42
# ./core/pool_vector.h:144: 			int cur_elements = alloc->size / sizeof(T);
	shrq	$3, %rax	#, _43
# ./core/pool_vector.h:144: 			int cur_elements = alloc->size / sizeof(T);
	movl	%eax, -36(%rbp)	# _43, cur_elements
# ./core/pool_vector.h:332: 		_FORCE_INLINE_ T *ptr() const { return this->mem; }
	movq	-256(%rbp), %rax	# w.D.43460.mem, D.57397
# ./core/pool_vector.h:145: 			T *dst = (T *)w.ptr();
	movq	%rax, -48(%rbp)	# D.57397, dst
# ./core/pool_vector.h:313: 		_FORCE_INLINE_ const T *ptr() const { return this->mem; }
	movq	-288(%rbp), %rax	# r.D.46989.mem, D.57393
# ./core/pool_vector.h:146: 			const T *src = (const T *)r.ptr();
	movq	%rax, -56(%rbp)	# D.57393, src
# ./core/pool_vector.h:147: 			for (int i = 0; i < cur_elements; i++) {
	movl	$0, -20(%rbp)	#, i
.L4640:
# ./core/pool_vector.h:147: 			for (int i = 0; i < cur_elements; i++) {
	movl	-20(%rbp), %eax	# i, tmp217
	cmpl	-36(%rbp), %eax	# cur_elements, tmp217
	jge	.L4635	#,
# ./core/pool_vector.h:148: 				memnew_placement(&dst[i], T(src[i]));
	movl	-20(%rbp), %eax	# i, tmp218
	cltq
	leaq	0(,%rax,8), %rdx	#, _45
	movq	-48(%rbp), %rax	# dst, tmp219
	addq	%rdx, %rax	# _45, _46
	movq	$8, -168(%rbp)	#, p_size
	movq	%rax, -176(%rbp)	# _46, p_pointer
	movq	$8, -184(%rbp)	#, check
	movq	$.LC27, -192(%rbp)	#, p_description
# ./core/os/memory.h:104: 	return p_pointer;
	movq	-176(%rbp), %rbx	# p_pointer, D.57423
# ./core/pool_vector.h:148: 				memnew_placement(&dst[i], T(src[i]));
	movl	-20(%rbp), %eax	# i, tmp220
	cltq
	leaq	0(,%rax,8), %rdx	#, _48
	movq	-56(%rbp), %rax	# src, tmp221
	addq	%rdx, %rax	# _48, _49
	movq	%rbx, -136(%rbp)	# D.57423, this
	movq	%rax, -144(%rbp)	# _49, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-136(%rbp), %rax	# this, _164
	movq	%rax, -152(%rbp)	# _164, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-152(%rbp), %rax	# this, tmp222
	movq	$0, (%rax)	#, this_165->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-136(%rbp), %rax	# this, _166
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-144(%rbp), %rdx	# p_str, _167
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _167,
	movq	%rax, %rdi	# _166,
.LEHB838:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE838:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L4653	#
.L4649:
	movq	%rax, %rbx	#, tmp226
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-136(%rbp), %rax	# this, _168
	movq	%rax, -160(%rbp)	# _168, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-160(%rbp), %rax	# this, tmp223
	movq	(%rax), %rdx	# this_169->_ptr, _170
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-160(%rbp), %rax	# this, tmp224
	movq	%rdx, %rsi	# _170,
	movq	%rax, %rdi	# tmp224,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/pool_vector.h:141: 			Read r;
	leaq	-304(%rbp), %rax	#, tmp229
	movq	%rax, %rdi	# tmp229,
	call	_ZN10PoolVectorI6StringE4ReadD1Ev	#
# ./core/pool_vector.h:139: 			Write w;
	leaq	-272(%rbp), %rax	#, tmp232
	movq	%rax, %rdi	# tmp232,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
	movq	%rbx, %rax	# tmp230, D.62240
	movq	%rax, %rdi	# D.62240,
.LEHB839:
	call	_Unwind_Resume	#
.L4653:
	movq	%rbx, -200(%rbp)	# D.57423, p_obj
	movq	-200(%rbp), %rax	# p_obj, tmp233
	movq	%rax, -208(%rbp)	# tmp233, D.57427
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	nop	
# ./core/pool_vector.h:147: 			for (int i = 0; i < cur_elements; i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L4640	#
.L4635:
# ./core/pool_vector.h:141: 			Read r;
	leaq	-304(%rbp), %rax	#, tmp234
	movq	%rax, %rdi	# tmp234,
	call	_ZN10PoolVectorI6StringE4ReadD1Ev	#
# ./core/pool_vector.h:139: 			Write w;
	leaq	-272(%rbp), %rax	#, tmp235
	movq	%rax, %rdi	# tmp235,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
# ./core/pool_vector.h:152: 		if (old_alloc->refcount.unref()) {
	movq	-32(%rbp), %rax	# old_alloc, _50
	movq	%rax, -216(%rbp)	# _50, this
# ./core/safe_refcount.h:192: 		return atomic_decrement(&count) == 0;
	movq	-216(%rbp), %rax	# this, _180
	movq	%rax, -224(%rbp)	# _180, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-224(%rbp), %rdx	# pw, tmp236
	movl	$1, %eax	#, tmp238
	negl	%eax	# tmp238
	movl	%eax, %ecx	# tmp238, tmp237
	movl	%ecx, %eax	# tmp237, _182
	lock xaddl	%eax, (%rdx)	#, _182,
	addl	%ecx, %eax	# tmp237, _182
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/safe_refcount.h:192: 		return atomic_decrement(&count) == 0;
	testl	%eax, %eax	# _182
	sete	%al	#, D.57434
# ./core/pool_vector.h:152: 		if (old_alloc->refcount.unref()) {
	testb	%al, %al	# D.57434
	je	.L4620	#,
# ./core/pool_vector.h:162: 				Write w;
	leaq	-336(%rbp), %rax	#, tmp239
	movq	%rax, %rdi	# tmp239,
	call	_ZN10PoolVectorI6StringE5WriteC1Ev	#
	movq	-32(%rbp), %rax	# old_alloc, tmp240
	movq	%rax, -232(%rbp)	# tmp240, p_alloc
# ./core/pool_vector.h:269: 			alloc = p_alloc;
	movq	-232(%rbp), %rax	# p_alloc, tmp241
	movq	%rax, -328(%rbp)	# tmp241, MEM[(struct Access *)&w].alloc
# ./core/pool_vector.h:270: 			if (alloc) {
	movq	-328(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _188
# ./core/pool_vector.h:270: 			if (alloc) {
	testq	%rax, %rax	# _188
	je	.L4658	#,
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	movq	-328(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _189
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	addq	$4, %rax	#, _190
	movq	%rax, -240(%rbp)	# _190, pw
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	movq	-240(%rbp), %rdx	# pw, tmp242
	movl	$1, %eax	#, _192
	lock xaddl	%eax, (%rdx)	#, _192,
	addl	$1, %eax	#, _192
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	nop	
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	cmpl	$1, %eax	#, _192
	sete	%al	#, retval.163_195
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	testb	%al, %al	# retval.163_195
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	-328(%rbp), %rax	# MEM[(struct Access *)&w].alloc, _197
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	8(%rax), %rax	# _197->mem, _198
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	%rax, -320(%rbp)	# _198, MEM[(struct Access *)&w].mem
.L4658:
# ./core/pool_vector.h:279: 		}
	nop	
# ./core/pool_vector.h:165: 				int cur_elements = old_alloc->size / sizeof(T);
	movq	-32(%rbp), %rax	# old_alloc, tmp243
	movq	24(%rax), %rax	# old_alloc_83->size, _51
# ./core/pool_vector.h:165: 				int cur_elements = old_alloc->size / sizeof(T);
	shrq	$3, %rax	#, _52
# ./core/pool_vector.h:165: 				int cur_elements = old_alloc->size / sizeof(T);
	movl	%eax, -60(%rbp)	# _52, cur_elements
# ./core/pool_vector.h:332: 		_FORCE_INLINE_ T *ptr() const { return this->mem; }
	movq	-320(%rbp), %rax	# w.D.43460.mem, D.57440
# ./core/pool_vector.h:166: 				T *elems = (T *)w.ptr();
	movq	%rax, -72(%rbp)	# D.57440, elems
# ./core/pool_vector.h:167: 				for (int i = 0; i < cur_elements; i++) {
	movl	$0, -24(%rbp)	#, i
.L4648:
# ./core/pool_vector.h:167: 				for (int i = 0; i < cur_elements; i++) {
	movl	-24(%rbp), %eax	# i, tmp244
	cmpl	-60(%rbp), %eax	# cur_elements, tmp244
	jge	.L4647	#,
# ./core/pool_vector.h:168: 					elems[i].~T();
	movl	-24(%rbp), %eax	# i, tmp245
	cltq
# ./core/pool_vector.h:168: 					elems[i].~T();
	leaq	0(,%rax,8), %rdx	#, _54
# ./core/pool_vector.h:168: 					elems[i].~T();
	movq	-72(%rbp), %rax	# elems, tmp246
	addq	%rdx, %rax	# _54, _55
	movq	%rax, %rdi	# _55,
	call	_ZN6StringD1Ev	#
# ./core/pool_vector.h:167: 				for (int i = 0; i < cur_elements; i++) {
	addl	$1, -24(%rbp)	#, i
	jmp	.L4648	#
.L4647:
# ./core/pool_vector.h:162: 				Write w;
	leaq	-336(%rbp), %rax	#, tmp247
	movq	%rax, %rdi	# tmp247,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
# ./core/pool_vector.h:172: 			if (MemoryPool::memory_pool) {
	movq	_ZN10MemoryPool11memory_poolE(%rip), %rax	# memory_pool, memory_pool.181_56
	testq	%rax, %rax	# memory_pool.181_56
	jne	.L4620	#,
# ./core/pool_vector.h:178: 				memfree(old_alloc->mem);
	movq	-32(%rbp), %rax	# old_alloc, tmp248
	movq	8(%rax), %rax	# old_alloc_83->mem, _57
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _57,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/pool_vector.h:179: 				old_alloc->mem = NULL;
	movq	-32(%rbp), %rax	# old_alloc, tmp249
	movq	$0, 8(%rax)	#, old_alloc_83->mem
# ./core/pool_vector.h:180: 				old_alloc->size = 0;
	movq	-32(%rbp), %rax	# old_alloc, tmp250
	movq	$0, 24(%rax)	#, old_alloc_83->size
# ./core/pool_vector.h:182: 				MemoryPool::alloc_mutex->lock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.182_58
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.184_60
	movq	(%rdx), %rdx	# alloc_mutex.184_60->_vptr.Mutex, _61
	movq	(%rdx), %rdx	# *_61, _62
	movq	%rax, %rdi	# alloc_mutex.182_58,
	call	*%rdx	# _62
# ./core/pool_vector.h:183: 				old_alloc->free_list = MemoryPool::free_list;
	movq	_ZN10MemoryPool9free_listE(%rip), %rdx	# free_list, free_list.185_63
	movq	-32(%rbp), %rax	# old_alloc, tmp251
	movq	%rdx, 32(%rax)	# free_list.185_63, old_alloc_83->free_list
# ./core/pool_vector.h:184: 				MemoryPool::free_list = old_alloc;
	movq	-32(%rbp), %rax	# old_alloc, tmp252
	movq	%rax, _ZN10MemoryPool9free_listE(%rip)	# tmp252, free_list
# ./core/pool_vector.h:185: 				MemoryPool::allocs_used--;
	movl	_ZN10MemoryPool11allocs_usedE(%rip), %eax	# allocs_used, allocs_used.186_64
	subl	$1, %eax	#, _65
	movl	%eax, _ZN10MemoryPool11allocs_usedE(%rip)	# _65, allocs_used
# ./core/pool_vector.h:186: 				MemoryPool::alloc_mutex->unlock();
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rax	# alloc_mutex, alloc_mutex.187_66
	movq	_ZN10MemoryPool11alloc_mutexE(%rip), %rdx	# alloc_mutex, alloc_mutex.189_68
	movq	(%rdx), %rdx	# alloc_mutex.189_68->_vptr.Mutex, _69
	addq	$8, %rdx	#, _70
	movq	(%rdx), %rdx	# *_70, _71
	movq	%rax, %rdi	# alloc_mutex.187_66,
	call	*%rdx	# _71
.LEHE839:
	jmp	.L4620	#
.L4654:
# ./core/pool_vector.h:92: 			return;
	nop	
	jmp	.L4620	#
.L4655:
# ./core/pool_vector.h:98: 			return; //nothing to do
	nop	
.L4620:
# ./core/pool_vector.h:189: 	}
	addq	$344, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3235:
	.section	.gcc_except_table
.LLSDA3235:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3235-.LLSDACSB3235
.LLSDACSB3235:
	.uleb128 .LEHB837-.LFB3235
	.uleb128 .LEHE837-.LEHB837
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB838-.LFB3235
	.uleb128 .LEHE838-.LEHB838
	.uleb128 .L4649-.LFB3235
	.uleb128 0
	.uleb128 .LEHB839-.LFB3235
	.uleb128 .LEHE839-.LEHB839
	.uleb128 0
	.uleb128 0
.LLSDACSE3235:
	.section	.text._ZN10PoolVectorI6StringE14_copy_on_writeEv,"axG",@progbits,_ZN10PoolVectorI6StringE14_copy_on_writeEv,comdat
	.size	_ZN10PoolVectorI6StringE14_copy_on_writeEv, .-_ZN10PoolVectorI6StringE14_copy_on_writeEv
	.section	.text._ZN10PoolVectorI6StringE5writeEv,"axG",@progbits,_ZN10PoolVectorI6StringE5writeEv,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE5writeEv
	.type	_ZN10PoolVectorI6StringE5writeEv, @function
_ZN10PoolVectorI6StringE5writeEv:
.LFB3240:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3240
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$56, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -64(%rbp)	# this, this
# ./core/pool_vector.h:358: 		Write w;
	movq	-56(%rbp), %rax	# <retval>, tmp94
	movq	%rax, %rdi	# tmp94,
	call	_ZN10PoolVectorI6StringE5WriteC1Ev	#
# ./core/pool_vector.h:359: 		if (alloc) {
	movq	-64(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_8(D)->alloc, _1
# ./core/pool_vector.h:359: 		if (alloc) {
	testq	%rax, %rax	# _1
	je	.L4667	#,
# ./core/pool_vector.h:360: 			_copy_on_write(); //make sure there is only one being acessed
	movq	-64(%rbp), %rax	# this, tmp96
	movq	%rax, %rdi	# tmp96,
.LEHB840:
	call	_ZN10PoolVectorI6StringE14_copy_on_writeEv	#
.LEHE840:
# ./core/pool_vector.h:361: 			w._ref(alloc);
	movq	-56(%rbp), %rdx	# <retval>, _2
	movq	-64(%rbp), %rax	# this, tmp97
	movq	(%rax), %rax	# this_8(D)->alloc, _3
	movq	%rdx, -24(%rbp)	# _2, this
	movq	%rax, -32(%rbp)	# _3, p_alloc
# ./core/pool_vector.h:269: 			alloc = p_alloc;
	movq	-24(%rbp), %rax	# this, tmp98
	movq	-32(%rbp), %rdx	# p_alloc, tmp99
	movq	%rdx, 8(%rax)	# tmp99, this_11->alloc
# ./core/pool_vector.h:270: 			if (alloc) {
	movq	-24(%rbp), %rax	# this, tmp100
	movq	8(%rax), %rax	# this_11->alloc, _13
# ./core/pool_vector.h:270: 			if (alloc) {
	testq	%rax, %rax	# _13
	je	.L4668	#,
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	movq	-24(%rbp), %rax	# this, tmp101
	movq	8(%rax), %rax	# this_11->alloc, _14
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	addq	$4, %rax	#, _15
	movq	%rax, -40(%rbp)	# _15, pw
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	movq	-40(%rbp), %rdx	# pw, tmp102
	movl	$1, %eax	#, _17
	lock xaddl	%eax, (%rdx)	#, _17,
	addl	$1, %eax	#, _17
# ./core/safe_refcount.h:124: 	return __sync_add_and_fetch(pw, 1);
	nop	
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	cmpl	$1, %eax	#, _17
	sete	%al	#, retval.163_20
# ./core/pool_vector.h:271: 				if (atomic_increment(&alloc->lock) == 1) {
	testb	%al, %al	# retval.163_20
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	-24(%rbp), %rax	# this, tmp103
	movq	8(%rax), %rax	# this_11->alloc, _22
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	8(%rax), %rdx	# _22->mem, _23
# ./core/pool_vector.h:277: 				mem = (T *)alloc->mem;
	movq	-24(%rbp), %rax	# this, tmp104
	movq	%rdx, 16(%rax)	# _23, this_11->mem
.L4668:
# ./core/pool_vector.h:279: 		}
	nop	
# ./core/pool_vector.h:363: 		return w;
	jmp	.L4667	#
.L4666:
	movq	%rax, %rbx	#, tmp106
	movq	-56(%rbp), %rax	# <retval>, tmp105
	movq	%rax, %rdi	# tmp105,
	call	_ZN10PoolVectorI6StringE5WriteD1Ev	#
	movq	%rbx, %rax	# tmp106, D.62242
	movq	%rax, %rdi	# D.62242,
.LEHB841:
	call	_Unwind_Resume	#
.LEHE841:
.L4667:
	nop	
# ./core/pool_vector.h:364: 	}
	movq	-56(%rbp), %rax	# <retval>,
	addq	$56, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3240:
	.section	.gcc_except_table
.LLSDA3240:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3240-.LLSDACSB3240
.LLSDACSB3240:
	.uleb128 .LEHB840-.LFB3240
	.uleb128 .LEHE840-.LEHB840
	.uleb128 .L4666-.LFB3240
	.uleb128 0
	.uleb128 .LEHB841-.LFB3240
	.uleb128 .LEHE841-.LEHB841
	.uleb128 0
	.uleb128 0
.LLSDACSE3240:
	.section	.text._ZN10PoolVectorI6StringE5writeEv,"axG",@progbits,_ZN10PoolVectorI6StringE5writeEv,comdat
	.size	_ZN10PoolVectorI6StringE5writeEv, .-_ZN10PoolVectorI6StringE5writeEv
	.section	.rodata
	.align 8
.LC161:
	.string	"Condition ' !mem ' is true. returned: failptr"
.LC162:
	.string	"./core/os/memory.h"
.LC163:
	.string	"memnew_arr_template"
	.section	.text._Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc,"axG",@progbits,_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc,comdat
	.weak	_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc
	.type	_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc, @function
_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc:
.LFB3245:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# p_elements, p_elements
	movq	%rsi, -48(%rbp)	# p_descr, p_descr
# ./core/os/memory.h:146: 	if (p_elements == 0)
	cmpq	$0, -40(%rbp)	#, p_elements
	jne	.L4670	#,
# ./core/os/memory.h:147: 		return 0;
	movl	$0, %eax	#, _5
	jmp	.L4671	#
.L4670:
# ./core/os/memory.h:151: 	size_t len = sizeof(T) * p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp92
	salq	$3, %rax	#, tmp91
	movq	%rax, -8(%rbp)	# tmp91, len
# ./core/os/memory.h:152: 	uint64_t *mem = (uint64_t *)Memory::alloc_static(len, true);
	movq	-8(%rbp), %rax	# len, tmp93
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -16(%rbp)	# _11, mem
# ./core/os/memory.h:153: 	T *failptr = 0; //get rid of a warning
	movq	$0, -24(%rbp)	#, failptr
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	cmpq	$0, -16(%rbp)	#, mem
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L4672	#,
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movl	$0, %r8d	#,
	movl	$.LC161, %ecx	#,
	movl	$154, %edx	#,
	movl	$.LC162, %esi	#,
	movl	$.LC163, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-24(%rbp), %rax	# failptr, _5
	jmp	.L4671	#
.L4672:
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-16(%rbp), %rax	# mem, tmp94
	leaq	-8(%rax), %rdx	#, _4
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp95
	movq	%rax, (%rdx)	# tmp95, *_4
# ./core/os/memory.h:166: 	return (T *)mem;
	movq	-16(%rbp), %rax	# mem, _5
.L4671:
# ./core/os/memory.h:167: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3245:
	.size	_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc, .-_Z19memnew_arr_templateIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev:
.LFB3247:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$16, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC1Ev	#
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp85
	movq	$0, 8(%rax)	#, this_4(D)->next
# ./core/hash_map.h:79: 		Element() { next = 0; }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3247:
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC1Ev
	.set	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC1Ev,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev
	.section	.text._Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_,"axG",@progbits,_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_,comdat
	.weak	_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_
	.type	_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_, @function
_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_:
.LFB3250:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
# ./core/os/memory.h:184: 	uint64_t *ptr = (uint64_t *)p_class;
	movq	-24(%rbp), %rax	# p_class, tmp82
	movq	%rax, -8(%rbp)	# tmp82, ptr
# ./core/os/memory.h:194: 	Memory::free_static(ptr, true);
	movq	-8(%rbp), %rax	# ptr, tmp83
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:195: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3250:
	.size	_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_, .-_Z13memdelete_arrIPN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_
	.section	.text._ZN7CowDataIPK7VariantE6_unrefEPv,"axG",@progbits,_ZN7CowDataIPK7VariantE6_unrefEPv,comdat
	.align 2
	.weak	_ZN7CowDataIPK7VariantE6_unrefEPv
	.type	_ZN7CowDataIPK7VariantE6_unrefEPv, @function
_ZN7CowDataIPK7VariantE6_unrefEPv:
.LFB3251:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# this, this
	movq	%rsi, -48(%rbp)	# p_data, p_data
# ./core/cowdata.h:192: 	if (!p_data)
	cmpq	$0, -48(%rbp)	#, p_data
	je	.L4682	#,
	movq	-40(%rbp), %rax	# this, tmp87
	movq	%rax, -24(%rbp)	# tmp87, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-24(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_11->_ptr, _12
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _12
	jne	.L4678	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.57506
	jmp	.L4679	#
.L4678:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-24(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_11->_ptr, _14
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.57506
.L4679:
# ./core/cowdata.h:195: 	uint32_t *refc = _get_refcount();
	movq	%rax, -8(%rbp)	# D.57506, refc
	movq	-8(%rbp), %rax	# refc, tmp90
	movq	%rax, -16(%rbp)	# tmp90, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-16(%rbp), %rdx	# pw, tmp91
	movl	$1, %eax	#, tmp93
	negl	%eax	# tmp93
	movl	%eax, %ecx	# tmp93, tmp92
	movl	%ecx, %eax	# tmp92, D.57502
	lock xaddl	%eax, (%rdx)	#, D.57502,
	addl	%ecx, %eax	# tmp92, D.57502
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testl	%eax, %eax	# D.57502
	setne	%al	#, retval.222_7
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testb	%al, %al	# retval.222_7
	jne	.L4683	#,
# ./core/cowdata.h:212: 	Memory::free_static((uint8_t *)p_data, true);
	movq	-48(%rbp), %rax	# p_data, tmp94
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp94,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4675	#
.L4682:
# ./core/cowdata.h:193: 		return;
	nop	
	jmp	.L4675	#
.L4683:
# ./core/cowdata.h:198: 		return; // still in use
	nop	
.L4675:
# ./core/cowdata.h:213: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3251:
	.size	_ZN7CowDataIPK7VariantE6_unrefEPv, .-_ZN7CowDataIPK7VariantE6_unrefEPv
	.section	.text._ZN6Object6Signal6TargetC2ERKS1_,"axG",@progbits,_ZN6Object6Signal6TargetC5ERKS1_,comdat
	.align 2
	.weak	_ZN6Object6Signal6TargetC2ERKS1_
	.type	_ZN6Object6Signal6TargetC2ERKS1_, @function
_ZN6Object6Signal6TargetC2ERKS1_:
.LFB3255:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.40490, D.40490
# core/object.h:444: 		struct Target {
	movq	-16(%rbp), %rax	# D.40490, tmp86
	movq	(%rax), %rdx	# _8(D)->_id, _1
	movq	-8(%rbp), %rax	# this, tmp87
	movq	%rdx, (%rax)	# _1, this_6(D)->_id
	movq	-8(%rbp), %rax	# this, tmp88
	addq	$8, %rax	#, _2
	movq	-16(%rbp), %rdx	# D.40490, tmp89
	addq	$8, %rdx	#, _3
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameC1ERKS_	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3255:
	.size	_ZN6Object6Signal6TargetC2ERKS1_, .-_ZN6Object6Signal6TargetC2ERKS1_
	.weak	_ZN6Object6Signal6TargetC1ERKS1_
	.set	_ZN6Object6Signal6TargetC1ERKS1_,_ZN6Object6Signal6TargetC2ERKS1_
	.section	.text._ZN6Object6Signal4SlotC2ERKS1_,"axG",@progbits,_ZN6Object6Signal4SlotC5ERKS1_,comdat
	.align 2
	.weak	_ZN6Object6Signal4SlotC2ERKS1_
	.type	_ZN6Object6Signal4SlotC2ERKS1_, @function
_ZN6Object6Signal4SlotC2ERKS1_:
.LFB3258:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# D.40526, D.40526
# core/object.h:458: 		struct Slot {
	movq	-16(%rbp), %rax	# D.40526, tmp87
	movl	(%rax), %edx	# _9(D)->reference_count, _1
	movq	-8(%rbp), %rax	# this, tmp88
	movl	%edx, (%rax)	# _1, this_7(D)->reference_count
	movq	-8(%rbp), %rax	# this, tmp89
	addq	$8, %rax	#, _2
	movq	-16(%rbp), %rdx	# D.40526, tmp90
	addq	$8, %rdx	#, _3
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# _2,
	call	_ZN6Object10ConnectionC1ERKS0_	#
	movq	-16(%rbp), %rax	# D.40526, tmp91
	movq	64(%rax), %rdx	# _9(D)->cE, _4
	movq	-8(%rbp), %rax	# this, tmp92
	movq	%rdx, 64(%rax)	# _4, this_7(D)->cE
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3258:
	.size	_ZN6Object6Signal4SlotC2ERKS1_, .-_ZN6Object6Signal4SlotC2ERKS1_
	.weak	_ZN6Object6Signal4SlotC1ERKS1_
	.set	_ZN6Object6Signal4SlotC1ERKS1_,_ZN6Object6Signal4SlotC2ERKS1_
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC5ERKS5_,comdat
	.align 2
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_
	.type	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_, @function
_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_:
.LFB3260:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3260
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# D.43695, D.43695
# ./core/vmap.h:40: 	struct Pair {
	movq	-24(%rbp), %rax	# this, _1
	movq	-32(%rbp), %rdx	# D.43695, _2
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# _1,
.LEHB842:
	call	_ZN6Object6Signal6TargetC1ERKS1_	#
.LEHE842:
	movq	-24(%rbp), %rax	# this, tmp89
	addq	$16, %rax	#, _3
	movq	-32(%rbp), %rdx	# D.43695, tmp90
	addq	$16, %rdx	#, _4
	movq	%rdx, %rsi	# _4,
	movq	%rax, %rdi	# _3,
.LEHB843:
	call	_ZN6Object6Signal4SlotC1ERKS1_	#
.LEHE843:
	jmp	.L4689	#
.L4688:
	movq	%rax, %rbx	#, tmp91
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN6Object6Signal6TargetD1Ev	#
	movq	%rbx, %rax	# tmp91, D.62247
	movq	%rax, %rdi	# D.62247,
.LEHB844:
	call	_Unwind_Resume	#
.LEHE844:
.L4689:
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3260:
	.section	.gcc_except_table
.LLSDA3260:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3260-.LLSDACSB3260
.LLSDACSB3260:
	.uleb128 .LEHB842-.LFB3260
	.uleb128 .LEHE842-.LEHB842
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB843-.LFB3260
	.uleb128 .LEHE843-.LEHB843
	.uleb128 .L4688-.LFB3260
	.uleb128 0
	.uleb128 .LEHB844-.LFB3260
	.uleb128 .LEHE844-.LEHB844
	.uleb128 0
	.uleb128 0
.LLSDACSE3260:
	.section	.text._ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_,"axG",@progbits,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC5ERKS5_,comdat
	.size	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_, .-_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_
	.weak	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC1ERKS5_
	.set	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC1ERKS5_,_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC2ERKS5_
	.section	.text._ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv,"axG",@progbits,_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv,comdat
	.align 2
	.weak	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv
	.type	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv, @function
_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv:
.LFB3252:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)	# this, this
# ./core/cowdata.h:218: 	if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_22(D)->_ptr, _1
# ./core/cowdata.h:218: 	if (!_ptr)
	testq	%rax, %rax	# _1
	je	.L4705	#,
	movq	-168(%rbp), %rax	# this, tmp118
	movq	%rax, -64(%rbp)	# tmp118, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_38->_ptr, _39
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _39
	jne	.L4693	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.57515
	jmp	.L4694	#
.L4693:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-64(%rbp), %rax	# this, tmp120
	movq	(%rax), %rax	# this_38->_ptr, _41
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.57515
.L4694:
# ./core/cowdata.h:221: 	uint32_t *refc = _get_refcount();
	movq	%rax, -32(%rbp)	# D.57515, refc
# ./core/cowdata.h:223: 	if (unlikely(*refc > 1)) {
	movq	-32(%rbp), %rax	# refc, tmp121
	movl	(%rax), %eax	# *refc_23, _2
	cmpl	$1, %eax	#, _2
	seta	%al	#, _3
	movzbl	%al, %eax	# _3, _4
# ./core/cowdata.h:223: 	if (unlikely(*refc > 1)) {
	testq	%rax, %rax	# _5
	je	.L4690	#,
	movq	-168(%rbp), %rax	# this, tmp122
	movq	%rax, -96(%rbp)	# tmp122, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-96(%rbp), %rax	# this, tmp123
	movq	(%rax), %rax	# this_65->_ptr, _66
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _66
	jne	.L4695	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57528
	jmp	.L4696	#
.L4695:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-96(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_65->_ptr, _68
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57528
.L4696:
# ./core/cowdata.h:225: 		uint32_t current_size = *_get_size();
	movl	(%rax), %eax	# *_6, tmp125
	movl	%eax, -36(%rbp)	# tmp125, current_size
# ./core/cowdata.h:227: 		uint32_t *mem_new = (uint32_t *)Memory::alloc_static(_get_alloc_size(current_size), true);
	movl	-36(%rbp), %eax	# current_size, _7
	movq	-168(%rbp), %rdx	# this, tmp126
	movq	%rdx, -72(%rbp)	# tmp126, this
	movq	%rax, -80(%rbp)	# _7, p_elements
# ./core/cowdata.h:85: 		return next_power_of_2(p_elements * sizeof(T));
	movq	-80(%rbp), %rax	# p_elements, tmp127
	imull	$88, %eax, %eax	#, _46, _47
	movl	%eax, -84(%rbp)	# _47, x
# ./core/typedefs.h:178: 	--x;
	subl	$1, -84(%rbp)	#, x
# ./core/typedefs.h:179: 	x |= x >> 1;
	movl	-84(%rbp), %eax	# x, tmp128
	shrl	%eax	# _50
# ./core/typedefs.h:179: 	x |= x >> 1;
	orl	%eax, -84(%rbp)	# _50, x
# ./core/typedefs.h:180: 	x |= x >> 2;
	movl	-84(%rbp), %eax	# x, tmp129
	shrl	$2, %eax	#, _52
# ./core/typedefs.h:180: 	x |= x >> 2;
	orl	%eax, -84(%rbp)	# _52, x
# ./core/typedefs.h:181: 	x |= x >> 4;
	movl	-84(%rbp), %eax	# x, tmp130
	shrl	$4, %eax	#, _54
# ./core/typedefs.h:181: 	x |= x >> 4;
	orl	%eax, -84(%rbp)	# _54, x
# ./core/typedefs.h:182: 	x |= x >> 8;
	movl	-84(%rbp), %eax	# x, tmp131
	shrl	$8, %eax	#, _56
# ./core/typedefs.h:182: 	x |= x >> 8;
	orl	%eax, -84(%rbp)	# _56, x
# ./core/typedefs.h:183: 	x |= x >> 16;
	movl	-84(%rbp), %eax	# x, tmp132
	shrl	$16, %eax	#, _58
# ./core/typedefs.h:183: 	x |= x >> 16;
	orl	%eax, -84(%rbp)	# _58, x
# ./core/typedefs.h:185: 	return ++x;
	addl	$1, -84(%rbp)	#, x
	movl	-84(%rbp), %eax	# x, _61
# ./core/cowdata.h:85: 		return next_power_of_2(p_elements * sizeof(T));
	movl	%eax, %eax	# _61, D.57522
# ./core/cowdata.h:227: 		uint32_t *mem_new = (uint32_t *)Memory::alloc_static(_get_alloc_size(current_size), true);
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.57522,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -48(%rbp)	# _26, mem_new
# ./core/cowdata.h:229: 		*(mem_new - 2) = 1; //refcount
	movq	-48(%rbp), %rax	# mem_new, tmp133
	subq	$8, %rax	#, _9
# ./core/cowdata.h:229: 		*(mem_new - 2) = 1; //refcount
	movl	$1, (%rax)	#, *_9
# ./core/cowdata.h:230: 		*(mem_new - 1) = current_size; //size
	movq	-48(%rbp), %rax	# mem_new, tmp134
	leaq	-4(%rax), %rdx	#, _10
# ./core/cowdata.h:230: 		*(mem_new - 1) = current_size; //size
	movl	-36(%rbp), %eax	# current_size, tmp135
	movl	%eax, (%rdx)	# tmp135, *_10
# ./core/cowdata.h:232: 		T *_data = (T *)(mem_new);
	movq	-48(%rbp), %rax	# mem_new, tmp136
	movq	%rax, -56(%rbp)	# tmp136, _data
# ./core/cowdata.h:239: 			for (uint32_t i = 0; i < current_size; i++) {
	movl	$0, -20(%rbp)	#, i
.L4704:
# ./core/cowdata.h:239: 			for (uint32_t i = 0; i < current_size; i++) {
	movl	-20(%rbp), %eax	# i, tmp137
	cmpl	-36(%rbp), %eax	# current_size, tmp137
	jnb	.L4699	#,
	movq	-168(%rbp), %rax	# this, tmp138
	movq	%rax, -152(%rbp)	# tmp138, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp139
	movq	(%rax), %rax	# this_79->_ptr, _80
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _80
	jne	.L4700	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, D.57544
	jmp	.L4701	#
.L4700:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-152(%rbp), %rax	# this, tmp140
	movq	(%rax), %rcx	# this_79->_ptr, D.57544
.L4701:
# ./core/cowdata.h:240: 				memnew_placement(&_data[i], T(_get_data()[i]));
	movl	-20(%rbp), %edx	# i, _15
	movq	%rdx, %rax	# _15, tmp141
	salq	$2, %rax	#, tmp141
	addq	%rdx, %rax	# _15, tmp141
	addq	%rax, %rax	# tmp141
	addq	%rdx, %rax	# _15, tmp141
	salq	$3, %rax	#, tmp142
	addq	%rax, %rcx	# _16, _32
	movl	-20(%rbp), %edx	# i, _17
	movq	%rdx, %rax	# _17, tmp143
	salq	$2, %rax	#, tmp143
	addq	%rdx, %rax	# _17, tmp143
	addq	%rax, %rax	# tmp143
	addq	%rdx, %rax	# _17, tmp143
	salq	$3, %rax	#, tmp144
	movq	%rax, %rdx	# tmp143, _18
	movq	-56(%rbp), %rax	# _data, tmp145
	addq	%rdx, %rax	# _18, _19
	movq	$88, -120(%rbp)	#, p_size
	movq	%rax, -128(%rbp)	# _19, p_pointer
	movq	$88, -136(%rbp)	#, check
	movq	$.LC27, -144(%rbp)	#, p_description
# ./core/os/memory.h:104: 	return p_pointer;
	movq	-128(%rbp), %rbx	# p_pointer, D.57540
# ./core/cowdata.h:240: 				memnew_placement(&_data[i], T(_get_data()[i]));
	movq	%rcx, %rsi	# _32,
	movq	%rbx, %rdi	# D.57540,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairC1ERKS5_	#
	movq	%rbx, -104(%rbp)	# D.57540, p_obj
	movq	-104(%rbp), %rax	# p_obj, tmp146
	movq	%rax, -112(%rbp)	# tmp146, D.57532
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	nop	
# ./core/cowdata.h:239: 			for (uint32_t i = 0; i < current_size; i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L4704	#
.L4699:
# ./core/cowdata.h:244: 		_unref(_ptr);
	movq	-168(%rbp), %rax	# this, tmp147
	movq	(%rax), %rdx	# this_22(D)->_ptr, _20
# ./core/cowdata.h:244: 		_unref(_ptr);
	movq	-168(%rbp), %rax	# this, tmp148
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp148,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv	#
# ./core/cowdata.h:245: 		_ptr = _data;
	movq	-168(%rbp), %rax	# this, tmp149
	movq	-56(%rbp), %rdx	# _data, tmp150
	movq	%rdx, (%rax)	# tmp150, this_22(D)->_ptr
	jmp	.L4690	#
.L4705:
# ./core/cowdata.h:219: 		return;
	nop	
.L4690:
# ./core/cowdata.h:247: }
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3252:
	.size	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv, .-_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv
	.section	.text._ZN7CowDataIPK7VariantE14_copy_on_writeEv,"axG",@progbits,_ZN7CowDataIPK7VariantE14_copy_on_writeEv,comdat
	.align 2
	.weak	_ZN7CowDataIPK7VariantE14_copy_on_writeEv
	.type	_ZN7CowDataIPK7VariantE14_copy_on_writeEv, @function
_ZN7CowDataIPK7VariantE14_copy_on_writeEv:
.LFB3263:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$96, %rsp	#,
	movq	%rdi, -88(%rbp)	# this, this
# ./core/cowdata.h:218: 	if (!_ptr)
	movq	-88(%rbp), %rax	# this, tmp110
	movq	(%rax), %rax	# this_16(D)->_ptr, _1
# ./core/cowdata.h:218: 	if (!_ptr)
	testq	%rax, %rax	# _1
	je	.L4715	#,
	movq	-88(%rbp), %rax	# this, tmp111
	movq	%rax, -40(%rbp)	# tmp111, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-40(%rbp), %rax	# this, tmp112
	movq	(%rax), %rax	# this_29->_ptr, _30
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _30
	jne	.L4709	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.57552
	jmp	.L4710	#
.L4709:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-40(%rbp), %rax	# this, tmp113
	movq	(%rax), %rax	# this_29->_ptr, _32
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.57552
.L4710:
# ./core/cowdata.h:221: 	uint32_t *refc = _get_refcount();
	movq	%rax, -8(%rbp)	# D.57552, refc
# ./core/cowdata.h:223: 	if (unlikely(*refc > 1)) {
	movq	-8(%rbp), %rax	# refc, tmp114
	movl	(%rax), %eax	# *refc_17, _2
	cmpl	$1, %eax	#, _2
	seta	%al	#, _3
	movzbl	%al, %eax	# _3, _4
# ./core/cowdata.h:223: 	if (unlikely(*refc > 1)) {
	testq	%rax, %rax	# _5
	je	.L4706	#,
	movq	-88(%rbp), %rax	# this, tmp115
	movq	%rax, -72(%rbp)	# tmp115, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-72(%rbp), %rax	# this, tmp116
	movq	(%rax), %rax	# this_56->_ptr, _57
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _57
	jne	.L4711	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57565
	jmp	.L4712	#
.L4711:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-72(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_56->_ptr, _59
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57565
.L4712:
# ./core/cowdata.h:225: 		uint32_t current_size = *_get_size();
	movl	(%rax), %eax	# *_6, tmp118
	movl	%eax, -12(%rbp)	# tmp118, current_size
# ./core/cowdata.h:227: 		uint32_t *mem_new = (uint32_t *)Memory::alloc_static(_get_alloc_size(current_size), true);
	movl	-12(%rbp), %eax	# current_size, _7
	movq	-88(%rbp), %rdx	# this, tmp119
	movq	%rdx, -48(%rbp)	# tmp119, this
	movq	%rax, -56(%rbp)	# _7, p_elements
# ./core/cowdata.h:85: 		return next_power_of_2(p_elements * sizeof(T));
	movq	-56(%rbp), %rax	# p_elements, tmp120
	sall	$3, %eax	#, _38
	movl	%eax, -60(%rbp)	# _38, x
# ./core/typedefs.h:178: 	--x;
	subl	$1, -60(%rbp)	#, x
# ./core/typedefs.h:179: 	x |= x >> 1;
	movl	-60(%rbp), %eax	# x, tmp121
	shrl	%eax	# _41
# ./core/typedefs.h:179: 	x |= x >> 1;
	orl	%eax, -60(%rbp)	# _41, x
# ./core/typedefs.h:180: 	x |= x >> 2;
	movl	-60(%rbp), %eax	# x, tmp122
	shrl	$2, %eax	#, _43
# ./core/typedefs.h:180: 	x |= x >> 2;
	orl	%eax, -60(%rbp)	# _43, x
# ./core/typedefs.h:181: 	x |= x >> 4;
	movl	-60(%rbp), %eax	# x, tmp123
	shrl	$4, %eax	#, _45
# ./core/typedefs.h:181: 	x |= x >> 4;
	orl	%eax, -60(%rbp)	# _45, x
# ./core/typedefs.h:182: 	x |= x >> 8;
	movl	-60(%rbp), %eax	# x, tmp124
	shrl	$8, %eax	#, _47
# ./core/typedefs.h:182: 	x |= x >> 8;
	orl	%eax, -60(%rbp)	# _47, x
# ./core/typedefs.h:183: 	x |= x >> 16;
	movl	-60(%rbp), %eax	# x, tmp125
	shrl	$16, %eax	#, _49
# ./core/typedefs.h:183: 	x |= x >> 16;
	orl	%eax, -60(%rbp)	# _49, x
# ./core/typedefs.h:185: 	return ++x;
	addl	$1, -60(%rbp)	#, x
	movl	-60(%rbp), %eax	# x, _52
# ./core/cowdata.h:85: 		return next_power_of_2(p_elements * sizeof(T));
	movl	%eax, %eax	# _52, D.57559
# ./core/cowdata.h:227: 		uint32_t *mem_new = (uint32_t *)Memory::alloc_static(_get_alloc_size(current_size), true);
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.57559,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -24(%rbp)	# _21, mem_new
# ./core/cowdata.h:229: 		*(mem_new - 2) = 1; //refcount
	movq	-24(%rbp), %rax	# mem_new, tmp126
	subq	$8, %rax	#, _9
# ./core/cowdata.h:229: 		*(mem_new - 2) = 1; //refcount
	movl	$1, (%rax)	#, *_9
# ./core/cowdata.h:230: 		*(mem_new - 1) = current_size; //size
	movq	-24(%rbp), %rax	# mem_new, tmp127
	leaq	-4(%rax), %rdx	#, _10
# ./core/cowdata.h:230: 		*(mem_new - 1) = current_size; //size
	movl	-12(%rbp), %eax	# current_size, tmp128
	movl	%eax, (%rdx)	# tmp128, *_10
# ./core/cowdata.h:232: 		T *_data = (T *)(mem_new);
	movq	-24(%rbp), %rax	# mem_new, tmp129
	movq	%rax, -32(%rbp)	# tmp129, _data
# ./core/cowdata.h:236: 			memcpy(mem_new, _ptr, current_size * sizeof(T));
	movl	-12(%rbp), %eax	# current_size, _11
# ./core/cowdata.h:236: 			memcpy(mem_new, _ptr, current_size * sizeof(T));
	leaq	0(,%rax,8), %rdx	#, _12
# ./core/cowdata.h:236: 			memcpy(mem_new, _ptr, current_size * sizeof(T));
	movq	-88(%rbp), %rax	# this, tmp130
	movq	(%rax), %rcx	# this_16(D)->_ptr, _13
# ./core/cowdata.h:236: 			memcpy(mem_new, _ptr, current_size * sizeof(T));
	movq	-24(%rbp), %rax	# mem_new, tmp131
	movq	%rcx, %rsi	# _13,
	movq	%rax, %rdi	# tmp131,
	call	memcpy	#
# ./core/cowdata.h:244: 		_unref(_ptr);
	movq	-88(%rbp), %rax	# this, tmp132
	movq	(%rax), %rdx	# this_16(D)->_ptr, _19
# ./core/cowdata.h:244: 		_unref(_ptr);
	movq	-88(%rbp), %rax	# this, tmp133
	movq	%rdx, %rsi	# _19,
	movq	%rax, %rdi	# tmp133,
	call	_ZN7CowDataIPK7VariantE6_unrefEPv	#
# ./core/cowdata.h:245: 		_ptr = _data;
	movq	-88(%rbp), %rax	# this, tmp134
	movq	-32(%rbp), %rdx	# _data, tmp135
	movq	%rdx, (%rax)	# tmp135, this_16(D)->_ptr
	jmp	.L4706	#
.L4715:
# ./core/cowdata.h:219: 		return;
	nop	
.L4706:
# ./core/cowdata.h:247: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3263:
	.size	_ZN7CowDataIPK7VariantE14_copy_on_writeEv, .-_ZN7CowDataIPK7VariantE14_copy_on_writeEv
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE:
.LFB3268:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_I, p_I
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	cmpq	$0, -16(%rbp)	#, p_I
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L4717	#,
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movl	$0, %r8d	#,
	movl	$.LC151, %ecx	#,
	movl	$157, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L4718	#
.L4717:
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movq	-16(%rbp), %rax	# p_I, tmp103
	movq	40(%rax), %rax	# p_I_26(D)->data, _4
	cmpq	%rax, -8(%rbp)	# _4, this
	setne	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L4719	#,
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movl	$0, %r8d	#,
	movl	$.LC153, %ecx	#,
	movl	$158, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L4718	#
.L4719:
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:160: 			if (first == p_I) {
	movq	-8(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_29(D)->first, _8
# ./core/list.h:160: 			if (first == p_I) {
	cmpq	%rax, -16(%rbp)	# _8, p_I
	jne	.L4720	#,
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp105
	movq	24(%rax), %rdx	# p_I_26(D)->next_ptr, _9
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-8(%rbp), %rax	# this, tmp106
	movq	%rdx, (%rax)	# _9, this_29(D)->first
.L4720:
# ./core/list.h:164: 			if (last == p_I)
	movq	-8(%rbp), %rax	# this, tmp107
	movq	8(%rax), %rax	# this_29(D)->last, _10
# ./core/list.h:164: 			if (last == p_I)
	cmpq	%rax, -16(%rbp)	# _10, p_I
	jne	.L4721	#,
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp108
	movq	32(%rax), %rdx	# p_I_26(D)->prev_ptr, _11
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-8(%rbp), %rax	# this, tmp109
	movq	%rdx, 8(%rax)	# _11, this_29(D)->last
.L4721:
# ./core/list.h:167: 			if (p_I->prev_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp110
	movq	32(%rax), %rax	# p_I_26(D)->prev_ptr, _12
# ./core/list.h:167: 			if (p_I->prev_ptr)
	testq	%rax, %rax	# _12
	je	.L4722	#,
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp111
	movq	32(%rax), %rax	# p_I_26(D)->prev_ptr, _13
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp112
	movq	24(%rdx), %rdx	# p_I_26(D)->next_ptr, _14
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	%rdx, 24(%rax)	# _14, _13->next_ptr
.L4722:
# ./core/list.h:170: 			if (p_I->next_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp113
	movq	24(%rax), %rax	# p_I_26(D)->next_ptr, _15
# ./core/list.h:170: 			if (p_I->next_ptr)
	testq	%rax, %rax	# _15
	je	.L4723	#,
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp114
	movq	24(%rax), %rax	# p_I_26(D)->next_ptr, _16
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp115
	movq	32(%rdx), %rdx	# p_I_26(D)->prev_ptr, _17
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	%rdx, 32(%rax)	# _17, _16->prev_ptr
.L4723:
# ./core/list.h:173: 			memdelete_allocator<Element, A>(const_cast<Element *>(p_I));
	movq	-16(%rbp), %rax	# p_I, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_	#
# ./core/list.h:174: 			size_cache--;
	movq	-8(%rbp), %rax	# this, tmp117
	movl	16(%rax), %eax	# this_29(D)->size_cache, _18
	leal	-1(%rax), %edx	#, _19
	movq	-8(%rbp), %rax	# this, tmp118
	movl	%edx, 16(%rax)	# _19, this_29(D)->size_cache
# ./core/list.h:176: 			return true;
	movl	$1, %eax	#, _20
.L4718:
# ./core/list.h:177: 		}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3268:
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.section	.rodata
.LC164:
	.string	"p_pos"
.LC165:
	.string	"insert"
.LC166:
	.string	"size() + 1"
	.section	.text._ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_,"axG",@progbits,_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_,comdat
	.align 2
	.weak	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_
	.type	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_, @function
_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_:
.LFB3274:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$368, %rsp	#,
	movq	%rdi, -344(%rbp)	# this, this
	movl	%esi, -348(%rbp)	# p_pos, p_pos
	movq	%rdx, -360(%rbp)	# p_val, p_val
# ./core/cowdata.h:173: 		ERR_FAIL_INDEX_V(p_pos, size() + 1, ERR_INVALID_PARAMETER);
	movl	-348(%rbp), %eax	# p_pos, tmp197
	shrl	$31, %eax	#, tmp196
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	jne	.L4725	#,
	movq	-344(%rbp), %rax	# this, tmp198
	movq	%rax, -16(%rbp)	# tmp198, this
	movq	-16(%rbp), %rax	# this, tmp199
	movq	%rax, -24(%rbp)	# tmp199, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-24(%rbp), %rax	# this, tmp200
	movq	(%rax), %rax	# this_45->_ptr, _46
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _46
	jne	.L4726	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _47
	jmp	.L4727	#
.L4726:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-24(%rbp), %rax	# this, tmp201
	movq	(%rax), %rax	# this_45->_ptr, _48
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _47
.L4727:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -32(%rbp)	# _47, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -32(%rbp)	#, size
	je	.L4728	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-32(%rbp), %rax	# size, tmp202
	movl	(%rax), %eax	# *size_52, _53
	jmp	.L4729	#
.L4728:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57763
.L4729:
# ./core/cowdata.h:173: 		ERR_FAIL_INDEX_V(p_pos, size() + 1, ERR_INVALID_PARAMETER);
	cmpl	%eax, -348(%rbp)	# D.57763, p_pos
	setg	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L4730	#,
.L4725:
# ./core/cowdata.h:173: 		ERR_FAIL_INDEX_V(p_pos, size() + 1, ERR_INVALID_PARAMETER);
	movl	$1, %eax	#, iftmp.274_19
	jmp	.L4731	#
.L4730:
# ./core/cowdata.h:173: 		ERR_FAIL_INDEX_V(p_pos, size() + 1, ERR_INVALID_PARAMETER);
	movl	$0, %eax	#, iftmp.274_19
.L4731:
# ./core/cowdata.h:173: 		ERR_FAIL_INDEX_V(p_pos, size() + 1, ERR_INVALID_PARAMETER);
	movzbl	%al, %eax	# iftmp.274_19, _8
	testq	%rax, %rax	# _8
	setne	%al	#, retval.273_31
	testb	%al, %al	# retval.273_31
	je	.L4732	#,
	movq	-344(%rbp), %rax	# this, tmp203
	movq	%rax, -40(%rbp)	# tmp203, this
	movq	-40(%rbp), %rax	# this, tmp204
	movq	%rax, -48(%rbp)	# tmp204, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp205
	movq	(%rax), %rax	# this_58->_ptr, _59
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _59
	jne	.L4733	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _60
	jmp	.L4734	#
.L4733:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-48(%rbp), %rax	# this, tmp206
	movq	(%rax), %rax	# this_58->_ptr, _61
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _60
.L4734:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -56(%rbp)	# _60, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -56(%rbp)	#, size
	je	.L4735	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-56(%rbp), %rax	# size, tmp207
	movl	(%rax), %eax	# *size_65, _66
	jmp	.L4736	#
.L4735:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57772
.L4736:
# ./core/cowdata.h:173: 		ERR_FAIL_INDEX_V(p_pos, size() + 1, ERR_INVALID_PARAMETER);
	addl	$1, %eax	#, _10
	movslq	%eax, %rdx	# _10, _11
	movl	-348(%rbp), %eax	# p_pos, tmp208
	cltq
	pushq	$0	#
	pushq	$.LC166	#
	movl	$.LC164, %r9d	#,
	movq	%rdx, %r8	# _11,
	movq	%rax, %rcx	# _12,
	movl	$173, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC165, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	movl	$31, %eax	#, _20
	jmp	.L4737	#
.L4732:
# ./core/cowdata.h:173: 		ERR_FAIL_INDEX_V(p_pos, size() + 1, ERR_INVALID_PARAMETER);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-344(%rbp), %rax	# this, tmp209
	movq	%rax, -88(%rbp)	# tmp209, this
	movq	-88(%rbp), %rax	# this, tmp210
	movq	%rax, -96(%rbp)	# tmp210, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-96(%rbp), %rax	# this, tmp211
	movq	(%rax), %rax	# this_84->_ptr, _85
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _85
	jne	.L4738	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _86
	jmp	.L4739	#
.L4738:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-96(%rbp), %rax	# this, tmp212
	movq	(%rax), %rax	# this_84->_ptr, _87
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _86
.L4739:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -104(%rbp)	# _86, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -104(%rbp)	#, size
	je	.L4740	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-104(%rbp), %rax	# size, tmp213
	movl	(%rax), %eax	# *size_91, _92
	jmp	.L4741	#
.L4740:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57790
.L4741:
# ./core/cowdata.h:174: 		resize(size() + 1);
	leal	1(%rax), %edx	#, _14
	movq	-344(%rbp), %rax	# this, tmp214
	movl	%edx, %esi	# _14,
	movq	%rax, %rdi	# tmp214,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi	#
	movq	-344(%rbp), %rax	# this, tmp215
	movq	%rax, -64(%rbp)	# tmp215, this
	movq	-64(%rbp), %rax	# this, tmp216
	movq	%rax, -72(%rbp)	# tmp216, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-72(%rbp), %rax	# this, tmp217
	movq	(%rax), %rax	# this_71->_ptr, _72
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _72
	jne	.L4742	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _73
	jmp	.L4743	#
.L4742:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-72(%rbp), %rax	# this, tmp218
	movq	(%rax), %rax	# this_71->_ptr, _74
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _73
.L4743:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -80(%rbp)	# _73, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -80(%rbp)	#, size
	je	.L4744	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-80(%rbp), %rax	# size, tmp219
	movl	(%rax), %eax	# *size_78, _79
	jmp	.L4745	#
.L4744:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57781
.L4745:
# ./core/cowdata.h:175: 		for (int i = (size() - 1); i > p_pos; i--)
	subl	$1, %eax	#, tmp220
	movl	%eax, -4(%rbp)	# tmp220, i
.L4776:
# ./core/cowdata.h:175: 		for (int i = (size() - 1); i > p_pos; i--)
	movl	-4(%rbp), %eax	# i, tmp221
	cmpl	-348(%rbp), %eax	# p_pos, tmp221
	jle	.L4746	#,
# ./core/cowdata.h:176: 			set(i, get(i - 1));
	movl	-4(%rbp), %eax	# i, tmp222
	leal	-1(%rax), %edx	#, _16
	movq	-344(%rbp), %rax	# this, tmp223
	movq	%rax, -192(%rbp)	# tmp223, this
	movl	%edx, -196(%rbp)	# _16, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-196(%rbp), %eax	# p_index, tmp225
	shrl	$31, %eax	#, tmp224
	movzbl	%al, %eax	# _156, _157
	testq	%rax, %rax	# _158
	jne	.L4747	#,
	movq	-192(%rbp), %rax	# this, tmp226
	movq	%rax, -208(%rbp)	# tmp226, this
	movq	-208(%rbp), %rax	# this, tmp227
	movq	%rax, -216(%rbp)	# tmp227, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-216(%rbp), %rax	# this, tmp228
	movq	(%rax), %rax	# this_160->_ptr, _161
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _161
	jne	.L4748	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _162
	jmp	.L4749	#
.L4748:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-216(%rbp), %rax	# this, tmp229
	movq	(%rax), %rax	# this_160->_ptr, _163
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _162
.L4749:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -224(%rbp)	# _162, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -224(%rbp)	#, size
	je	.L4750	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-224(%rbp), %rax	# size, tmp230
	movl	(%rax), %eax	# *size_167, _168
	jmp	.L4751	#
.L4750:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _169
.L4751:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -196(%rbp)	# _169, p_index
	setge	%al	#, _175
	movzbl	%al, %eax	# _175, _176
	testq	%rax, %rax	# _177
	je	.L4752	#,
.L4747:
	movl	$1, %eax	#, iftmp.255_178
	jmp	.L4753	#
.L4752:
	movl	$0, %eax	#, iftmp.255_178
.L4753:
	movzbl	%al, %eax	# iftmp.255_178, _181
	testq	%rax, %rax	# _181
	setne	%al	#, retval.254_182
	testb	%al, %al	# retval.254_182
	je	.L4754	#,
	movq	-192(%rbp), %rax	# this, tmp231
	movq	%rax, -232(%rbp)	# tmp231, this
	movq	-232(%rbp), %rax	# this, tmp232
	movq	%rax, -240(%rbp)	# tmp232, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-240(%rbp), %rax	# this, tmp233
	movq	(%rax), %rax	# this_184->_ptr, _185
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _185
	jne	.L4755	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _186
	jmp	.L4756	#
.L4755:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-240(%rbp), %rax	# this, tmp234
	movq	(%rax), %rax	# this_184->_ptr, _187
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _186
.L4756:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -248(%rbp)	# _186, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -248(%rbp)	#, size
	je	.L4757	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-248(%rbp), %rax	# size, tmp235
	movl	(%rax), %eax	# *size_191, _192
	jmp	.L4758	#
.L4757:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _193
.L4758:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _193, _199
	movl	-196(%rbp), %eax	# p_index, tmp236
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _199,
	movq	%rax, %rcx	# _200,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L4754:
	movq	-192(%rbp), %rax	# this, tmp237
	movq	%rax, -256(%rbp)	# tmp237, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-256(%rbp), %rax	# this, tmp238
	movq	(%rax), %rax	# this_201->_ptr, _202
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _202
	jne	.L4759	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _203
	jmp	.L4760	#
.L4759:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-256(%rbp), %rax	# this, tmp239
	movq	(%rax), %rcx	# this_201->_ptr, _203
.L4760:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-196(%rbp), %eax	# p_index, tmp240
	movslq	%eax, %rdx	# tmp240, _208
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _208, tmp241
	salq	$2, %rax	#, tmp241
	addq	%rdx, %rax	# _208, tmp241
	addq	%rax, %rax	# tmp241
	addq	%rdx, %rax	# _208, tmp241
	salq	$3, %rax	#, tmp242
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, D.57838
	movq	-344(%rbp), %rax	# this, tmp243
	movq	%rax, -112(%rbp)	# tmp243, this
	movl	-4(%rbp), %eax	# i, tmp244
	movl	%eax, -116(%rbp)	# tmp244, p_index
	movq	%rdx, -128(%rbp)	# D.57838, p_elem
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	movl	-116(%rbp), %eax	# p_index, tmp246
	shrl	$31, %eax	#, tmp245
	movzbl	%al, %eax	# _99, _100
	testq	%rax, %rax	# _101
	jne	.L4762	#,
	movq	-112(%rbp), %rax	# this, tmp247
	movq	%rax, -136(%rbp)	# tmp247, this
	movq	-136(%rbp), %rax	# this, tmp248
	movq	%rax, -144(%rbp)	# tmp248, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp249
	movq	(%rax), %rax	# this_103->_ptr, _104
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _104
	jne	.L4763	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _105
	jmp	.L4764	#
.L4763:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-144(%rbp), %rax	# this, tmp250
	movq	(%rax), %rax	# this_103->_ptr, _106
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _105
.L4764:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -152(%rbp)	# _105, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -152(%rbp)	#, size
	je	.L4765	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-152(%rbp), %rax	# size, tmp251
	movl	(%rax), %eax	# *size_110, _111
	jmp	.L4766	#
.L4765:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _112
.L4766:
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -116(%rbp)	# _112, p_index
	setge	%al	#, _118
	movzbl	%al, %eax	# _118, _119
	testq	%rax, %rax	# _120
	je	.L4767	#,
.L4762:
	movl	$1, %eax	#, iftmp.291_121
	jmp	.L4768	#
.L4767:
	movl	$0, %eax	#, iftmp.291_121
.L4768:
	movzbl	%al, %eax	# iftmp.291_121, _124
	testq	%rax, %rax	# _124
	setne	%al	#, retval.290_125
	testb	%al, %al	# retval.290_125
	je	.L4769	#,
	movq	-112(%rbp), %rax	# this, tmp252
	movq	%rax, -160(%rbp)	# tmp252, this
	movq	-160(%rbp), %rax	# this, tmp253
	movq	%rax, -168(%rbp)	# tmp253, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp254
	movq	(%rax), %rax	# this_127->_ptr, _128
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _128
	jne	.L4770	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _129
	jmp	.L4771	#
.L4770:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp255
	movq	(%rax), %rax	# this_127->_ptr, _130
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _129
.L4771:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -176(%rbp)	# _129, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -176(%rbp)	#, size
	je	.L4772	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-176(%rbp), %rax	# size, tmp256
	movl	(%rax), %eax	# *size_134, _135
	jmp	.L4773	#
.L4772:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _136
.L4773:
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _136, _142
	movl	-116(%rbp), %eax	# p_index, tmp257
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _142,
	movq	%rax, %rcx	# _143,
	movl	$137, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC66, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L4769:
# ./core/cowdata.h:138: 		_copy_on_write();
	movq	-112(%rbp), %rax	# this, tmp258
	movq	%rax, %rdi	# tmp258,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
	movq	-112(%rbp), %rax	# this, tmp259
	movq	%rax, -184(%rbp)	# tmp259, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-184(%rbp), %rax	# this, tmp260
	movq	(%rax), %rax	# this_144->_ptr, _145
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _145
	jne	.L4774	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _146
	jmp	.L4775	#
.L4774:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-184(%rbp), %rax	# this, tmp261
	movq	(%rax), %rcx	# this_144->_ptr, _146
.L4775:
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	movl	-116(%rbp), %eax	# p_index, tmp262
	movslq	%eax, %rdx	# tmp262, _151
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	movq	%rdx, %rax	# _151, tmp263
	salq	$2, %rax	#, tmp263
	addq	%rdx, %rax	# _151, tmp263
	addq	%rax, %rax	# tmp263
	addq	%rdx, %rax	# _151, tmp263
	salq	$3, %rax	#, tmp264
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	leaq	(%rcx,%rax), %rdx	#, _153
	movq	-128(%rbp), %rax	# p_elem, tmp265
	movq	%rax, %rsi	# tmp265,
	movq	%rdx, %rdi	# _153,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_	#
# ./core/cowdata.h:140: 	}
	nop	
# ./core/cowdata.h:175: 		for (int i = (size() - 1); i > p_pos; i--)
	subl	$1, -4(%rbp)	#, i
	jmp	.L4776	#
.L4746:
	movq	-344(%rbp), %rax	# this, tmp266
	movq	%rax, -264(%rbp)	# tmp266, this
	movl	-348(%rbp), %eax	# p_pos, tmp267
	movl	%eax, -268(%rbp)	# tmp267, p_index
	movq	-360(%rbp), %rax	# p_val, tmp268
	movq	%rax, -280(%rbp)	# tmp268, p_elem
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	movl	-268(%rbp), %eax	# p_index, tmp270
	shrl	$31, %eax	#, tmp269
	movzbl	%al, %eax	# _214, _215
	testq	%rax, %rax	# _216
	jne	.L4777	#,
	movq	-264(%rbp), %rax	# this, tmp271
	movq	%rax, -288(%rbp)	# tmp271, this
	movq	-288(%rbp), %rax	# this, tmp272
	movq	%rax, -296(%rbp)	# tmp272, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-296(%rbp), %rax	# this, tmp273
	movq	(%rax), %rax	# this_218->_ptr, _219
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _219
	jne	.L4778	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _220
	jmp	.L4779	#
.L4778:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-296(%rbp), %rax	# this, tmp274
	movq	(%rax), %rax	# this_218->_ptr, _221
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _220
.L4779:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -304(%rbp)	# _220, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -304(%rbp)	#, size
	je	.L4780	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-304(%rbp), %rax	# size, tmp275
	movl	(%rax), %eax	# *size_225, _226
	jmp	.L4781	#
.L4780:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _227
.L4781:
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -268(%rbp)	# _227, p_index
	setge	%al	#, _233
	movzbl	%al, %eax	# _233, _234
	testq	%rax, %rax	# _235
	je	.L4782	#,
.L4777:
	movl	$1, %eax	#, iftmp.291_236
	jmp	.L4783	#
.L4782:
	movl	$0, %eax	#, iftmp.291_236
.L4783:
	movzbl	%al, %eax	# iftmp.291_236, _239
	testq	%rax, %rax	# _239
	setne	%al	#, retval.290_240
	testb	%al, %al	# retval.290_240
	je	.L4784	#,
	movq	-264(%rbp), %rax	# this, tmp276
	movq	%rax, -312(%rbp)	# tmp276, this
	movq	-312(%rbp), %rax	# this, tmp277
	movq	%rax, -320(%rbp)	# tmp277, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-320(%rbp), %rax	# this, tmp278
	movq	(%rax), %rax	# this_242->_ptr, _243
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _243
	jne	.L4785	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _244
	jmp	.L4786	#
.L4785:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-320(%rbp), %rax	# this, tmp279
	movq	(%rax), %rax	# this_242->_ptr, _245
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _244
.L4786:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -328(%rbp)	# _244, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -328(%rbp)	#, size
	je	.L4787	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-328(%rbp), %rax	# size, tmp280
	movl	(%rax), %eax	# *size_249, _250
	jmp	.L4788	#
.L4787:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _251
.L4788:
# ./core/cowdata.h:137: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _251, _257
	movl	-268(%rbp), %eax	# p_index, tmp281
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _257,
	movq	%rax, %rcx	# _258,
	movl	$137, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC66, %edi	#,
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L4784:
# ./core/cowdata.h:138: 		_copy_on_write();
	movq	-264(%rbp), %rax	# this, tmp282
	movq	%rax, %rdi	# tmp282,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
	movq	-264(%rbp), %rax	# this, tmp283
	movq	%rax, -336(%rbp)	# tmp283, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-336(%rbp), %rax	# this, tmp284
	movq	(%rax), %rax	# this_259->_ptr, _260
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _260
	jne	.L4789	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _261
	jmp	.L4790	#
.L4789:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-336(%rbp), %rax	# this, tmp285
	movq	(%rax), %rcx	# this_259->_ptr, _261
.L4790:
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	movl	-268(%rbp), %eax	# p_index, tmp286
	movslq	%eax, %rdx	# tmp286, _266
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	movq	%rdx, %rax	# _266, tmp287
	salq	$2, %rax	#, tmp287
	addq	%rdx, %rax	# _266, tmp287
	addq	%rax, %rax	# tmp287
	addq	%rdx, %rax	# _266, tmp287
	salq	$3, %rax	#, tmp288
# ./core/cowdata.h:139: 		_get_data()[p_index] = p_elem;
	leaq	(%rcx,%rax), %rdx	#, _268
	movq	-280(%rbp), %rax	# p_elem, tmp289
	movq	%rax, %rsi	# tmp289,
	movq	%rdx, %rdi	# _268,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairaSERKS5_	#
# ./core/cowdata.h:140: 	}
	nop	
# ./core/cowdata.h:179: 		return OK;
	movl	$0, %eax	#, _20
.L4737:
# ./core/cowdata.h:180: 	};
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3274:
	.size	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_, .-_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6insertEiRKS6_
	.section	.text._ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD2Ev,"axG",@progbits,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD5Ev,comdat
	.align 2
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD2Ev
	.type	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD2Ev, @function
_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD2Ev:
.LFB3277:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:50: 	class Element {
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN6Object10ConnectionD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3277:
	.size	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD2Ev, .-_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD2Ev
	.weak	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD1Ev
	.set	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD1Ev,_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD2Ev
	.section	.text._Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_
	.type	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_, @function
_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_:
.LFB3275:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.56982
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.56983
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.242_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.242_5
	jne	.L4796	#,
# ./core/os/memory.h:131: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, %rdi	# tmp85,
	call	_ZN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementD1Ev	#
	movq	-24(%rbp), %rax	# p_class, tmp86
	movq	%rax, -16(%rbp)	# tmp86, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp87
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L4792	#
.L4796:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L4792:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3275:
	.size	_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_, .-_Z19memdelete_allocatorIN4ListIN6Object10ConnectionE16DefaultAllocatorE7ElementES3_EvPT_
	.section	.text._ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi,"axG",@progbits,_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi,comdat
	.align 2
	.weak	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi
	.type	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi, @function
_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi:
.LFB3279:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3279
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$328, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -328(%rbp)	# this, this
	movl	%esi, -332(%rbp)	# p_size, p_size
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	-332(%rbp), %eax	# p_size, tmp190
	shrl	$31, %eax	#, tmp189
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L4798	#,
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movl	$0, %r8d	#,
	movl	$.LC137, %ecx	#,
	movl	$252, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
.LEHB845:
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$31, %eax	#, _46
	jmp	.L4855	#
.L4798:
# ./core/cowdata.h:252: 	ERR_FAIL_COND_V(p_size < 0, ERR_INVALID_PARAMETER);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-328(%rbp), %rax	# this, tmp191
	movq	%rax, -72(%rbp)	# tmp191, this
	movq	-72(%rbp), %rax	# this, tmp192
	movq	%rax, -80(%rbp)	# tmp192, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-80(%rbp), %rax	# this, tmp193
	movq	(%rax), %rax	# this_114->_ptr, _115
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _115
	jne	.L4800	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _116
	jmp	.L4801	#
.L4800:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-80(%rbp), %rax	# this, tmp194
	movq	(%rax), %rax	# this_114->_ptr, _117
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _116
.L4801:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -88(%rbp)	# _116, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -88(%rbp)	#, size
	je	.L4802	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-88(%rbp), %rax	# size, tmp195
	movl	(%rax), %eax	# *size_121, _122
	jmp	.L4803	#
.L4802:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57673
.L4803:
# ./core/cowdata.h:254: 	if (p_size == size())
	cmpl	%eax, -332(%rbp)	# D.57673, p_size
	sete	%al	#, retval.275_58
# ./core/cowdata.h:254: 	if (p_size == size())
	testb	%al, %al	# retval.275_58
	je	.L4804	#,
# ./core/cowdata.h:255: 		return OK;
	movl	$0, %eax	#, _46
	jmp	.L4855	#
.L4804:
# ./core/cowdata.h:257: 	if (p_size == 0) {
	cmpl	$0, -332(%rbp)	#, p_size
	jne	.L4805	#,
# ./core/cowdata.h:259: 		_unref(_ptr);
	movq	-328(%rbp), %rax	# this, tmp196
	movq	(%rax), %rdx	# this_56(D)->_ptr, _5
# ./core/cowdata.h:259: 		_unref(_ptr);
	movq	-328(%rbp), %rax	# this, tmp197
	movq	%rdx, %rsi	# _5,
	movq	%rax, %rdi	# tmp197,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6_unrefEPv	#
# ./core/cowdata.h:260: 		_ptr = NULL;
	movq	-328(%rbp), %rax	# this, tmp198
	movq	$0, (%rax)	#, this_56(D)->_ptr
# ./core/cowdata.h:261: 		return OK;
	movl	$0, %eax	#, _46
	jmp	.L4855	#
.L4805:
# ./core/cowdata.h:265: 	_copy_on_write();
	movq	-328(%rbp), %rax	# this, tmp199
	movq	%rax, %rdi	# tmp199,
	call	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE14_copy_on_writeEv	#
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movl	-332(%rbp), %eax	# p_size, tmp200
	cltq
	movq	-328(%rbp), %rdx	# this, tmp201
	movq	%rdx, -96(%rbp)	# tmp201, this
	movq	%rax, -104(%rbp)	# _6, p_elements
	leaq	-304(%rbp), %rax	#, tmp202
	movq	%rax, -112(%rbp)	# tmp202, out
# ./core/cowdata.h:92: 		if (_mul_overflow(p_elements, sizeof(T), &o)) {
	movl	$0, %ecx	#, _129
	movl	$88, %edx	#, tmp204
	movq	%rdx, %rax	# tmp204, tmp204
	mulq	-104(%rbp)	# p_elements
	jno	.L4806	#,
	movl	$1, %ecx	#, _129
.L4806:
	movq	%rax, -312(%rbp)	# _130, o
	movq	%rcx, %rax	# _129, _131
	andl	$1, %eax	#, retval.286_132
# ./core/cowdata.h:92: 		if (_mul_overflow(p_elements, sizeof(T), &o)) {
	testb	%al, %al	# retval.286_132
	je	.L4808	#,
# ./core/cowdata.h:93: 			*out = 0;
	movq	-112(%rbp), %rax	# out, tmp205
	movq	$0, (%rax)	#, *out_128
# ./core/cowdata.h:94: 			return false;
	movl	$0, %eax	#, D.57685
	jmp	.L4814	#
.L4808:
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movq	-312(%rbp), %rax	# o, o.287_134
	movl	%eax, -116(%rbp)	# _135, x
# ./core/typedefs.h:178: 	--x;
	subl	$1, -116(%rbp)	#, x
# ./core/typedefs.h:179: 	x |= x >> 1;
	movl	-116(%rbp), %eax	# x, tmp206
	shrl	%eax	# _138
# ./core/typedefs.h:179: 	x |= x >> 1;
	orl	%eax, -116(%rbp)	# _138, x
# ./core/typedefs.h:180: 	x |= x >> 2;
	movl	-116(%rbp), %eax	# x, tmp207
	shrl	$2, %eax	#, _140
# ./core/typedefs.h:180: 	x |= x >> 2;
	orl	%eax, -116(%rbp)	# _140, x
# ./core/typedefs.h:181: 	x |= x >> 4;
	movl	-116(%rbp), %eax	# x, tmp208
	shrl	$4, %eax	#, _142
# ./core/typedefs.h:181: 	x |= x >> 4;
	orl	%eax, -116(%rbp)	# _142, x
# ./core/typedefs.h:182: 	x |= x >> 8;
	movl	-116(%rbp), %eax	# x, tmp209
	shrl	$8, %eax	#, _144
# ./core/typedefs.h:182: 	x |= x >> 8;
	orl	%eax, -116(%rbp)	# _144, x
# ./core/typedefs.h:183: 	x |= x >> 16;
	movl	-116(%rbp), %eax	# x, tmp210
	shrl	$16, %eax	#, _146
# ./core/typedefs.h:183: 	x |= x >> 16;
	orl	%eax, -116(%rbp)	# _146, x
# ./core/typedefs.h:185: 	return ++x;
	addl	$1, -116(%rbp)	#, x
	movl	-116(%rbp), %eax	# x, _149
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movl	%eax, %edx	# _149, _152
# ./core/cowdata.h:96: 		*out = next_power_of_2(o);
	movq	-112(%rbp), %rax	# out, tmp211
	movq	%rdx, (%rax)	# _152, *out_128
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	movq	-312(%rbp), %rax	# o, o.289_153
	movl	$0, %edx	#, _154
	addq	$32, %rax	#, tmp212
	jnc	.L4811	#,
	movl	$1, %edx	#, _154
.L4811:
	movq	%rax, -320(%rbp)	# _155, p
	movq	%rdx, %rax	# _154, _156
	andl	$1, %eax	#, retval.288_157
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	testb	%al, %al	# retval.288_157
	je	.L4813	#,
# ./core/cowdata.h:97: 		if (_add_overflow(o, static_cast<size_t>(32), &p)) return false; //no longer allocated here
	movl	$0, %eax	#, D.57685
	jmp	.L4814	#
.L4813:
# ./core/cowdata.h:98: 		return true;
	movl	$1, %eax	#, D.57685
.L4814:
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	xorl	$1, %eax	#, _8
	movzbl	%al, %eax	# _8, _9
	testq	%rax, %rax	# _10
	setne	%al	#, retval.276_60
	testb	%al, %al	# retval.276_60
	je	.L4815	#,
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC148, %ecx	#,
	movl	$268, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _46
	jmp	.L4855	#
.L4815:
# ./core/cowdata.h:268: 	ERR_FAIL_COND_V(!_get_alloc_size_checked(p_size, &alloc_size), ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movq	-328(%rbp), %rax	# this, tmp213
	movq	%rax, -128(%rbp)	# tmp213, this
	movq	-128(%rbp), %rax	# this, tmp214
	movq	%rax, -136(%rbp)	# tmp214, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-136(%rbp), %rax	# this, tmp215
	movq	(%rax), %rax	# this_162->_ptr, _163
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _163
	jne	.L4816	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _164
	jmp	.L4817	#
.L4816:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-136(%rbp), %rax	# this, tmp216
	movq	(%rax), %rax	# this_162->_ptr, _165
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _164
.L4817:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -144(%rbp)	# _164, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -144(%rbp)	#, size
	je	.L4818	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-144(%rbp), %rax	# size, tmp217
	movl	(%rax), %eax	# *size_169, _170
	jmp	.L4819	#
.L4818:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57698
.L4819:
# ./core/cowdata.h:270: 	if (p_size > size()) {
	cmpl	%eax, -332(%rbp)	# D.57698, p_size
	setg	%al	#, retval.277_63
# ./core/cowdata.h:270: 	if (p_size > size()) {
	testb	%al, %al	# retval.277_63
	je	.L4820	#,
	movq	-328(%rbp), %rax	# this, tmp218
	movq	%rax, -152(%rbp)	# tmp218, this
	movq	-152(%rbp), %rax	# this, tmp219
	movq	%rax, -160(%rbp)	# tmp219, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-160(%rbp), %rax	# this, tmp220
	movq	(%rax), %rax	# this_175->_ptr, _176
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _176
	jne	.L4821	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _177
	jmp	.L4822	#
.L4821:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-160(%rbp), %rax	# this, tmp221
	movq	(%rax), %rax	# this_175->_ptr, _178
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _177
.L4822:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -168(%rbp)	# _177, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -168(%rbp)	#, size
	je	.L4823	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-168(%rbp), %rax	# size, tmp222
	movl	(%rax), %eax	# *size_182, _183
	jmp	.L4824	#
.L4823:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57707
.L4824:
# ./core/cowdata.h:272: 		if (size() == 0) {
	testl	%eax, %eax	# D.57707
	sete	%al	#, retval.278_80
# ./core/cowdata.h:272: 		if (size() == 0) {
	testb	%al, %al	# retval.278_80
	je	.L4825	#,
# ./core/cowdata.h:274: 			uint32_t *ptr = (uint32_t *)Memory::alloc_static(alloc_size, true);
	movq	-304(%rbp), %rax	# alloc_size, alloc_size.279_13
	movl	$1, %esi	#,
	movq	%rax, %rdi	# alloc_size.279_13,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -56(%rbp)	# _89, ptr
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	cmpq	$0, -56(%rbp)	#, ptr
	sete	%al	#, _14
	movzbl	%al, %eax	# _14, _15
	testq	%rax, %rax	# _16
	je	.L4826	#,
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC149, %ecx	#,
	movl	$275, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _46
	jmp	.L4855	#
.L4826:
# ./core/cowdata.h:275: 			ERR_FAIL_COND_V(!ptr, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:276: 			*(ptr - 1) = 0; //size, currently none
	movq	-56(%rbp), %rax	# ptr, tmp223
	subq	$4, %rax	#, _17
# ./core/cowdata.h:276: 			*(ptr - 1) = 0; //size, currently none
	movl	$0, (%rax)	#, *_17
# ./core/cowdata.h:277: 			*(ptr - 2) = 1; //refcount
	movq	-56(%rbp), %rax	# ptr, tmp224
	subq	$8, %rax	#, _18
# ./core/cowdata.h:277: 			*(ptr - 2) = 1; //refcount
	movl	$1, (%rax)	#, *_18
# ./core/cowdata.h:279: 			_ptr = (T *)ptr;
	movq	-328(%rbp), %rax	# this, tmp225
	movq	-56(%rbp), %rdx	# ptr, tmp226
	movq	%rdx, (%rax)	# tmp226, this_56(D)->_ptr
	jmp	.L4827	#
.L4825:
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-304(%rbp), %rcx	# alloc_size, alloc_size.280_19
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-328(%rbp), %rax	# this, tmp227
	movq	(%rax), %rax	# this_56(D)->_ptr, _20
# ./core/cowdata.h:282: 			void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# alloc_size.280_19,
	movq	%rax, %rdi	# _20,
	call	_ZN6Memory14realloc_staticEPvmb	#
	movq	%rax, -48(%rbp)	# _82, _ptrnew
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	cmpq	$0, -48(%rbp)	#, _ptrnew
	sete	%al	#, _21
	movzbl	%al, %eax	# _21, _22
	testq	%rax, %rax	# _23
	je	.L4828	#,
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC150, %ecx	#,
	movl	$283, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$6, %eax	#, _46
	jmp	.L4855	#
.L4828:
# ./core/cowdata.h:283: 			ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:284: 			_ptr = (T *)(_ptrnew);
	movq	-328(%rbp), %rax	# this, tmp228
	movq	-48(%rbp), %rdx	# _ptrnew, tmp229
	movq	%rdx, (%rax)	# tmp229, this_56(D)->_ptr
.L4827:
	movq	-328(%rbp), %rax	# this, tmp230
	movq	%rax, -184(%rbp)	# tmp230, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-184(%rbp), %rax	# this, tmp231
	movq	(%rax), %rax	# this_193->_ptr, _194
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _194
	jne	.L4829	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %eax	#, D.57717
	jmp	.L4830	#
.L4829:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-184(%rbp), %rax	# this, tmp232
	movq	(%rax), %rax	# this_193->_ptr, D.57717
.L4830:
# ./core/cowdata.h:290: 			T *elems = _get_data();
	movq	%rax, -64(%rbp)	# D.57717, elems
	movq	-328(%rbp), %rax	# this, tmp233
	movq	%rax, -176(%rbp)	# tmp233, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-176(%rbp), %rax	# this, tmp234
	movq	(%rax), %rax	# this_187->_ptr, _188
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _188
	jne	.L4831	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57713
	jmp	.L4832	#
.L4831:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-176(%rbp), %rax	# this, tmp235
	movq	(%rax), %rax	# this_187->_ptr, _190
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57713
.L4832:
# ./core/cowdata.h:292: 			for (int i = *_get_size(); i < p_size; i++) {
	movl	(%rax), %eax	# *_24, _25
	movl	%eax, -20(%rbp)	# _25, i
.L4838:
# ./core/cowdata.h:292: 			for (int i = *_get_size(); i < p_size; i++) {
	movl	-20(%rbp), %eax	# i, tmp236
	cmpl	-332(%rbp), %eax	# p_size, tmp236
	jge	.L4833	#,
# ./core/cowdata.h:293: 				memnew_placement(&elems[i], T);
	movl	-20(%rbp), %eax	# i, tmp237
	movslq	%eax, %rdx	# tmp237, _26
	movq	%rdx, %rax	# _26, tmp238
	salq	$2, %rax	#, tmp238
	addq	%rdx, %rax	# _26, tmp238
	addq	%rax, %rax	# tmp238
	addq	%rdx, %rax	# _26, tmp238
	salq	$3, %rax	#, tmp239
	movq	%rax, %rdx	# tmp238, _27
	movq	-64(%rbp), %rax	# elems, tmp240
	addq	%rdx, %rax	# _27, _28
	movq	$88, -200(%rbp)	#, p_size
	movq	%rax, -208(%rbp)	# _28, p_pointer
	movq	$88, -216(%rbp)	#, check
	movq	$.LC27, -224(%rbp)	#, p_description
# ./core/os/memory.h:104: 	return p_pointer;
	movq	-208(%rbp), %rbx	# p_pointer, D.57726
	movq	%rbx, -192(%rbp)	# D.57726, this
# ./core/vmap.h:45: 		_FORCE_INLINE_ Pair() {}
	movq	-192(%rbp), %rax	# this, _199
	movq	%rax, %rdi	# _199,
	call	_ZN6Object6Signal6TargetC1Ev	#
.LEHE845:
	movq	-192(%rbp), %rax	# this, tmp241
	addq	$16, %rax	#, _200
	movq	%rax, %rdi	# _200,
.LEHB846:
	call	_ZN6Object6Signal4SlotC1Ev	#
.LEHE846:
# ./core/vmap.h:45: 		_FORCE_INLINE_ Pair() {}
	jmp	.L4857	#
.L4856:
	movq	%rax, %rbx	#, tmp242
# ./core/vmap.h:45: 		_FORCE_INLINE_ Pair() {}
	movq	-192(%rbp), %rax	# this, _201
	movq	%rax, %rdi	# _201,
	call	_ZN6Object6Signal6TargetD1Ev	#
	movq	%rbx, %rax	# tmp242, D.62251
	movq	%rax, %rdi	# D.62251,
.LEHB847:
	call	_Unwind_Resume	#
.L4857:
	movq	%rbx, -232(%rbp)	# D.57726, p_obj
	movq	-232(%rbp), %rax	# p_obj, tmp243
	movq	%rax, -240(%rbp)	# tmp243, D.57730
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	nop	
# ./core/cowdata.h:292: 			for (int i = *_get_size(); i < p_size; i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L4838	#
.L4833:
	movq	-328(%rbp), %rax	# this, tmp244
	movq	%rax, -248(%rbp)	# tmp244, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-248(%rbp), %rax	# this, tmp245
	movq	(%rax), %rax	# this_210->_ptr, _211
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _211
	jne	.L4839	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57735
	jmp	.L4840	#
.L4839:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-248(%rbp), %rax	# this, tmp246
	movq	(%rax), %rax	# this_210->_ptr, _213
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57735
.L4840:
# ./core/cowdata.h:297: 		*_get_size() = p_size;
	movl	-332(%rbp), %edx	# p_size, p_size.281_30
# ./core/cowdata.h:297: 		*_get_size() = p_size;
	movl	%edx, (%rax)	# p_size.281_30, *_29
	jmp	.L4841	#
.L4820:
	movq	-328(%rbp), %rax	# this, tmp247
	movq	%rax, -256(%rbp)	# tmp247, this
	movq	-256(%rbp), %rax	# this, tmp248
	movq	%rax, -264(%rbp)	# tmp248, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-264(%rbp), %rax	# this, tmp249
	movq	(%rax), %rax	# this_217->_ptr, _218
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _218
	jne	.L4842	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _219
	jmp	.L4843	#
.L4842:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-264(%rbp), %rax	# this, tmp250
	movq	(%rax), %rax	# this_217->_ptr, _220
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _219
.L4843:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -272(%rbp)	# _219, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -272(%rbp)	#, size
	je	.L4844	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-272(%rbp), %rax	# size, tmp251
	movl	(%rax), %eax	# *size_224, _225
	jmp	.L4845	#
.L4844:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, D.57742
.L4845:
# ./core/cowdata.h:299: 	} else if (p_size < size()) {
	cmpl	%eax, -332(%rbp)	# D.57742, p_size
	setl	%al	#, retval.282_65
# ./core/cowdata.h:299: 	} else if (p_size < size()) {
	testb	%al, %al	# retval.282_65
	je	.L4841	#,
# ./core/cowdata.h:303: 			for (uint32_t i = p_size; i < *_get_size(); i++) {
	movl	-332(%rbp), %eax	# p_size, tmp252
	movl	%eax, -24(%rbp)	# tmp252, i
.L4851:
	movq	-328(%rbp), %rax	# this, tmp253
	movq	%rax, -280(%rbp)	# tmp253, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-280(%rbp), %rax	# this, tmp254
	movq	(%rax), %rax	# this_229->_ptr, _230
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _230
	jne	.L4846	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57748
	jmp	.L4847	#
.L4846:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-280(%rbp), %rax	# this, tmp255
	movq	(%rax), %rax	# this_229->_ptr, _232
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57748
.L4847:
# ./core/cowdata.h:303: 			for (uint32_t i = p_size; i < *_get_size(); i++) {
	movl	(%rax), %eax	# *_32, _33
	cmpl	%eax, -24(%rbp)	# _33, i
	setb	%al	#, retval.283_67
	testb	%al, %al	# retval.283_67
	je	.L4848	#,
	movq	-328(%rbp), %rax	# this, tmp256
	movq	%rax, -288(%rbp)	# tmp256, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-288(%rbp), %rax	# this, tmp257
	movq	(%rax), %rax	# this_235->_ptr, _236
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _236
	jne	.L4849	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, D.57752
	jmp	.L4850	#
.L4849:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-288(%rbp), %rax	# this, tmp258
	movq	(%rax), %rcx	# this_235->_ptr, D.57752
.L4850:
# ./core/cowdata.h:304: 				T *t = &_get_data()[i];
	movl	-24(%rbp), %edx	# i, _35
# ./core/cowdata.h:304: 				T *t = &_get_data()[i];
	movq	%rdx, %rax	# _35, tmp259
	salq	$2, %rax	#, tmp259
	addq	%rdx, %rax	# _35, tmp259
	addq	%rax, %rax	# tmp259
	addq	%rdx, %rax	# _35, tmp259
	salq	$3, %rax	#, tmp260
# ./core/cowdata.h:304: 				T *t = &_get_data()[i];
	addq	%rcx, %rax	# D.57752, tmp261
	movq	%rax, -40(%rbp)	# tmp261, t
# ./core/cowdata.h:305: 				t->~T();
	movq	-40(%rbp), %rax	# t, tmp262
	movq	%rax, %rdi	# tmp262,
	call	_ZN4VMapIN6Object6Signal6TargetENS1_4SlotEE4PairD1Ev	#
# ./core/cowdata.h:303: 			for (uint32_t i = p_size; i < *_get_size(); i++) {
	addl	$1, -24(%rbp)	#, i
	jmp	.L4851	#
.L4848:
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-304(%rbp), %rcx	# alloc_size, alloc_size.284_37
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movq	-328(%rbp), %rax	# this, tmp263
	movq	(%rax), %rax	# this_56(D)->_ptr, _38
# ./core/cowdata.h:309: 		void *_ptrnew = (T *)Memory::realloc_static(_ptr, alloc_size, true);
	movl	$1, %edx	#,
	movq	%rcx, %rsi	# alloc_size.284_37,
	movq	%rax, %rdi	# _38,
	call	_ZN6Memory14realloc_staticEPvmb	#
	movq	%rax, -32(%rbp)	# _69, _ptrnew
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	cmpq	$0, -32(%rbp)	#, _ptrnew
	sete	%al	#, _39
	movzbl	%al, %eax	# _39, _40
	testq	%rax, %rax	# _41
	je	.L4852	#,
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movl	$0, %r8d	#,
	movl	$.LC150, %ecx	#,
	movl	$310, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC139, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
.LEHE847:
	movl	$6, %eax	#, _46
	jmp	.L4855	#
.L4852:
# ./core/cowdata.h:310: 		ERR_FAIL_COND_V(!_ptrnew, ERR_OUT_OF_MEMORY);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/cowdata.h:312: 		_ptr = (T *)(_ptrnew);
	movq	-328(%rbp), %rax	# this, tmp264
	movq	-32(%rbp), %rdx	# _ptrnew, tmp265
	movq	%rdx, (%rax)	# tmp265, this_56(D)->_ptr
	movq	-328(%rbp), %rax	# this, tmp266
	movq	%rax, -296(%rbp)	# tmp266, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-296(%rbp), %rax	# this, tmp267
	movq	(%rax), %rax	# this_240->_ptr, _241
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _241
	jne	.L4853	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.57756
	jmp	.L4854	#
.L4853:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-296(%rbp), %rax	# this, tmp268
	movq	(%rax), %rax	# this_240->_ptr, _243
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.57756
.L4854:
# ./core/cowdata.h:314: 		*_get_size() = p_size;
	movl	-332(%rbp), %edx	# p_size, p_size.285_43
# ./core/cowdata.h:314: 		*_get_size() = p_size;
	movl	%edx, (%rax)	# p_size.285_43, *_42
.L4841:
# ./core/cowdata.h:317: 	return OK;
	movl	$0, %eax	#, _46
.L4855:
# ./core/cowdata.h:318: }
	addq	$328, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3279:
	.section	.gcc_except_table
.LLSDA3279:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3279-.LLSDACSB3279
.LLSDACSB3279:
	.uleb128 .LEHB845-.LFB3279
	.uleb128 .LEHE845-.LEHB845
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB846-.LFB3279
	.uleb128 .LEHE846-.LEHB846
	.uleb128 .L4856-.LFB3279
	.uleb128 0
	.uleb128 .LEHB847-.LFB3279
	.uleb128 .LEHE847-.LEHB847
	.uleb128 0
	.uleb128 0
.LLSDACSE3279:
	.section	.text._ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi,"axG",@progbits,_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi,comdat
	.size	_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi, .-_ZN7CowDataIN4VMapIN6Object6Signal6TargetENS2_4SlotEE4PairEE6resizeEi
	.section	.text._ZN7CowDataI10StringNameE6_unrefEPv,"axG",@progbits,_ZN7CowDataI10StringNameE6_unrefEPv,comdat
	.align 2
	.weak	_ZN7CowDataI10StringNameE6_unrefEPv
	.type	_ZN7CowDataI10StringNameE6_unrefEPv, @function
_ZN7CowDataI10StringNameE6_unrefEPv:
.LFB3280:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$80, %rsp	#,
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_data, p_data
# ./core/cowdata.h:192: 	if (!p_data)
	cmpq	$0, -80(%rbp)	#, p_data
	je	.L4869	#,
	movq	-72(%rbp), %rax	# this, tmp94
	movq	%rax, -48(%rbp)	# tmp94, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-48(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_22->_ptr, _23
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _23
	jne	.L4861	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.58081
	jmp	.L4862	#
.L4861:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-48(%rbp), %rax	# this, tmp96
	movq	(%rax), %rax	# this_22->_ptr, _25
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.58081
.L4862:
# ./core/cowdata.h:195: 	uint32_t *refc = _get_refcount();
	movq	%rax, -16(%rbp)	# D.58081, refc
	movq	-16(%rbp), %rax	# refc, tmp97
	movq	%rax, -40(%rbp)	# tmp97, pw
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	movq	-40(%rbp), %rdx	# pw, tmp98
	movl	$1, %eax	#, tmp100
	negl	%eax	# tmp100
	movl	%eax, %ecx	# tmp100, tmp99
	movl	%ecx, %eax	# tmp99, D.58077
	lock xaddl	%eax, (%rdx)	#, D.58077,
	addl	%ecx, %eax	# tmp99, D.58077
# ./core/safe_refcount.h:118: 	return __sync_sub_and_fetch(pw, 1);
	nop	
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testl	%eax, %eax	# D.58077
	setne	%al	#, retval.306_13
# ./core/cowdata.h:197: 	if (atomic_decrement(refc) > 0)
	testb	%al, %al	# retval.306_13
	jne	.L4870	#,
	movq	-72(%rbp), %rax	# this, tmp101
	movq	%rax, -56(%rbp)	# tmp101, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-56(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_28->_ptr, _29
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _29
	jne	.L4865	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.58085
	jmp	.L4866	#
.L4865:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-56(%rbp), %rax	# this, tmp103
	movq	(%rax), %rax	# this_28->_ptr, _31
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.58085
.L4866:
# ./core/cowdata.h:202: 		uint32_t *count = _get_size();
	movq	%rax, -24(%rbp)	# D.58085, count
# ./core/cowdata.h:203: 		T *data = (T *)(count + 1);
	movq	-24(%rbp), %rax	# count, tmp107
	addq	$4, %rax	#, tmp106
	movq	%rax, -32(%rbp)	# tmp106, data
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	movl	$0, -4(%rbp)	#, i
.L4868:
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	movq	-24(%rbp), %rax	# count, tmp108
	movl	(%rax), %eax	# *count_14, _2
	cmpl	%eax, -4(%rbp)	# _2, i
	jnb	.L4867	#,
# ./core/cowdata.h:207: 			data[i].~T();
	movl	-4(%rbp), %eax	# i, _3
# ./core/cowdata.h:207: 			data[i].~T();
	leaq	0(,%rax,8), %rdx	#, _4
# ./core/cowdata.h:207: 			data[i].~T();
	movq	-32(%rbp), %rax	# data, tmp109
	addq	%rdx, %rax	# _4, _5
	movq	%rax, %rdi	# _5,
	call	_ZN10StringNameD1Ev	#
# ./core/cowdata.h:205: 		for (uint32_t i = 0; i < *count; ++i) {
	addl	$1, -4(%rbp)	#, i
	jmp	.L4868	#
.L4867:
# ./core/cowdata.h:212: 	Memory::free_static((uint8_t *)p_data, true);
	movq	-80(%rbp), %rax	# p_data, tmp110
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp110,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L4858	#
.L4869:
# ./core/cowdata.h:193: 		return;
	nop	
	jmp	.L4858	#
.L4870:
# ./core/cowdata.h:198: 		return; // still in use
	nop	
.L4858:
# ./core/cowdata.h:213: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3280:
	.size	_ZN7CowDataI10StringNameE6_unrefEPv, .-_ZN7CowDataI10StringNameE6_unrefEPv
	.section	.text._ZN13MethodBind0RCI6StringEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI6StringEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6StringEC2Ev
	.type	_ZN13MethodBind0RCI6StringEC2Ev, @function
_ZN13MethodBind0RCI6StringEC2Ev:
.LFB3282:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3282
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB848:
	call	_ZN10MethodBindC2Ev	#
.LEHE848:
	movl	$_ZTV13MethodBind0RCI6StringE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.43805._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB849:
	call	_ZN10StringNameC1Ev	#
.LEHE849:
# ./core/method_bind.gen.inc:608: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:610: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB850:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE850:
# ./core/method_bind.gen.inc:613: 	};
	jmp	.L4876	#
.L4875:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4873	#
.L4874:
	movq	%rax, %rbx	#, tmp93
.L4873:
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62252
	movq	%rax, %rdi	# D.62252,
.LEHB851:
	call	_Unwind_Resume	#
.LEHE851:
.L4876:
# ./core/method_bind.gen.inc:613: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3282:
	.section	.gcc_except_table
.LLSDA3282:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3282-.LLSDACSB3282
.LLSDACSB3282:
	.uleb128 .LEHB848-.LFB3282
	.uleb128 .LEHE848-.LEHB848
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB849-.LFB3282
	.uleb128 .LEHE849-.LEHB849
	.uleb128 .L4874-.LFB3282
	.uleb128 0
	.uleb128 .LEHB850-.LFB3282
	.uleb128 .LEHE850-.LEHB850
	.uleb128 .L4875-.LFB3282
	.uleb128 0
	.uleb128 .LEHB851-.LFB3282
	.uleb128 .LEHE851-.LEHB851
	.uleb128 0
	.uleb128 0
.LLSDACSE3282:
	.section	.text._ZN13MethodBind0RCI6StringEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI6StringEC5Ev,comdat
	.size	_ZN13MethodBind0RCI6StringEC2Ev, .-_ZN13MethodBind0RCI6StringEC2Ev
	.weak	_ZN13MethodBind0RCI6StringEC1Ev
	.set	_ZN13MethodBind0RCI6StringEC1Ev,_ZN13MethodBind0RCI6StringEC2Ev
	.section	.text._ZN13MethodBind1RCIbRK6StringEC2Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK6StringEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK6StringEC2Ev
	.type	_ZN13MethodBind1RCIbRK6StringEC2Ev, @function
_ZN13MethodBind1RCIbRK6StringEC2Ev:
.LFB3286:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3286
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB852:
	call	_ZN10MethodBindC2Ev	#
.LEHE852:
	movl	$_ZTV13MethodBind1RCIbRK6StringE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.43907._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB853:
	call	_ZN10StringNameC1Ev	#
.LEHE853:
# ./core/method_bind.gen.inc:1348: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1350: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB854:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE854:
# ./core/method_bind.gen.inc:1353: 	};
	jmp	.L4882	#
.L4881:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4879	#
.L4880:
	movq	%rax, %rbx	#, tmp93
.L4879:
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62253
	movq	%rax, %rdi	# D.62253,
.LEHB855:
	call	_Unwind_Resume	#
.LEHE855:
.L4882:
# ./core/method_bind.gen.inc:1353: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3286:
	.section	.gcc_except_table
.LLSDA3286:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3286-.LLSDACSB3286
.LLSDACSB3286:
	.uleb128 .LEHB852-.LFB3286
	.uleb128 .LEHE852-.LEHB852
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB853-.LFB3286
	.uleb128 .LEHE853-.LEHB853
	.uleb128 .L4880-.LFB3286
	.uleb128 0
	.uleb128 .LEHB854-.LFB3286
	.uleb128 .LEHE854-.LEHB854
	.uleb128 .L4881-.LFB3286
	.uleb128 0
	.uleb128 .LEHB855-.LFB3286
	.uleb128 .LEHE855-.LEHB855
	.uleb128 0
	.uleb128 0
.LLSDACSE3286:
	.section	.text._ZN13MethodBind1RCIbRK6StringEC2Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK6StringEC5Ev,comdat
	.size	_ZN13MethodBind1RCIbRK6StringEC2Ev, .-_ZN13MethodBind1RCIbRK6StringEC2Ev
	.weak	_ZN13MethodBind1RCIbRK6StringEC1Ev
	.set	_ZN13MethodBind1RCIbRK6StringEC1Ev,_ZN13MethodBind1RCIbRK6StringEC2Ev
	.section	.text._ZN11MethodBind2IRK6StringRK7VariantEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK7VariantEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK7VariantEC2Ev
	.type	_ZN11MethodBind2IRK6StringRK7VariantEC2Ev, @function
_ZN11MethodBind2IRK6StringRK7VariantEC2Ev:
.LFB3290:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3290
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB856:
	call	_ZN10MethodBindC2Ev	#
.LEHE856:
	movl	$_ZTV11MethodBind2IRK6StringRK7VariantE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.44009._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB857:
	call	_ZN10StringNameC1Ev	#
.LEHE857:
# ./core/method_bind.gen.inc:1538: 		set_argument_count(2);
	movq	-24(%rbp), %rax	# this, _4
	movl	$2, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1543: 	};
	jmp	.L4886	#
.L4885:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62254
	movq	%rax, %rdi	# D.62254,
.LEHB858:
	call	_Unwind_Resume	#
.LEHE858:
.L4886:
# ./core/method_bind.gen.inc:1543: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3290:
	.section	.gcc_except_table
.LLSDA3290:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3290-.LLSDACSB3290
.LLSDACSB3290:
	.uleb128 .LEHB856-.LFB3290
	.uleb128 .LEHE856-.LEHB856
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB857-.LFB3290
	.uleb128 .LEHE857-.LEHB857
	.uleb128 .L4885-.LFB3290
	.uleb128 0
	.uleb128 .LEHB858-.LFB3290
	.uleb128 .LEHE858-.LEHB858
	.uleb128 0
	.uleb128 0
.LLSDACSE3290:
	.section	.text._ZN11MethodBind2IRK6StringRK7VariantEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK7VariantEC5Ev,comdat
	.size	_ZN11MethodBind2IRK6StringRK7VariantEC2Ev, .-_ZN11MethodBind2IRK6StringRK7VariantEC2Ev
	.weak	_ZN11MethodBind2IRK6StringRK7VariantEC1Ev
	.set	_ZN11MethodBind2IRK6StringRK7VariantEC1Ev,_ZN11MethodBind2IRK6StringRK7VariantEC2Ev
	.section	.text._ZN13MethodBind1RCI7VariantRK6StringEC2Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK6StringEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK6StringEC2Ev
	.type	_ZN13MethodBind1RCI7VariantRK6StringEC2Ev, @function
_ZN13MethodBind1RCI7VariantRK6StringEC2Ev:
.LFB3294:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3294
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB859:
	call	_ZN10MethodBindC2Ev	#
.LEHE859:
	movl	$_ZTV13MethodBind1RCI7VariantRK6StringE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.44111._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB860:
	call	_ZN10StringNameC1Ev	#
.LEHE860:
# ./core/method_bind.gen.inc:1348: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1350: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB861:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE861:
# ./core/method_bind.gen.inc:1353: 	};
	jmp	.L4892	#
.L4891:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4889	#
.L4890:
	movq	%rax, %rbx	#, tmp93
.L4889:
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62255
	movq	%rax, %rdi	# D.62255,
.LEHB862:
	call	_Unwind_Resume	#
.LEHE862:
.L4892:
# ./core/method_bind.gen.inc:1353: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3294:
	.section	.gcc_except_table
.LLSDA3294:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3294-.LLSDACSB3294
.LLSDACSB3294:
	.uleb128 .LEHB859-.LFB3294
	.uleb128 .LEHE859-.LEHB859
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB860-.LFB3294
	.uleb128 .LEHE860-.LEHB860
	.uleb128 .L4890-.LFB3294
	.uleb128 0
	.uleb128 .LEHB861-.LFB3294
	.uleb128 .LEHE861-.LEHB861
	.uleb128 .L4891-.LFB3294
	.uleb128 0
	.uleb128 .LEHB862-.LFB3294
	.uleb128 .LEHE862-.LEHB862
	.uleb128 0
	.uleb128 0
.LLSDACSE3294:
	.section	.text._ZN13MethodBind1RCI7VariantRK6StringEC2Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK6StringEC5Ev,comdat
	.size	_ZN13MethodBind1RCI7VariantRK6StringEC2Ev, .-_ZN13MethodBind1RCI7VariantRK6StringEC2Ev
	.weak	_ZN13MethodBind1RCI7VariantRK6StringEC1Ev
	.set	_ZN13MethodBind1RCI7VariantRK6StringEC1Ev,_ZN13MethodBind1RCI7VariantRK6StringEC2Ev
	.section	.text._ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK8NodePathRK7VariantEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev
	.type	_ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev, @function
_ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev:
.LFB3298:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3298
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB863:
	call	_ZN10MethodBindC2Ev	#
.LEHE863:
	movl	$_ZTV11MethodBind2IRK8NodePathRK7VariantE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.44213._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB864:
	call	_ZN10StringNameC1Ev	#
.LEHE864:
# ./core/method_bind.gen.inc:1538: 		set_argument_count(2);
	movq	-24(%rbp), %rax	# this, _4
	movl	$2, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1543: 	};
	jmp	.L4896	#
.L4895:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62256
	movq	%rax, %rdi	# D.62256,
.LEHB865:
	call	_Unwind_Resume	#
.LEHE865:
.L4896:
# ./core/method_bind.gen.inc:1543: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3298:
	.section	.gcc_except_table
.LLSDA3298:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3298-.LLSDACSB3298
.LLSDACSB3298:
	.uleb128 .LEHB863-.LFB3298
	.uleb128 .LEHE863-.LEHB863
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB864-.LFB3298
	.uleb128 .LEHE864-.LEHB864
	.uleb128 .L4895-.LFB3298
	.uleb128 0
	.uleb128 .LEHB865-.LFB3298
	.uleb128 .LEHE865-.LEHB865
	.uleb128 0
	.uleb128 0
.LLSDACSE3298:
	.section	.text._ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK8NodePathRK7VariantEC5Ev,comdat
	.size	_ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev, .-_ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev
	.weak	_ZN11MethodBind2IRK8NodePathRK7VariantEC1Ev
	.set	_ZN11MethodBind2IRK8NodePathRK7VariantEC1Ev,_ZN11MethodBind2IRK8NodePathRK7VariantEC2Ev
	.section	.text._ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK8NodePathEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev
	.type	_ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev, @function
_ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev:
.LFB3302:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3302
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB866:
	call	_ZN10MethodBindC2Ev	#
.LEHE866:
	movl	$_ZTV13MethodBind1RCI7VariantRK8NodePathE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.44315._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB867:
	call	_ZN10StringNameC1Ev	#
.LEHE867:
# ./core/method_bind.gen.inc:1348: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1350: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB868:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE868:
# ./core/method_bind.gen.inc:1353: 	};
	jmp	.L4902	#
.L4901:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4899	#
.L4900:
	movq	%rax, %rbx	#, tmp93
.L4899:
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62257
	movq	%rax, %rdi	# D.62257,
.LEHB869:
	call	_Unwind_Resume	#
.LEHE869:
.L4902:
# ./core/method_bind.gen.inc:1353: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3302:
	.section	.gcc_except_table
.LLSDA3302:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3302-.LLSDACSB3302
.LLSDACSB3302:
	.uleb128 .LEHB866-.LFB3302
	.uleb128 .LEHE866-.LEHB866
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB867-.LFB3302
	.uleb128 .LEHE867-.LEHB867
	.uleb128 .L4900-.LFB3302
	.uleb128 0
	.uleb128 .LEHB868-.LFB3302
	.uleb128 .LEHE868-.LEHB868
	.uleb128 .L4901-.LFB3302
	.uleb128 0
	.uleb128 .LEHB869-.LFB3302
	.uleb128 .LEHE869-.LEHB869
	.uleb128 0
	.uleb128 0
.LLSDACSE3302:
	.section	.text._ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK8NodePathEC5Ev,comdat
	.size	_ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev, .-_ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev
	.weak	_ZN13MethodBind1RCI7VariantRK8NodePathEC1Ev
	.set	_ZN13MethodBind1RCI7VariantRK8NodePathEC1Ev,_ZN13MethodBind1RCI7VariantRK8NodePathEC2Ev
	.section	.text._ZN13MethodBind0RCI5ArrayEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI5ArrayEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI5ArrayEC2Ev
	.type	_ZN13MethodBind0RCI5ArrayEC2Ev, @function
_ZN13MethodBind0RCI5ArrayEC2Ev:
.LFB3306:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3306
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB870:
	call	_ZN10MethodBindC2Ev	#
.LEHE870:
	movl	$_ZTV13MethodBind0RCI5ArrayE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.44417._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB871:
	call	_ZN10StringNameC1Ev	#
.LEHE871:
# ./core/method_bind.gen.inc:608: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:610: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB872:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE872:
# ./core/method_bind.gen.inc:613: 	};
	jmp	.L4908	#
.L4907:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4905	#
.L4906:
	movq	%rax, %rbx	#, tmp93
.L4905:
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62258
	movq	%rax, %rdi	# D.62258,
.LEHB873:
	call	_Unwind_Resume	#
.LEHE873:
.L4908:
# ./core/method_bind.gen.inc:613: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3306:
	.section	.gcc_except_table
.LLSDA3306:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3306-.LLSDACSB3306
.LLSDACSB3306:
	.uleb128 .LEHB870-.LFB3306
	.uleb128 .LEHE870-.LEHB870
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB871-.LFB3306
	.uleb128 .LEHE871-.LEHB871
	.uleb128 .L4906-.LFB3306
	.uleb128 0
	.uleb128 .LEHB872-.LFB3306
	.uleb128 .LEHE872-.LEHB872
	.uleb128 .L4907-.LFB3306
	.uleb128 0
	.uleb128 .LEHB873-.LFB3306
	.uleb128 .LEHE873-.LEHB873
	.uleb128 0
	.uleb128 0
.LLSDACSE3306:
	.section	.text._ZN13MethodBind0RCI5ArrayEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI5ArrayEC5Ev,comdat
	.size	_ZN13MethodBind0RCI5ArrayEC2Ev, .-_ZN13MethodBind0RCI5ArrayEC2Ev
	.weak	_ZN13MethodBind0RCI5ArrayEC1Ev
	.set	_ZN13MethodBind0RCI5ArrayEC1Ev,_ZN13MethodBind0RCI5ArrayEC2Ev
	.section	.text._ZN11MethodBind2IibEC2Ev,"axG",@progbits,_ZN11MethodBind2IibEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IibEC2Ev
	.type	_ZN11MethodBind2IibEC2Ev, @function
_ZN11MethodBind2IibEC2Ev:
.LFB3310:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3310
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB874:
	call	_ZN10MethodBindC2Ev	#
.LEHE874:
	movl	$_ZTV11MethodBind2IibE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.44519._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB875:
	call	_ZN10StringNameC1Ev	#
.LEHE875:
# ./core/method_bind.gen.inc:1538: 		set_argument_count(2);
	movq	-24(%rbp), %rax	# this, _4
	movl	$2, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1543: 	};
	jmp	.L4912	#
.L4911:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62259
	movq	%rax, %rdi	# D.62259,
.LEHB876:
	call	_Unwind_Resume	#
.LEHE876:
.L4912:
# ./core/method_bind.gen.inc:1543: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3310:
	.section	.gcc_except_table
.LLSDA3310:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3310-.LLSDACSB3310
.LLSDACSB3310:
	.uleb128 .LEHB874-.LFB3310
	.uleb128 .LEHE874-.LEHB874
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB875-.LFB3310
	.uleb128 .LEHE875-.LEHB875
	.uleb128 .L4911-.LFB3310
	.uleb128 0
	.uleb128 .LEHB876-.LFB3310
	.uleb128 .LEHE876-.LEHB876
	.uleb128 0
	.uleb128 0
.LLSDACSE3310:
	.section	.text._ZN11MethodBind2IibEC2Ev,"axG",@progbits,_ZN11MethodBind2IibEC5Ev,comdat
	.size	_ZN11MethodBind2IibEC2Ev, .-_ZN11MethodBind2IibEC2Ev
	.weak	_ZN11MethodBind2IibEC1Ev
	.set	_ZN11MethodBind2IibEC1Ev,_ZN11MethodBind2IibEC2Ev
	.section	.text._ZN12MethodBind0RI6StringEC2Ev,"axG",@progbits,_ZN12MethodBind0RI6StringEC5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind0RI6StringEC2Ev
	.type	_ZN12MethodBind0RI6StringEC2Ev, @function
_ZN12MethodBind0RI6StringEC2Ev:
.LFB3314:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3314
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:247: 	MethodBind0R () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB877:
	call	_ZN10MethodBindC2Ev	#
.LEHE877:
	movl	$_ZTV12MethodBind0RI6StringE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.44621._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB878:
	call	_ZN10StringNameC1Ev	#
.LEHE878:
# ./core/method_bind.gen.inc:252: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:254: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB879:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE879:
# ./core/method_bind.gen.inc:257: 	};
	jmp	.L4918	#
.L4917:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:247: 	MethodBind0R () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4915	#
.L4916:
	movq	%rax, %rbx	#, tmp93
.L4915:
# ./core/method_bind.gen.inc:247: 	MethodBind0R () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62260
	movq	%rax, %rdi	# D.62260,
.LEHB880:
	call	_Unwind_Resume	#
.LEHE880:
.L4918:
# ./core/method_bind.gen.inc:257: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3314:
	.section	.gcc_except_table
.LLSDA3314:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3314-.LLSDACSB3314
.LLSDACSB3314:
	.uleb128 .LEHB877-.LFB3314
	.uleb128 .LEHE877-.LEHB877
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB878-.LFB3314
	.uleb128 .LEHE878-.LEHB878
	.uleb128 .L4916-.LFB3314
	.uleb128 0
	.uleb128 .LEHB879-.LFB3314
	.uleb128 .LEHE879-.LEHB879
	.uleb128 .L4917-.LFB3314
	.uleb128 0
	.uleb128 .LEHB880-.LFB3314
	.uleb128 .LEHE880-.LEHB880
	.uleb128 0
	.uleb128 0
.LLSDACSE3314:
	.section	.text._ZN12MethodBind0RI6StringEC2Ev,"axG",@progbits,_ZN12MethodBind0RI6StringEC5Ev,comdat
	.size	_ZN12MethodBind0RI6StringEC2Ev, .-_ZN12MethodBind0RI6StringEC2Ev
	.weak	_ZN12MethodBind0RI6StringEC1Ev
	.set	_ZN12MethodBind0RI6StringEC1Ev,_ZN12MethodBind0RI6StringEC2Ev
	.section	.text._ZN13MethodBind0RCImEC2Ev,"axG",@progbits,_ZN13MethodBind0RCImEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCImEC2Ev
	.type	_ZN13MethodBind0RCImEC2Ev, @function
_ZN13MethodBind0RCImEC2Ev:
.LFB3318:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3318
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB881:
	call	_ZN10MethodBindC2Ev	#
.LEHE881:
	movl	$_ZTV13MethodBind0RCImE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.44723._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB882:
	call	_ZN10StringNameC1Ev	#
.LEHE882:
# ./core/method_bind.gen.inc:608: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:610: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB883:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE883:
# ./core/method_bind.gen.inc:613: 	};
	jmp	.L4924	#
.L4923:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4921	#
.L4922:
	movq	%rax, %rbx	#, tmp93
.L4921:
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62261
	movq	%rax, %rdi	# D.62261,
.LEHB884:
	call	_Unwind_Resume	#
.LEHE884:
.L4924:
# ./core/method_bind.gen.inc:613: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3318:
	.section	.gcc_except_table
.LLSDA3318:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3318-.LLSDACSB3318
.LLSDACSB3318:
	.uleb128 .LEHB881-.LFB3318
	.uleb128 .LEHE881-.LEHB881
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB882-.LFB3318
	.uleb128 .LEHE882-.LEHB882
	.uleb128 .L4922-.LFB3318
	.uleb128 0
	.uleb128 .LEHB883-.LFB3318
	.uleb128 .LEHE883-.LEHB883
	.uleb128 .L4923-.LFB3318
	.uleb128 0
	.uleb128 .LEHB884-.LFB3318
	.uleb128 .LEHE884-.LEHB884
	.uleb128 0
	.uleb128 0
.LLSDACSE3318:
	.section	.text._ZN13MethodBind0RCImEC2Ev,"axG",@progbits,_ZN13MethodBind0RCImEC5Ev,comdat
	.size	_ZN13MethodBind0RCImEC2Ev, .-_ZN13MethodBind0RCImEC2Ev
	.weak	_ZN13MethodBind0RCImEC1Ev
	.set	_ZN13MethodBind0RCImEC1Ev,_ZN13MethodBind0RCImEC2Ev
	.section	.text._ZN11MethodBind1IRK6RefPtrEC2Ev,"axG",@progbits,_ZN11MethodBind1IRK6RefPtrEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6RefPtrEC2Ev
	.type	_ZN11MethodBind1IRK6RefPtrEC2Ev, @function
_ZN11MethodBind1IRK6RefPtrEC2Ev:
.LFB3322:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3322
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:785: 	MethodBind1 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB885:
	call	_ZN10MethodBindC2Ev	#
.LEHE885:
	movl	$_ZTV11MethodBind1IRK6RefPtrE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.44825._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB886:
	call	_ZN10StringNameC1Ev	#
.LEHE886:
# ./core/method_bind.gen.inc:790: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:795: 	};
	jmp	.L4928	#
.L4927:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:785: 	MethodBind1 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62262
	movq	%rax, %rdi	# D.62262,
.LEHB887:
	call	_Unwind_Resume	#
.LEHE887:
.L4928:
# ./core/method_bind.gen.inc:795: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3322:
	.section	.gcc_except_table
.LLSDA3322:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3322-.LLSDACSB3322
.LLSDACSB3322:
	.uleb128 .LEHB885-.LFB3322
	.uleb128 .LEHE885-.LEHB885
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB886-.LFB3322
	.uleb128 .LEHE886-.LEHB886
	.uleb128 .L4927-.LFB3322
	.uleb128 0
	.uleb128 .LEHB887-.LFB3322
	.uleb128 .LEHE887-.LEHB887
	.uleb128 0
	.uleb128 0
.LLSDACSE3322:
	.section	.text._ZN11MethodBind1IRK6RefPtrEC2Ev,"axG",@progbits,_ZN11MethodBind1IRK6RefPtrEC5Ev,comdat
	.size	_ZN11MethodBind1IRK6RefPtrEC2Ev, .-_ZN11MethodBind1IRK6RefPtrEC2Ev
	.weak	_ZN11MethodBind1IRK6RefPtrEC1Ev
	.set	_ZN11MethodBind1IRK6RefPtrEC1Ev,_ZN11MethodBind1IRK6RefPtrEC2Ev
	.section	.text._ZN13MethodBind0RCI6RefPtrEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI6RefPtrEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6RefPtrEC2Ev
	.type	_ZN13MethodBind0RCI6RefPtrEC2Ev, @function
_ZN13MethodBind0RCI6RefPtrEC2Ev:
.LFB3326:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3326
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB888:
	call	_ZN10MethodBindC2Ev	#
.LEHE888:
	movl	$_ZTV13MethodBind0RCI6RefPtrE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.44927._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB889:
	call	_ZN10StringNameC1Ev	#
.LEHE889:
# ./core/method_bind.gen.inc:608: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:610: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB890:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE890:
# ./core/method_bind.gen.inc:613: 	};
	jmp	.L4934	#
.L4933:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4931	#
.L4932:
	movq	%rax, %rbx	#, tmp93
.L4931:
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62263
	movq	%rax, %rdi	# D.62263,
.LEHB891:
	call	_Unwind_Resume	#
.LEHE891:
.L4934:
# ./core/method_bind.gen.inc:613: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3326:
	.section	.gcc_except_table
.LLSDA3326:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3326-.LLSDACSB3326
.LLSDACSB3326:
	.uleb128 .LEHB888-.LFB3326
	.uleb128 .LEHE888-.LEHB888
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB889-.LFB3326
	.uleb128 .LEHE889-.LEHB889
	.uleb128 .L4932-.LFB3326
	.uleb128 0
	.uleb128 .LEHB890-.LFB3326
	.uleb128 .LEHE890-.LEHB890
	.uleb128 .L4933-.LFB3326
	.uleb128 0
	.uleb128 .LEHB891-.LFB3326
	.uleb128 .LEHE891-.LEHB891
	.uleb128 0
	.uleb128 0
.LLSDACSE3326:
	.section	.text._ZN13MethodBind0RCI6RefPtrEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI6RefPtrEC5Ev,comdat
	.size	_ZN13MethodBind0RCI6RefPtrEC2Ev, .-_ZN13MethodBind0RCI6RefPtrEC2Ev
	.weak	_ZN13MethodBind0RCI6RefPtrEC1Ev
	.set	_ZN13MethodBind0RCI6RefPtrEC1Ev,_ZN13MethodBind0RCI6RefPtrEC2Ev
	.section	.text._ZN11MethodBind1IRK6StringEC2Ev,"axG",@progbits,_ZN11MethodBind1IRK6StringEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6StringEC2Ev
	.type	_ZN11MethodBind1IRK6StringEC2Ev, @function
_ZN11MethodBind1IRK6StringEC2Ev:
.LFB3330:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3330
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:785: 	MethodBind1 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB892:
	call	_ZN10MethodBindC2Ev	#
.LEHE892:
	movl	$_ZTV11MethodBind1IRK6StringE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.45029._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB893:
	call	_ZN10StringNameC1Ev	#
.LEHE893:
# ./core/method_bind.gen.inc:790: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:795: 	};
	jmp	.L4938	#
.L4937:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:785: 	MethodBind1 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62264
	movq	%rax, %rdi	# D.62264,
.LEHB894:
	call	_Unwind_Resume	#
.LEHE894:
.L4938:
# ./core/method_bind.gen.inc:795: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3330:
	.section	.gcc_except_table
.LLSDA3330:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3330-.LLSDACSB3330
.LLSDACSB3330:
	.uleb128 .LEHB892-.LFB3330
	.uleb128 .LEHE892-.LEHB892
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB893-.LFB3330
	.uleb128 .LEHE893-.LEHB893
	.uleb128 .L4937-.LFB3330
	.uleb128 0
	.uleb128 .LEHB894-.LFB3330
	.uleb128 .LEHE894-.LEHB894
	.uleb128 0
	.uleb128 0
.LLSDACSE3330:
	.section	.text._ZN11MethodBind1IRK6StringEC2Ev,"axG",@progbits,_ZN11MethodBind1IRK6StringEC5Ev,comdat
	.size	_ZN11MethodBind1IRK6StringEC2Ev, .-_ZN11MethodBind1IRK6StringEC2Ev
	.weak	_ZN11MethodBind1IRK6StringEC1Ev
	.set	_ZN11MethodBind1IRK6StringEC1Ev,_ZN11MethodBind1IRK6StringEC2Ev
	.section	.text._ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI10PoolVectorI6StringEEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev
	.type	_ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev, @function
_ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev:
.LFB3334:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3334
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB895:
	call	_ZN10MethodBindC2Ev	#
.LEHE895:
	movl	$_ZTV13MethodBind0RCI10PoolVectorI6StringEE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.45131._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB896:
	call	_ZN10StringNameC1Ev	#
.LEHE896:
# ./core/method_bind.gen.inc:608: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:610: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB897:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE897:
# ./core/method_bind.gen.inc:613: 	};
	jmp	.L4944	#
.L4943:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4941	#
.L4942:
	movq	%rax, %rbx	#, tmp93
.L4941:
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62265
	movq	%rax, %rdi	# D.62265,
.LEHB898:
	call	_Unwind_Resume	#
.LEHE898:
.L4944:
# ./core/method_bind.gen.inc:613: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3334:
	.section	.gcc_except_table
.LLSDA3334:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3334-.LLSDACSB3334
.LLSDACSB3334:
	.uleb128 .LEHB895-.LFB3334
	.uleb128 .LEHE895-.LEHB895
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB896-.LFB3334
	.uleb128 .LEHE896-.LEHB896
	.uleb128 .L4942-.LFB3334
	.uleb128 0
	.uleb128 .LEHB897-.LFB3334
	.uleb128 .LEHE897-.LEHB897
	.uleb128 .L4943-.LFB3334
	.uleb128 0
	.uleb128 .LEHB898-.LFB3334
	.uleb128 .LEHE898-.LEHB898
	.uleb128 0
	.uleb128 0
.LLSDACSE3334:
	.section	.text._ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev,"axG",@progbits,_ZN13MethodBind0RCI10PoolVectorI6StringEEC5Ev,comdat
	.size	_ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev, .-_ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev
	.weak	_ZN13MethodBind0RCI10PoolVectorI6StringEEC1Ev
	.set	_ZN13MethodBind0RCI10PoolVectorI6StringEEC1Ev,_ZN13MethodBind0RCI10PoolVectorI6StringEEC2Ev
	.section	.text._ZN11MethodBind2IRK6StringRK5ArrayEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK5ArrayEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK5ArrayEC2Ev
	.type	_ZN11MethodBind2IRK6StringRK5ArrayEC2Ev, @function
_ZN11MethodBind2IRK6StringRK5ArrayEC2Ev:
.LFB3338:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3338
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB899:
	call	_ZN10MethodBindC2Ev	#
.LEHE899:
	movl	$_ZTV11MethodBind2IRK6StringRK5ArrayE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.45233._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB900:
	call	_ZN10StringNameC1Ev	#
.LEHE900:
# ./core/method_bind.gen.inc:1538: 		set_argument_count(2);
	movq	-24(%rbp), %rax	# this, _4
	movl	$2, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1543: 	};
	jmp	.L4948	#
.L4947:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62266
	movq	%rax, %rdi	# D.62266,
.LEHB901:
	call	_Unwind_Resume	#
.LEHE901:
.L4948:
# ./core/method_bind.gen.inc:1543: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3338:
	.section	.gcc_except_table
.LLSDA3338:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3338-.LLSDACSB3338
.LLSDACSB3338:
	.uleb128 .LEHB899-.LFB3338
	.uleb128 .LEHE899-.LEHB899
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB900-.LFB3338
	.uleb128 .LEHE900-.LEHB900
	.uleb128 .L4947-.LFB3338
	.uleb128 0
	.uleb128 .LEHB901-.LFB3338
	.uleb128 .LEHE901-.LEHB901
	.uleb128 0
	.uleb128 0
.LLSDACSE3338:
	.section	.text._ZN11MethodBind2IRK6StringRK5ArrayEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK5ArrayEC5Ev,comdat
	.size	_ZN11MethodBind2IRK6StringRK5ArrayEC2Ev, .-_ZN11MethodBind2IRK6StringRK5ArrayEC2Ev
	.weak	_ZN11MethodBind2IRK6StringRK5ArrayEC1Ev
	.set	_ZN11MethodBind2IRK6StringRK5ArrayEC1Ev,_ZN11MethodBind2IRK6StringRK5ArrayEC2Ev
	.section	.text._ZN13MethodBind1RCIbRK10StringNameEC2Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK10StringNameEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK10StringNameEC2Ev
	.type	_ZN13MethodBind1RCIbRK10StringNameEC2Ev, @function
_ZN13MethodBind1RCIbRK10StringNameEC2Ev:
.LFB3342:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3342
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB902:
	call	_ZN10MethodBindC2Ev	#
.LEHE902:
	movl	$_ZTV13MethodBind1RCIbRK10StringNameE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.45335._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB903:
	call	_ZN10StringNameC1Ev	#
.LEHE903:
# ./core/method_bind.gen.inc:1348: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1350: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB904:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE904:
# ./core/method_bind.gen.inc:1353: 	};
	jmp	.L4954	#
.L4953:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4951	#
.L4952:
	movq	%rax, %rbx	#, tmp93
.L4951:
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62267
	movq	%rax, %rdi	# D.62267,
.LEHB905:
	call	_Unwind_Resume	#
.LEHE905:
.L4954:
# ./core/method_bind.gen.inc:1353: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3342:
	.section	.gcc_except_table
.LLSDA3342:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3342-.LLSDACSB3342
.LLSDACSB3342:
	.uleb128 .LEHB902-.LFB3342
	.uleb128 .LEHE902-.LEHB902
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB903-.LFB3342
	.uleb128 .LEHE903-.LEHB903
	.uleb128 .L4952-.LFB3342
	.uleb128 0
	.uleb128 .LEHB904-.LFB3342
	.uleb128 .LEHE904-.LEHB904
	.uleb128 .L4953-.LFB3342
	.uleb128 0
	.uleb128 .LEHB905-.LFB3342
	.uleb128 .LEHE905-.LEHB905
	.uleb128 0
	.uleb128 0
.LLSDACSE3342:
	.section	.text._ZN13MethodBind1RCIbRK10StringNameEC2Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK10StringNameEC5Ev,comdat
	.size	_ZN13MethodBind1RCIbRK10StringNameEC2Ev, .-_ZN13MethodBind1RCIbRK10StringNameEC2Ev
	.weak	_ZN13MethodBind1RCIbRK10StringNameEC1Ev
	.set	_ZN13MethodBind1RCIbRK10StringNameEC1Ev,_ZN13MethodBind1RCIbRK10StringNameEC2Ev
	.section	.text._ZN16MethodBindVarArgI6ObjectEC2Ev,"axG",@progbits,_ZN16MethodBindVarArgI6ObjectEC5Ev,comdat
	.align 2
	.weak	_ZN16MethodBindVarArgI6ObjectEC2Ev
	.type	_ZN16MethodBindVarArgI6ObjectEC2Ev, @function
_ZN16MethodBindVarArgI6ObjectEC2Ev:
.LFB3346:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3346
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.h:387: 	MethodBindVarArg() {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB906:
	call	_ZN10MethodBindC2Ev	#
.LEHE906:
	movl	$_ZTV16MethodBindVarArgI6ObjectE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp87
	movq	%rdx, (%rax)	# _2, this_6(D)->D.45447._vptr.MethodBind
# ./core/method_bind.h:388: 		call_method = NULL;
	movq	-24(%rbp), %rax	# this, tmp88
	movq	$0, 56(%rax)	#, this_6(D)->call_method.__pfn
	movq	-24(%rbp), %rax	# this, tmp89
	movq	$0, 64(%rax)	#, this_6(D)->call_method.__delta
# ./core/method_bind.h:389: 		_set_returns(true);
	movq	-24(%rbp), %rax	# this, _3
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _3,
.LEHB907:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE907:
# ./core/method_bind.h:390: 	}
	jmp	.L4958	#
.L4957:
	movq	%rax, %rbx	#, tmp90
# ./core/method_bind.h:387: 	MethodBindVarArg() {
	movq	-24(%rbp), %rax	# this, _4
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp90, D.62268
	movq	%rax, %rdi	# D.62268,
.LEHB908:
	call	_Unwind_Resume	#
.LEHE908:
.L4958:
# ./core/method_bind.h:390: 	}
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3346:
	.section	.gcc_except_table
.LLSDA3346:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3346-.LLSDACSB3346
.LLSDACSB3346:
	.uleb128 .LEHB906-.LFB3346
	.uleb128 .LEHE906-.LEHB906
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB907-.LFB3346
	.uleb128 .LEHE907-.LEHB907
	.uleb128 .L4957-.LFB3346
	.uleb128 0
	.uleb128 .LEHB908-.LFB3346
	.uleb128 .LEHE908-.LEHB908
	.uleb128 0
	.uleb128 0
.LLSDACSE3346:
	.section	.text._ZN16MethodBindVarArgI6ObjectEC2Ev,"axG",@progbits,_ZN16MethodBindVarArgI6ObjectEC5Ev,comdat
	.size	_ZN16MethodBindVarArgI6ObjectEC2Ev, .-_ZN16MethodBindVarArgI6ObjectEC2Ev
	.weak	_ZN16MethodBindVarArgI6ObjectEC1Ev
	.set	_ZN16MethodBindVarArgI6ObjectEC1Ev,_ZN16MethodBindVarArgI6ObjectEC2Ev
	.section	.text._ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE,"axG",@progbits,_ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE,comdat
	.align 2
	.weak	_ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE
	.type	_ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE, @function
_ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE:
.LFB3349:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rdx, %rcx	# p_method, tmp84
	movq	%rsi, %rax	# tmp83, tmp82
	movq	%rdi, %rdx	#,
	movq	%rcx, %rdx	# tmp84,
	movq	%rax, -32(%rbp)	# tmp82, p_method
	movq	%rdx, -24(%rbp)	#, p_method
# ./core/method_bind.h:381: 	void set_method(NativeCall p_method) { call_method = p_method; }
	movq	-8(%rbp), %rcx	# this, tmp85
	movq	-32(%rbp), %rax	# p_method, tmp86
	movq	-24(%rbp), %rdx	# p_method,
	movq	%rax, 56(%rcx)	# tmp86, this_2(D)->call_method
	movq	%rdx, 64(%rcx)	#, this_2(D)->call_method
# ./core/method_bind.h:381: 	void set_method(NativeCall p_method) { call_method = p_method; }
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3349:
	.size	_ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE, .-_ZN16MethodBindVarArgI6ObjectE10set_methodEMS0_F7VariantPPKS2_iRNS2_9CallErrorEE
	.section	.text._ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo,"axG",@progbits,_ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo,comdat
	.align 2
	.weak	_ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo
	.type	_ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo, @function
_ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo:
.LFB3350:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_info, p_info
# ./core/method_bind.h:353: 		set_argument_count(p_info.arguments.size());
	movq	-24(%rbp), %rdx	# this, _1
	movq	-32(%rbp), %rax	# p_info, tmp87
	addq	$64, %rax	#, _2
	movq	%rax, -8(%rbp)	# _2, this
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-8(%rbp), %rax	# this, tmp88
	movq	(%rax), %rax	# this_8->_data, _9
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	testq	%rax, %rax	# _9
	je	.L4961	#,
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movq	-8(%rbp), %rax	# this, tmp89
	movq	(%rax), %rax	# this_8->_data, _10
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	16(%rax), %eax	# _10->size_cache, D.58089
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	jmp	.L4964	#
.L4961:
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	movl	$0, %eax	#, D.58089
# ./core/list.h:410: 		return _data ? _data->size_cache : 0;
	nop	
.L4964:
# ./core/method_bind.h:353: 		set_argument_count(p_info.arguments.size());
	movl	%eax, %esi	# D.58089,
	movq	%rdx, %rdi	# _1,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.h:373: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3350:
	.size	_ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo, .-_ZN16MethodBindVarArgI6ObjectE15set_method_infoERK10MethodInfo
	.section	.text._ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv,"axG",@progbits,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv
	.type	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv, @function
_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv:
.LFB3353:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movq	-24(%rbp), %rax	# this, tmp91
	movq	(%rax), %rax	# this_14(D)->hash_table, _1
	testq	%rax, %rax	# _1
	setne	%al	#, _2
	movzbl	%al, %eax	# _2, _3
	testq	%rax, %rax	# _4
	je	.L4966	#,
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movl	$0, %r8d	#,
	movl	$.LC142, %ecx	#,
	movl	$103, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC143, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	jmp	.L4965	#
.L4966:
# ./core/hash_map.h:103: 		ERR_FAIL_COND(hash_table);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movl	$.LC27, %esi	#,
	movl	$8, %edi	#,
	call	_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc	#
# ./core/hash_map.h:105: 		hash_table = memnew_arr(Element *, (1 << MIN_HASH_TABLE_POWER));
	movq	-24(%rbp), %rdx	# this, tmp92
	movq	%rax, (%rdx)	# _5, this_14(D)->hash_table
# ./core/hash_map.h:107: 		hash_table_power = MIN_HASH_TABLE_POWER;
	movq	-24(%rbp), %rax	# this, tmp93
	movb	$3, 8(%rax)	#, this_14(D)->hash_table_power
# ./core/hash_map.h:108: 		elements = 0;
	movq	-24(%rbp), %rax	# this, tmp94
	movl	$0, 12(%rax)	#, this_14(D)->elements
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	movl	$0, -4(%rbp)	#, i
.L4968:
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	cmpl	$7, -4(%rbp)	#, i
	jg	.L4965	#,
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	-24(%rbp), %rax	# this, tmp95
	movq	(%rax), %rax	# this_14(D)->hash_table, _6
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movl	-4(%rbp), %edx	# i, tmp96
	movslq	%edx, %rdx	# tmp96, _7
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	salq	$3, %rdx	#, _8
	addq	%rdx, %rax	# _8, _9
# ./core/hash_map.h:110: 			hash_table[i] = 0;
	movq	$0, (%rax)	#, *_9
# ./core/hash_map.h:109: 		for (int i = 0; i < (1 << MIN_HASH_TABLE_POWER); i++)
	addl	$1, -4(%rbp)	#, i
	jmp	.L4968	#
.L4965:
# ./core/hash_map.h:111: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3353:
	.size	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv, .-_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE15make_hash_tableEv
	.section	.text._ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_,"axG",@progbits,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_
	.type	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_, @function
_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_:
.LFB3355:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$72, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# this, this
	movq	%rsi, -80(%rbp)	# p_key, p_key
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movl	$.LC27, %esi	#,
	movl	$32, %edi	#,
	call	_ZnwmPKc	#
	movq	%rax, %rbx	#, _22
	movq	%rbx, %rdi	# _22,
	call	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC1Ev	#
	movq	%rbx, -40(%rbp)	# _22, p_obj
	movq	-40(%rbp), %rax	# p_obj, tmp106
	movq	%rax, -48(%rbp)	# tmp106, D.59538
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	movq	-40(%rbp), %rax	# p_obj, D.59539
# ./core/hash_map.h:210: 		Element *e = memnew(Element);
	movq	%rax, -24(%rbp)	# D.59539, e
# ./core/hash_map.h:211: 		if (!e) {
	cmpq	$0, -24(%rbp)	#, e
	jne	.L4971	#,
# ./core/hash_map.h:213: 			ERR_FAIL_V(NULL);
	movl	$0, %r8d	#,
	movl	$.LC126, %ecx	#,
	movl	$213, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC144, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
	movl	$0, %eax	#, _18
	jmp	.L4972	#
.L4971:
	movq	-80(%rbp), %rax	# p_key, tmp107
	movq	%rax, -56(%rbp)	# tmp107, p_string_name
	movq	-56(%rbp), %rax	# p_string_name, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/string_name.h:112: 		if (_data)
	movq	-64(%rbp), %rax	# this, tmp109
	movq	(%rax), %rax	# this_43->_data, _44
# ./core/string_name.h:112: 		if (_data)
	testq	%rax, %rax	# _44
	je	.L4973	#,
# ./core/string_name.h:113: 			return _data->hash;
	movq	-64(%rbp), %rax	# this, tmp110
	movq	(%rax), %rax	# this_43->_data, _45
# ./core/string_name.h:113: 			return _data->hash;
	movl	28(%rax), %eax	# _45->hash, D.59545
	jmp	.L4974	#
.L4973:
# ./core/string_name.h:115: 			return 0;
	movl	$0, %eax	#, D.59545
.L4974:
# ./core/hashfuncs.h:152: 	static _FORCE_INLINE_ uint32_t hash(const StringName &p_string_name) { return p_string_name.hash(); }
	nop	
# ./core/hash_map.h:215: 		uint32_t hash = Hasher::hash(p_key);
	movl	%eax, -28(%rbp)	# D.59545, hash
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movq	-72(%rbp), %rax	# this, tmp111
	movzbl	8(%rax), %eax	# this_28(D)->hash_table_power, _1
	movzbl	%al, %eax	# _1, _2
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	movl	$1, %edx	#, tmp112
	movl	%eax, %ecx	# _2, tmp127
	sall	%cl, %edx	# tmp127, tmp112
	movl	%edx, %eax	# tmp112, _3
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	subl	$1, %eax	#, _4
# ./core/hash_map.h:216: 		uint32_t index = hash & ((1 << hash_table_power) - 1);
	andl	-28(%rbp), %eax	# hash, tmp114
	movl	%eax, -32(%rbp)	# tmp114, index
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-72(%rbp), %rax	# this, tmp115
	movq	(%rax), %rax	# this_28(D)->hash_table, _6
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movl	-32(%rbp), %edx	# index, _7
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	salq	$3, %rdx	#, _8
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# *_9, _10
# ./core/hash_map.h:217: 		e->next = hash_table[index];
	movq	-24(%rbp), %rax	# e, tmp116
	movq	%rdx, 8(%rax)	# _10, e_25->next
# ./core/hash_map.h:218: 		e->hash = hash;
	movq	-24(%rbp), %rax	# e, tmp117
	movl	-28(%rbp), %edx	# hash, tmp118
	movl	%edx, (%rax)	# tmp118, e_25->hash
# ./core/hash_map.h:219: 		e->pair.key = p_key;
	movq	-24(%rbp), %rax	# e, tmp119
	leaq	16(%rax), %rdx	#, _11
	movq	-80(%rbp), %rax	# p_key, tmp120
	movq	%rax, %rsi	# tmp120,
	movq	%rdx, %rdi	# _11,
	call	_ZN10StringNameaSERKS_	#
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-72(%rbp), %rax	# this, tmp121
	movq	(%rax), %rax	# this_28(D)->hash_table, _12
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movl	-32(%rbp), %edx	# index, _13
# ./core/hash_map.h:221: 		hash_table[index] = e;
	salq	$3, %rdx	#, _14
	addq	%rax, %rdx	# _12, _15
# ./core/hash_map.h:221: 		hash_table[index] = e;
	movq	-24(%rbp), %rax	# e, tmp122
	movq	%rax, (%rdx)	# tmp122, *_15
# ./core/hash_map.h:222: 		elements++;
	movq	-72(%rbp), %rax	# this, tmp123
	movl	12(%rax), %eax	# this_28(D)->elements, _16
	leal	1(%rax), %edx	#, _17
	movq	-72(%rbp), %rax	# this, tmp124
	movl	%edx, 12(%rax)	# _17, this_28(D)->elements
# ./core/hash_map.h:224: 		return e;
	movq	-24(%rbp), %rax	# e, _18
.L4972:
# ./core/hash_map.h:225: 	}
	addq	$72, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3355:
	.size	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_, .-_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE14create_elementERKS0_
	.section	.text._ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv,"axG",@progbits,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv
	.type	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv, @function
_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv:
.LFB3356:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -56(%rbp)	# this, this
# ./core/hash_map.h:125: 		int new_hash_table_power = -1;
	movl	$-1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp143
	movl	12(%rax), %eax	# this_73(D)->elements, _1
	movl	%eax, %edx	# _1, _2
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp144
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _3
	movzbl	%al, %eax	# _3, _4
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp145
	movl	%eax, %ecx	# _4, tmp192
	sall	%cl, %esi	# tmp192, tmp145
	movl	%esi, %eax	# tmp145, _5
# ./core/hash_map.h:127: 		if ((int)elements > ((1 << hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _5, _2
	jle	.L4977	#,
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	movq	-56(%rbp), %rax	# this, tmp146
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _6
	movzbl	%al, %eax	# _6, _7
# ./core/hash_map.h:129: 			new_hash_table_power = hash_table_power + 1;
	addl	$1, %eax	#, tmp147
	movl	%eax, -4(%rbp)	# tmp147, new_hash_table_power
.L4979:
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp148
	movl	12(%rax), %eax	# this_73(D)->elements, _8
	movl	%eax, %edx	# _8, _9
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp149
	movl	$8, %esi	#, tmp150
	movl	%eax, %ecx	# tmp149, tmp194
	sall	%cl, %esi	# tmp194, tmp150
	movl	%esi, %eax	# tmp150, _10
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _10, _9
	jle	.L4978	#,
# ./core/hash_map.h:133: 				new_hash_table_power++;
	addl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:131: 			while ((int)elements > ((1 << new_hash_table_power) * RELATIONSHIP)) {
	jmp	.L4979	#
.L4977:
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp151
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _11
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpb	$3, %al	#, _11
	jbe	.L4978	#,
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp152
	movl	12(%rax), %eax	# this_73(D)->elements, _12
	movl	%eax, %edx	# _12, _13
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movq	-56(%rbp), %rax	# this, tmp153
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _14
	movzbl	%al, %eax	# _14, _15
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	subl	$1, %eax	#, _16
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	movl	$8, %esi	#, tmp154
	movl	%eax, %ecx	# _16, tmp196
	sall	%cl, %esi	# tmp196, tmp154
	movl	%esi, %eax	# tmp154, _17
# ./core/hash_map.h:136: 		} else if ((hash_table_power > (int)MIN_HASH_TABLE_POWER) && ((int)elements < ((1 << (hash_table_power - 1)) * RELATIONSHIP))) {
	cmpl	%eax, %edx	# _17, _13
	jge	.L4978	#,
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	movq	-56(%rbp), %rax	# this, tmp155
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _18
	movzbl	%al, %eax	# _18, _19
# ./core/hash_map.h:139: 			new_hash_table_power = hash_table_power - 1;
	subl	$1, %eax	#, tmp156
	movl	%eax, -4(%rbp)	# tmp156, new_hash_table_power
.L4981:
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movq	-56(%rbp), %rax	# this, tmp157
	movl	12(%rax), %eax	# this_73(D)->elements, _20
	movl	%eax, %edx	# _20, _21
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp158
	subl	$1, %eax	#, _22
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	movl	$8, %esi	#, tmp159
	movl	%eax, %ecx	# _22, tmp198
	sall	%cl, %esi	# tmp198, tmp159
	movl	%esi, %eax	# tmp159, _23
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	cmpl	%eax, %edx	# _23, _21
	jge	.L4980	#,
# ./core/hash_map.h:143: 				new_hash_table_power--;
	subl	$1, -4(%rbp)	#, new_hash_table_power
# ./core/hash_map.h:141: 			while ((int)elements < ((1 << (new_hash_table_power - 1)) * RELATIONSHIP)) {
	jmp	.L4981	#
.L4980:
# ./core/hash_map.h:146: 			if (new_hash_table_power < (int)MIN_HASH_TABLE_POWER)
	cmpl	$2, -4(%rbp)	#, new_hash_table_power
	jg	.L4978	#,
# ./core/hash_map.h:147: 				new_hash_table_power = MIN_HASH_TABLE_POWER;
	movl	$3, -4(%rbp)	#, new_hash_table_power
.L4978:
# ./core/hash_map.h:150: 		if (new_hash_table_power == -1)
	cmpl	$-1, -4(%rbp)	#, new_hash_table_power
	je	.L4992	#,
# ./core/hash_map.h:153: 		Element **new_hash_table = memnew_arr(Element *, ((uint64_t)1 << new_hash_table_power));
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp160
	movl	$1, %edx	#, tmp161
	movl	%eax, %ecx	# tmp160, tmp200
	salq	%cl, %rdx	# tmp200, tmp161
	movq	%rdx, %rax	# tmp161, _24
	movl	$.LC27, %esi	#,
	movq	%rax, %rdi	# _24,
	call	_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc	#
	movq	%rax, -24(%rbp)	# _80, new_hash_table
# ./core/hash_map.h:154: 		if (!new_hash_table) {
	cmpq	$0, -24(%rbp)	#, new_hash_table
	jne	.L4984	#,
# ./core/hash_map.h:156: 			ERR_PRINT("Out of Memory");
	movl	$0, %r8d	#,
	movl	$.LC145, %ecx	#,
	movl	$156, %edx	#,
	movl	$.LC123, %esi	#,
	movl	$.LC146, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/hash_map.h:157: 			return;
	jmp	.L4976	#
.L4984:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	$0, -8(%rbp)	#, i
.L4986:
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp162
	movl	$1, %edx	#, tmp163
	movl	%eax, %ecx	# tmp162, tmp202
	sall	%cl, %edx	# tmp202, tmp163
	movl	%edx, %eax	# tmp163, _25
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	cmpl	%eax, -8(%rbp)	# _25, i
	jge	.L4985	#,
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movl	-8(%rbp), %eax	# i, tmp164
	cltq
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	leaq	0(,%rax,8), %rdx	#, _27
	movq	-24(%rbp), %rax	# new_hash_table, tmp165
	addq	%rdx, %rax	# _27, _28
# ./core/hash_map.h:162: 			new_hash_table[i] = 0;
	movq	$0, (%rax)	#, *_28
# ./core/hash_map.h:160: 		for (int i = 0; i < (1 << new_hash_table_power); i++) {
	addl	$1, -8(%rbp)	#, i
	jmp	.L4986	#
.L4985:
# ./core/hash_map.h:165: 		if (hash_table) {
	movq	-56(%rbp), %rax	# this, tmp166
	movq	(%rax), %rax	# this_73(D)->hash_table, _29
# ./core/hash_map.h:165: 		if (hash_table) {
	testq	%rax, %rax	# _29
	je	.L4987	#,
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$0, -12(%rbp)	#, i
.L4991:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movq	-56(%rbp), %rax	# this, tmp167
	movzbl	8(%rax), %eax	# this_73(D)->hash_table_power, _30
	movzbl	%al, %eax	# _30, _31
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	movl	$1, %edx	#, tmp168
	movl	%eax, %ecx	# _31, tmp204
	sall	%cl, %edx	# tmp204, tmp168
	movl	%edx, %eax	# tmp168, _32
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	cmpl	%eax, -12(%rbp)	# _32, i
	jge	.L4988	#,
.L4990:
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movq	-56(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_73(D)->hash_table, _33
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	movl	-12(%rbp), %edx	# i, tmp170
	movslq	%edx, %rdx	# tmp170, _34
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	salq	$3, %rdx	#, _35
	addq	%rdx, %rax	# _35, _36
	movq	(%rax), %rax	# *_36, _37
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	testq	%rax, %rax	# _37
	je	.L4989	#,
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	-56(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_73(D)->hash_table, _38
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movl	-12(%rbp), %edx	# i, tmp172
	movslq	%edx, %rdx	# tmp172, _39
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	salq	$3, %rdx	#, _40
	addq	%rdx, %rax	# _40, _41
# ./core/hash_map.h:170: 					Element *se = hash_table[i];
	movq	(%rax), %rax	# *_41, tmp173
	movq	%rax, -32(%rbp)	# tmp173, se
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-56(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_73(D)->hash_table, _42
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movl	-12(%rbp), %edx	# i, tmp175
	movslq	%edx, %rdx	# tmp175, _43
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	salq	$3, %rdx	#, _44
	addq	%rax, %rdx	# _42, _45
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	-32(%rbp), %rax	# se, tmp176
	movq	8(%rax), %rax	# se_86->next, _46
# ./core/hash_map.h:171: 					hash_table[i] = se->next;
	movq	%rax, (%rdx)	# _46, *_45
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movq	-32(%rbp), %rax	# se, tmp177
	movl	(%rax), %edx	# se_86->hash, _47
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp178
	movl	$1, %esi	#, tmp179
	movl	%eax, %ecx	# tmp178, tmp206
	sall	%cl, %esi	# tmp206, tmp179
	movl	%esi, %eax	# tmp179, _48
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	subl	$1, %eax	#, _49
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	andl	%edx, %eax	# _47, _51
# ./core/hash_map.h:172: 					int new_pos = se->hash & ((1 << new_hash_table_power) - 1);
	movl	%eax, -36(%rbp)	# _51, new_pos
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movl	-36(%rbp), %eax	# new_pos, tmp180
	cltq
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	leaq	0(,%rax,8), %rdx	#, _53
	movq	-24(%rbp), %rax	# new_hash_table, tmp181
	addq	%rdx, %rax	# _53, _54
	movq	(%rax), %rdx	# *_54, _55
# ./core/hash_map.h:173: 					se->next = new_hash_table[new_pos];
	movq	-32(%rbp), %rax	# se, tmp182
	movq	%rdx, 8(%rax)	# _55, se_86->next
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movl	-36(%rbp), %eax	# new_pos, tmp183
	cltq
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	leaq	0(,%rax,8), %rdx	#, _57
	movq	-24(%rbp), %rax	# new_hash_table, tmp184
	addq	%rax, %rdx	# tmp184, _58
# ./core/hash_map.h:174: 					new_hash_table[new_pos] = se;
	movq	-32(%rbp), %rax	# se, tmp185
	movq	%rax, (%rdx)	# tmp185, *_58
# ./core/hash_map.h:168: 				while (hash_table[i]) {
	jmp	.L4990	#
.L4989:
# ./core/hash_map.h:166: 			for (int i = 0; i < (1 << hash_table_power); i++) {
	addl	$1, -12(%rbp)	#, i
	jmp	.L4991	#
.L4988:
# ./core/hash_map.h:178: 			memdelete_arr(hash_table);
	movq	-56(%rbp), %rax	# this, tmp186
	movq	(%rax), %rax	# this_73(D)->hash_table, _59
	movq	%rax, %rdi	# _59,
	call	_Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_	#
.L4987:
# ./core/hash_map.h:180: 		hash_table = new_hash_table;
	movq	-56(%rbp), %rax	# this, tmp187
	movq	-24(%rbp), %rdx	# new_hash_table, tmp188
	movq	%rdx, (%rax)	# tmp188, this_73(D)->hash_table
# ./core/hash_map.h:181: 		hash_table_power = new_hash_table_power;
	movl	-4(%rbp), %eax	# new_hash_table_power, tmp189
	movl	%eax, %edx	# tmp189, _60
	movq	-56(%rbp), %rax	# this, tmp190
	movb	%dl, 8(%rax)	# _60, this_73(D)->hash_table_power
	jmp	.L4976	#
.L4992:
# ./core/hash_map.h:151: 			return;
	nop	
.L4976:
# ./core/hash_map.h:182: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3356:
	.size	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv, .-_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE16check_hash_tableEv
	.section	.text._ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK10StringNameRK7VariantEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev
	.type	_ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev, @function
_ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev:
.LFB3358:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3358
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB909:
	call	_ZN10MethodBindC2Ev	#
.LEHE909:
	movl	$_ZTV11MethodBind2IRK10StringNameRK7VariantE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.45599._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB910:
	call	_ZN10StringNameC1Ev	#
.LEHE910:
# ./core/method_bind.gen.inc:1538: 		set_argument_count(2);
	movq	-24(%rbp), %rax	# this, _4
	movl	$2, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1543: 	};
	jmp	.L4996	#
.L4995:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:1533: 	MethodBind2 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62269
	movq	%rax, %rdi	# D.62269,
.LEHB911:
	call	_Unwind_Resume	#
.LEHE911:
.L4996:
# ./core/method_bind.gen.inc:1543: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3358:
	.section	.gcc_except_table
.LLSDA3358:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3358-.LLSDACSB3358
.LLSDACSB3358:
	.uleb128 .LEHB909-.LFB3358
	.uleb128 .LEHE909-.LEHB909
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB910-.LFB3358
	.uleb128 .LEHE910-.LEHB910
	.uleb128 .L4995-.LFB3358
	.uleb128 0
	.uleb128 .LEHB911-.LFB3358
	.uleb128 .LEHE911-.LEHB911
	.uleb128 0
	.uleb128 0
.LLSDACSE3358:
	.section	.text._ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev,"axG",@progbits,_ZN11MethodBind2IRK10StringNameRK7VariantEC5Ev,comdat
	.size	_ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev, .-_ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev
	.weak	_ZN11MethodBind2IRK10StringNameRK7VariantEC1Ev
	.set	_ZN11MethodBind2IRK10StringNameRK7VariantEC1Ev,_ZN11MethodBind2IRK10StringNameRK7VariantEC2Ev
	.section	.text._ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev,"axG",@progbits,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev
	.type	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev, @function
_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev:
.LFB3362:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3362
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1727: 	MethodBind2R () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB912:
	call	_ZN10MethodBindC2Ev	#
.LEHE912:
	movl	$_ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.45701._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB913:
	call	_ZN10StringNameC1Ev	#
.LEHE913:
# ./core/method_bind.gen.inc:1732: 		set_argument_count(2);
	movq	-24(%rbp), %rax	# this, _4
	movl	$2, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1734: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB914:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE914:
# ./core/method_bind.gen.inc:1737: 	};
	jmp	.L5002	#
.L5001:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:1727: 	MethodBind2R () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L4999	#
.L5000:
	movq	%rax, %rbx	#, tmp93
.L4999:
# ./core/method_bind.gen.inc:1727: 	MethodBind2R () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62270
	movq	%rax, %rdi	# D.62270,
.LEHB915:
	call	_Unwind_Resume	#
.LEHE915:
.L5002:
# ./core/method_bind.gen.inc:1737: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3362:
	.section	.gcc_except_table
.LLSDA3362:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3362-.LLSDACSB3362
.LLSDACSB3362:
	.uleb128 .LEHB912-.LFB3362
	.uleb128 .LEHE912-.LEHB912
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB913-.LFB3362
	.uleb128 .LEHE913-.LEHB913
	.uleb128 .L5000-.LFB3362
	.uleb128 0
	.uleb128 .LEHB914-.LFB3362
	.uleb128 .LEHE914-.LEHB914
	.uleb128 .L5001-.LFB3362
	.uleb128 0
	.uleb128 .LEHB915-.LFB3362
	.uleb128 .LEHE915-.LEHB915
	.uleb128 0
	.uleb128 0
.LLSDACSE3362:
	.section	.text._ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev,"axG",@progbits,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC5Ev,comdat
	.size	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev, .-_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev
	.weak	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC1Ev
	.set	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC1Ev,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayEC2Ev
	.section	.text._ZN13MethodBind1RCI5ArrayRK6StringEC2Ev,"axG",@progbits,_ZN13MethodBind1RCI5ArrayRK6StringEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI5ArrayRK6StringEC2Ev
	.type	_ZN13MethodBind1RCI5ArrayRK6StringEC2Ev, @function
_ZN13MethodBind1RCI5ArrayRK6StringEC2Ev:
.LFB3366:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3366
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB916:
	call	_ZN10MethodBindC2Ev	#
.LEHE916:
	movl	$_ZTV13MethodBind1RCI5ArrayRK6StringE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.45803._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB917:
	call	_ZN10StringNameC1Ev	#
.LEHE917:
# ./core/method_bind.gen.inc:1348: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1350: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB918:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE918:
# ./core/method_bind.gen.inc:1353: 	};
	jmp	.L5008	#
.L5007:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5005	#
.L5006:
	movq	%rax, %rbx	#, tmp93
.L5005:
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62271
	movq	%rax, %rdi	# D.62271,
.LEHB919:
	call	_Unwind_Resume	#
.LEHE919:
.L5008:
# ./core/method_bind.gen.inc:1353: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3366:
	.section	.gcc_except_table
.LLSDA3366:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3366-.LLSDACSB3366
.LLSDACSB3366:
	.uleb128 .LEHB916-.LFB3366
	.uleb128 .LEHE916-.LEHB916
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB917-.LFB3366
	.uleb128 .LEHE917-.LEHB917
	.uleb128 .L5006-.LFB3366
	.uleb128 0
	.uleb128 .LEHB918-.LFB3366
	.uleb128 .LEHE918-.LEHB918
	.uleb128 .L5007-.LFB3366
	.uleb128 0
	.uleb128 .LEHB919-.LFB3366
	.uleb128 .LEHE919-.LEHB919
	.uleb128 0
	.uleb128 0
.LLSDACSE3366:
	.section	.text._ZN13MethodBind1RCI5ArrayRK6StringEC2Ev,"axG",@progbits,_ZN13MethodBind1RCI5ArrayRK6StringEC5Ev,comdat
	.size	_ZN13MethodBind1RCI5ArrayRK6StringEC2Ev, .-_ZN13MethodBind1RCI5ArrayRK6StringEC2Ev
	.weak	_ZN13MethodBind1RCI5ArrayRK6StringEC1Ev
	.set	_ZN13MethodBind1RCI5ArrayRK6StringEC1Ev,_ZN13MethodBind1RCI5ArrayRK6StringEC2Ev
	.section	.text._ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev,"axG",@progbits,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev
	.type	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev, @function
_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev:
.LFB3370:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3370
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:4187: 	MethodBind5R () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB920:
	call	_ZN10MethodBindC2Ev	#
.LEHE920:
	movl	$_ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.45905._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB921:
	call	_ZN10StringNameC1Ev	#
.LEHE921:
# ./core/method_bind.gen.inc:4192: 		set_argument_count(5);
	movq	-24(%rbp), %rax	# this, _4
	movl	$5, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:4194: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB922:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE922:
# ./core/method_bind.gen.inc:4197: 	};
	jmp	.L5014	#
.L5013:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:4187: 	MethodBind5R () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5011	#
.L5012:
	movq	%rax, %rbx	#, tmp93
.L5011:
# ./core/method_bind.gen.inc:4187: 	MethodBind5R () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62272
	movq	%rax, %rdi	# D.62272,
.LEHB923:
	call	_Unwind_Resume	#
.LEHE923:
.L5014:
# ./core/method_bind.gen.inc:4197: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3370:
	.section	.gcc_except_table
.LLSDA3370:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3370-.LLSDACSB3370
.LLSDACSB3370:
	.uleb128 .LEHB920-.LFB3370
	.uleb128 .LEHE920-.LEHB920
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB921-.LFB3370
	.uleb128 .LEHE921-.LEHB921
	.uleb128 .L5012-.LFB3370
	.uleb128 0
	.uleb128 .LEHB922-.LFB3370
	.uleb128 .LEHE922-.LEHB922
	.uleb128 .L5013-.LFB3370
	.uleb128 0
	.uleb128 .LEHB923-.LFB3370
	.uleb128 .LEHE923-.LEHB923
	.uleb128 0
	.uleb128 0
.LLSDACSE3370:
	.section	.text._ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev,"axG",@progbits,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC5Ev,comdat
	.size	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev, .-_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev
	.weak	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC1Ev
	.set	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC1Ev,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjEC2Ev
	.section	.text._ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev,"axG",@progbits,_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev
	.type	_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev, @function
_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev:
.LFB3374:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3374
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:2313: 	MethodBind3 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB924:
	call	_ZN10MethodBindC2Ev	#
.LEHE924:
	movl	$_ZTV11MethodBind3IRK10StringNameP6ObjectS2_E+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.46007._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB925:
	call	_ZN10StringNameC1Ev	#
.LEHE925:
# ./core/method_bind.gen.inc:2318: 		set_argument_count(3);
	movq	-24(%rbp), %rax	# this, _4
	movl	$3, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:2323: 	};
	jmp	.L5018	#
.L5017:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:2313: 	MethodBind3 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62273
	movq	%rax, %rdi	# D.62273,
.LEHB926:
	call	_Unwind_Resume	#
.LEHE926:
.L5018:
# ./core/method_bind.gen.inc:2323: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3374:
	.section	.gcc_except_table
.LLSDA3374:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3374-.LLSDACSB3374
.LLSDACSB3374:
	.uleb128 .LEHB924-.LFB3374
	.uleb128 .LEHE924-.LEHB924
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB925-.LFB3374
	.uleb128 .LEHE925-.LEHB925
	.uleb128 .L5017-.LFB3374
	.uleb128 0
	.uleb128 .LEHB926-.LFB3374
	.uleb128 .LEHE926-.LEHB926
	.uleb128 0
	.uleb128 0
.LLSDACSE3374:
	.section	.text._ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev,"axG",@progbits,_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC5Ev,comdat
	.size	_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev, .-_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev
	.weak	_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC1Ev
	.set	_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC1Ev,_ZN11MethodBind3IRK10StringNameP6ObjectS2_EC2Ev
	.section	.text._ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev,"axG",@progbits,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev
	.type	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev, @function
_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev:
.LFB3378:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3378
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:2919: 	MethodBind3RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB927:
	call	_ZN10MethodBindC2Ev	#
.LEHE927:
	movl	$_ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.46109._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB928:
	call	_ZN10StringNameC1Ev	#
.LEHE928:
# ./core/method_bind.gen.inc:2924: 		set_argument_count(3);
	movq	-24(%rbp), %rax	# this, _4
	movl	$3, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:2926: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB929:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE929:
# ./core/method_bind.gen.inc:2929: 	};
	jmp	.L5024	#
.L5023:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:2919: 	MethodBind3RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5021	#
.L5022:
	movq	%rax, %rbx	#, tmp93
.L5021:
# ./core/method_bind.gen.inc:2919: 	MethodBind3RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62274
	movq	%rax, %rdi	# D.62274,
.LEHB930:
	call	_Unwind_Resume	#
.LEHE930:
.L5024:
# ./core/method_bind.gen.inc:2929: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3378:
	.section	.gcc_except_table
.LLSDA3378:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3378-.LLSDACSB3378
.LLSDACSB3378:
	.uleb128 .LEHB927-.LFB3378
	.uleb128 .LEHE927-.LEHB927
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB928-.LFB3378
	.uleb128 .LEHE928-.LEHB928
	.uleb128 .L5022-.LFB3378
	.uleb128 0
	.uleb128 .LEHB929-.LFB3378
	.uleb128 .LEHE929-.LEHB929
	.uleb128 .L5023-.LFB3378
	.uleb128 0
	.uleb128 .LEHB930-.LFB3378
	.uleb128 .LEHE930-.LEHB930
	.uleb128 0
	.uleb128 0
.LLSDACSE3378:
	.section	.text._ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev,"axG",@progbits,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC5Ev,comdat
	.size	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev, .-_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev
	.weak	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC1Ev
	.set	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC1Ev,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_EC2Ev
	.section	.text._ZN11MethodBind1IbEC2Ev,"axG",@progbits,_ZN11MethodBind1IbEC5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IbEC2Ev
	.type	_ZN11MethodBind1IbEC2Ev, @function
_ZN11MethodBind1IbEC2Ev:
.LFB3382:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3382
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:785: 	MethodBind1 () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB931:
	call	_ZN10MethodBindC2Ev	#
.LEHE931:
	movl	$_ZTV11MethodBind1IbE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp89
	movq	%rdx, (%rax)	# _2, this_8(D)->D.46211._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp90
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB932:
	call	_ZN10StringNameC1Ev	#
.LEHE932:
# ./core/method_bind.gen.inc:790: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:795: 	};
	jmp	.L5028	#
.L5027:
	movq	%rax, %rbx	#, tmp91
# ./core/method_bind.gen.inc:785: 	MethodBind1 () {
	movq	-24(%rbp), %rax	# this, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp91, D.62275
	movq	%rax, %rdi	# D.62275,
.LEHB933:
	call	_Unwind_Resume	#
.LEHE933:
.L5028:
# ./core/method_bind.gen.inc:795: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3382:
	.section	.gcc_except_table
.LLSDA3382:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3382-.LLSDACSB3382
.LLSDACSB3382:
	.uleb128 .LEHB931-.LFB3382
	.uleb128 .LEHE931-.LEHB931
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB932-.LFB3382
	.uleb128 .LEHE932-.LEHB932
	.uleb128 .L5027-.LFB3382
	.uleb128 0
	.uleb128 .LEHB933-.LFB3382
	.uleb128 .LEHE933-.LEHB933
	.uleb128 0
	.uleb128 0
.LLSDACSE3382:
	.section	.text._ZN11MethodBind1IbEC2Ev,"axG",@progbits,_ZN11MethodBind1IbEC5Ev,comdat
	.size	_ZN11MethodBind1IbEC2Ev, .-_ZN11MethodBind1IbEC2Ev
	.weak	_ZN11MethodBind1IbEC1Ev
	.set	_ZN11MethodBind1IbEC1Ev,_ZN11MethodBind1IbEC2Ev
	.section	.text._ZN13MethodBind0RCIbEC2Ev,"axG",@progbits,_ZN13MethodBind0RCIbEC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCIbEC2Ev
	.type	_ZN13MethodBind0RCIbEC2Ev, @function
_ZN13MethodBind0RCIbEC2Ev:
.LFB3386:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3386
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB934:
	call	_ZN10MethodBindC2Ev	#
.LEHE934:
	movl	$_ZTV13MethodBind0RCIbE+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.46313._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB935:
	call	_ZN10StringNameC1Ev	#
.LEHE935:
# ./core/method_bind.gen.inc:608: 		set_argument_count(0);
	movq	-24(%rbp), %rax	# this, _4
	movl	$0, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:610: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB936:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE936:
# ./core/method_bind.gen.inc:613: 	};
	jmp	.L5034	#
.L5033:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5031	#
.L5032:
	movq	%rax, %rbx	#, tmp93
.L5031:
# ./core/method_bind.gen.inc:603: 	MethodBind0RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62276
	movq	%rax, %rdi	# D.62276,
.LEHB937:
	call	_Unwind_Resume	#
.LEHE937:
.L5034:
# ./core/method_bind.gen.inc:613: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3386:
	.section	.gcc_except_table
.LLSDA3386:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3386-.LLSDACSB3386
.LLSDACSB3386:
	.uleb128 .LEHB934-.LFB3386
	.uleb128 .LEHE934-.LEHB934
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB935-.LFB3386
	.uleb128 .LEHE935-.LEHB935
	.uleb128 .L5032-.LFB3386
	.uleb128 0
	.uleb128 .LEHB936-.LFB3386
	.uleb128 .LEHE936-.LEHB936
	.uleb128 .L5033-.LFB3386
	.uleb128 0
	.uleb128 .LEHB937-.LFB3386
	.uleb128 .LEHE937-.LEHB937
	.uleb128 0
	.uleb128 0
.LLSDACSE3386:
	.section	.text._ZN13MethodBind0RCIbEC2Ev,"axG",@progbits,_ZN13MethodBind0RCIbEC5Ev,comdat
	.size	_ZN13MethodBind0RCIbEC2Ev, .-_ZN13MethodBind0RCIbEC2Ev
	.weak	_ZN13MethodBind0RCIbEC1Ev
	.set	_ZN13MethodBind0RCIbEC1Ev,_ZN13MethodBind0RCIbEC2Ev
	.section	.text._ZN13MethodBind1RCI10StringNameRKS0_EC2Ev,"axG",@progbits,_ZN13MethodBind1RCI10StringNameRKS0_EC5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI10StringNameRKS0_EC2Ev
	.type	_ZN13MethodBind1RCI10StringNameRKS0_EC2Ev, @function
_ZN13MethodBind1RCI10StringNameRKS0_EC2Ev:
.LFB3391:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3391
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB938:
	call	_ZN10MethodBindC2Ev	#
.LEHE938:
	movl	$_ZTV13MethodBind1RCI10StringNameRKS0_E+16, %edx	#, _2
	movq	-24(%rbp), %rax	# this, tmp90
	movq	%rdx, (%rax)	# _2, this_10(D)->D.46458._vptr.MethodBind
	movq	-24(%rbp), %rax	# this, tmp91
	addq	$56, %rax	#, _3
	movq	%rax, %rdi	# _3,
.LEHB939:
	call	_ZN10StringNameC1Ev	#
.LEHE939:
# ./core/method_bind.gen.inc:1348: 		set_argument_count(1);
	movq	-24(%rbp), %rax	# this, _4
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _4,
	call	_ZN10MethodBind18set_argument_countEi	#
# ./core/method_bind.gen.inc:1350: 		_set_returns(true); 
	movq	-24(%rbp), %rax	# this, _5
	movl	$1, %esi	#,
	movq	%rax, %rdi	# _5,
.LEHB940:
	call	_ZN10MethodBind12_set_returnsEb	#
.LEHE940:
# ./core/method_bind.gen.inc:1353: 	};
	jmp	.L5040	#
.L5039:
	movq	%rax, %rbx	#, tmp94
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, tmp92
	addq	$56, %rax	#, _6
	movq	%rax, %rdi	# _6,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5037	#
.L5038:
	movq	%rax, %rbx	#, tmp93
.L5037:
# ./core/method_bind.gen.inc:1343: 	MethodBind1RC () {
	movq	-24(%rbp), %rax	# this, _7
	movq	%rax, %rdi	# _7,
	call	_ZN10MethodBindD2Ev	#
	movq	%rbx, %rax	# tmp93, D.62277
	movq	%rax, %rdi	# D.62277,
.LEHB941:
	call	_Unwind_Resume	#
.LEHE941:
.L5040:
# ./core/method_bind.gen.inc:1353: 	};
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3391:
	.section	.gcc_except_table
.LLSDA3391:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3391-.LLSDACSB3391
.LLSDACSB3391:
	.uleb128 .LEHB938-.LFB3391
	.uleb128 .LEHE938-.LEHB938
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB939-.LFB3391
	.uleb128 .LEHE939-.LEHB939
	.uleb128 .L5038-.LFB3391
	.uleb128 0
	.uleb128 .LEHB940-.LFB3391
	.uleb128 .LEHE940-.LEHB940
	.uleb128 .L5039-.LFB3391
	.uleb128 0
	.uleb128 .LEHB941-.LFB3391
	.uleb128 .LEHE941-.LEHB941
	.uleb128 0
	.uleb128 0
.LLSDACSE3391:
	.section	.text._ZN13MethodBind1RCI10StringNameRKS0_EC2Ev,"axG",@progbits,_ZN13MethodBind1RCI10StringNameRKS0_EC5Ev,comdat
	.size	_ZN13MethodBind1RCI10StringNameRKS0_EC2Ev, .-_ZN13MethodBind1RCI10StringNameRKS0_EC2Ev
	.weak	_ZN13MethodBind1RCI10StringNameRKS0_EC1Ev
	.set	_ZN13MethodBind1RCI10StringNameRKS0_EC1Ev,_ZN13MethodBind1RCI10StringNameRKS0_EC2Ev
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE:
.LFB3394:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_element, p_element
# ./core/set.h:489: 		if (p_element == _data._nil)
	movq	-8(%rbp), %rax	# this, tmp85
	movq	8(%rax), %rax	# this_6(D)->_data._nil, _1
# ./core/set.h:489: 		if (p_element == _data._nil)
	cmpq	%rax, -16(%rbp)	# _1, p_element
	je	.L5044	#,
# ./core/set.h:492: 		_cleanup_tree(p_element->left);
	movq	-16(%rbp), %rax	# p_element, tmp86
	movq	16(%rax), %rdx	# p_element_7(D)->left, _2
	movq	-8(%rbp), %rax	# this, tmp87
	movq	%rdx, %rsi	# _2,
	movq	%rax, %rdi	# tmp87,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE	#
# ./core/set.h:493: 		_cleanup_tree(p_element->right);
	movq	-16(%rbp), %rax	# p_element, tmp88
	movq	8(%rax), %rdx	# p_element_7(D)->right, _3
	movq	-8(%rbp), %rax	# this, tmp89
	movq	%rdx, %rsi	# _3,
	movq	%rax, %rdi	# tmp89,
	call	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE	#
# ./core/set.h:494: 		memdelete_allocator<Element, A>(p_element);
	movq	-16(%rbp), %rax	# p_element, tmp90
	movq	%rax, %rdi	# tmp90,
	call	_Z19memdelete_allocatorIN3SetIP6Object10ComparatorIS2_E16DefaultAllocatorE7ElementES5_EvPT_	#
	jmp	.L5041	#
.L5044:
# ./core/set.h:490: 			return;
	nop	
.L5041:
# ./core/set.h:495: 	}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3394:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_cleanup_treeEPNS5_7ElementE
	.section	.text._Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc,"axG",@progbits,_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc,comdat
	.weak	_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc
	.type	_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc, @function
_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc:
.LFB3395:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# p_elements, p_elements
	movq	%rsi, -48(%rbp)	# p_descr, p_descr
# ./core/os/memory.h:146: 	if (p_elements == 0)
	cmpq	$0, -40(%rbp)	#, p_elements
	jne	.L5046	#,
# ./core/os/memory.h:147: 		return 0;
	movl	$0, %eax	#, _5
	jmp	.L5047	#
.L5046:
# ./core/os/memory.h:151: 	size_t len = sizeof(T) * p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp92
	salq	$3, %rax	#, tmp91
	movq	%rax, -8(%rbp)	# tmp91, len
# ./core/os/memory.h:152: 	uint64_t *mem = (uint64_t *)Memory::alloc_static(len, true);
	movq	-8(%rbp), %rax	# len, tmp93
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -16(%rbp)	# _11, mem
# ./core/os/memory.h:153: 	T *failptr = 0; //get rid of a warning
	movq	$0, -24(%rbp)	#, failptr
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	cmpq	$0, -16(%rbp)	#, mem
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L5048	#,
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movl	$0, %r8d	#,
	movl	$.LC161, %ecx	#,
	movl	$154, %edx	#,
	movl	$.LC162, %esi	#,
	movl	$.LC163, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-24(%rbp), %rax	# failptr, _5
	jmp	.L5047	#
.L5048:
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-16(%rbp), %rax	# mem, tmp94
	leaq	-8(%rax), %rdx	#, _4
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp95
	movq	%rax, (%rdx)	# tmp95, *_4
# ./core/os/memory.h:166: 	return (T *)mem;
	movq	-16(%rbp), %rax	# mem, _5
.L5047:
# ./core/os/memory.h:167: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3395:
	.size	_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc, .-_Z19memnew_arr_templateIPN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementEEPT_mPKc
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC2Ev,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC2Ev
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC2Ev, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC2Ev:
.LFB3397:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp83
	addq	$16, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC1Ev	#
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp84
	movq	$0, 8(%rax)	#, this_3(D)->next
# ./core/hash_map.h:79: 		Element() { next = 0; }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3397:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC2Ev, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC2Ev
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC1Ev
	.set	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC1Ev,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE7ElementC2Ev
	.section	.text._Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc,"axG",@progbits,_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc,comdat
	.weak	_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc
	.type	_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc, @function
_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc:
.LFB3400:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# p_elements, p_elements
	movq	%rsi, -48(%rbp)	# p_descr, p_descr
# ./core/os/memory.h:146: 	if (p_elements == 0)
	cmpq	$0, -40(%rbp)	#, p_elements
	jne	.L5051	#,
# ./core/os/memory.h:147: 		return 0;
	movl	$0, %eax	#, _5
	jmp	.L5052	#
.L5051:
# ./core/os/memory.h:151: 	size_t len = sizeof(T) * p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp92
	salq	$3, %rax	#, tmp91
	movq	%rax, -8(%rbp)	# tmp91, len
# ./core/os/memory.h:152: 	uint64_t *mem = (uint64_t *)Memory::alloc_static(len, true);
	movq	-8(%rbp), %rax	# len, tmp93
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -16(%rbp)	# _11, mem
# ./core/os/memory.h:153: 	T *failptr = 0; //get rid of a warning
	movq	$0, -24(%rbp)	#, failptr
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	cmpq	$0, -16(%rbp)	#, mem
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L5053	#,
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movl	$0, %r8d	#,
	movl	$.LC161, %ecx	#,
	movl	$154, %edx	#,
	movl	$.LC162, %esi	#,
	movl	$.LC163, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-24(%rbp), %rax	# failptr, _5
	jmp	.L5052	#
.L5053:
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-16(%rbp), %rax	# mem, tmp94
	leaq	-8(%rax), %rdx	#, _4
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp95
	movq	%rax, (%rdx)	# tmp95, *_4
# ./core/os/memory.h:166: 	return (T *)mem;
	movq	-16(%rbp), %rax	# mem, _5
.L5052:
# ./core/os/memory.h:167: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3400:
	.size	_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc, .-_Z19memnew_arr_templateIPN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS2_ELh3ELh8EE7ElementEEPT_mPKc
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC2Ev,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC2Ev
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC2Ev, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC2Ev:
.LFB3402:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp83
	addq	$16, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC1Ev	#
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp84
	movq	$0, 8(%rax)	#, this_3(D)->next
# ./core/hash_map.h:79: 		Element() { next = 0; }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3402:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC2Ev, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC2Ev
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC1Ev
	.set	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC1Ev,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementC2Ev
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE:
.LFB3405:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_I, p_I
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	cmpq	$0, -16(%rbp)	#, p_I
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L5056	#,
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movl	$0, %r8d	#,
	movl	$.LC151, %ecx	#,
	movl	$157, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L5057	#
.L5056:
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movq	-16(%rbp), %rax	# p_I, tmp103
	movq	64(%rax), %rax	# p_I_26(D)->data, _4
	cmpq	%rax, -8(%rbp)	# _4, this
	setne	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L5058	#,
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movl	$0, %r8d	#,
	movl	$.LC153, %ecx	#,
	movl	$158, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L5057	#
.L5058:
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:160: 			if (first == p_I) {
	movq	-8(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_29(D)->first, _8
# ./core/list.h:160: 			if (first == p_I) {
	cmpq	%rax, -16(%rbp)	# _8, p_I
	jne	.L5059	#,
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp105
	movq	48(%rax), %rdx	# p_I_26(D)->next_ptr, _9
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-8(%rbp), %rax	# this, tmp106
	movq	%rdx, (%rax)	# _9, this_29(D)->first
.L5059:
# ./core/list.h:164: 			if (last == p_I)
	movq	-8(%rbp), %rax	# this, tmp107
	movq	8(%rax), %rax	# this_29(D)->last, _10
# ./core/list.h:164: 			if (last == p_I)
	cmpq	%rax, -16(%rbp)	# _10, p_I
	jne	.L5060	#,
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp108
	movq	56(%rax), %rdx	# p_I_26(D)->prev_ptr, _11
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-8(%rbp), %rax	# this, tmp109
	movq	%rdx, 8(%rax)	# _11, this_29(D)->last
.L5060:
# ./core/list.h:167: 			if (p_I->prev_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp110
	movq	56(%rax), %rax	# p_I_26(D)->prev_ptr, _12
# ./core/list.h:167: 			if (p_I->prev_ptr)
	testq	%rax, %rax	# _12
	je	.L5061	#,
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp111
	movq	56(%rax), %rax	# p_I_26(D)->prev_ptr, _13
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp112
	movq	48(%rdx), %rdx	# p_I_26(D)->next_ptr, _14
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	%rdx, 48(%rax)	# _14, _13->next_ptr
.L5061:
# ./core/list.h:170: 			if (p_I->next_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp113
	movq	48(%rax), %rax	# p_I_26(D)->next_ptr, _15
# ./core/list.h:170: 			if (p_I->next_ptr)
	testq	%rax, %rax	# _15
	je	.L5062	#,
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp114
	movq	48(%rax), %rax	# p_I_26(D)->next_ptr, _16
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp115
	movq	56(%rdx), %rdx	# p_I_26(D)->prev_ptr, _17
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	%rdx, 56(%rax)	# _17, _16->prev_ptr
.L5062:
# ./core/list.h:173: 			memdelete_allocator<Element, A>(const_cast<Element *>(p_I));
	movq	-16(%rbp), %rax	# p_I, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_	#
# ./core/list.h:174: 			size_cache--;
	movq	-8(%rbp), %rax	# this, tmp117
	movl	16(%rax), %eax	# this_29(D)->size_cache, _18
	leal	-1(%rax), %edx	#, _19
	movq	-8(%rbp), %rax	# this, tmp118
	movl	%edx, 16(%rax)	# _19, this_29(D)->size_cache
# ./core/list.h:176: 			return true;
	movl	$1, %eax	#, _20
.L5057:
# ./core/list.h:177: 		}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3405:
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, .-_ZN4ListI12PropertyInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.section	.text._ZN7CowDataI7VariantE14_copy_on_writeEv,"axG",@progbits,_ZN7CowDataI7VariantE14_copy_on_writeEv,comdat
	.align 2
	.weak	_ZN7CowDataI7VariantE14_copy_on_writeEv
	.type	_ZN7CowDataI7VariantE14_copy_on_writeEv, @function
_ZN7CowDataI7VariantE14_copy_on_writeEv:
.LFB3426:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$168, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)	# this, this
# ./core/cowdata.h:218: 	if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp117
	movq	(%rax), %rax	# this_22(D)->_ptr, _1
# ./core/cowdata.h:218: 	if (!_ptr)
	testq	%rax, %rax	# _1
	je	.L5078	#,
	movq	-168(%rbp), %rax	# this, tmp118
	movq	%rax, -64(%rbp)	# tmp118, this
# ./core/cowdata.h:62: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp119
	movq	(%rax), %rax	# this_38->_ptr, _39
# ./core/cowdata.h:62: 		if (!_ptr)
	testq	%rax, %rax	# _39
	jne	.L5066	#,
# ./core/cowdata.h:63: 			return NULL;
	movl	$0, %eax	#, D.59290
	jmp	.L5067	#
.L5066:
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	movq	-64(%rbp), %rax	# this, tmp120
	movq	(%rax), %rax	# this_38->_ptr, _41
# ./core/cowdata.h:65: 		return reinterpret_cast<uint32_t *>(_ptr) - 2;
	subq	$8, %rax	#, D.59290
.L5067:
# ./core/cowdata.h:221: 	uint32_t *refc = _get_refcount();
	movq	%rax, -32(%rbp)	# D.59290, refc
# ./core/cowdata.h:223: 	if (unlikely(*refc > 1)) {
	movq	-32(%rbp), %rax	# refc, tmp121
	movl	(%rax), %eax	# *refc_23, _2
	cmpl	$1, %eax	#, _2
	seta	%al	#, _3
	movzbl	%al, %eax	# _3, _4
# ./core/cowdata.h:223: 	if (unlikely(*refc > 1)) {
	testq	%rax, %rax	# _5
	je	.L5063	#,
	movq	-168(%rbp), %rax	# this, tmp122
	movq	%rax, -96(%rbp)	# tmp122, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-96(%rbp), %rax	# this, tmp123
	movq	(%rax), %rax	# this_65->_ptr, _66
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _66
	jne	.L5068	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, D.59303
	jmp	.L5069	#
.L5068:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-96(%rbp), %rax	# this, tmp124
	movq	(%rax), %rax	# this_65->_ptr, _68
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, D.59303
.L5069:
# ./core/cowdata.h:225: 		uint32_t current_size = *_get_size();
	movl	(%rax), %eax	# *_6, tmp125
	movl	%eax, -36(%rbp)	# tmp125, current_size
# ./core/cowdata.h:227: 		uint32_t *mem_new = (uint32_t *)Memory::alloc_static(_get_alloc_size(current_size), true);
	movl	-36(%rbp), %eax	# current_size, _7
	movq	-168(%rbp), %rdx	# this, tmp126
	movq	%rdx, -72(%rbp)	# tmp126, this
	movq	%rax, -80(%rbp)	# _7, p_elements
# ./core/cowdata.h:85: 		return next_power_of_2(p_elements * sizeof(T));
	movq	-80(%rbp), %rax	# p_elements, tmp127
	movl	%eax, %edx	# tmp127, _46
	movl	%edx, %eax	# _46, tmp128
	addl	%eax, %eax	# tmp128
	addl	%edx, %eax	# _46, tmp128
	sall	$3, %eax	#, tmp129
	movl	%eax, -84(%rbp)	# _47, x
# ./core/typedefs.h:178: 	--x;
	subl	$1, -84(%rbp)	#, x
# ./core/typedefs.h:179: 	x |= x >> 1;
	movl	-84(%rbp), %eax	# x, tmp130
	shrl	%eax	# _50
# ./core/typedefs.h:179: 	x |= x >> 1;
	orl	%eax, -84(%rbp)	# _50, x
# ./core/typedefs.h:180: 	x |= x >> 2;
	movl	-84(%rbp), %eax	# x, tmp131
	shrl	$2, %eax	#, _52
# ./core/typedefs.h:180: 	x |= x >> 2;
	orl	%eax, -84(%rbp)	# _52, x
# ./core/typedefs.h:181: 	x |= x >> 4;
	movl	-84(%rbp), %eax	# x, tmp132
	shrl	$4, %eax	#, _54
# ./core/typedefs.h:181: 	x |= x >> 4;
	orl	%eax, -84(%rbp)	# _54, x
# ./core/typedefs.h:182: 	x |= x >> 8;
	movl	-84(%rbp), %eax	# x, tmp133
	shrl	$8, %eax	#, _56
# ./core/typedefs.h:182: 	x |= x >> 8;
	orl	%eax, -84(%rbp)	# _56, x
# ./core/typedefs.h:183: 	x |= x >> 16;
	movl	-84(%rbp), %eax	# x, tmp134
	shrl	$16, %eax	#, _58
# ./core/typedefs.h:183: 	x |= x >> 16;
	orl	%eax, -84(%rbp)	# _58, x
# ./core/typedefs.h:185: 	return ++x;
	addl	$1, -84(%rbp)	#, x
	movl	-84(%rbp), %eax	# x, _61
# ./core/cowdata.h:85: 		return next_power_of_2(p_elements * sizeof(T));
	movl	%eax, %eax	# _61, D.59297
# ./core/cowdata.h:227: 		uint32_t *mem_new = (uint32_t *)Memory::alloc_static(_get_alloc_size(current_size), true);
	movl	$1, %esi	#,
	movq	%rax, %rdi	# D.59297,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -48(%rbp)	# _26, mem_new
# ./core/cowdata.h:229: 		*(mem_new - 2) = 1; //refcount
	movq	-48(%rbp), %rax	# mem_new, tmp135
	subq	$8, %rax	#, _9
# ./core/cowdata.h:229: 		*(mem_new - 2) = 1; //refcount
	movl	$1, (%rax)	#, *_9
# ./core/cowdata.h:230: 		*(mem_new - 1) = current_size; //size
	movq	-48(%rbp), %rax	# mem_new, tmp136
	leaq	-4(%rax), %rdx	#, _10
# ./core/cowdata.h:230: 		*(mem_new - 1) = current_size; //size
	movl	-36(%rbp), %eax	# current_size, tmp137
	movl	%eax, (%rdx)	# tmp137, *_10
# ./core/cowdata.h:232: 		T *_data = (T *)(mem_new);
	movq	-48(%rbp), %rax	# mem_new, tmp138
	movq	%rax, -56(%rbp)	# tmp138, _data
# ./core/cowdata.h:239: 			for (uint32_t i = 0; i < current_size; i++) {
	movl	$0, -20(%rbp)	#, i
.L5077:
# ./core/cowdata.h:239: 			for (uint32_t i = 0; i < current_size; i++) {
	movl	-20(%rbp), %eax	# i, tmp139
	cmpl	-36(%rbp), %eax	# current_size, tmp139
	jnb	.L5072	#,
	movq	-168(%rbp), %rax	# this, tmp140
	movq	%rax, -152(%rbp)	# tmp140, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp141
	movq	(%rax), %rax	# this_79->_ptr, _80
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _80
	jne	.L5073	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, D.59319
	jmp	.L5074	#
.L5073:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-152(%rbp), %rax	# this, tmp142
	movq	(%rax), %rcx	# this_79->_ptr, D.59319
.L5074:
# ./core/cowdata.h:240: 				memnew_placement(&_data[i], T(_get_data()[i]));
	movl	-20(%rbp), %edx	# i, _15
	movq	%rdx, %rax	# _15, tmp143
	addq	%rax, %rax	# tmp143
	addq	%rdx, %rax	# _15, tmp143
	salq	$3, %rax	#, tmp144
	addq	%rax, %rcx	# _16, _32
	movl	-20(%rbp), %edx	# i, _17
	movq	%rdx, %rax	# _17, tmp145
	addq	%rax, %rax	# tmp145
	addq	%rdx, %rax	# _17, tmp145
	salq	$3, %rax	#, tmp146
	movq	%rax, %rdx	# tmp145, _18
	movq	-56(%rbp), %rax	# _data, tmp147
	addq	%rdx, %rax	# _18, _19
	movq	$24, -120(%rbp)	#, p_size
	movq	%rax, -128(%rbp)	# _19, p_pointer
	movq	$24, -136(%rbp)	#, check
	movq	$.LC27, -144(%rbp)	#, p_description
# ./core/os/memory.h:104: 	return p_pointer;
	movq	-128(%rbp), %rbx	# p_pointer, D.59315
# ./core/cowdata.h:240: 				memnew_placement(&_data[i], T(_get_data()[i]));
	movq	%rcx, %rsi	# _32,
	movq	%rbx, %rdi	# D.59315,
	call	_ZN7VariantC1ERKS_	#
	movq	%rbx, -104(%rbp)	# D.59315, p_obj
	movq	-104(%rbp), %rax	# p_obj, tmp148
	movq	%rax, -112(%rbp)	# tmp148, D.59307
# ./core/os/memory.h:89: _ALWAYS_INLINE_ void postinitialize_handler(void *) {}
	nop	
# ./core/os/memory.h:95: 	return p_obj;
	nop	
# ./core/cowdata.h:239: 			for (uint32_t i = 0; i < current_size; i++) {
	addl	$1, -20(%rbp)	#, i
	jmp	.L5077	#
.L5072:
# ./core/cowdata.h:244: 		_unref(_ptr);
	movq	-168(%rbp), %rax	# this, tmp149
	movq	(%rax), %rdx	# this_22(D)->_ptr, _20
# ./core/cowdata.h:244: 		_unref(_ptr);
	movq	-168(%rbp), %rax	# this, tmp150
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp150,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:245: 		_ptr = _data;
	movq	-168(%rbp), %rax	# this, tmp151
	movq	-56(%rbp), %rdx	# _data, tmp152
	movq	%rdx, (%rax)	# tmp152, this_22(D)->_ptr
	jmp	.L5063	#
.L5078:
# ./core/cowdata.h:219: 		return;
	nop	
.L5063:
# ./core/cowdata.h:247: }
	addq	$168, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3426:
	.size	_ZN7CowDataI7VariantE14_copy_on_writeEv, .-_ZN7CowDataI7VariantE14_copy_on_writeEv
	.section	.text._ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorE7ElementD5Ev,comdat
	.align 2
	.weak	_ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev
	.type	_ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev, @function
_ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev:
.LFB3431:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3431
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# this, this
# ./core/list.h:50: 	class Element {
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, -8(%rbp)	# _1, this
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movq	-8(%rbp), %rax	# this, tmp84
	movl	(%rax), %eax	# this_5->type, _6
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _6
	je	.L5082	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rax, %rdi	# tmp85,
	call	_ZN7Variant5clearEv	#
.L5082:
# ./core/variant.h:423: 	}
	nop	
# ./core/list.h:50: 	class Element {
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3431:
	.section	.gcc_except_table
.LLSDA3431:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3431-.LLSDACSB3431
.LLSDACSB3431:
.LLSDACSE3431:
	.section	.text._ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev,"axG",@progbits,_ZN4ListI7Variant16DefaultAllocatorE7ElementD5Ev,comdat
	.size	_ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev, .-_ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev
	.weak	_ZN4ListI7Variant16DefaultAllocatorE7ElementD1Ev
	.set	_ZN4ListI7Variant16DefaultAllocatorE7ElementD1Ev,_ZN4ListI7Variant16DefaultAllocatorE7ElementD2Ev
	.section	.text._Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_:
.LFB3429:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.57295
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.57296
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.67_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.67_5
	jne	.L5087	#,
# ./core/os/memory.h:131: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, %rdi	# tmp85,
	call	_ZN4ListI7Variant16DefaultAllocatorE7ElementD1Ev	#
	movq	-24(%rbp), %rax	# p_class, tmp86
	movq	%rax, -16(%rbp)	# tmp86, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp87
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L5083	#
.L5087:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L5083:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3429:
	.size	_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI7Variant16DefaultAllocatorE7ElementES2_EvPT_
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE:
.LFB3433:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_node, p_node
# ./core/set.h:151: 		Element *r = p_node->right;
	movq	-32(%rbp), %rax	# p_node, tmp91
	movq	8(%rax), %rax	# p_node_13(D)->right, tmp92
	movq	%rax, -8(%rbp)	# tmp92, r
# ./core/set.h:152: 		p_node->right = r->left;
	movq	-8(%rbp), %rax	# r, tmp93
	movq	16(%rax), %rdx	# r_14->left, _1
# ./core/set.h:152: 		p_node->right = r->left;
	movq	-32(%rbp), %rax	# p_node, tmp94
	movq	%rdx, 8(%rax)	# _1, p_node_13(D)->right
# ./core/set.h:153: 		if (r->left != _data._nil)
	movq	-8(%rbp), %rax	# r, tmp95
	movq	16(%rax), %rdx	# r_14->left, _2
# ./core/set.h:153: 		if (r->left != _data._nil)
	movq	-24(%rbp), %rax	# this, tmp96
	movq	8(%rax), %rax	# this_16(D)->_data._nil, _3
# ./core/set.h:153: 		if (r->left != _data._nil)
	cmpq	%rax, %rdx	# _3, _2
	je	.L5089	#,
# ./core/set.h:154: 			r->left->parent = p_node;
	movq	-8(%rbp), %rax	# r, tmp97
	movq	16(%rax), %rax	# r_14->left, _4
# ./core/set.h:154: 			r->left->parent = p_node;
	movq	-32(%rbp), %rdx	# p_node, tmp98
	movq	%rdx, 24(%rax)	# tmp98, _4->parent
.L5089:
# ./core/set.h:155: 		r->parent = p_node->parent;
	movq	-32(%rbp), %rax	# p_node, tmp99
	movq	24(%rax), %rdx	# p_node_13(D)->parent, _5
# ./core/set.h:155: 		r->parent = p_node->parent;
	movq	-8(%rbp), %rax	# r, tmp100
	movq	%rdx, 24(%rax)	# _5, r_14->parent
# ./core/set.h:156: 		if (p_node == p_node->parent->left)
	movq	-32(%rbp), %rax	# p_node, tmp101
	movq	24(%rax), %rax	# p_node_13(D)->parent, _6
# ./core/set.h:156: 		if (p_node == p_node->parent->left)
	movq	16(%rax), %rax	# _6->left, _7
# ./core/set.h:156: 		if (p_node == p_node->parent->left)
	cmpq	%rax, -32(%rbp)	# _7, p_node
	jne	.L5090	#,
# ./core/set.h:157: 			p_node->parent->left = r;
	movq	-32(%rbp), %rax	# p_node, tmp102
	movq	24(%rax), %rax	# p_node_13(D)->parent, _8
# ./core/set.h:157: 			p_node->parent->left = r;
	movq	-8(%rbp), %rdx	# r, tmp103
	movq	%rdx, 16(%rax)	# tmp103, _8->left
	jmp	.L5091	#
.L5090:
# ./core/set.h:159: 			p_node->parent->right = r;
	movq	-32(%rbp), %rax	# p_node, tmp104
	movq	24(%rax), %rax	# p_node_13(D)->parent, _9
# ./core/set.h:159: 			p_node->parent->right = r;
	movq	-8(%rbp), %rdx	# r, tmp105
	movq	%rdx, 8(%rax)	# tmp105, _9->right
.L5091:
# ./core/set.h:161: 		r->left = p_node;
	movq	-8(%rbp), %rax	# r, tmp106
	movq	-32(%rbp), %rdx	# p_node, tmp107
	movq	%rdx, 16(%rax)	# tmp107, r_14->left
# ./core/set.h:162: 		p_node->parent = r;
	movq	-32(%rbp), %rax	# p_node, tmp108
	movq	-8(%rbp), %rdx	# r, tmp109
	movq	%rdx, 24(%rax)	# tmp109, p_node_13(D)->parent
# ./core/set.h:163: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3433:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE12_rotate_leftEPNS5_7ElementE
	.section	.text._ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE,"axG",@progbits,_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE,comdat
	.align 2
	.weak	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE
	.type	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE, @function
_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE:
.LFB3434:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)	# this, this
	movq	%rsi, -32(%rbp)	# p_node, p_node
# ./core/set.h:167: 		Element *l = p_node->left;
	movq	-32(%rbp), %rax	# p_node, tmp91
	movq	16(%rax), %rax	# p_node_13(D)->left, tmp92
	movq	%rax, -8(%rbp)	# tmp92, l
# ./core/set.h:168: 		p_node->left = l->right;
	movq	-8(%rbp), %rax	# l, tmp93
	movq	8(%rax), %rdx	# l_14->right, _1
# ./core/set.h:168: 		p_node->left = l->right;
	movq	-32(%rbp), %rax	# p_node, tmp94
	movq	%rdx, 16(%rax)	# _1, p_node_13(D)->left
# ./core/set.h:169: 		if (l->right != _data._nil)
	movq	-8(%rbp), %rax	# l, tmp95
	movq	8(%rax), %rdx	# l_14->right, _2
# ./core/set.h:169: 		if (l->right != _data._nil)
	movq	-24(%rbp), %rax	# this, tmp96
	movq	8(%rax), %rax	# this_16(D)->_data._nil, _3
# ./core/set.h:169: 		if (l->right != _data._nil)
	cmpq	%rax, %rdx	# _3, _2
	je	.L5093	#,
# ./core/set.h:170: 			l->right->parent = p_node;
	movq	-8(%rbp), %rax	# l, tmp97
	movq	8(%rax), %rax	# l_14->right, _4
# ./core/set.h:170: 			l->right->parent = p_node;
	movq	-32(%rbp), %rdx	# p_node, tmp98
	movq	%rdx, 24(%rax)	# tmp98, _4->parent
.L5093:
# ./core/set.h:171: 		l->parent = p_node->parent;
	movq	-32(%rbp), %rax	# p_node, tmp99
	movq	24(%rax), %rdx	# p_node_13(D)->parent, _5
# ./core/set.h:171: 		l->parent = p_node->parent;
	movq	-8(%rbp), %rax	# l, tmp100
	movq	%rdx, 24(%rax)	# _5, l_14->parent
# ./core/set.h:172: 		if (p_node == p_node->parent->right)
	movq	-32(%rbp), %rax	# p_node, tmp101
	movq	24(%rax), %rax	# p_node_13(D)->parent, _6
# ./core/set.h:172: 		if (p_node == p_node->parent->right)
	movq	8(%rax), %rax	# _6->right, _7
# ./core/set.h:172: 		if (p_node == p_node->parent->right)
	cmpq	%rax, -32(%rbp)	# _7, p_node
	jne	.L5094	#,
# ./core/set.h:173: 			p_node->parent->right = l;
	movq	-32(%rbp), %rax	# p_node, tmp102
	movq	24(%rax), %rax	# p_node_13(D)->parent, _8
# ./core/set.h:173: 			p_node->parent->right = l;
	movq	-8(%rbp), %rdx	# l, tmp103
	movq	%rdx, 8(%rax)	# tmp103, _8->right
	jmp	.L5095	#
.L5094:
# ./core/set.h:175: 			p_node->parent->left = l;
	movq	-32(%rbp), %rax	# p_node, tmp104
	movq	24(%rax), %rax	# p_node_13(D)->parent, _9
# ./core/set.h:175: 			p_node->parent->left = l;
	movq	-8(%rbp), %rdx	# l, tmp105
	movq	%rdx, 16(%rax)	# tmp105, _9->left
.L5095:
# ./core/set.h:177: 		l->right = p_node;
	movq	-8(%rbp), %rax	# l, tmp106
	movq	-32(%rbp), %rdx	# p_node, tmp107
	movq	%rdx, 8(%rax)	# tmp107, l_14->right
# ./core/set.h:178: 		p_node->parent = l;
	movq	-32(%rbp), %rax	# p_node, tmp108
	movq	-8(%rbp), %rdx	# l, tmp109
	movq	%rdx, 24(%rax)	# tmp109, p_node_13(D)->parent
# ./core/set.h:179: 	}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3434:
	.size	_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE, .-_ZN3SetIP6Object10ComparatorIS1_E16DefaultAllocatorE13_rotate_rightEPNS5_7ElementE
	.section	.text._Z9memdeleteI9ReferenceEvPT_,"axG",@progbits,_Z9memdeleteI9ReferenceEvPT_,comdat
	.weak	_Z9memdeleteI9ReferenceEvPT_
	.type	_Z9memdeleteI9ReferenceEvPT_, @function
_Z9memdeleteI9ReferenceEvPT_:
.LFB3435:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# p_class, p_class
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	movq	-8(%rbp), %rax	# p_class, tmp87
	movq	%rax, %rdi	# tmp87,
	call	_Z17predelete_handlerP6Object	#
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.119_10
# ./core/os/memory.h:117: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.119_10
	jne	.L5099	#,
# ./core/os/memory.h:120: 		p_class->~T();
	movq	-8(%rbp), %rax	# p_class, tmp88
	movq	(%rax), %rax	# p_class_7(D)->D.26671._vptr.Object, _2
	addq	$152, %rax	#, _3
	movq	(%rax), %rdx	# *_3, _4
	movq	-8(%rbp), %rax	# p_class, tmp89
	movq	%rax, %rdi	# tmp89,
	call	*%rdx	# _4
# ./core/os/memory.h:122: 	Memory::free_static(p_class, false);
	movq	-8(%rbp), %rax	# p_class, tmp90
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp90,
	call	_ZN6Memory11free_staticEPvb	#
	jmp	.L5096	#
.L5099:
# ./core/os/memory.h:118: 		return; // doesn't want to be deleted
	nop	
.L5096:
# ./core/os/memory.h:123: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3435:
	.size	_Z9memdeleteI9ReferenceEvPT_, .-_Z9memdeleteI9ReferenceEvPT_
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE,comdat
	.align 2
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.type	_ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, @function
_ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE:
.LFB3436:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
	movq	%rsi, -16(%rbp)	# p_I, p_I
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	cmpq	$0, -16(%rbp)	#, p_I
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L5101	#,
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movl	$0, %r8d	#,
	movl	$.LC151, %ecx	#,
	movl	$157, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L5102	#
.L5101:
# ./core/list.h:157: 			ERR_FAIL_COND_V(!p_I, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movq	-16(%rbp), %rax	# p_I, tmp103
	movq	104(%rax), %rax	# p_I_26(D)->data, _4
	cmpq	%rax, -8(%rbp)	# _4, this
	setne	%al	#, _5
	movzbl	%al, %eax	# _5, _6
	testq	%rax, %rax	# _7
	je	.L5103	#,
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movl	$0, %r8d	#,
	movl	$.LC153, %ecx	#,
	movl	$158, %edx	#,
	movl	$.LC118, %esi	#,
	movl	$.LC152, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movl	$0, %eax	#, _20
	jmp	.L5102	#
.L5103:
# ./core/list.h:158: 			ERR_FAIL_COND_V(p_I->data != this, false);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/list.h:160: 			if (first == p_I) {
	movq	-8(%rbp), %rax	# this, tmp104
	movq	(%rax), %rax	# this_29(D)->first, _8
# ./core/list.h:160: 			if (first == p_I) {
	cmpq	%rax, -16(%rbp)	# _8, p_I
	jne	.L5104	#,
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp105
	movq	88(%rax), %rdx	# p_I_26(D)->next_ptr, _9
# ./core/list.h:161: 				first = p_I->next_ptr;
	movq	-8(%rbp), %rax	# this, tmp106
	movq	%rdx, (%rax)	# _9, this_29(D)->first
.L5104:
# ./core/list.h:164: 			if (last == p_I)
	movq	-8(%rbp), %rax	# this, tmp107
	movq	8(%rax), %rax	# this_29(D)->last, _10
# ./core/list.h:164: 			if (last == p_I)
	cmpq	%rax, -16(%rbp)	# _10, p_I
	jne	.L5105	#,
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp108
	movq	96(%rax), %rdx	# p_I_26(D)->prev_ptr, _11
# ./core/list.h:165: 				last = p_I->prev_ptr;
	movq	-8(%rbp), %rax	# this, tmp109
	movq	%rdx, 8(%rax)	# _11, this_29(D)->last
.L5105:
# ./core/list.h:167: 			if (p_I->prev_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp110
	movq	96(%rax), %rax	# p_I_26(D)->prev_ptr, _12
# ./core/list.h:167: 			if (p_I->prev_ptr)
	testq	%rax, %rax	# _12
	je	.L5106	#,
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp111
	movq	96(%rax), %rax	# p_I_26(D)->prev_ptr, _13
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp112
	movq	88(%rdx), %rdx	# p_I_26(D)->next_ptr, _14
# ./core/list.h:168: 				p_I->prev_ptr->next_ptr = p_I->next_ptr;
	movq	%rdx, 88(%rax)	# _14, _13->next_ptr
.L5106:
# ./core/list.h:170: 			if (p_I->next_ptr)
	movq	-16(%rbp), %rax	# p_I, tmp113
	movq	88(%rax), %rax	# p_I_26(D)->next_ptr, _15
# ./core/list.h:170: 			if (p_I->next_ptr)
	testq	%rax, %rax	# _15
	je	.L5107	#,
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rax	# p_I, tmp114
	movq	88(%rax), %rax	# p_I_26(D)->next_ptr, _16
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	-16(%rbp), %rdx	# p_I, tmp115
	movq	96(%rdx), %rdx	# p_I_26(D)->prev_ptr, _17
# ./core/list.h:171: 				p_I->next_ptr->prev_ptr = p_I->prev_ptr;
	movq	%rdx, 96(%rax)	# _17, _16->prev_ptr
.L5107:
# ./core/list.h:173: 			memdelete_allocator<Element, A>(const_cast<Element *>(p_I));
	movq	-16(%rbp), %rax	# p_I, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_	#
# ./core/list.h:174: 			size_cache--;
	movq	-8(%rbp), %rax	# this, tmp117
	movl	16(%rax), %eax	# this_29(D)->size_cache, _18
	leal	-1(%rax), %edx	#, _19
	movq	-8(%rbp), %rax	# this, tmp118
	movl	%edx, 16(%rax)	# _19, this_29(D)->size_cache
# ./core/list.h:176: 			return true;
	movl	$1, %eax	#, _20
.L5102:
# ./core/list.h:177: 		}
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3436:
	.size	_ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE, .-_ZN4ListI10MethodInfo16DefaultAllocatorE5_Data5eraseEPKNS2_7ElementE
	.section	.text._ZN10PoolVectorI6StringE6AccessC2Ev,"axG",@progbits,_ZN10PoolVectorI6StringE6AccessC5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE6AccessC2Ev
	.type	_ZN10PoolVectorI6StringE6AccessC2Ev, @function
_ZN10PoolVectorI6StringE6AccessC2Ev:
.LFB3438:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:295: 		Access() {
	movl	$_ZTVN10PoolVectorI6StringE6AccessE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp83
	movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Access
# ./core/pool_vector.h:296: 			alloc = NULL;
	movq	-8(%rbp), %rax	# this, tmp84
	movq	$0, 8(%rax)	#, this_3(D)->alloc
# ./core/pool_vector.h:297: 			mem = NULL;
	movq	-8(%rbp), %rax	# this, tmp85
	movq	$0, 16(%rax)	#, this_3(D)->mem
# ./core/pool_vector.h:298: 		}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3438:
	.size	_ZN10PoolVectorI6StringE6AccessC2Ev, .-_ZN10PoolVectorI6StringE6AccessC2Ev
	.weak	_ZN10PoolVectorI6StringE6AccessC1Ev
	.set	_ZN10PoolVectorI6StringE6AccessC1Ev,_ZN10PoolVectorI6StringE6AccessC2Ev
	.section	.text._ZN10PoolVectorI6StringE4ReadC2Ev,"axG",@progbits,_ZN10PoolVectorI6StringE4ReadC5Ev,comdat
	.align 2
	.weak	_ZN10PoolVectorI6StringE4ReadC2Ev
	.type	_ZN10PoolVectorI6StringE4ReadC2Ev, @function
_ZN10PoolVectorI6StringE4ReadC2Ev:
.LFB3442:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/pool_vector.h:326: 		Read() {}
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10PoolVectorI6StringE6AccessC2Ev	#
	movl	$_ZTVN10PoolVectorI6StringE4ReadE+16, %edx	#, _2
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _2, this_5(D)->D.46989._vptr.Access
# ./core/pool_vector.h:326: 		Read() {}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3442:
	.size	_ZN10PoolVectorI6StringE4ReadC2Ev, .-_ZN10PoolVectorI6StringE4ReadC2Ev
	.weak	_ZN10PoolVectorI6StringE4ReadC1Ev
	.set	_ZN10PoolVectorI6StringE4ReadC1Ev,_ZN10PoolVectorI6StringE4ReadC2Ev
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev
	.type	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev, @function
_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev:
.LFB3447:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3447
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$24, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)	# this, this
# ./core/hash_map.h:66: 		Pair() {}
	movq	-24(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
.LEHB942:
	call	_ZN10StringNameC1Ev	#
.LEHE942:
	movq	-24(%rbp), %rax	# this, tmp87
	addq	$8, %rax	#, _2
	movq	%rax, %rdi	# _2,
.LEHB943:
	call	_ZN6Object6SignalC1Ev	#
.LEHE943:
# ./core/hash_map.h:66: 		Pair() {}
	jmp	.L5113	#
.L5112:
	movq	%rax, %rbx	#, tmp88
# ./core/hash_map.h:66: 		Pair() {}
	movq	-24(%rbp), %rax	# this, _4
	movq	%rax, %rdi	# _4,
	call	_ZN10StringNameD1Ev	#
	movq	%rbx, %rax	# tmp88, D.62278
	movq	%rax, %rdi	# D.62278,
.LEHB944:
	call	_Unwind_Resume	#
.LEHE944:
.L5113:
# ./core/hash_map.h:66: 		Pair() {}
	addq	$24, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3447:
	.section	.gcc_except_table
.LLSDA3447:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3447-.LLSDACSB3447
.LLSDACSB3447:
	.uleb128 .LEHB942-.LFB3447
	.uleb128 .LEHE942-.LEHB942
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB943-.LFB3447
	.uleb128 .LEHE943-.LEHB943
	.uleb128 .L5112-.LFB3447
	.uleb128 0
	.uleb128 .LEHB944-.LFB3447
	.uleb128 .LEHE944-.LEHB944
	.uleb128 0
	.uleb128 0
.LLSDACSE3447:
	.section	.text._ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev,"axG",@progbits,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC5Ev,comdat
	.size	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev, .-_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev
	.weak	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC1Ev
	.set	_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC1Ev,_ZN7HashMapI10StringNameN6Object6SignalE20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev
	.section	.text._ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD2Ev,"axG",@progbits,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD5Ev,comdat
	.align 2
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD2Ev
	.type	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD2Ev, @function
_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD2Ev:
.LFB3455:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:50: 	class Element {
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN27_ObjectSignalDisconnectDataD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3455:
	.size	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD2Ev, .-_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD2Ev
	.weak	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD1Ev
	.set	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD1Ev,_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD2Ev
	.section	.text._Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_:
.LFB3453:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.57628
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.57629
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.231_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.231_5
	jne	.L5119	#,
# ./core/os/memory.h:131: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, %rdi	# tmp85,
	call	_ZN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementD1Ev	#
	movq	-24(%rbp), %rax	# p_class, tmp86
	movq	%rax, -16(%rbp)	# tmp86, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp87
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L5115	#
.L5119:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L5115:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3453:
	.size	_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI27_ObjectSignalDisconnectData16DefaultAllocatorE7ElementES2_EvPT_
	.section	.text._Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc,"axG",@progbits,_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc,comdat
	.weak	_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc
	.type	_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc, @function
_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc:
.LFB3464:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$48, %rsp	#,
	movq	%rdi, -40(%rbp)	# p_elements, p_elements
	movq	%rsi, -48(%rbp)	# p_descr, p_descr
# ./core/os/memory.h:146: 	if (p_elements == 0)
	cmpq	$0, -40(%rbp)	#, p_elements
	jne	.L5121	#,
# ./core/os/memory.h:147: 		return 0;
	movl	$0, %eax	#, _5
	jmp	.L5122	#
.L5121:
# ./core/os/memory.h:151: 	size_t len = sizeof(T) * p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp92
	salq	$3, %rax	#, tmp91
	movq	%rax, -8(%rbp)	# tmp91, len
# ./core/os/memory.h:152: 	uint64_t *mem = (uint64_t *)Memory::alloc_static(len, true);
	movq	-8(%rbp), %rax	# len, tmp93
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp93,
	call	_ZN6Memory12alloc_staticEmb	#
	movq	%rax, -16(%rbp)	# _11, mem
# ./core/os/memory.h:153: 	T *failptr = 0; //get rid of a warning
	movq	$0, -24(%rbp)	#, failptr
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	cmpq	$0, -16(%rbp)	#, mem
	sete	%al	#, _1
	movzbl	%al, %eax	# _1, _2
	testq	%rax, %rax	# _3
	je	.L5123	#,
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movl	$0, %r8d	#,
	movl	$.LC161, %ecx	#,
	movl	$154, %edx	#,
	movl	$.LC162, %esi	#,
	movl	$.LC163, %edi	#,
	call	_Z16_err_print_errorPKcS0_iS0_16ErrorHandlerType	#
	movq	-24(%rbp), %rax	# failptr, _5
	jmp	.L5122	#
.L5123:
# ./core/os/memory.h:154: 	ERR_FAIL_COND_V(!mem, failptr);
	movb	$0, _err_error_exists(%rip)	#, _err_error_exists
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-16(%rbp), %rax	# mem, tmp94
	leaq	-8(%rax), %rdx	#, _4
# ./core/os/memory.h:155: 	*(mem - 1) = p_elements;
	movq	-40(%rbp), %rax	# p_elements, tmp95
	movq	%rax, (%rdx)	# tmp95, *_4
# ./core/os/memory.h:166: 	return (T *)mem;
	movq	-16(%rbp), %rax	# mem, _5
.L5122:
# ./core/os/memory.h:167: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3464:
	.size	_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc, .-_Z19memnew_arr_templateIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEPT_mPKc
	.section	.text._ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev,"axG",@progbits,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev
	.type	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev, @function
_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev:
.LFB3469:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp84
	addq	$16, %rax	#, _1
	movq	%rax, %rdi	# _1,
	call	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC1Ev	#
# ./core/hash_map.h:79: 		Element() { next = 0; }
	movq	-8(%rbp), %rax	# this, tmp85
	movq	$0, 8(%rax)	#, this_4(D)->next
# ./core/hash_map.h:79: 		Element() { next = 0; }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3469:
	.size	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev, .-_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC1Ev
	.set	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC1Ev,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE7ElementC2Ev
	.section	.text._Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_,"axG",@progbits,_Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_,comdat
	.weak	_Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_
	.type	_Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_, @function
_Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_:
.LFB3472:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
# ./core/os/memory.h:184: 	uint64_t *ptr = (uint64_t *)p_class;
	movq	-24(%rbp), %rax	# p_class, tmp82
	movq	%rax, -8(%rbp)	# tmp82, ptr
# ./core/os/memory.h:194: 	Memory::free_static(ptr, true);
	movq	-8(%rbp), %rax	# ptr, tmp83
	movl	$1, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:195: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3472:
	.size	_Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_, .-_Z13memdelete_arrIPN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS1_ELh3ELh8EE7ElementEEvPT_
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC2Ev,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC2Ev
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC2Ev, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC2Ev:
.LFB3474:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:66: 		Pair() {}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3474:
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC2Ev, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC2Ev
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC1Ev
	.set	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC1Ev,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE4PairC2Ev
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC2Ev,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC2Ev
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC2Ev, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC2Ev:
.LFB3477:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:66: 		Pair() {}
	nop	
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3477:
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC2Ev, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC2Ev
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC1Ev
	.set	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC1Ev,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE4PairC2Ev
	.section	.text._ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD2Ev,"axG",@progbits,_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD5Ev,comdat
	.align 2
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD2Ev
	.type	_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD2Ev, @function
_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD2Ev:
.LFB3481:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:50: 	class Element {
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN12PropertyInfoD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3481:
	.size	_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD2Ev, .-_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD2Ev
	.weak	_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD1Ev
	.set	_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD1Ev,_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD2Ev
	.section	.text._Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_:
.LFB3479:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.58214
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.58215
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.15_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.15_5
	jne	.L5133	#,
# ./core/os/memory.h:131: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, %rdi	# tmp85,
	call	_ZN4ListI12PropertyInfo16DefaultAllocatorE7ElementD1Ev	#
	movq	-24(%rbp), %rax	# p_class, tmp86
	movq	%rax, -16(%rbp)	# tmp86, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp87
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L5129	#
.L5133:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L5129:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3479:
	.size	_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI12PropertyInfo16DefaultAllocatorE7ElementES2_EvPT_
	.section	.text._ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD2Ev,"axG",@progbits,_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD5Ev,comdat
	.align 2
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD2Ev
	.type	_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD2Ev, @function
_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD2Ev:
.LFB3504:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/list.h:50: 	class Element {
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10MethodInfoD1Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3504:
	.size	_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD2Ev, .-_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD2Ev
	.weak	_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD1Ev
	.set	_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD1Ev,_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD2Ev
	.section	.text._Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_,"axG",@progbits,_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_,comdat
	.weak	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_
	.type	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_, @function
_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_:
.LFB3502:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
	movq	%rdi, -24(%rbp)	# p_class, p_class
	movq	-24(%rbp), %rax	# p_class, tmp84
	movq	%rax, -8(%rbp)	# tmp84, D.59492
# ./core/os/memory.h:111: 	return true;
	movl	$1, %eax	#, D.59493
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	xorl	$1, %eax	#, retval.126_5
# ./core/os/memory.h:128: 	if (!predelete_handler(p_class))
	testb	%al, %al	# retval.126_5
	jne	.L5139	#,
# ./core/os/memory.h:131: 		p_class->~T();
	movq	-24(%rbp), %rax	# p_class, tmp85
	movq	%rax, %rdi	# tmp85,
	call	_ZN4ListI10MethodInfo16DefaultAllocatorE7ElementD1Ev	#
	movq	-24(%rbp), %rax	# p_class, tmp86
	movq	%rax, -16(%rbp)	# tmp86, p_ptr
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	movq	-16(%rbp), %rax	# p_ptr, tmp87
	movl	$0, %esi	#,
	movq	%rax, %rdi	# tmp87,
	call	_ZN6Memory11free_staticEPvb	#
# ./core/os/memory.h:69: 	_FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }
	jmp	.L5135	#
.L5139:
# ./core/os/memory.h:129: 		return; // doesn't want to be deleted
	nop	
.L5135:
# ./core/os/memory.h:134: }
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3502:
	.size	_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_, .-_Z19memdelete_allocatorIN4ListI10MethodInfo16DefaultAllocatorE7ElementES2_EvPT_
	.section	.text._ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev,"axG",@progbits,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC5Ev,comdat
	.align 2
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev
	.type	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev, @function
_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev:
.LFB3507:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:66: 		Pair() {}
	movq	-8(%rbp), %rax	# this, _1
	movq	%rax, %rdi	# _1,
	call	_ZN10StringNameC1Ev	#
# ./core/hash_map.h:66: 		Pair() {}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3507:
	.size	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev, .-_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev
	.weak	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC1Ev
	.set	_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC1Ev,_ZN7HashMapI10StringNameP10MethodBind20HashMapHasherDefault24HashMapComparatorDefaultIS0_ELh3ELh8EE4PairC2Ev
	.weak	_ZTVN10PoolVectorI6StringE4ReadE
	.section	.rodata._ZTVN10PoolVectorI6StringE4ReadE,"aG",@progbits,_ZTVN10PoolVectorI6StringE4ReadE,comdat
	.align 8
	.type	_ZTVN10PoolVectorI6StringE4ReadE, @object
	.size	_ZTVN10PoolVectorI6StringE4ReadE, 32
_ZTVN10PoolVectorI6StringE4ReadE:
	.quad	0
	.quad	_ZTIN10PoolVectorI6StringE4ReadE
	.quad	_ZN10PoolVectorI6StringE4ReadD1Ev
	.quad	_ZN10PoolVectorI6StringE4ReadD0Ev
	.weak	_ZTV13MethodBind1RCI10StringNameRKS0_E
	.section	.rodata._ZTV13MethodBind1RCI10StringNameRKS0_E,"aG",@progbits,_ZTV13MethodBind1RCI10StringNameRKS0_E,comdat
	.align 8
	.type	_ZTV13MethodBind1RCI10StringNameRKS0_E, @object
	.size	_ZTV13MethodBind1RCI10StringNameRKS0_E, 56
_ZTV13MethodBind1RCI10StringNameRKS0_E:
	.quad	0
	.quad	_ZTI13MethodBind1RCI10StringNameRKS0_E
	.quad	_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv
	.quad	_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind1RCI10StringNameRKS0_ED1Ev
	.quad	_ZN13MethodBind1RCI10StringNameRKS0_ED0Ev
	.section	.text._ZN13MethodBind1RCI10StringNameRKS0_ED2Ev,"axG",@progbits,_ZN13MethodBind1RCI10StringNameRKS0_ED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI10StringNameRKS0_ED2Ev
	.type	_ZN13MethodBind1RCI10StringNameRKS0_ED2Ev, @function
_ZN13MethodBind1RCI10StringNameRKS0_ED2Ev:
.LFB3520:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movl	$_ZTV13MethodBind1RCI10StringNameRKS0_E+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.46458._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3520:
	.size	_ZN13MethodBind1RCI10StringNameRKS0_ED2Ev, .-_ZN13MethodBind1RCI10StringNameRKS0_ED2Ev
	.weak	_ZN13MethodBind1RCI10StringNameRKS0_ED1Ev
	.set	_ZN13MethodBind1RCI10StringNameRKS0_ED1Ev,_ZN13MethodBind1RCI10StringNameRKS0_ED2Ev
	.section	.text._ZN13MethodBind1RCI10StringNameRKS0_ED0Ev,"axG",@progbits,_ZN13MethodBind1RCI10StringNameRKS0_ED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI10StringNameRKS0_ED0Ev
	.type	_ZN13MethodBind1RCI10StringNameRKS0_ED0Ev, @function
_ZN13MethodBind1RCI10StringNameRKS0_ED0Ev:
.LFB3522:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind1RCI10StringNameRKS0_ED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3522:
	.size	_ZN13MethodBind1RCI10StringNameRKS0_ED0Ev, .-_ZN13MethodBind1RCI10StringNameRKS0_ED0Ev
	.weak	_ZTV13MethodBind0RCIbE
	.section	.rodata._ZTV13MethodBind0RCIbE,"aG",@progbits,_ZTV13MethodBind0RCIbE,comdat
	.align 8
	.type	_ZTV13MethodBind0RCIbE, @object
	.size	_ZTV13MethodBind0RCIbE, 56
_ZTV13MethodBind0RCIbE:
	.quad	0
	.quad	_ZTI13MethodBind0RCIbE
	.quad	_ZNK13MethodBind0RCIbE18get_instance_classEv
	.quad	_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind0RCIbED1Ev
	.quad	_ZN13MethodBind0RCIbED0Ev
	.section	.text._ZN13MethodBind0RCIbED2Ev,"axG",@progbits,_ZN13MethodBind0RCIbED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCIbED2Ev
	.type	_ZN13MethodBind0RCIbED2Ev, @function
_ZN13MethodBind0RCIbED2Ev:
.LFB3524:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movl	$_ZTV13MethodBind0RCIbE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.46313._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3524:
	.size	_ZN13MethodBind0RCIbED2Ev, .-_ZN13MethodBind0RCIbED2Ev
	.weak	_ZN13MethodBind0RCIbED1Ev
	.set	_ZN13MethodBind0RCIbED1Ev,_ZN13MethodBind0RCIbED2Ev
	.section	.text._ZN13MethodBind0RCIbED0Ev,"axG",@progbits,_ZN13MethodBind0RCIbED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCIbED0Ev
	.type	_ZN13MethodBind0RCIbED0Ev, @function
_ZN13MethodBind0RCIbED0Ev:
.LFB3526:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind0RCIbED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3526:
	.size	_ZN13MethodBind0RCIbED0Ev, .-_ZN13MethodBind0RCIbED0Ev
	.weak	_ZTV11MethodBind1IbE
	.section	.rodata._ZTV11MethodBind1IbE,"aG",@progbits,_ZTV11MethodBind1IbE,comdat
	.align 8
	.type	_ZTV11MethodBind1IbE, @object
	.size	_ZTV11MethodBind1IbE, 56
_ZTV11MethodBind1IbE:
	.quad	0
	.quad	_ZTI11MethodBind1IbE
	.quad	_ZNK11MethodBind1IbE18get_instance_classEv
	.quad	_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind1IbED1Ev
	.quad	_ZN11MethodBind1IbED0Ev
	.section	.text._ZN11MethodBind1IbED2Ev,"axG",@progbits,_ZN11MethodBind1IbED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IbED2Ev
	.type	_ZN11MethodBind1IbED2Ev, @function
_ZN11MethodBind1IbED2Ev:
.LFB3528:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:716: class MethodBind1 : public MethodBind {
	movl	$_ZTV11MethodBind1IbE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.46211._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3528:
	.size	_ZN11MethodBind1IbED2Ev, .-_ZN11MethodBind1IbED2Ev
	.weak	_ZN11MethodBind1IbED1Ev
	.set	_ZN11MethodBind1IbED1Ev,_ZN11MethodBind1IbED2Ev
	.section	.text._ZN11MethodBind1IbED0Ev,"axG",@progbits,_ZN11MethodBind1IbED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IbED0Ev
	.type	_ZN11MethodBind1IbED0Ev, @function
_ZN11MethodBind1IbED0Ev:
.LFB3530:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:716: class MethodBind1 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind1IbED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3530:
	.size	_ZN11MethodBind1IbED0Ev, .-_ZN11MethodBind1IbED0Ev
	.weak	_ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E
	.section	.rodata._ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E,"aG",@progbits,_ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E,comdat
	.align 8
	.type	_ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E, @object
	.size	_ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E, 56
_ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E:
	.quad	0
	.quad	_ZTI13MethodBind3RCIbRK10StringNameP6ObjectS2_E
	.quad	_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv
	.quad	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED1Ev
	.quad	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED0Ev
	.section	.text._ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED2Ev,"axG",@progbits,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED2Ev
	.type	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED2Ev, @function
_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED2Ev:
.LFB3532:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:2842: class MethodBind3RC : public MethodBind {
	movl	$_ZTV13MethodBind3RCIbRK10StringNameP6ObjectS2_E+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.46109._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3532:
	.size	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED2Ev, .-_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED2Ev
	.weak	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED1Ev
	.set	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED1Ev,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED2Ev
	.section	.text._ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED0Ev,"axG",@progbits,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED0Ev
	.type	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED0Ev, @function
_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED0Ev:
.LFB3534:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:2842: class MethodBind3RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3534:
	.size	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED0Ev, .-_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_ED0Ev
	.weak	_ZTV11MethodBind3IRK10StringNameP6ObjectS2_E
	.section	.rodata._ZTV11MethodBind3IRK10StringNameP6ObjectS2_E,"aG",@progbits,_ZTV11MethodBind3IRK10StringNameP6ObjectS2_E,comdat
	.align 8
	.type	_ZTV11MethodBind3IRK10StringNameP6ObjectS2_E, @object
	.size	_ZTV11MethodBind3IRK10StringNameP6ObjectS2_E, 56
_ZTV11MethodBind3IRK10StringNameP6ObjectS2_E:
	.quad	0
	.quad	_ZTI11MethodBind3IRK10StringNameP6ObjectS2_E
	.quad	_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv
	.quad	_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED1Ev
	.quad	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED0Ev
	.section	.text._ZN11MethodBind3IRK10StringNameP6ObjectS2_ED2Ev,"axG",@progbits,_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED2Ev
	.type	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED2Ev, @function
_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED2Ev:
.LFB3536:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:2236: class MethodBind3 : public MethodBind {
	movl	$_ZTV11MethodBind3IRK10StringNameP6ObjectS2_E+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.46007._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3536:
	.size	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED2Ev, .-_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED2Ev
	.weak	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED1Ev
	.set	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED1Ev,_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED2Ev
	.section	.text._ZN11MethodBind3IRK10StringNameP6ObjectS2_ED0Ev,"axG",@progbits,_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED0Ev
	.type	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED0Ev, @function
_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED0Ev:
.LFB3538:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:2236: class MethodBind3 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3538:
	.size	_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED0Ev, .-_ZN11MethodBind3IRK10StringNameP6ObjectS2_ED0Ev
	.weak	_ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE
	.section	.rodata._ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE,"aG",@progbits,_ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE,comdat
	.align 8
	.type	_ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE, @object
	.size	_ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE, 56
_ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE:
	.quad	0
	.quad	_ZTI12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE
	.quad	_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv
	.quad	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED1Ev
	.quad	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED0Ev
	.section	.text._ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED2Ev,"axG",@progbits,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED2Ev
	.type	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED2Ev, @function
_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED2Ev:
.LFB3540:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:4102: class MethodBind5R : public MethodBind {
	movl	$_ZTV12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45905._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3540:
	.size	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED2Ev, .-_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED2Ev
	.weak	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED1Ev
	.set	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED1Ev,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED2Ev
	.section	.text._ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED0Ev,"axG",@progbits,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED0Ev
	.type	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED0Ev, @function
_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED0Ev:
.LFB3542:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:4102: class MethodBind5R : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3542:
	.size	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED0Ev, .-_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjED0Ev
	.weak	_ZTV13MethodBind1RCI5ArrayRK6StringE
	.section	.rodata._ZTV13MethodBind1RCI5ArrayRK6StringE,"aG",@progbits,_ZTV13MethodBind1RCI5ArrayRK6StringE,comdat
	.align 8
	.type	_ZTV13MethodBind1RCI5ArrayRK6StringE, @object
	.size	_ZTV13MethodBind1RCI5ArrayRK6StringE, 56
_ZTV13MethodBind1RCI5ArrayRK6StringE:
	.quad	0
	.quad	_ZTI13MethodBind1RCI5ArrayRK6StringE
	.quad	_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv
	.quad	_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind1RCI5ArrayRK6StringED1Ev
	.quad	_ZN13MethodBind1RCI5ArrayRK6StringED0Ev
	.section	.text._ZN13MethodBind1RCI5ArrayRK6StringED2Ev,"axG",@progbits,_ZN13MethodBind1RCI5ArrayRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI5ArrayRK6StringED2Ev
	.type	_ZN13MethodBind1RCI5ArrayRK6StringED2Ev, @function
_ZN13MethodBind1RCI5ArrayRK6StringED2Ev:
.LFB3544:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movl	$_ZTV13MethodBind1RCI5ArrayRK6StringE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45803._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3544:
	.size	_ZN13MethodBind1RCI5ArrayRK6StringED2Ev, .-_ZN13MethodBind1RCI5ArrayRK6StringED2Ev
	.weak	_ZN13MethodBind1RCI5ArrayRK6StringED1Ev
	.set	_ZN13MethodBind1RCI5ArrayRK6StringED1Ev,_ZN13MethodBind1RCI5ArrayRK6StringED2Ev
	.section	.text._ZN13MethodBind1RCI5ArrayRK6StringED0Ev,"axG",@progbits,_ZN13MethodBind1RCI5ArrayRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI5ArrayRK6StringED0Ev
	.type	_ZN13MethodBind1RCI5ArrayRK6StringED0Ev, @function
_ZN13MethodBind1RCI5ArrayRK6StringED0Ev:
.LFB3546:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind1RCI5ArrayRK6StringED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3546:
	.size	_ZN13MethodBind1RCI5ArrayRK6StringED0Ev, .-_ZN13MethodBind1RCI5ArrayRK6StringED0Ev
	.weak	_ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE
	.section	.rodata._ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE,"aG",@progbits,_ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE,comdat
	.align 8
	.type	_ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE, @object
	.size	_ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE, 56
_ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE:
	.quad	0
	.quad	_ZTI12MethodBind2RI7VariantRK10StringNameRK5ArrayE
	.quad	_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv
	.quad	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED1Ev
	.quad	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED0Ev
	.section	.text._ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED2Ev,"axG",@progbits,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED2Ev
	.type	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED2Ev, @function
_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED2Ev:
.LFB3548:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1654: class MethodBind2R : public MethodBind {
	movl	$_ZTV12MethodBind2RI7VariantRK10StringNameRK5ArrayE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45701._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3548:
	.size	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED2Ev, .-_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED2Ev
	.weak	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED1Ev
	.set	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED1Ev,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED2Ev
	.section	.text._ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED0Ev,"axG",@progbits,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED0Ev
	.type	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED0Ev, @function
_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED0Ev:
.LFB3550:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1654: class MethodBind2R : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3550:
	.size	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED0Ev, .-_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayED0Ev
	.weak	_ZTV11MethodBind2IRK10StringNameRK7VariantE
	.section	.rodata._ZTV11MethodBind2IRK10StringNameRK7VariantE,"aG",@progbits,_ZTV11MethodBind2IRK10StringNameRK7VariantE,comdat
	.align 8
	.type	_ZTV11MethodBind2IRK10StringNameRK7VariantE, @object
	.size	_ZTV11MethodBind2IRK10StringNameRK7VariantE, 56
_ZTV11MethodBind2IRK10StringNameRK7VariantE:
	.quad	0
	.quad	_ZTI11MethodBind2IRK10StringNameRK7VariantE
	.quad	_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv
	.quad	_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind2IRK10StringNameRK7VariantED1Ev
	.quad	_ZN11MethodBind2IRK10StringNameRK7VariantED0Ev
	.section	.text._ZN11MethodBind2IRK10StringNameRK7VariantED2Ev,"axG",@progbits,_ZN11MethodBind2IRK10StringNameRK7VariantED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK10StringNameRK7VariantED2Ev
	.type	_ZN11MethodBind2IRK10StringNameRK7VariantED2Ev, @function
_ZN11MethodBind2IRK10StringNameRK7VariantED2Ev:
.LFB3552:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movl	$_ZTV11MethodBind2IRK10StringNameRK7VariantE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45599._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3552:
	.size	_ZN11MethodBind2IRK10StringNameRK7VariantED2Ev, .-_ZN11MethodBind2IRK10StringNameRK7VariantED2Ev
	.weak	_ZN11MethodBind2IRK10StringNameRK7VariantED1Ev
	.set	_ZN11MethodBind2IRK10StringNameRK7VariantED1Ev,_ZN11MethodBind2IRK10StringNameRK7VariantED2Ev
	.section	.text._ZN11MethodBind2IRK10StringNameRK7VariantED0Ev,"axG",@progbits,_ZN11MethodBind2IRK10StringNameRK7VariantED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK10StringNameRK7VariantED0Ev
	.type	_ZN11MethodBind2IRK10StringNameRK7VariantED0Ev, @function
_ZN11MethodBind2IRK10StringNameRK7VariantED0Ev:
.LFB3554:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind2IRK10StringNameRK7VariantED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3554:
	.size	_ZN11MethodBind2IRK10StringNameRK7VariantED0Ev, .-_ZN11MethodBind2IRK10StringNameRK7VariantED0Ev
	.weak	_ZTV16MethodBindVarArgI6ObjectE
	.section	.rodata._ZTV16MethodBindVarArgI6ObjectE,"aG",@progbits,_ZTV16MethodBindVarArgI6ObjectE,comdat
	.align 8
	.type	_ZTV16MethodBindVarArgI6ObjectE, @object
	.size	_ZTV16MethodBindVarArgI6ObjectE, 72
_ZTV16MethodBindVarArgI6ObjectE:
	.quad	0
	.quad	_ZTI16MethodBindVarArgI6ObjectE
	.quad	_ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv
	.quad	_ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE
	.quad	_ZNK16MethodBindVarArgI6ObjectE9is_varargEv
	.quad	_ZN16MethodBindVarArgI6ObjectED1Ev
	.quad	_ZN16MethodBindVarArgI6ObjectED0Ev
	.quad	_ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi
	.quad	_ZNK16MethodBindVarArgI6ObjectE8is_constEv
	.section	.text._ZN16MethodBindVarArgI6ObjectED2Ev,"axG",@progbits,_ZN16MethodBindVarArgI6ObjectED5Ev,comdat
	.align 2
	.weak	_ZN16MethodBindVarArgI6ObjectED2Ev
	.type	_ZN16MethodBindVarArgI6ObjectED2Ev, @function
_ZN16MethodBindVarArgI6ObjectED2Ev:
.LFB3556:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.h:305: class MethodBindVarArg : public MethodBind {
	movl	$_ZTV16MethodBindVarArgI6ObjectE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp84
	movq	%rdx, (%rax)	# _1, this_4(D)->D.45447._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3556:
	.size	_ZN16MethodBindVarArgI6ObjectED2Ev, .-_ZN16MethodBindVarArgI6ObjectED2Ev
	.weak	_ZN16MethodBindVarArgI6ObjectED1Ev
	.set	_ZN16MethodBindVarArgI6ObjectED1Ev,_ZN16MethodBindVarArgI6ObjectED2Ev
	.section	.text._ZN16MethodBindVarArgI6ObjectED0Ev,"axG",@progbits,_ZN16MethodBindVarArgI6ObjectED5Ev,comdat
	.align 2
	.weak	_ZN16MethodBindVarArgI6ObjectED0Ev
	.type	_ZN16MethodBindVarArgI6ObjectED0Ev, @function
_ZN16MethodBindVarArgI6ObjectED0Ev:
.LFB3558:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.h:305: class MethodBindVarArg : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN16MethodBindVarArgI6ObjectED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$72, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3558:
	.size	_ZN16MethodBindVarArgI6ObjectED0Ev, .-_ZN16MethodBindVarArgI6ObjectED0Ev
	.weak	_ZTV13MethodBind1RCIbRK10StringNameE
	.section	.rodata._ZTV13MethodBind1RCIbRK10StringNameE,"aG",@progbits,_ZTV13MethodBind1RCIbRK10StringNameE,comdat
	.align 8
	.type	_ZTV13MethodBind1RCIbRK10StringNameE, @object
	.size	_ZTV13MethodBind1RCIbRK10StringNameE, 56
_ZTV13MethodBind1RCIbRK10StringNameE:
	.quad	0
	.quad	_ZTI13MethodBind1RCIbRK10StringNameE
	.quad	_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv
	.quad	_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind1RCIbRK10StringNameED1Ev
	.quad	_ZN13MethodBind1RCIbRK10StringNameED0Ev
	.section	.text._ZN13MethodBind1RCIbRK10StringNameED2Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK10StringNameED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK10StringNameED2Ev
	.type	_ZN13MethodBind1RCIbRK10StringNameED2Ev, @function
_ZN13MethodBind1RCIbRK10StringNameED2Ev:
.LFB3560:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movl	$_ZTV13MethodBind1RCIbRK10StringNameE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45335._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3560:
	.size	_ZN13MethodBind1RCIbRK10StringNameED2Ev, .-_ZN13MethodBind1RCIbRK10StringNameED2Ev
	.weak	_ZN13MethodBind1RCIbRK10StringNameED1Ev
	.set	_ZN13MethodBind1RCIbRK10StringNameED1Ev,_ZN13MethodBind1RCIbRK10StringNameED2Ev
	.section	.text._ZN13MethodBind1RCIbRK10StringNameED0Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK10StringNameED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK10StringNameED0Ev
	.type	_ZN13MethodBind1RCIbRK10StringNameED0Ev, @function
_ZN13MethodBind1RCIbRK10StringNameED0Ev:
.LFB3562:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind1RCIbRK10StringNameED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3562:
	.size	_ZN13MethodBind1RCIbRK10StringNameED0Ev, .-_ZN13MethodBind1RCIbRK10StringNameED0Ev
	.weak	_ZTV11MethodBind2IRK6StringRK5ArrayE
	.section	.rodata._ZTV11MethodBind2IRK6StringRK5ArrayE,"aG",@progbits,_ZTV11MethodBind2IRK6StringRK5ArrayE,comdat
	.align 8
	.type	_ZTV11MethodBind2IRK6StringRK5ArrayE, @object
	.size	_ZTV11MethodBind2IRK6StringRK5ArrayE, 56
_ZTV11MethodBind2IRK6StringRK5ArrayE:
	.quad	0
	.quad	_ZTI11MethodBind2IRK6StringRK5ArrayE
	.quad	_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv
	.quad	_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind2IRK6StringRK5ArrayED1Ev
	.quad	_ZN11MethodBind2IRK6StringRK5ArrayED0Ev
	.section	.text._ZN11MethodBind2IRK6StringRK5ArrayED2Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK5ArrayED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK5ArrayED2Ev
	.type	_ZN11MethodBind2IRK6StringRK5ArrayED2Ev, @function
_ZN11MethodBind2IRK6StringRK5ArrayED2Ev:
.LFB3564:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movl	$_ZTV11MethodBind2IRK6StringRK5ArrayE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45233._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3564:
	.size	_ZN11MethodBind2IRK6StringRK5ArrayED2Ev, .-_ZN11MethodBind2IRK6StringRK5ArrayED2Ev
	.weak	_ZN11MethodBind2IRK6StringRK5ArrayED1Ev
	.set	_ZN11MethodBind2IRK6StringRK5ArrayED1Ev,_ZN11MethodBind2IRK6StringRK5ArrayED2Ev
	.section	.text._ZN11MethodBind2IRK6StringRK5ArrayED0Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK5ArrayED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK5ArrayED0Ev
	.type	_ZN11MethodBind2IRK6StringRK5ArrayED0Ev, @function
_ZN11MethodBind2IRK6StringRK5ArrayED0Ev:
.LFB3566:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind2IRK6StringRK5ArrayED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3566:
	.size	_ZN11MethodBind2IRK6StringRK5ArrayED0Ev, .-_ZN11MethodBind2IRK6StringRK5ArrayED0Ev
	.weak	_ZTV13MethodBind0RCI10PoolVectorI6StringEE
	.section	.rodata._ZTV13MethodBind0RCI10PoolVectorI6StringEE,"aG",@progbits,_ZTV13MethodBind0RCI10PoolVectorI6StringEE,comdat
	.align 8
	.type	_ZTV13MethodBind0RCI10PoolVectorI6StringEE, @object
	.size	_ZTV13MethodBind0RCI10PoolVectorI6StringEE, 56
_ZTV13MethodBind0RCI10PoolVectorI6StringEE:
	.quad	0
	.quad	_ZTI13MethodBind0RCI10PoolVectorI6StringEE
	.quad	_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv
	.quad	_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind0RCI10PoolVectorI6StringEED1Ev
	.quad	_ZN13MethodBind0RCI10PoolVectorI6StringEED0Ev
	.section	.text._ZN13MethodBind0RCI10PoolVectorI6StringEED2Ev,"axG",@progbits,_ZN13MethodBind0RCI10PoolVectorI6StringEED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI10PoolVectorI6StringEED2Ev
	.type	_ZN13MethodBind0RCI10PoolVectorI6StringEED2Ev, @function
_ZN13MethodBind0RCI10PoolVectorI6StringEED2Ev:
.LFB3568:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movl	$_ZTV13MethodBind0RCI10PoolVectorI6StringEE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45131._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3568:
	.size	_ZN13MethodBind0RCI10PoolVectorI6StringEED2Ev, .-_ZN13MethodBind0RCI10PoolVectorI6StringEED2Ev
	.weak	_ZN13MethodBind0RCI10PoolVectorI6StringEED1Ev
	.set	_ZN13MethodBind0RCI10PoolVectorI6StringEED1Ev,_ZN13MethodBind0RCI10PoolVectorI6StringEED2Ev
	.section	.text._ZN13MethodBind0RCI10PoolVectorI6StringEED0Ev,"axG",@progbits,_ZN13MethodBind0RCI10PoolVectorI6StringEED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI10PoolVectorI6StringEED0Ev
	.type	_ZN13MethodBind0RCI10PoolVectorI6StringEED0Ev, @function
_ZN13MethodBind0RCI10PoolVectorI6StringEED0Ev:
.LFB3570:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind0RCI10PoolVectorI6StringEED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3570:
	.size	_ZN13MethodBind0RCI10PoolVectorI6StringEED0Ev, .-_ZN13MethodBind0RCI10PoolVectorI6StringEED0Ev
	.weak	_ZTV11MethodBind1IRK6StringE
	.section	.rodata._ZTV11MethodBind1IRK6StringE,"aG",@progbits,_ZTV11MethodBind1IRK6StringE,comdat
	.align 8
	.type	_ZTV11MethodBind1IRK6StringE, @object
	.size	_ZTV11MethodBind1IRK6StringE, 56
_ZTV11MethodBind1IRK6StringE:
	.quad	0
	.quad	_ZTI11MethodBind1IRK6StringE
	.quad	_ZNK11MethodBind1IRK6StringE18get_instance_classEv
	.quad	_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind1IRK6StringED1Ev
	.quad	_ZN11MethodBind1IRK6StringED0Ev
	.section	.text._ZN11MethodBind1IRK6StringED2Ev,"axG",@progbits,_ZN11MethodBind1IRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6StringED2Ev
	.type	_ZN11MethodBind1IRK6StringED2Ev, @function
_ZN11MethodBind1IRK6StringED2Ev:
.LFB3572:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:716: class MethodBind1 : public MethodBind {
	movl	$_ZTV11MethodBind1IRK6StringE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.45029._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3572:
	.size	_ZN11MethodBind1IRK6StringED2Ev, .-_ZN11MethodBind1IRK6StringED2Ev
	.weak	_ZN11MethodBind1IRK6StringED1Ev
	.set	_ZN11MethodBind1IRK6StringED1Ev,_ZN11MethodBind1IRK6StringED2Ev
	.section	.text._ZN11MethodBind1IRK6StringED0Ev,"axG",@progbits,_ZN11MethodBind1IRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6StringED0Ev
	.type	_ZN11MethodBind1IRK6StringED0Ev, @function
_ZN11MethodBind1IRK6StringED0Ev:
.LFB3574:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:716: class MethodBind1 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind1IRK6StringED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3574:
	.size	_ZN11MethodBind1IRK6StringED0Ev, .-_ZN11MethodBind1IRK6StringED0Ev
	.weak	_ZTV13MethodBind0RCI6RefPtrE
	.section	.rodata._ZTV13MethodBind0RCI6RefPtrE,"aG",@progbits,_ZTV13MethodBind0RCI6RefPtrE,comdat
	.align 8
	.type	_ZTV13MethodBind0RCI6RefPtrE, @object
	.size	_ZTV13MethodBind0RCI6RefPtrE, 56
_ZTV13MethodBind0RCI6RefPtrE:
	.quad	0
	.quad	_ZTI13MethodBind0RCI6RefPtrE
	.quad	_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv
	.quad	_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind0RCI6RefPtrED1Ev
	.quad	_ZN13MethodBind0RCI6RefPtrED0Ev
	.section	.text._ZN13MethodBind0RCI6RefPtrED2Ev,"axG",@progbits,_ZN13MethodBind0RCI6RefPtrED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6RefPtrED2Ev
	.type	_ZN13MethodBind0RCI6RefPtrED2Ev, @function
_ZN13MethodBind0RCI6RefPtrED2Ev:
.LFB3576:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movl	$_ZTV13MethodBind0RCI6RefPtrE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44927._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3576:
	.size	_ZN13MethodBind0RCI6RefPtrED2Ev, .-_ZN13MethodBind0RCI6RefPtrED2Ev
	.weak	_ZN13MethodBind0RCI6RefPtrED1Ev
	.set	_ZN13MethodBind0RCI6RefPtrED1Ev,_ZN13MethodBind0RCI6RefPtrED2Ev
	.section	.text._ZN13MethodBind0RCI6RefPtrED0Ev,"axG",@progbits,_ZN13MethodBind0RCI6RefPtrED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6RefPtrED0Ev
	.type	_ZN13MethodBind0RCI6RefPtrED0Ev, @function
_ZN13MethodBind0RCI6RefPtrED0Ev:
.LFB3578:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind0RCI6RefPtrED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3578:
	.size	_ZN13MethodBind0RCI6RefPtrED0Ev, .-_ZN13MethodBind0RCI6RefPtrED0Ev
	.weak	_ZTV11MethodBind1IRK6RefPtrE
	.section	.rodata._ZTV11MethodBind1IRK6RefPtrE,"aG",@progbits,_ZTV11MethodBind1IRK6RefPtrE,comdat
	.align 8
	.type	_ZTV11MethodBind1IRK6RefPtrE, @object
	.size	_ZTV11MethodBind1IRK6RefPtrE, 56
_ZTV11MethodBind1IRK6RefPtrE:
	.quad	0
	.quad	_ZTI11MethodBind1IRK6RefPtrE
	.quad	_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv
	.quad	_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind1IRK6RefPtrED1Ev
	.quad	_ZN11MethodBind1IRK6RefPtrED0Ev
	.section	.text._ZN11MethodBind1IRK6RefPtrED2Ev,"axG",@progbits,_ZN11MethodBind1IRK6RefPtrED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6RefPtrED2Ev
	.type	_ZN11MethodBind1IRK6RefPtrED2Ev, @function
_ZN11MethodBind1IRK6RefPtrED2Ev:
.LFB3580:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:716: class MethodBind1 : public MethodBind {
	movl	$_ZTV11MethodBind1IRK6RefPtrE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44825._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3580:
	.size	_ZN11MethodBind1IRK6RefPtrED2Ev, .-_ZN11MethodBind1IRK6RefPtrED2Ev
	.weak	_ZN11MethodBind1IRK6RefPtrED1Ev
	.set	_ZN11MethodBind1IRK6RefPtrED1Ev,_ZN11MethodBind1IRK6RefPtrED2Ev
	.section	.text._ZN11MethodBind1IRK6RefPtrED0Ev,"axG",@progbits,_ZN11MethodBind1IRK6RefPtrED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6RefPtrED0Ev
	.type	_ZN11MethodBind1IRK6RefPtrED0Ev, @function
_ZN11MethodBind1IRK6RefPtrED0Ev:
.LFB3582:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:716: class MethodBind1 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind1IRK6RefPtrED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3582:
	.size	_ZN11MethodBind1IRK6RefPtrED0Ev, .-_ZN11MethodBind1IRK6RefPtrED0Ev
	.weak	_ZTV13MethodBind0RCImE
	.section	.rodata._ZTV13MethodBind0RCImE,"aG",@progbits,_ZTV13MethodBind0RCImE,comdat
	.align 8
	.type	_ZTV13MethodBind0RCImE, @object
	.size	_ZTV13MethodBind0RCImE, 56
_ZTV13MethodBind0RCImE:
	.quad	0
	.quad	_ZTI13MethodBind0RCImE
	.quad	_ZNK13MethodBind0RCImE18get_instance_classEv
	.quad	_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind0RCImED1Ev
	.quad	_ZN13MethodBind0RCImED0Ev
	.section	.text._ZN13MethodBind0RCImED2Ev,"axG",@progbits,_ZN13MethodBind0RCImED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCImED2Ev
	.type	_ZN13MethodBind0RCImED2Ev, @function
_ZN13MethodBind0RCImED2Ev:
.LFB3584:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movl	$_ZTV13MethodBind0RCImE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44723._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3584:
	.size	_ZN13MethodBind0RCImED2Ev, .-_ZN13MethodBind0RCImED2Ev
	.weak	_ZN13MethodBind0RCImED1Ev
	.set	_ZN13MethodBind0RCImED1Ev,_ZN13MethodBind0RCImED2Ev
	.section	.text._ZN13MethodBind0RCImED0Ev,"axG",@progbits,_ZN13MethodBind0RCImED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCImED0Ev
	.type	_ZN13MethodBind0RCImED0Ev, @function
_ZN13MethodBind0RCImED0Ev:
.LFB3586:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind0RCImED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3586:
	.size	_ZN13MethodBind0RCImED0Ev, .-_ZN13MethodBind0RCImED0Ev
	.weak	_ZTV12MethodBind0RI6StringE
	.section	.rodata._ZTV12MethodBind0RI6StringE,"aG",@progbits,_ZTV12MethodBind0RI6StringE,comdat
	.align 8
	.type	_ZTV12MethodBind0RI6StringE, @object
	.size	_ZTV12MethodBind0RI6StringE, 56
_ZTV12MethodBind0RI6StringE:
	.quad	0
	.quad	_ZTI12MethodBind0RI6StringE
	.quad	_ZNK12MethodBind0RI6StringE18get_instance_classEv
	.quad	_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN12MethodBind0RI6StringED1Ev
	.quad	_ZN12MethodBind0RI6StringED0Ev
	.section	.text._ZN12MethodBind0RI6StringED2Ev,"axG",@progbits,_ZN12MethodBind0RI6StringED5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind0RI6StringED2Ev
	.type	_ZN12MethodBind0RI6StringED2Ev, @function
_ZN12MethodBind0RI6StringED2Ev:
.LFB3588:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:182: class MethodBind0R : public MethodBind {
	movl	$_ZTV12MethodBind0RI6StringE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44621._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3588:
	.size	_ZN12MethodBind0RI6StringED2Ev, .-_ZN12MethodBind0RI6StringED2Ev
	.weak	_ZN12MethodBind0RI6StringED1Ev
	.set	_ZN12MethodBind0RI6StringED1Ev,_ZN12MethodBind0RI6StringED2Ev
	.section	.text._ZN12MethodBind0RI6StringED0Ev,"axG",@progbits,_ZN12MethodBind0RI6StringED5Ev,comdat
	.align 2
	.weak	_ZN12MethodBind0RI6StringED0Ev
	.type	_ZN12MethodBind0RI6StringED0Ev, @function
_ZN12MethodBind0RI6StringED0Ev:
.LFB3590:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:182: class MethodBind0R : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN12MethodBind0RI6StringED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3590:
	.size	_ZN12MethodBind0RI6StringED0Ev, .-_ZN12MethodBind0RI6StringED0Ev
	.weak	_ZTV11MethodBind2IibE
	.section	.rodata._ZTV11MethodBind2IibE,"aG",@progbits,_ZTV11MethodBind2IibE,comdat
	.align 8
	.type	_ZTV11MethodBind2IibE, @object
	.size	_ZTV11MethodBind2IibE, 56
_ZTV11MethodBind2IibE:
	.quad	0
	.quad	_ZTI11MethodBind2IibE
	.quad	_ZNK11MethodBind2IibE18get_instance_classEv
	.quad	_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind2IibED1Ev
	.quad	_ZN11MethodBind2IibED0Ev
	.section	.text._ZN11MethodBind2IibED2Ev,"axG",@progbits,_ZN11MethodBind2IibED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IibED2Ev
	.type	_ZN11MethodBind2IibED2Ev, @function
_ZN11MethodBind2IibED2Ev:
.LFB3592:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movl	$_ZTV11MethodBind2IibE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44519._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3592:
	.size	_ZN11MethodBind2IibED2Ev, .-_ZN11MethodBind2IibED2Ev
	.weak	_ZN11MethodBind2IibED1Ev
	.set	_ZN11MethodBind2IibED1Ev,_ZN11MethodBind2IibED2Ev
	.section	.text._ZN11MethodBind2IibED0Ev,"axG",@progbits,_ZN11MethodBind2IibED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IibED0Ev
	.type	_ZN11MethodBind2IibED0Ev, @function
_ZN11MethodBind2IibED0Ev:
.LFB3594:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind2IibED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3594:
	.size	_ZN11MethodBind2IibED0Ev, .-_ZN11MethodBind2IibED0Ev
	.weak	_ZTV13MethodBind0RCI5ArrayE
	.section	.rodata._ZTV13MethodBind0RCI5ArrayE,"aG",@progbits,_ZTV13MethodBind0RCI5ArrayE,comdat
	.align 8
	.type	_ZTV13MethodBind0RCI5ArrayE, @object
	.size	_ZTV13MethodBind0RCI5ArrayE, 56
_ZTV13MethodBind0RCI5ArrayE:
	.quad	0
	.quad	_ZTI13MethodBind0RCI5ArrayE
	.quad	_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv
	.quad	_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind0RCI5ArrayED1Ev
	.quad	_ZN13MethodBind0RCI5ArrayED0Ev
	.section	.text._ZN13MethodBind0RCI5ArrayED2Ev,"axG",@progbits,_ZN13MethodBind0RCI5ArrayED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI5ArrayED2Ev
	.type	_ZN13MethodBind0RCI5ArrayED2Ev, @function
_ZN13MethodBind0RCI5ArrayED2Ev:
.LFB3596:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movl	$_ZTV13MethodBind0RCI5ArrayE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44417._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3596:
	.size	_ZN13MethodBind0RCI5ArrayED2Ev, .-_ZN13MethodBind0RCI5ArrayED2Ev
	.weak	_ZN13MethodBind0RCI5ArrayED1Ev
	.set	_ZN13MethodBind0RCI5ArrayED1Ev,_ZN13MethodBind0RCI5ArrayED2Ev
	.section	.text._ZN13MethodBind0RCI5ArrayED0Ev,"axG",@progbits,_ZN13MethodBind0RCI5ArrayED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI5ArrayED0Ev
	.type	_ZN13MethodBind0RCI5ArrayED0Ev, @function
_ZN13MethodBind0RCI5ArrayED0Ev:
.LFB3598:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind0RCI5ArrayED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3598:
	.size	_ZN13MethodBind0RCI5ArrayED0Ev, .-_ZN13MethodBind0RCI5ArrayED0Ev
	.weak	_ZTV13MethodBind1RCI7VariantRK8NodePathE
	.section	.rodata._ZTV13MethodBind1RCI7VariantRK8NodePathE,"aG",@progbits,_ZTV13MethodBind1RCI7VariantRK8NodePathE,comdat
	.align 8
	.type	_ZTV13MethodBind1RCI7VariantRK8NodePathE, @object
	.size	_ZTV13MethodBind1RCI7VariantRK8NodePathE, 56
_ZTV13MethodBind1RCI7VariantRK8NodePathE:
	.quad	0
	.quad	_ZTI13MethodBind1RCI7VariantRK8NodePathE
	.quad	_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv
	.quad	_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind1RCI7VariantRK8NodePathED1Ev
	.quad	_ZN13MethodBind1RCI7VariantRK8NodePathED0Ev
	.section	.text._ZN13MethodBind1RCI7VariantRK8NodePathED2Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK8NodePathED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK8NodePathED2Ev
	.type	_ZN13MethodBind1RCI7VariantRK8NodePathED2Ev, @function
_ZN13MethodBind1RCI7VariantRK8NodePathED2Ev:
.LFB3600:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movl	$_ZTV13MethodBind1RCI7VariantRK8NodePathE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44315._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3600:
	.size	_ZN13MethodBind1RCI7VariantRK8NodePathED2Ev, .-_ZN13MethodBind1RCI7VariantRK8NodePathED2Ev
	.weak	_ZN13MethodBind1RCI7VariantRK8NodePathED1Ev
	.set	_ZN13MethodBind1RCI7VariantRK8NodePathED1Ev,_ZN13MethodBind1RCI7VariantRK8NodePathED2Ev
	.section	.text._ZN13MethodBind1RCI7VariantRK8NodePathED0Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK8NodePathED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK8NodePathED0Ev
	.type	_ZN13MethodBind1RCI7VariantRK8NodePathED0Ev, @function
_ZN13MethodBind1RCI7VariantRK8NodePathED0Ev:
.LFB3602:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind1RCI7VariantRK8NodePathED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3602:
	.size	_ZN13MethodBind1RCI7VariantRK8NodePathED0Ev, .-_ZN13MethodBind1RCI7VariantRK8NodePathED0Ev
	.weak	_ZTV11MethodBind2IRK8NodePathRK7VariantE
	.section	.rodata._ZTV11MethodBind2IRK8NodePathRK7VariantE,"aG",@progbits,_ZTV11MethodBind2IRK8NodePathRK7VariantE,comdat
	.align 8
	.type	_ZTV11MethodBind2IRK8NodePathRK7VariantE, @object
	.size	_ZTV11MethodBind2IRK8NodePathRK7VariantE, 56
_ZTV11MethodBind2IRK8NodePathRK7VariantE:
	.quad	0
	.quad	_ZTI11MethodBind2IRK8NodePathRK7VariantE
	.quad	_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv
	.quad	_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind2IRK8NodePathRK7VariantED1Ev
	.quad	_ZN11MethodBind2IRK8NodePathRK7VariantED0Ev
	.section	.text._ZN11MethodBind2IRK8NodePathRK7VariantED2Ev,"axG",@progbits,_ZN11MethodBind2IRK8NodePathRK7VariantED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK8NodePathRK7VariantED2Ev
	.type	_ZN11MethodBind2IRK8NodePathRK7VariantED2Ev, @function
_ZN11MethodBind2IRK8NodePathRK7VariantED2Ev:
.LFB3604:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movl	$_ZTV11MethodBind2IRK8NodePathRK7VariantE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44213._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3604:
	.size	_ZN11MethodBind2IRK8NodePathRK7VariantED2Ev, .-_ZN11MethodBind2IRK8NodePathRK7VariantED2Ev
	.weak	_ZN11MethodBind2IRK8NodePathRK7VariantED1Ev
	.set	_ZN11MethodBind2IRK8NodePathRK7VariantED1Ev,_ZN11MethodBind2IRK8NodePathRK7VariantED2Ev
	.section	.text._ZN11MethodBind2IRK8NodePathRK7VariantED0Ev,"axG",@progbits,_ZN11MethodBind2IRK8NodePathRK7VariantED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK8NodePathRK7VariantED0Ev
	.type	_ZN11MethodBind2IRK8NodePathRK7VariantED0Ev, @function
_ZN11MethodBind2IRK8NodePathRK7VariantED0Ev:
.LFB3606:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind2IRK8NodePathRK7VariantED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3606:
	.size	_ZN11MethodBind2IRK8NodePathRK7VariantED0Ev, .-_ZN11MethodBind2IRK8NodePathRK7VariantED0Ev
	.weak	_ZTV13MethodBind1RCI7VariantRK6StringE
	.section	.rodata._ZTV13MethodBind1RCI7VariantRK6StringE,"aG",@progbits,_ZTV13MethodBind1RCI7VariantRK6StringE,comdat
	.align 8
	.type	_ZTV13MethodBind1RCI7VariantRK6StringE, @object
	.size	_ZTV13MethodBind1RCI7VariantRK6StringE, 56
_ZTV13MethodBind1RCI7VariantRK6StringE:
	.quad	0
	.quad	_ZTI13MethodBind1RCI7VariantRK6StringE
	.quad	_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv
	.quad	_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind1RCI7VariantRK6StringED1Ev
	.quad	_ZN13MethodBind1RCI7VariantRK6StringED0Ev
	.section	.text._ZN13MethodBind1RCI7VariantRK6StringED2Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK6StringED2Ev
	.type	_ZN13MethodBind1RCI7VariantRK6StringED2Ev, @function
_ZN13MethodBind1RCI7VariantRK6StringED2Ev:
.LFB3608:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movl	$_ZTV13MethodBind1RCI7VariantRK6StringE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44111._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3608:
	.size	_ZN13MethodBind1RCI7VariantRK6StringED2Ev, .-_ZN13MethodBind1RCI7VariantRK6StringED2Ev
	.weak	_ZN13MethodBind1RCI7VariantRK6StringED1Ev
	.set	_ZN13MethodBind1RCI7VariantRK6StringED1Ev,_ZN13MethodBind1RCI7VariantRK6StringED2Ev
	.section	.text._ZN13MethodBind1RCI7VariantRK6StringED0Ev,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK6StringED0Ev
	.type	_ZN13MethodBind1RCI7VariantRK6StringED0Ev, @function
_ZN13MethodBind1RCI7VariantRK6StringED0Ev:
.LFB3610:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind1RCI7VariantRK6StringED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3610:
	.size	_ZN13MethodBind1RCI7VariantRK6StringED0Ev, .-_ZN13MethodBind1RCI7VariantRK6StringED0Ev
	.weak	_ZTV11MethodBind2IRK6StringRK7VariantE
	.section	.rodata._ZTV11MethodBind2IRK6StringRK7VariantE,"aG",@progbits,_ZTV11MethodBind2IRK6StringRK7VariantE,comdat
	.align 8
	.type	_ZTV11MethodBind2IRK6StringRK7VariantE, @object
	.size	_ZTV11MethodBind2IRK6StringRK7VariantE, 56
_ZTV11MethodBind2IRK6StringRK7VariantE:
	.quad	0
	.quad	_ZTI11MethodBind2IRK6StringRK7VariantE
	.quad	_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv
	.quad	_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind2IRK6StringRK7VariantED1Ev
	.quad	_ZN11MethodBind2IRK6StringRK7VariantED0Ev
	.section	.text._ZN11MethodBind2IRK6StringRK7VariantED2Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK7VariantED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK7VariantED2Ev
	.type	_ZN11MethodBind2IRK6StringRK7VariantED2Ev, @function
_ZN11MethodBind2IRK6StringRK7VariantED2Ev:
.LFB3612:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movl	$_ZTV11MethodBind2IRK6StringRK7VariantE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.44009._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3612:
	.size	_ZN11MethodBind2IRK6StringRK7VariantED2Ev, .-_ZN11MethodBind2IRK6StringRK7VariantED2Ev
	.weak	_ZN11MethodBind2IRK6StringRK7VariantED1Ev
	.set	_ZN11MethodBind2IRK6StringRK7VariantED1Ev,_ZN11MethodBind2IRK6StringRK7VariantED2Ev
	.section	.text._ZN11MethodBind2IRK6StringRK7VariantED0Ev,"axG",@progbits,_ZN11MethodBind2IRK6StringRK7VariantED5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK7VariantED0Ev
	.type	_ZN11MethodBind2IRK6StringRK7VariantED0Ev, @function
_ZN11MethodBind2IRK6StringRK7VariantED0Ev:
.LFB3614:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1460: class MethodBind2 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind2IRK6StringRK7VariantED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3614:
	.size	_ZN11MethodBind2IRK6StringRK7VariantED0Ev, .-_ZN11MethodBind2IRK6StringRK7VariantED0Ev
	.weak	_ZTV13MethodBind1RCIbRK6StringE
	.section	.rodata._ZTV13MethodBind1RCIbRK6StringE,"aG",@progbits,_ZTV13MethodBind1RCIbRK6StringE,comdat
	.align 8
	.type	_ZTV13MethodBind1RCIbRK6StringE, @object
	.size	_ZTV13MethodBind1RCIbRK6StringE, 56
_ZTV13MethodBind1RCIbRK6StringE:
	.quad	0
	.quad	_ZTI13MethodBind1RCIbRK6StringE
	.quad	_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv
	.quad	_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind1RCIbRK6StringED1Ev
	.quad	_ZN13MethodBind1RCIbRK6StringED0Ev
	.section	.text._ZN13MethodBind1RCIbRK6StringED2Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK6StringED2Ev
	.type	_ZN13MethodBind1RCIbRK6StringED2Ev, @function
_ZN13MethodBind1RCIbRK6StringED2Ev:
.LFB3616:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movl	$_ZTV13MethodBind1RCIbRK6StringE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.43907._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3616:
	.size	_ZN13MethodBind1RCIbRK6StringED2Ev, .-_ZN13MethodBind1RCIbRK6StringED2Ev
	.weak	_ZN13MethodBind1RCIbRK6StringED1Ev
	.set	_ZN13MethodBind1RCIbRK6StringED1Ev,_ZN13MethodBind1RCIbRK6StringED2Ev
	.section	.text._ZN13MethodBind1RCIbRK6StringED0Ev,"axG",@progbits,_ZN13MethodBind1RCIbRK6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK6StringED0Ev
	.type	_ZN13MethodBind1RCIbRK6StringED0Ev, @function
_ZN13MethodBind1RCIbRK6StringED0Ev:
.LFB3618:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:1274: class MethodBind1RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind1RCIbRK6StringED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3618:
	.size	_ZN13MethodBind1RCIbRK6StringED0Ev, .-_ZN13MethodBind1RCIbRK6StringED0Ev
	.weak	_ZTV13MethodBind0RCI6StringE
	.section	.rodata._ZTV13MethodBind0RCI6StringE,"aG",@progbits,_ZTV13MethodBind0RCI6StringE,comdat
	.align 8
	.type	_ZTV13MethodBind0RCI6StringE, @object
	.size	_ZTV13MethodBind0RCI6StringE, 56
_ZTV13MethodBind0RCI6StringE:
	.quad	0
	.quad	_ZTI13MethodBind0RCI6StringE
	.quad	_ZNK13MethodBind0RCI6StringE18get_instance_classEv
	.quad	_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN13MethodBind0RCI6StringED1Ev
	.quad	_ZN13MethodBind0RCI6StringED0Ev
	.section	.text._ZN13MethodBind0RCI6StringED2Ev,"axG",@progbits,_ZN13MethodBind0RCI6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6StringED2Ev
	.type	_ZN13MethodBind0RCI6StringED2Ev, @function
_ZN13MethodBind0RCI6StringED2Ev:
.LFB3620:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movl	$_ZTV13MethodBind0RCI6StringE+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.43805._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3620:
	.size	_ZN13MethodBind0RCI6StringED2Ev, .-_ZN13MethodBind0RCI6StringED2Ev
	.weak	_ZN13MethodBind0RCI6StringED1Ev
	.set	_ZN13MethodBind0RCI6StringED1Ev,_ZN13MethodBind0RCI6StringED2Ev
	.section	.text._ZN13MethodBind0RCI6StringED0Ev,"axG",@progbits,_ZN13MethodBind0RCI6StringED5Ev,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6StringED0Ev
	.type	_ZN13MethodBind0RCI6StringED0Ev, @function
_ZN13MethodBind0RCI6StringED0Ev:
.LFB3622:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:538: class MethodBind0RC : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN13MethodBind0RCI6StringED1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3622:
	.size	_ZN13MethodBind0RCI6StringED0Ev, .-_ZN13MethodBind0RCI6StringED0Ev
	.weak	_ZTVN10PoolVectorI6StringE5WriteE
	.section	.rodata._ZTVN10PoolVectorI6StringE5WriteE,"aG",@progbits,_ZTVN10PoolVectorI6StringE5WriteE,comdat
	.align 8
	.type	_ZTVN10PoolVectorI6StringE5WriteE, @object
	.size	_ZTVN10PoolVectorI6StringE5WriteE, 32
_ZTVN10PoolVectorI6StringE5WriteE:
	.quad	0
	.quad	_ZTIN10PoolVectorI6StringE5WriteE
	.quad	_ZN10PoolVectorI6StringE5WriteD1Ev
	.quad	_ZN10PoolVectorI6StringE5WriteD0Ev
	.weak	_ZTVN10PoolVectorI6StringE6AccessE
	.section	.rodata._ZTVN10PoolVectorI6StringE6AccessE,"aG",@progbits,_ZTVN10PoolVectorI6StringE6AccessE,comdat
	.align 8
	.type	_ZTVN10PoolVectorI6StringE6AccessE, @object
	.size	_ZTVN10PoolVectorI6StringE6AccessE, 32
_ZTVN10PoolVectorI6StringE6AccessE:
	.quad	0
	.quad	_ZTIN10PoolVectorI6StringE6AccessE
	.quad	_ZN10PoolVectorI6StringE6AccessD1Ev
	.quad	_ZN10PoolVectorI6StringE6AccessD0Ev
	.weak	_ZTV6Object
	.section	.rodata._ZTV6Object,"aG",@progbits,_ZTV6Object,comdat
	.align 8
	.type	_ZTV6Object, @object
	.size	_ZTV6Object, 184
_ZTV6Object:
	.quad	0
	.quad	_ZTI6Object
	.quad	_ZN6Object18_initialize_classvEv
	.quad	_ZN6Object5_setvERK10StringNameRK7Variant
	.quad	_ZNK6Object5_getvERK10StringNameR7Variant
	.quad	_ZNK6Object19_get_property_listvEP4ListI12PropertyInfo16DefaultAllocatorEb
	.quad	_ZN6Object14_notificationvEib
	.quad	_ZN6Object17_changed_callbackEPS_PKc
	.quad	_ZNK6Object16_get_class_namevEv
	.quad	_ZNK6Object18_validate_propertyER12PropertyInfo
	.quad	_ZNK6Object9get_classEv
	.quad	_ZNK6Object14get_save_classEv
	.quad	_ZNK6Object8is_classERK6String
	.quad	_ZNK6Object12is_class_ptrEPv
	.quad	_ZN6Object4callERK10StringNamePPK7VariantiRNS3_9CallErrorE
	.quad	_ZN6Object15call_multilevelERK10StringNamePPK7Varianti
	.quad	_ZN6Object24call_multilevel_reversedERK10StringNamePPK7Varianti
	.quad	_ZNK6Object6getvarERK7VariantPb
	.quad	_ZN6Object6setvarERK7VariantS2_Pb
	.quad	_ZNK6Object24get_translatable_stringsEP4ListI6String16DefaultAllocatorE
	.quad	_ZNK6Object20get_argument_optionsERK10StringNameiP4ListI6String16DefaultAllocatorE
	.quad	_ZN6ObjectD1Ev
	.quad	_ZN6ObjectD0Ev
	.weak	_ZTV11MethodBind0
	.section	.rodata._ZTV11MethodBind0,"aG",@progbits,_ZTV11MethodBind0,comdat
	.align 8
	.type	_ZTV11MethodBind0, @object
	.size	_ZTV11MethodBind0, 56
_ZTV11MethodBind0:
	.quad	0
	.quad	_ZTI11MethodBind0
	.quad	_ZNK11MethodBind018get_instance_classEv
	.quad	_ZN11MethodBind04callEP6ObjectPPK7VariantiRNS2_9CallErrorE
	.quad	_ZNK10MethodBind9is_varargEv
	.quad	_ZN11MethodBind0D1Ev
	.quad	_ZN11MethodBind0D0Ev
	.section	.text._ZN11MethodBind0D2Ev,"axG",@progbits,_ZN11MethodBind0D5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind0D2Ev
	.type	_ZN11MethodBind0D2Ev, @function
_ZN11MethodBind0D2Ev:
.LFB3628:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:4: class MethodBind0 : public MethodBind {
	movl	$_ZTV11MethodBind0+16, %edx	#, _1
	movq	-8(%rbp), %rax	# this, tmp85
	movq	%rdx, (%rax)	# _1, this_5(D)->D.23117._vptr.MethodBind
	movq	-8(%rbp), %rax	# this, tmp86
	addq	$56, %rax	#, _2
	movq	%rax, %rdi	# _2,
	call	_ZN10StringNameD1Ev	#
	movq	-8(%rbp), %rax	# this, _3
	movq	%rax, %rdi	# _3,
	call	_ZN10MethodBindD2Ev	#
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3628:
	.size	_ZN11MethodBind0D2Ev, .-_ZN11MethodBind0D2Ev
	.weak	_ZN11MethodBind0D1Ev
	.set	_ZN11MethodBind0D1Ev,_ZN11MethodBind0D2Ev
	.section	.text._ZN11MethodBind0D0Ev,"axG",@progbits,_ZN11MethodBind0D5Ev,comdat
	.align 2
	.weak	_ZN11MethodBind0D0Ev
	.type	_ZN11MethodBind0D0Ev, @function
_ZN11MethodBind0D0Ev:
.LFB3630:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.gen.inc:4: class MethodBind0 : public MethodBind {
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN11MethodBind0D1Ev	#
	movq	-8(%rbp), %rax	# this, tmp83
	movl	$80, %esi	#,
	movq	%rax, %rdi	# tmp83,
	call	_ZdlPvm	#
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3630:
	.size	_ZN11MethodBind0D0Ev, .-_ZN11MethodBind0D0Ev
	.weak	_ZTIN10PoolVectorI6StringE4ReadE
	.section	.rodata._ZTIN10PoolVectorI6StringE4ReadE,"aG",@progbits,_ZTIN10PoolVectorI6StringE4ReadE,comdat
	.align 8
	.type	_ZTIN10PoolVectorI6StringE4ReadE, @object
	.size	_ZTIN10PoolVectorI6StringE4ReadE, 24
_ZTIN10PoolVectorI6StringE4ReadE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTSN10PoolVectorI6StringE4ReadE
# <anonymous>:
	.quad	_ZTIN10PoolVectorI6StringE6AccessE
	.weak	_ZTSN10PoolVectorI6StringE4ReadE
	.section	.rodata._ZTSN10PoolVectorI6StringE4ReadE,"aG",@progbits,_ZTSN10PoolVectorI6StringE4ReadE,comdat
	.align 16
	.type	_ZTSN10PoolVectorI6StringE4ReadE, @object
	.size	_ZTSN10PoolVectorI6StringE4ReadE, 29
_ZTSN10PoolVectorI6StringE4ReadE:
	.string	"N10PoolVectorI6StringE4ReadE"
	.weak	_ZTI13MethodBind1RCI10StringNameRKS0_E
	.section	.rodata._ZTI13MethodBind1RCI10StringNameRKS0_E,"aG",@progbits,_ZTI13MethodBind1RCI10StringNameRKS0_E,comdat
	.align 8
	.type	_ZTI13MethodBind1RCI10StringNameRKS0_E, @object
	.size	_ZTI13MethodBind1RCI10StringNameRKS0_E, 24
_ZTI13MethodBind1RCI10StringNameRKS0_E:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind1RCI10StringNameRKS0_E
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind1RCI10StringNameRKS0_E
	.section	.rodata._ZTS13MethodBind1RCI10StringNameRKS0_E,"aG",@progbits,_ZTS13MethodBind1RCI10StringNameRKS0_E,comdat
	.align 32
	.type	_ZTS13MethodBind1RCI10StringNameRKS0_E, @object
	.size	_ZTS13MethodBind1RCI10StringNameRKS0_E, 35
_ZTS13MethodBind1RCI10StringNameRKS0_E:
	.string	"13MethodBind1RCI10StringNameRKS0_E"
	.weak	_ZTI13MethodBind0RCIbE
	.section	.rodata._ZTI13MethodBind0RCIbE,"aG",@progbits,_ZTI13MethodBind0RCIbE,comdat
	.align 8
	.type	_ZTI13MethodBind0RCIbE, @object
	.size	_ZTI13MethodBind0RCIbE, 24
_ZTI13MethodBind0RCIbE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind0RCIbE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind0RCIbE
	.section	.rodata._ZTS13MethodBind0RCIbE,"aG",@progbits,_ZTS13MethodBind0RCIbE,comdat
	.align 16
	.type	_ZTS13MethodBind0RCIbE, @object
	.size	_ZTS13MethodBind0RCIbE, 19
_ZTS13MethodBind0RCIbE:
	.string	"13MethodBind0RCIbE"
	.weak	_ZTI11MethodBind1IbE
	.section	.rodata._ZTI11MethodBind1IbE,"aG",@progbits,_ZTI11MethodBind1IbE,comdat
	.align 8
	.type	_ZTI11MethodBind1IbE, @object
	.size	_ZTI11MethodBind1IbE, 24
_ZTI11MethodBind1IbE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind1IbE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind1IbE
	.section	.rodata._ZTS11MethodBind1IbE,"aG",@progbits,_ZTS11MethodBind1IbE,comdat
	.align 16
	.type	_ZTS11MethodBind1IbE, @object
	.size	_ZTS11MethodBind1IbE, 17
_ZTS11MethodBind1IbE:
	.string	"11MethodBind1IbE"
	.weak	_ZTI13MethodBind3RCIbRK10StringNameP6ObjectS2_E
	.section	.rodata._ZTI13MethodBind3RCIbRK10StringNameP6ObjectS2_E,"aG",@progbits,_ZTI13MethodBind3RCIbRK10StringNameP6ObjectS2_E,comdat
	.align 8
	.type	_ZTI13MethodBind3RCIbRK10StringNameP6ObjectS2_E, @object
	.size	_ZTI13MethodBind3RCIbRK10StringNameP6ObjectS2_E, 24
_ZTI13MethodBind3RCIbRK10StringNameP6ObjectS2_E:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind3RCIbRK10StringNameP6ObjectS2_E
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind3RCIbRK10StringNameP6ObjectS2_E
	.section	.rodata._ZTS13MethodBind3RCIbRK10StringNameP6ObjectS2_E,"aG",@progbits,_ZTS13MethodBind3RCIbRK10StringNameP6ObjectS2_E,comdat
	.align 32
	.type	_ZTS13MethodBind3RCIbRK10StringNameP6ObjectS2_E, @object
	.size	_ZTS13MethodBind3RCIbRK10StringNameP6ObjectS2_E, 44
_ZTS13MethodBind3RCIbRK10StringNameP6ObjectS2_E:
	.string	"13MethodBind3RCIbRK10StringNameP6ObjectS2_E"
	.weak	_ZTI11MethodBind3IRK10StringNameP6ObjectS2_E
	.section	.rodata._ZTI11MethodBind3IRK10StringNameP6ObjectS2_E,"aG",@progbits,_ZTI11MethodBind3IRK10StringNameP6ObjectS2_E,comdat
	.align 8
	.type	_ZTI11MethodBind3IRK10StringNameP6ObjectS2_E, @object
	.size	_ZTI11MethodBind3IRK10StringNameP6ObjectS2_E, 24
_ZTI11MethodBind3IRK10StringNameP6ObjectS2_E:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind3IRK10StringNameP6ObjectS2_E
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind3IRK10StringNameP6ObjectS2_E
	.section	.rodata._ZTS11MethodBind3IRK10StringNameP6ObjectS2_E,"aG",@progbits,_ZTS11MethodBind3IRK10StringNameP6ObjectS2_E,comdat
	.align 32
	.type	_ZTS11MethodBind3IRK10StringNameP6ObjectS2_E, @object
	.size	_ZTS11MethodBind3IRK10StringNameP6ObjectS2_E, 41
_ZTS11MethodBind3IRK10StringNameP6ObjectS2_E:
	.string	"11MethodBind3IRK10StringNameP6ObjectS2_E"
	.weak	_ZTI12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE
	.section	.rodata._ZTI12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE,"aG",@progbits,_ZTI12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE,comdat
	.align 8
	.type	_ZTI12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE, @object
	.size	_ZTI12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE, 24
_ZTI12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE
	.section	.rodata._ZTS12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE,"aG",@progbits,_ZTS12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE,comdat
	.align 32
	.type	_ZTS12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE, @object
	.size	_ZTS12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE, 68
_ZTS12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE:
	.string	"12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE"
	.weak	_ZTI13MethodBind1RCI5ArrayRK6StringE
	.section	.rodata._ZTI13MethodBind1RCI5ArrayRK6StringE,"aG",@progbits,_ZTI13MethodBind1RCI5ArrayRK6StringE,comdat
	.align 8
	.type	_ZTI13MethodBind1RCI5ArrayRK6StringE, @object
	.size	_ZTI13MethodBind1RCI5ArrayRK6StringE, 24
_ZTI13MethodBind1RCI5ArrayRK6StringE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind1RCI5ArrayRK6StringE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind1RCI5ArrayRK6StringE
	.section	.rodata._ZTS13MethodBind1RCI5ArrayRK6StringE,"aG",@progbits,_ZTS13MethodBind1RCI5ArrayRK6StringE,comdat
	.align 32
	.type	_ZTS13MethodBind1RCI5ArrayRK6StringE, @object
	.size	_ZTS13MethodBind1RCI5ArrayRK6StringE, 33
_ZTS13MethodBind1RCI5ArrayRK6StringE:
	.string	"13MethodBind1RCI5ArrayRK6StringE"
	.weak	_ZTI12MethodBind2RI7VariantRK10StringNameRK5ArrayE
	.section	.rodata._ZTI12MethodBind2RI7VariantRK10StringNameRK5ArrayE,"aG",@progbits,_ZTI12MethodBind2RI7VariantRK10StringNameRK5ArrayE,comdat
	.align 8
	.type	_ZTI12MethodBind2RI7VariantRK10StringNameRK5ArrayE, @object
	.size	_ZTI12MethodBind2RI7VariantRK10StringNameRK5ArrayE, 24
_ZTI12MethodBind2RI7VariantRK10StringNameRK5ArrayE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS12MethodBind2RI7VariantRK10StringNameRK5ArrayE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS12MethodBind2RI7VariantRK10StringNameRK5ArrayE
	.section	.rodata._ZTS12MethodBind2RI7VariantRK10StringNameRK5ArrayE,"aG",@progbits,_ZTS12MethodBind2RI7VariantRK10StringNameRK5ArrayE,comdat
	.align 32
	.type	_ZTS12MethodBind2RI7VariantRK10StringNameRK5ArrayE, @object
	.size	_ZTS12MethodBind2RI7VariantRK10StringNameRK5ArrayE, 47
_ZTS12MethodBind2RI7VariantRK10StringNameRK5ArrayE:
	.string	"12MethodBind2RI7VariantRK10StringNameRK5ArrayE"
	.weak	_ZTI11MethodBind2IRK10StringNameRK7VariantE
	.section	.rodata._ZTI11MethodBind2IRK10StringNameRK7VariantE,"aG",@progbits,_ZTI11MethodBind2IRK10StringNameRK7VariantE,comdat
	.align 8
	.type	_ZTI11MethodBind2IRK10StringNameRK7VariantE, @object
	.size	_ZTI11MethodBind2IRK10StringNameRK7VariantE, 24
_ZTI11MethodBind2IRK10StringNameRK7VariantE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind2IRK10StringNameRK7VariantE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind2IRK10StringNameRK7VariantE
	.section	.rodata._ZTS11MethodBind2IRK10StringNameRK7VariantE,"aG",@progbits,_ZTS11MethodBind2IRK10StringNameRK7VariantE,comdat
	.align 32
	.type	_ZTS11MethodBind2IRK10StringNameRK7VariantE, @object
	.size	_ZTS11MethodBind2IRK10StringNameRK7VariantE, 40
_ZTS11MethodBind2IRK10StringNameRK7VariantE:
	.string	"11MethodBind2IRK10StringNameRK7VariantE"
	.weak	_ZTI16MethodBindVarArgI6ObjectE
	.section	.rodata._ZTI16MethodBindVarArgI6ObjectE,"aG",@progbits,_ZTI16MethodBindVarArgI6ObjectE,comdat
	.align 8
	.type	_ZTI16MethodBindVarArgI6ObjectE, @object
	.size	_ZTI16MethodBindVarArgI6ObjectE, 24
_ZTI16MethodBindVarArgI6ObjectE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS16MethodBindVarArgI6ObjectE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS16MethodBindVarArgI6ObjectE
	.section	.rodata._ZTS16MethodBindVarArgI6ObjectE,"aG",@progbits,_ZTS16MethodBindVarArgI6ObjectE,comdat
	.align 16
	.type	_ZTS16MethodBindVarArgI6ObjectE, @object
	.size	_ZTS16MethodBindVarArgI6ObjectE, 28
_ZTS16MethodBindVarArgI6ObjectE:
	.string	"16MethodBindVarArgI6ObjectE"
	.weak	_ZTI13MethodBind1RCIbRK10StringNameE
	.section	.rodata._ZTI13MethodBind1RCIbRK10StringNameE,"aG",@progbits,_ZTI13MethodBind1RCIbRK10StringNameE,comdat
	.align 8
	.type	_ZTI13MethodBind1RCIbRK10StringNameE, @object
	.size	_ZTI13MethodBind1RCIbRK10StringNameE, 24
_ZTI13MethodBind1RCIbRK10StringNameE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind1RCIbRK10StringNameE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind1RCIbRK10StringNameE
	.section	.rodata._ZTS13MethodBind1RCIbRK10StringNameE,"aG",@progbits,_ZTS13MethodBind1RCIbRK10StringNameE,comdat
	.align 32
	.type	_ZTS13MethodBind1RCIbRK10StringNameE, @object
	.size	_ZTS13MethodBind1RCIbRK10StringNameE, 33
_ZTS13MethodBind1RCIbRK10StringNameE:
	.string	"13MethodBind1RCIbRK10StringNameE"
	.weak	_ZTI11MethodBind2IRK6StringRK5ArrayE
	.section	.rodata._ZTI11MethodBind2IRK6StringRK5ArrayE,"aG",@progbits,_ZTI11MethodBind2IRK6StringRK5ArrayE,comdat
	.align 8
	.type	_ZTI11MethodBind2IRK6StringRK5ArrayE, @object
	.size	_ZTI11MethodBind2IRK6StringRK5ArrayE, 24
_ZTI11MethodBind2IRK6StringRK5ArrayE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind2IRK6StringRK5ArrayE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind2IRK6StringRK5ArrayE
	.section	.rodata._ZTS11MethodBind2IRK6StringRK5ArrayE,"aG",@progbits,_ZTS11MethodBind2IRK6StringRK5ArrayE,comdat
	.align 32
	.type	_ZTS11MethodBind2IRK6StringRK5ArrayE, @object
	.size	_ZTS11MethodBind2IRK6StringRK5ArrayE, 33
_ZTS11MethodBind2IRK6StringRK5ArrayE:
	.string	"11MethodBind2IRK6StringRK5ArrayE"
	.weak	_ZTI13MethodBind0RCI10PoolVectorI6StringEE
	.section	.rodata._ZTI13MethodBind0RCI10PoolVectorI6StringEE,"aG",@progbits,_ZTI13MethodBind0RCI10PoolVectorI6StringEE,comdat
	.align 8
	.type	_ZTI13MethodBind0RCI10PoolVectorI6StringEE, @object
	.size	_ZTI13MethodBind0RCI10PoolVectorI6StringEE, 24
_ZTI13MethodBind0RCI10PoolVectorI6StringEE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind0RCI10PoolVectorI6StringEE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind0RCI10PoolVectorI6StringEE
	.section	.rodata._ZTS13MethodBind0RCI10PoolVectorI6StringEE,"aG",@progbits,_ZTS13MethodBind0RCI10PoolVectorI6StringEE,comdat
	.align 32
	.type	_ZTS13MethodBind0RCI10PoolVectorI6StringEE, @object
	.size	_ZTS13MethodBind0RCI10PoolVectorI6StringEE, 39
_ZTS13MethodBind0RCI10PoolVectorI6StringEE:
	.string	"13MethodBind0RCI10PoolVectorI6StringEE"
	.weak	_ZTI11MethodBind1IRK6StringE
	.section	.rodata._ZTI11MethodBind1IRK6StringE,"aG",@progbits,_ZTI11MethodBind1IRK6StringE,comdat
	.align 8
	.type	_ZTI11MethodBind1IRK6StringE, @object
	.size	_ZTI11MethodBind1IRK6StringE, 24
_ZTI11MethodBind1IRK6StringE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind1IRK6StringE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind1IRK6StringE
	.section	.rodata._ZTS11MethodBind1IRK6StringE,"aG",@progbits,_ZTS11MethodBind1IRK6StringE,comdat
	.align 16
	.type	_ZTS11MethodBind1IRK6StringE, @object
	.size	_ZTS11MethodBind1IRK6StringE, 25
_ZTS11MethodBind1IRK6StringE:
	.string	"11MethodBind1IRK6StringE"
	.weak	_ZTI13MethodBind0RCI6RefPtrE
	.section	.rodata._ZTI13MethodBind0RCI6RefPtrE,"aG",@progbits,_ZTI13MethodBind0RCI6RefPtrE,comdat
	.align 8
	.type	_ZTI13MethodBind0RCI6RefPtrE, @object
	.size	_ZTI13MethodBind0RCI6RefPtrE, 24
_ZTI13MethodBind0RCI6RefPtrE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind0RCI6RefPtrE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind0RCI6RefPtrE
	.section	.rodata._ZTS13MethodBind0RCI6RefPtrE,"aG",@progbits,_ZTS13MethodBind0RCI6RefPtrE,comdat
	.align 16
	.type	_ZTS13MethodBind0RCI6RefPtrE, @object
	.size	_ZTS13MethodBind0RCI6RefPtrE, 25
_ZTS13MethodBind0RCI6RefPtrE:
	.string	"13MethodBind0RCI6RefPtrE"
	.weak	_ZTI11MethodBind1IRK6RefPtrE
	.section	.rodata._ZTI11MethodBind1IRK6RefPtrE,"aG",@progbits,_ZTI11MethodBind1IRK6RefPtrE,comdat
	.align 8
	.type	_ZTI11MethodBind1IRK6RefPtrE, @object
	.size	_ZTI11MethodBind1IRK6RefPtrE, 24
_ZTI11MethodBind1IRK6RefPtrE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind1IRK6RefPtrE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind1IRK6RefPtrE
	.section	.rodata._ZTS11MethodBind1IRK6RefPtrE,"aG",@progbits,_ZTS11MethodBind1IRK6RefPtrE,comdat
	.align 16
	.type	_ZTS11MethodBind1IRK6RefPtrE, @object
	.size	_ZTS11MethodBind1IRK6RefPtrE, 25
_ZTS11MethodBind1IRK6RefPtrE:
	.string	"11MethodBind1IRK6RefPtrE"
	.weak	_ZTI13MethodBind0RCImE
	.section	.rodata._ZTI13MethodBind0RCImE,"aG",@progbits,_ZTI13MethodBind0RCImE,comdat
	.align 8
	.type	_ZTI13MethodBind0RCImE, @object
	.size	_ZTI13MethodBind0RCImE, 24
_ZTI13MethodBind0RCImE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind0RCImE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind0RCImE
	.section	.rodata._ZTS13MethodBind0RCImE,"aG",@progbits,_ZTS13MethodBind0RCImE,comdat
	.align 16
	.type	_ZTS13MethodBind0RCImE, @object
	.size	_ZTS13MethodBind0RCImE, 19
_ZTS13MethodBind0RCImE:
	.string	"13MethodBind0RCImE"
	.weak	_ZTI12MethodBind0RI6StringE
	.section	.rodata._ZTI12MethodBind0RI6StringE,"aG",@progbits,_ZTI12MethodBind0RI6StringE,comdat
	.align 8
	.type	_ZTI12MethodBind0RI6StringE, @object
	.size	_ZTI12MethodBind0RI6StringE, 24
_ZTI12MethodBind0RI6StringE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS12MethodBind0RI6StringE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS12MethodBind0RI6StringE
	.section	.rodata._ZTS12MethodBind0RI6StringE,"aG",@progbits,_ZTS12MethodBind0RI6StringE,comdat
	.align 16
	.type	_ZTS12MethodBind0RI6StringE, @object
	.size	_ZTS12MethodBind0RI6StringE, 24
_ZTS12MethodBind0RI6StringE:
	.string	"12MethodBind0RI6StringE"
	.weak	_ZTI11MethodBind2IibE
	.section	.rodata._ZTI11MethodBind2IibE,"aG",@progbits,_ZTI11MethodBind2IibE,comdat
	.align 8
	.type	_ZTI11MethodBind2IibE, @object
	.size	_ZTI11MethodBind2IibE, 24
_ZTI11MethodBind2IibE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind2IibE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind2IibE
	.section	.rodata._ZTS11MethodBind2IibE,"aG",@progbits,_ZTS11MethodBind2IibE,comdat
	.align 16
	.type	_ZTS11MethodBind2IibE, @object
	.size	_ZTS11MethodBind2IibE, 18
_ZTS11MethodBind2IibE:
	.string	"11MethodBind2IibE"
	.weak	_ZTI13MethodBind0RCI5ArrayE
	.section	.rodata._ZTI13MethodBind0RCI5ArrayE,"aG",@progbits,_ZTI13MethodBind0RCI5ArrayE,comdat
	.align 8
	.type	_ZTI13MethodBind0RCI5ArrayE, @object
	.size	_ZTI13MethodBind0RCI5ArrayE, 24
_ZTI13MethodBind0RCI5ArrayE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind0RCI5ArrayE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind0RCI5ArrayE
	.section	.rodata._ZTS13MethodBind0RCI5ArrayE,"aG",@progbits,_ZTS13MethodBind0RCI5ArrayE,comdat
	.align 16
	.type	_ZTS13MethodBind0RCI5ArrayE, @object
	.size	_ZTS13MethodBind0RCI5ArrayE, 24
_ZTS13MethodBind0RCI5ArrayE:
	.string	"13MethodBind0RCI5ArrayE"
	.weak	_ZTI13MethodBind1RCI7VariantRK8NodePathE
	.section	.rodata._ZTI13MethodBind1RCI7VariantRK8NodePathE,"aG",@progbits,_ZTI13MethodBind1RCI7VariantRK8NodePathE,comdat
	.align 8
	.type	_ZTI13MethodBind1RCI7VariantRK8NodePathE, @object
	.size	_ZTI13MethodBind1RCI7VariantRK8NodePathE, 24
_ZTI13MethodBind1RCI7VariantRK8NodePathE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind1RCI7VariantRK8NodePathE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind1RCI7VariantRK8NodePathE
	.section	.rodata._ZTS13MethodBind1RCI7VariantRK8NodePathE,"aG",@progbits,_ZTS13MethodBind1RCI7VariantRK8NodePathE,comdat
	.align 32
	.type	_ZTS13MethodBind1RCI7VariantRK8NodePathE, @object
	.size	_ZTS13MethodBind1RCI7VariantRK8NodePathE, 37
_ZTS13MethodBind1RCI7VariantRK8NodePathE:
	.string	"13MethodBind1RCI7VariantRK8NodePathE"
	.weak	_ZTI11MethodBind2IRK8NodePathRK7VariantE
	.section	.rodata._ZTI11MethodBind2IRK8NodePathRK7VariantE,"aG",@progbits,_ZTI11MethodBind2IRK8NodePathRK7VariantE,comdat
	.align 8
	.type	_ZTI11MethodBind2IRK8NodePathRK7VariantE, @object
	.size	_ZTI11MethodBind2IRK8NodePathRK7VariantE, 24
_ZTI11MethodBind2IRK8NodePathRK7VariantE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind2IRK8NodePathRK7VariantE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind2IRK8NodePathRK7VariantE
	.section	.rodata._ZTS11MethodBind2IRK8NodePathRK7VariantE,"aG",@progbits,_ZTS11MethodBind2IRK8NodePathRK7VariantE,comdat
	.align 32
	.type	_ZTS11MethodBind2IRK8NodePathRK7VariantE, @object
	.size	_ZTS11MethodBind2IRK8NodePathRK7VariantE, 37
_ZTS11MethodBind2IRK8NodePathRK7VariantE:
	.string	"11MethodBind2IRK8NodePathRK7VariantE"
	.weak	_ZTI13MethodBind1RCI7VariantRK6StringE
	.section	.rodata._ZTI13MethodBind1RCI7VariantRK6StringE,"aG",@progbits,_ZTI13MethodBind1RCI7VariantRK6StringE,comdat
	.align 8
	.type	_ZTI13MethodBind1RCI7VariantRK6StringE, @object
	.size	_ZTI13MethodBind1RCI7VariantRK6StringE, 24
_ZTI13MethodBind1RCI7VariantRK6StringE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind1RCI7VariantRK6StringE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind1RCI7VariantRK6StringE
	.section	.rodata._ZTS13MethodBind1RCI7VariantRK6StringE,"aG",@progbits,_ZTS13MethodBind1RCI7VariantRK6StringE,comdat
	.align 32
	.type	_ZTS13MethodBind1RCI7VariantRK6StringE, @object
	.size	_ZTS13MethodBind1RCI7VariantRK6StringE, 35
_ZTS13MethodBind1RCI7VariantRK6StringE:
	.string	"13MethodBind1RCI7VariantRK6StringE"
	.weak	_ZTI11MethodBind2IRK6StringRK7VariantE
	.section	.rodata._ZTI11MethodBind2IRK6StringRK7VariantE,"aG",@progbits,_ZTI11MethodBind2IRK6StringRK7VariantE,comdat
	.align 8
	.type	_ZTI11MethodBind2IRK6StringRK7VariantE, @object
	.size	_ZTI11MethodBind2IRK6StringRK7VariantE, 24
_ZTI11MethodBind2IRK6StringRK7VariantE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind2IRK6StringRK7VariantE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind2IRK6StringRK7VariantE
	.section	.rodata._ZTS11MethodBind2IRK6StringRK7VariantE,"aG",@progbits,_ZTS11MethodBind2IRK6StringRK7VariantE,comdat
	.align 32
	.type	_ZTS11MethodBind2IRK6StringRK7VariantE, @object
	.size	_ZTS11MethodBind2IRK6StringRK7VariantE, 35
_ZTS11MethodBind2IRK6StringRK7VariantE:
	.string	"11MethodBind2IRK6StringRK7VariantE"
	.weak	_ZTI13MethodBind1RCIbRK6StringE
	.section	.rodata._ZTI13MethodBind1RCIbRK6StringE,"aG",@progbits,_ZTI13MethodBind1RCIbRK6StringE,comdat
	.align 8
	.type	_ZTI13MethodBind1RCIbRK6StringE, @object
	.size	_ZTI13MethodBind1RCIbRK6StringE, 24
_ZTI13MethodBind1RCIbRK6StringE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind1RCIbRK6StringE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind1RCIbRK6StringE
	.section	.rodata._ZTS13MethodBind1RCIbRK6StringE,"aG",@progbits,_ZTS13MethodBind1RCIbRK6StringE,comdat
	.align 16
	.type	_ZTS13MethodBind1RCIbRK6StringE, @object
	.size	_ZTS13MethodBind1RCIbRK6StringE, 28
_ZTS13MethodBind1RCIbRK6StringE:
	.string	"13MethodBind1RCIbRK6StringE"
	.weak	_ZTI13MethodBind0RCI6StringE
	.section	.rodata._ZTI13MethodBind0RCI6StringE,"aG",@progbits,_ZTI13MethodBind0RCI6StringE,comdat
	.align 8
	.type	_ZTI13MethodBind0RCI6StringE, @object
	.size	_ZTI13MethodBind0RCI6StringE, 24
_ZTI13MethodBind0RCI6StringE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS13MethodBind0RCI6StringE
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS13MethodBind0RCI6StringE
	.section	.rodata._ZTS13MethodBind0RCI6StringE,"aG",@progbits,_ZTS13MethodBind0RCI6StringE,comdat
	.align 16
	.type	_ZTS13MethodBind0RCI6StringE, @object
	.size	_ZTS13MethodBind0RCI6StringE, 25
_ZTS13MethodBind0RCI6StringE:
	.string	"13MethodBind0RCI6StringE"
	.weak	_ZTIN10PoolVectorI6StringE5WriteE
	.section	.rodata._ZTIN10PoolVectorI6StringE5WriteE,"aG",@progbits,_ZTIN10PoolVectorI6StringE5WriteE,comdat
	.align 8
	.type	_ZTIN10PoolVectorI6StringE5WriteE, @object
	.size	_ZTIN10PoolVectorI6StringE5WriteE, 24
_ZTIN10PoolVectorI6StringE5WriteE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTSN10PoolVectorI6StringE5WriteE
# <anonymous>:
	.quad	_ZTIN10PoolVectorI6StringE6AccessE
	.weak	_ZTSN10PoolVectorI6StringE5WriteE
	.section	.rodata._ZTSN10PoolVectorI6StringE5WriteE,"aG",@progbits,_ZTSN10PoolVectorI6StringE5WriteE,comdat
	.align 16
	.type	_ZTSN10PoolVectorI6StringE5WriteE, @object
	.size	_ZTSN10PoolVectorI6StringE5WriteE, 30
_ZTSN10PoolVectorI6StringE5WriteE:
	.string	"N10PoolVectorI6StringE5WriteE"
	.weak	_ZTIN10PoolVectorI6StringE6AccessE
	.section	.rodata._ZTIN10PoolVectorI6StringE6AccessE,"aG",@progbits,_ZTIN10PoolVectorI6StringE6AccessE,comdat
	.align 8
	.type	_ZTIN10PoolVectorI6StringE6AccessE, @object
	.size	_ZTIN10PoolVectorI6StringE6AccessE, 16
_ZTIN10PoolVectorI6StringE6AccessE:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
# <anonymous>:
	.quad	_ZTSN10PoolVectorI6StringE6AccessE
	.weak	_ZTSN10PoolVectorI6StringE6AccessE
	.section	.rodata._ZTSN10PoolVectorI6StringE6AccessE,"aG",@progbits,_ZTSN10PoolVectorI6StringE6AccessE,comdat
	.align 16
	.type	_ZTSN10PoolVectorI6StringE6AccessE, @object
	.size	_ZTSN10PoolVectorI6StringE6AccessE, 31
_ZTSN10PoolVectorI6StringE6AccessE:
	.string	"N10PoolVectorI6StringE6AccessE"
	.weak	_ZTI6Script
	.section	.rodata._ZTI6Script,"aG",@progbits,_ZTI6Script,comdat
	.align 8
	.type	_ZTI6Script, @object
	.size	_ZTI6Script, 24
_ZTI6Script:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS6Script
# <anonymous>:
	.quad	_ZTI8Resource
	.weak	_ZTS6Script
	.section	.rodata._ZTS6Script,"aG",@progbits,_ZTS6Script,comdat
	.align 8
	.type	_ZTS6Script, @object
	.size	_ZTS6Script, 8
_ZTS6Script:
	.string	"6Script"
	.weak	_ZTI11MethodBind0
	.section	.rodata._ZTI11MethodBind0,"aG",@progbits,_ZTI11MethodBind0,comdat
	.align 8
	.type	_ZTI11MethodBind0, @object
	.size	_ZTI11MethodBind0, 24
_ZTI11MethodBind0:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
# <anonymous>:
	.quad	_ZTS11MethodBind0
# <anonymous>:
	.quad	_ZTI10MethodBind
	.weak	_ZTS11MethodBind0
	.section	.rodata._ZTS11MethodBind0,"aG",@progbits,_ZTS11MethodBind0,comdat
	.align 8
	.type	_ZTS11MethodBind0, @object
	.size	_ZTS11MethodBind0, 14
_ZTS11MethodBind0:
	.string	"11MethodBind0"
	.weak	_ZTI6Object
	.section	.rodata._ZTI6Object,"aG",@progbits,_ZTI6Object,comdat
	.align 8
	.type	_ZTI6Object, @object
	.size	_ZTI6Object, 16
_ZTI6Object:
# <anonymous>:
# <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
# <anonymous>:
	.quad	_ZTS6Object
	.weak	_ZTS6Object
	.section	.rodata._ZTS6Object,"aG",@progbits,_ZTS6Object,comdat
	.align 8
	.type	_ZTS6Object, @object
	.size	_ZTS6Object, 8
_ZTS6Object:
	.string	"6Object"
	.text
	.type	_Z41__static_initialization_and_destruction_0ii, @function
_Z41__static_initialization_and_destruction_0ii:
.LFB3631:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movl	%edi, -4(%rbp)	# __initialize_p, __initialize_p
	movl	%esi, -8(%rbp)	# __priority, __priority
# core/object.cpp:2116: }
	cmpl	$1, -4(%rbp)	#, __initialize_p
	jne	.L5197	#,
# core/object.cpp:2116: }
	cmpl	$65535, -8(%rbp)	#, __priority
	jne	.L5197	#,
# core/object.cpp:2024: HashMap<ObjectID, Object *> ObjectDB::instances;
	movl	$_ZN8ObjectDB9instancesE, %edi	#,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EEC1Ev	#
# core/object.cpp:2024: HashMap<ObjectID, Object *> ObjectDB::instances;
	movl	$__dso_handle, %edx	#,
	movl	$_ZN8ObjectDB9instancesE, %esi	#,
	movl	$_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED1Ev, %edi	#,
	call	__cxa_atexit	#
# core/object.cpp:2026: HashMap<Object *, ObjectID, ObjectDB::ObjectPtrHash> ObjectDB::instance_checks;
	movl	$_ZN8ObjectDB15instance_checksE, %edi	#,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EEC1Ev	#
# core/object.cpp:2026: HashMap<Object *, ObjectID, ObjectDB::ObjectPtrHash> ObjectDB::instance_checks;
	movl	$__dso_handle, %edx	#,
	movl	$_ZN8ObjectDB15instance_checksE, %esi	#,
	movl	$_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED1Ev, %edi	#,
	call	__cxa_atexit	#
.L5197:
# core/object.cpp:2116: }
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3631:
	.size	_Z41__static_initialization_and_destruction_0ii, .-_Z41__static_initialization_and_destruction_0ii
	.section	.text._ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv
	.type	_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv, @function
_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv:
.LFB3632:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3632
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1306: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5199	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5200	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB945:
	call	_ZN6StringC1EPKc	#
.LEHE945:
	jmp	.L5201	#
.L5200:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB946:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE946:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5206	#
.L5205:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62279
	movq	%rax, %rdi	# D.62279,
.LEHB947:
	call	_Unwind_Resume	#
.LEHE947:
.L5206:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5201	#
.L5199:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5201:
# ./core/method_bind.gen.inc:1306: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1307: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3632:
	.section	.gcc_except_table
.LLSDA3632:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3632-.LLSDACSB3632
.LLSDACSB3632:
	.uleb128 .LEHB945-.LFB3632
	.uleb128 .LEHE945-.LEHB945
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB946-.LFB3632
	.uleb128 .LEHE946-.LEHB946
	.uleb128 .L5205-.LFB3632
	.uleb128 0
	.uleb128 .LEHB947-.LFB3632
	.uleb128 .LEHE947-.LEHB947
	.uleb128 0
	.uleb128 0
.LLSDACSE3632:
	.section	.text._ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv,comdat
	.size	_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv, .-_ZNK13MethodBind1RCI10StringNameRKS0_E18get_instance_classEv
	.section	.text._ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.type	_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, @function
_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE:
.LFB3633:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3633
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$272, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -248(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -256(%rbp)	# this, this
	movq	%rdx, -264(%rbp)	# p_object, p_object
	movq	%rcx, -272(%rbp)	# p_args, p_args
	movl	%r8d, -276(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -288(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1311: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-264(%rbp), %rax	# p_object, tmp144
	movq	%rax, -24(%rbp)	# tmp144, instance
# ./core/method_bind.gen.inc:1313: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-288(%rbp), %rax	# r_error, tmp145
	movl	$0, (%rax)	#, r_error_26(D)->error
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp146
	movq	72(%rax), %rax	# this_28(D)->method.__delta, _1
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp147
	leaq	(%rdx,%rax), %r12	#, _3
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp148
	movq	64(%rax), %rax	# this_28(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5208	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp149
	movq	72(%rax), %rax	# this_28(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp150
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-256(%rbp), %rax	# this, tmp151
	movq	64(%rax), %rax	# this_28(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.358_18
	jmp	.L5209	#
.L5208:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp152
	movq	64(%rax), %rbx	# this_28(D)->method.__pfn, iftmp.358_18
.L5209:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	cmpl	$0, -276(%rbp)	#, p_arg_count
	jg	.L5210	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp153
	movl	44(%rax), %eax	# this_50->argument_count, _52
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _53
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp154
	movl	%eax, -40(%rbp)	# tmp154, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L5211	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp155
	addq	$24, %rax	#, _55
	movq	%rax, -48(%rbp)	# _55, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp156
	addq	$8, %rax	#, _57
	movq	%rax, -56(%rbp)	# _57, this
	movq	-56(%rbp), %rax	# this, tmp157
	movq	%rax, -64(%rbp)	# tmp157, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp158
	movq	(%rax), %rax	# this_59->_ptr, _60
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _60
	jne	.L5212	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _61
	jmp	.L5213	#
.L5212:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp159
	movq	(%rax), %rax	# this_59->_ptr, _62
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _61
.L5213:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _61, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L5214	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp160
	movl	(%rax), %eax	# *size_66, _67
	jmp	.L5215	#
.L5214:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _68
.L5215:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _68, idx
	jl	.L5217	#,
.L5211:
	movl	$1, %eax	#, iftmp.327_77
	jmp	.L5218	#
.L5217:
	movl	$0, %eax	#, iftmp.327_77
.L5218:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_77
	je	.L5219	#,
	leaq	-192(%rbp), %rax	#, tmp161
	movq	%rax, -80(%rbp)	# tmp161, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp162
	movl	$0, (%rax)	#, this_81->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5237	#
.L5219:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp163
	addq	$24, %rax	#, _82
	movq	%rax, -88(%rbp)	# _82, this
	movl	-40(%rbp), %eax	# idx, tmp164
	movl	%eax, -92(%rbp)	# tmp164, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp165
	addq	$8, %rax	#, _85
	movq	%rax, -104(%rbp)	# _85, this
	movl	-92(%rbp), %eax	# p_index, tmp166
	movl	%eax, -108(%rbp)	# tmp166, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp168
	shrl	$31, %eax	#, tmp167
	movzbl	%al, %eax	# _88, _89
	testq	%rax, %rax	# _90
	jne	.L5221	#,
	movq	-104(%rbp), %rax	# this, tmp169
	movq	%rax, -120(%rbp)	# tmp169, this
	movq	-120(%rbp), %rax	# this, tmp170
	movq	%rax, -128(%rbp)	# tmp170, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_92->_ptr, _93
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _93
	jne	.L5222	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _94
	jmp	.L5223	#
.L5222:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp172
	movq	(%rax), %rax	# this_92->_ptr, _95
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _94
.L5223:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _94, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L5224	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp173
	movl	(%rax), %eax	# *size_99, _100
	jmp	.L5225	#
.L5224:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _101
.L5225:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _101, p_index
	setge	%al	#, _107
	movzbl	%al, %eax	# _107, _108
	testq	%rax, %rax	# _109
	je	.L5226	#,
.L5221:
	movl	$1, %eax	#, iftmp.12_110
	jmp	.L5227	#
.L5226:
	movl	$0, %eax	#, iftmp.12_110
.L5227:
	movzbl	%al, %eax	# iftmp.12_110, _113
	testq	%rax, %rax	# _113
	setne	%al	#, retval.11_114
	testb	%al, %al	# retval.11_114
	je	.L5228	#,
	movq	-104(%rbp), %rax	# this, tmp174
	movq	%rax, -144(%rbp)	# tmp174, this
	movq	-144(%rbp), %rax	# this, tmp175
	movq	%rax, -152(%rbp)	# tmp175, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp176
	movq	(%rax), %rax	# this_116->_ptr, _117
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _117
	jne	.L5229	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _118
	jmp	.L5230	#
.L5229:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp177
	movq	(%rax), %rax	# this_116->_ptr, _119
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _118
.L5230:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _118, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L5231	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp178
	movl	(%rax), %eax	# *size_123, _124
	jmp	.L5232	#
.L5231:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _125
.L5232:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _125, _131
	movl	-108(%rbp), %eax	# p_index, tmp179
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _131,
	movq	%rax, %rcx	# _132,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB948:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5228:
	movq	-104(%rbp), %rax	# this, tmp180
	movq	%rax, -168(%rbp)	# tmp180, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp181
	movq	(%rax), %rax	# this_133->_ptr, _134
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _134
	jne	.L5233	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _135
	jmp	.L5234	#
.L5233:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp182
	movq	(%rax), %rcx	# this_133->_ptr, _135
.L5234:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp183
	movslq	%eax, %rdx	# tmp183, _140
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _140, tmp184
	addq	%rax, %rax	# tmp184
	addq	%rdx, %rax	# _140, tmp184
	salq	$3, %rax	#, tmp185
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _142
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-192(%rbp), %rax	#, tmp186
	movq	%rdx, %rsi	# _142,
	movq	%rax, %rdi	# tmp186,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5237	#
.L5210:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-272(%rbp), %rax	# p_args, tmp187
	movq	(%rax), %rdx	# *p_args_32(D), _17
	leaq	-192(%rbp), %rax	#, tmp188
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp188,
	call	_ZN7VariantC1ERKS_	#
.LEHE948:
.L5237:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-200(%rbp), %rax	#, tmp189
	leaq	-192(%rbp), %rdx	#, tmp190
	movq	%rdx, %rsi	# tmp190,
	movq	%rax, %rdi	# tmp189,
.LEHB949:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE949:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-208(%rbp), %rax	#, tmp191
	leaq	-200(%rbp), %rdx	#, tmp192
	movq	%r12, %rsi	# _3,
	movq	%rax, %rdi	# tmp191,
.LEHB950:
	call	*%rbx	# iftmp.358_18
.LEHE950:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-208(%rbp), %rdx	#, tmp193
	leaq	-240(%rbp), %rax	#, tmp194
	movq	%rdx, %rsi	# tmp193,
	movq	%rax, %rdi	# tmp194,
.LEHB951:
	call	_ZN7VariantC1ERK10StringName	#
.LEHE951:
	leaq	-208(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN10StringNameD1Ev	#
	leaq	-200(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48076.type, _149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _149
	je	.L5256	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp197
	movq	%rax, %rdi	# tmp197,
	call	_ZN7Variant5clearEv	#
.L5256:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	leaq	-240(%rbp), %rdx	#, tmp198
	movq	-248(%rbp), %rax	# <retval>, tmp199
	movq	%rdx, %rsi	# tmp198,
	movq	%rax, %rdi	# tmp199,
.LEHB952:
	call	_ZN7VariantC1ERKS_	#
.LEHE952:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# ret.type, _150
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _150
	je	.L5257	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp200
	movq	%rax, %rdi	# tmp200,
	call	_ZN7Variant5clearEv	#
.L5257:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	jmp	.L5255	#
.L5250:
	movq	%rax, %rbx	#, tmp203
	leaq	-208(%rbp), %rax	#, tmp201
	movq	%rax, %rdi	# tmp201,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5243	#
.L5249:
	movq	%rax, %rbx	#, tmp202
.L5243:
	leaq	-200(%rbp), %rax	#, tmp206
	movq	%rax, %rdi	# tmp206,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5244	#
.L5248:
	movq	%rax, %rbx	#, tmp207
.L5244:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48076.type, _151
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _151
	je	.L5258	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp209
	movq	%rax, %rdi	# tmp209,
	call	_ZN7Variant5clearEv	#
.L5258:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp207, D.62281
	movq	%rax, %rdi	# D.62281,
.LEHB953:
	call	_Unwind_Resume	#
.LEHE953:
.L5251:
	movq	%rax, %rbx	#, tmp211
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# ret.type, _152
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _152
	je	.L5259	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp210
	movq	%rax, %rdi	# tmp210,
	call	_ZN7Variant5clearEv	#
.L5259:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp211, D.62282
	movq	%rax, %rdi	# D.62282,
.LEHB954:
	call	_Unwind_Resume	#
.LEHE954:
.L5255:
# ./core/method_bind.gen.inc:1336: 	}
	movq	-248(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3633:
	.section	.gcc_except_table
.LLSDA3633:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3633-.LLSDACSB3633
.LLSDACSB3633:
	.uleb128 .LEHB948-.LFB3633
	.uleb128 .LEHE948-.LEHB948
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB949-.LFB3633
	.uleb128 .LEHE949-.LEHB949
	.uleb128 .L5248-.LFB3633
	.uleb128 0
	.uleb128 .LEHB950-.LFB3633
	.uleb128 .LEHE950-.LEHB950
	.uleb128 .L5249-.LFB3633
	.uleb128 0
	.uleb128 .LEHB951-.LFB3633
	.uleb128 .LEHE951-.LEHB951
	.uleb128 .L5250-.LFB3633
	.uleb128 0
	.uleb128 .LEHB952-.LFB3633
	.uleb128 .LEHE952-.LEHB952
	.uleb128 .L5251-.LFB3633
	.uleb128 0
	.uleb128 .LEHB953-.LFB3633
	.uleb128 .LEHE953-.LEHB953
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB954-.LFB3633
	.uleb128 .LEHE954-.LEHB954
	.uleb128 0
	.uleb128 0
.LLSDACSE3633:
	.section	.text._ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, .-_ZN13MethodBind1RCI10StringNameRKS0_E4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK13MethodBind0RCIbE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCIbE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind0RCIbE18get_instance_classEv
	.type	_ZNK13MethodBind0RCIbE18get_instance_classEv, @function
_ZNK13MethodBind0RCIbE18get_instance_classEv:
.LFB3634:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3634
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:567: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5261	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5262	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB955:
	call	_ZN6StringC1EPKc	#
.LEHE955:
	jmp	.L5263	#
.L5262:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB956:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE956:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5268	#
.L5267:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62286
	movq	%rax, %rdi	# D.62286,
.LEHB957:
	call	_Unwind_Resume	#
.LEHE957:
.L5268:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5263	#
.L5261:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5263:
# ./core/method_bind.gen.inc:567: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:568: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3634:
	.section	.gcc_except_table
.LLSDA3634:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3634-.LLSDACSB3634
.LLSDACSB3634:
	.uleb128 .LEHB955-.LFB3634
	.uleb128 .LEHE955-.LEHB955
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB956-.LFB3634
	.uleb128 .LEHE956-.LEHB956
	.uleb128 .L5267-.LFB3634
	.uleb128 0
	.uleb128 .LEHB957-.LFB3634
	.uleb128 .LEHE957-.LEHB957
	.uleb128 0
	.uleb128 0
.LLSDACSE3634:
	.section	.text._ZNK13MethodBind0RCIbE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCIbE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind0RCIbE18get_instance_classEv, .-_ZNK13MethodBind0RCIbE18get_instance_classEv
	.section	.text._ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.type	_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, @function
_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE:
.LFB3635:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3635
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -64(%rbp)	# this, this
	movq	%rdx, -72(%rbp)	# p_object, p_object
	movq	%rcx, -80(%rbp)	# p_args, p_args
	movl	%r8d, -84(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -96(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:572: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-72(%rbp), %rax	# p_object, tmp103
	movq	%rax, -24(%rbp)	# tmp103, instance
# ./core/method_bind.gen.inc:574: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-96(%rbp), %rax	# r_error, tmp104
	movl	$0, (%rax)	#, r_error_23(D)->error
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-64(%rbp), %rax	# this, tmp105
	movq	72(%rax), %rax	# this_25(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp106
	addq	%rax, %rdx	# tmp106, _3
	movq	-64(%rbp), %rax	# this, tmp107
	movq	64(%rax), %rax	# this_25(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5270	#,
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-64(%rbp), %rax	# this, tmp108
	movq	72(%rax), %rax	# this_25(D)->method.__delta, _7
	movq	%rax, %rcx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp109
	addq	%rcx, %rax	# _8, _9
	movq	(%rax), %rcx	# MEM[(int (*) () * *)_9], _10
	movq	-64(%rbp), %rax	# this, tmp110
	movq	64(%rax), %rax	# this_25(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rcx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.359_18
	jmp	.L5271	#
.L5270:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-64(%rbp), %rax	# this, tmp111
	movq	64(%rax), %rax	# this_25(D)->method.__pfn, iftmp.359_18
.L5271:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	%rdx, %rdi	# _3,
.LEHB958:
	call	*%rax	# iftmp.359_18
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movzbl	%al, %edx	# _16, _17
	leaq	-48(%rbp), %rax	#, tmp112
	movl	%edx, %esi	# _17,
	movq	%rax, %rdi	# tmp112,
	call	_ZN7VariantC1Eb	#
.LEHE958:
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	leaq	-48(%rbp), %rdx	#, tmp113
	movq	-56(%rbp), %rax	# <retval>, tmp114
	movq	%rdx, %rsi	# tmp113,
	movq	%rax, %rdi	# tmp114,
.LEHB959:
	call	_ZN7VariantC1ERKS_	#
.LEHE959:
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# ret.type, _35
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _35
	je	.L5279	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp115
	movq	%rax, %rdi	# tmp115,
	call	_ZN7Variant5clearEv	#
.L5279:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	jmp	.L5278	#
.L5276:
	movq	%rax, %rbx	#, tmp117
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# ret.type, _36
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _36
	je	.L5280	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp116
	movq	%rax, %rdi	# tmp116,
	call	_ZN7Variant5clearEv	#
.L5280:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp117, D.62288
	movq	%rax, %rdi	# D.62288,
.LEHB960:
	call	_Unwind_Resume	#
.LEHE960:
.L5278:
# ./core/method_bind.gen.inc:596: 	}
	movq	-56(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3635:
	.section	.gcc_except_table
.LLSDA3635:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3635-.LLSDACSB3635
.LLSDACSB3635:
	.uleb128 .LEHB958-.LFB3635
	.uleb128 .LEHE958-.LEHB958
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB959-.LFB3635
	.uleb128 .LEHE959-.LEHB959
	.uleb128 .L5276-.LFB3635
	.uleb128 0
	.uleb128 .LEHB960-.LFB3635
	.uleb128 .LEHE960-.LEHB960
	.uleb128 0
	.uleb128 0
.LLSDACSE3635:
	.section	.text._ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.size	_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, .-_ZN13MethodBind0RCIbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.section	.text._ZNK11MethodBind1IbE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind1IbE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind1IbE18get_instance_classEv
	.type	_ZNK11MethodBind1IbE18get_instance_classEv, @function
_ZNK11MethodBind1IbE18get_instance_classEv:
.LFB3636:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3636
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:748: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5282	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5283	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB961:
	call	_ZN6StringC1EPKc	#
.LEHE961:
	jmp	.L5284	#
.L5283:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB962:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE962:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5289	#
.L5288:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62290
	movq	%rax, %rdi	# D.62290,
.LEHB963:
	call	_Unwind_Resume	#
.LEHE963:
.L5289:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5284	#
.L5282:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5284:
# ./core/method_bind.gen.inc:748: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:749: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3636:
	.section	.gcc_except_table
.LLSDA3636:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3636-.LLSDACSB3636
.LLSDACSB3636:
	.uleb128 .LEHB961-.LFB3636
	.uleb128 .LEHE961-.LEHB961
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB962-.LFB3636
	.uleb128 .LEHE962-.LEHB962
	.uleb128 .L5288-.LFB3636
	.uleb128 0
	.uleb128 .LEHB963-.LFB3636
	.uleb128 .LEHE963-.LEHB963
	.uleb128 0
	.uleb128 0
.LLSDACSE3636:
	.section	.text._ZNK11MethodBind1IbE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind1IbE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind1IbE18get_instance_classEv, .-_ZNK11MethodBind1IbE18get_instance_classEv
	.section	.text._ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.type	_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, @function
_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE:
.LFB3637:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3637
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$240, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -216(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -224(%rbp)	# this, this
	movq	%rdx, -232(%rbp)	# p_object, p_object
	movq	%rcx, -240(%rbp)	# p_args, p_args
	movl	%r8d, -244(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -256(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:753: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-232(%rbp), %rax	# p_object, tmp143
	movq	%rax, -24(%rbp)	# tmp143, instance
# ./core/method_bind.gen.inc:755: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-256(%rbp), %rax	# r_error, tmp144
	movl	$0, (%rax)	#, r_error_26(D)->error
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-224(%rbp), %rax	# this, tmp145
	movq	72(%rax), %rax	# this_28(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp146
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-224(%rbp), %rax	# this, tmp147
	movq	64(%rax), %rax	# this_28(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5291	#,
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-224(%rbp), %rax	# this, tmp148
	movq	72(%rax), %rax	# this_28(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp149
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-224(%rbp), %rax	# this, tmp150
	movq	64(%rax), %rax	# this_28(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.357_20
	jmp	.L5292	#
.L5291:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-224(%rbp), %rax	# this, tmp151
	movq	64(%rax), %rbx	# this_28(D)->method.__pfn, iftmp.357_20
.L5292:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	cmpl	$0, -244(%rbp)	#, p_arg_count
	jg	.L5293	#,
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-224(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp152
	movl	44(%rax), %eax	# this_39->argument_count, _41
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _42
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp153
	movl	%eax, -40(%rbp)	# tmp153, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L5294	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp154
	addq	$24, %rax	#, _44
	movq	%rax, -48(%rbp)	# _44, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp155
	addq	$8, %rax	#, _46
	movq	%rax, -56(%rbp)	# _46, this
	movq	-56(%rbp), %rax	# this, tmp156
	movq	%rax, -64(%rbp)	# tmp156, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp157
	movq	(%rax), %rax	# this_48->_ptr, _49
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _49
	jne	.L5295	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _50
	jmp	.L5296	#
.L5295:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp158
	movq	(%rax), %rax	# this_48->_ptr, _51
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _50
.L5296:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _50, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L5297	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp159
	movl	(%rax), %eax	# *size_55, _56
	jmp	.L5298	#
.L5297:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _57
.L5298:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _57, idx
	jl	.L5300	#,
.L5294:
	movl	$1, %eax	#, iftmp.327_66
	jmp	.L5301	#
.L5300:
	movl	$0, %eax	#, iftmp.327_66
.L5301:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_66
	je	.L5302	#,
	leaq	-208(%rbp), %rax	#, tmp160
	movq	%rax, -80(%rbp)	# tmp160, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp161
	movl	$0, (%rax)	#, this_70->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5320	#
.L5302:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp162
	addq	$24, %rax	#, _71
	movq	%rax, -88(%rbp)	# _71, this
	movl	-40(%rbp), %eax	# idx, tmp163
	movl	%eax, -92(%rbp)	# tmp163, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp164
	addq	$8, %rax	#, _74
	movq	%rax, -104(%rbp)	# _74, this
	movl	-92(%rbp), %eax	# p_index, tmp165
	movl	%eax, -108(%rbp)	# tmp165, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp167
	shrl	$31, %eax	#, tmp166
	movzbl	%al, %eax	# _77, _78
	testq	%rax, %rax	# _79
	jne	.L5304	#,
	movq	-104(%rbp), %rax	# this, tmp168
	movq	%rax, -120(%rbp)	# tmp168, this
	movq	-120(%rbp), %rax	# this, tmp169
	movq	%rax, -128(%rbp)	# tmp169, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp170
	movq	(%rax), %rax	# this_81->_ptr, _82
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _82
	jne	.L5305	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _83
	jmp	.L5306	#
.L5305:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_81->_ptr, _84
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _83
.L5306:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _83, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L5307	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp172
	movl	(%rax), %eax	# *size_88, _89
	jmp	.L5308	#
.L5307:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _90
.L5308:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _90, p_index
	setge	%al	#, _96
	movzbl	%al, %eax	# _96, _97
	testq	%rax, %rax	# _98
	je	.L5309	#,
.L5304:
	movl	$1, %eax	#, iftmp.12_99
	jmp	.L5310	#
.L5309:
	movl	$0, %eax	#, iftmp.12_99
.L5310:
	movzbl	%al, %eax	# iftmp.12_99, _102
	testq	%rax, %rax	# _102
	setne	%al	#, retval.11_103
	testb	%al, %al	# retval.11_103
	je	.L5311	#,
	movq	-104(%rbp), %rax	# this, tmp173
	movq	%rax, -144(%rbp)	# tmp173, this
	movq	-144(%rbp), %rax	# this, tmp174
	movq	%rax, -152(%rbp)	# tmp174, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp175
	movq	(%rax), %rax	# this_105->_ptr, _106
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _106
	jne	.L5312	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _107
	jmp	.L5313	#
.L5312:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp176
	movq	(%rax), %rax	# this_105->_ptr, _108
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _107
.L5313:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _107, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L5314	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp177
	movl	(%rax), %eax	# *size_112, _113
	jmp	.L5315	#
.L5314:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _114
.L5315:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _114, _120
	movl	-108(%rbp), %eax	# p_index, tmp178
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _120,
	movq	%rax, %rcx	# _121,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB964:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5311:
	movq	-104(%rbp), %rax	# this, tmp179
	movq	%rax, -168(%rbp)	# tmp179, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp180
	movq	(%rax), %rax	# this_122->_ptr, _123
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _123
	jne	.L5316	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _124
	jmp	.L5317	#
.L5316:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp181
	movq	(%rax), %rcx	# this_122->_ptr, _124
.L5317:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp182
	movslq	%eax, %rdx	# tmp182, _129
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _129, tmp183
	addq	%rax, %rax	# tmp183
	addq	%rdx, %rax	# _129, tmp183
	salq	$3, %rax	#, tmp184
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _131
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-208(%rbp), %rax	#, tmp185
	movq	%rdx, %rsi	# _131,
	movq	%rax, %rdi	# tmp185,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5320	#
.L5293:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# p_args, tmp186
	movq	(%rax), %rdx	# *p_args_32(D), _17
	leaq	-208(%rbp), %rax	#, tmp187
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp187,
	call	_ZN7VariantC1ERKS_	#
.LEHE964:
.L5320:
# ./core/method_bind.h:69: 		return p_variant;
	leaq	-208(%rbp), %rax	#, tmp188
	movq	%rax, %rdi	# tmp188,
.LEHB965:
	call	_ZNK7VariantcvbEv	#
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movzbl	%al, %eax	# D.59811, _19
	movl	%eax, %esi	# _19,
	movq	%r12, %rdi	# _3,
	call	*%rbx	# iftmp.357_20
.LEHE965:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.48099.type, _141
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _141
	je	.L5330	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN7Variant5clearEv	#
.L5330:
# ./core/variant.h:423: 	}
	nop	
	movq	-216(%rbp), %rax	# <retval>, tmp190
	movq	%rax, -176(%rbp)	# tmp190, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-176(%rbp), %rax	# this, tmp191
	movl	$0, (%rax)	#, this_140->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:777: 		return Variant();
	jmp	.L5329	#
.L5326:
	movq	%rax, %rbx	#, tmp193
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.48099.type, _142
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _142
	je	.L5331	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp192
	movq	%rax, %rdi	# tmp192,
	call	_ZN7Variant5clearEv	#
.L5331:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp193, D.62292
	movq	%rax, %rdi	# D.62292,
.LEHB966:
	call	_Unwind_Resume	#
.LEHE966:
.L5329:
# ./core/method_bind.gen.inc:778: 	}
	movq	-216(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3637:
	.section	.gcc_except_table
.LLSDA3637:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3637-.LLSDACSB3637
.LLSDACSB3637:
	.uleb128 .LEHB964-.LFB3637
	.uleb128 .LEHE964-.LEHB964
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB965-.LFB3637
	.uleb128 .LEHE965-.LEHB965
	.uleb128 .L5326-.LFB3637
	.uleb128 0
	.uleb128 .LEHB966-.LFB3637
	.uleb128 .LEHE966-.LEHB966
	.uleb128 0
	.uleb128 0
.LLSDACSE3637:
	.section	.text._ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.size	_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, .-_ZN11MethodBind1IbE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.section	.text._ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv
	.type	_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv, @function
_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv:
.LFB3638:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3638
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:2880: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5333	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5334	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB967:
	call	_ZN6StringC1EPKc	#
.LEHE967:
	jmp	.L5335	#
.L5334:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB968:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE968:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5340	#
.L5339:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62294
	movq	%rax, %rdi	# D.62294,
.LEHB969:
	call	_Unwind_Resume	#
.LEHE969:
.L5340:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5335	#
.L5333:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5335:
# ./core/method_bind.gen.inc:2880: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:2881: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3638:
	.section	.gcc_except_table
.LLSDA3638:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3638-.LLSDACSB3638
.LLSDACSB3638:
	.uleb128 .LEHB967-.LFB3638
	.uleb128 .LEHE967-.LEHB967
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB968-.LFB3638
	.uleb128 .LEHE968-.LEHB968
	.uleb128 .L5339-.LFB3638
	.uleb128 0
	.uleb128 .LEHB969-.LFB3638
	.uleb128 .LEHE969-.LEHB969
	.uleb128 0
	.uleb128 0
.LLSDACSE3638:
	.section	.text._ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv,comdat
	.size	_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv, .-_ZNK13MethodBind3RCIbRK10StringNameP6ObjectS2_E18get_instance_classEv
	.section	.text._ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE
	.type	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE, @function
_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE:
.LFB3639:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3639
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$616, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -600(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -608(%rbp)	# this, this
	movq	%rdx, -616(%rbp)	# p_object, p_object
	movq	%rcx, -624(%rbp)	# p_args, p_args
	movl	%r8d, -628(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -640(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:2885: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-616(%rbp), %rax	# p_object, tmp233
	movq	%rax, -40(%rbp)	# tmp233, instance
# ./core/method_bind.gen.inc:2887: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-640(%rbp), %rax	# r_error, tmp234
	movl	$0, (%rax)	#, r_error_40(D)->error
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, tmp235
	movq	72(%rax), %rax	# this_42(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-40(%rbp), %rax	# instance, tmp236
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-608(%rbp), %rax	# this, tmp237
	movq	64(%rax), %rax	# this_42(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5342	#,
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, tmp238
	movq	72(%rax), %rax	# this_42(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-40(%rbp), %rax	# instance, tmp239
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-608(%rbp), %rax	# this, tmp240
	movq	64(%rax), %rax	# this_42(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.355_27
	jmp	.L5343	#
.L5342:
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, tmp241
	movq	64(%rax), %rbx	# this_42(D)->method.__pfn, iftmp.355_27
.L5343:
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	cmpl	$2, -628(%rbp)	#, p_arg_count
	jg	.L5344	#,
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, _16
	movq	%rax, -48(%rbp)	# _16, this
	movl	$2, -52(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-48(%rbp), %rax	# this, tmp242
	movl	44(%rax), %eax	# this_72->argument_count, _74
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-52(%rbp), %eax	# p_arg, _75
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp243
	movl	%eax, -56(%rbp)	# tmp243, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -56(%rbp)	#, idx
	js	.L5345	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-48(%rbp), %rax	# this, tmp244
	addq	$24, %rax	#, _77
	movq	%rax, -64(%rbp)	# _77, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-64(%rbp), %rax	# this, tmp245
	addq	$8, %rax	#, _79
	movq	%rax, -72(%rbp)	# _79, this
	movq	-72(%rbp), %rax	# this, tmp246
	movq	%rax, -80(%rbp)	# tmp246, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-80(%rbp), %rax	# this, tmp247
	movq	(%rax), %rax	# this_81->_ptr, _82
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _82
	jne	.L5346	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _83
	jmp	.L5347	#
.L5346:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-80(%rbp), %rax	# this, tmp248
	movq	(%rax), %rax	# this_81->_ptr, _84
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _83
.L5347:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -88(%rbp)	# _83, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -88(%rbp)	#, size
	je	.L5348	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-88(%rbp), %rax	# size, tmp249
	movl	(%rax), %eax	# *size_88, _89
	jmp	.L5349	#
.L5348:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _90
.L5349:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -56(%rbp)	# _90, idx
	jl	.L5351	#,
.L5345:
	movl	$1, %eax	#, iftmp.327_99
	jmp	.L5352	#
.L5351:
	movl	$0, %eax	#, iftmp.327_99
.L5352:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_99
	je	.L5353	#,
	leaq	-560(%rbp), %rax	#, tmp250
	movq	%rax, -96(%rbp)	# tmp250, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-96(%rbp), %rax	# this, tmp251
	movl	$0, (%rax)	#, this_103->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5371	#
.L5353:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-48(%rbp), %rax	# this, tmp252
	addq	$24, %rax	#, _104
	movq	%rax, -104(%rbp)	# _104, this
	movl	-56(%rbp), %eax	# idx, tmp253
	movl	%eax, -108(%rbp)	# tmp253, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-104(%rbp), %rax	# this, tmp254
	addq	$8, %rax	#, _107
	movq	%rax, -120(%rbp)	# _107, this
	movl	-108(%rbp), %eax	# p_index, tmp255
	movl	%eax, -124(%rbp)	# tmp255, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-124(%rbp), %eax	# p_index, tmp257
	shrl	$31, %eax	#, tmp256
	movzbl	%al, %eax	# _110, _111
	testq	%rax, %rax	# _112
	jne	.L5355	#,
	movq	-120(%rbp), %rax	# this, tmp258
	movq	%rax, -136(%rbp)	# tmp258, this
	movq	-136(%rbp), %rax	# this, tmp259
	movq	%rax, -144(%rbp)	# tmp259, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp260
	movq	(%rax), %rax	# this_114->_ptr, _115
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _115
	jne	.L5356	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _116
	jmp	.L5357	#
.L5356:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-144(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_114->_ptr, _117
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _116
.L5357:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -152(%rbp)	# _116, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -152(%rbp)	#, size
	je	.L5358	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-152(%rbp), %rax	# size, tmp262
	movl	(%rax), %eax	# *size_121, _122
	jmp	.L5359	#
.L5358:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _123
.L5359:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -124(%rbp)	# _123, p_index
	setge	%al	#, _129
	movzbl	%al, %eax	# _129, _130
	testq	%rax, %rax	# _131
	je	.L5360	#,
.L5355:
	movl	$1, %eax	#, iftmp.12_132
	jmp	.L5361	#
.L5360:
	movl	$0, %eax	#, iftmp.12_132
.L5361:
	movzbl	%al, %eax	# iftmp.12_132, _135
	testq	%rax, %rax	# _135
	setne	%al	#, retval.11_136
	testb	%al, %al	# retval.11_136
	je	.L5362	#,
	movq	-120(%rbp), %rax	# this, tmp263
	movq	%rax, -160(%rbp)	# tmp263, this
	movq	-160(%rbp), %rax	# this, tmp264
	movq	%rax, -168(%rbp)	# tmp264, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp265
	movq	(%rax), %rax	# this_138->_ptr, _139
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _139
	jne	.L5363	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _140
	jmp	.L5364	#
.L5363:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp266
	movq	(%rax), %rax	# this_138->_ptr, _141
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _140
.L5364:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -176(%rbp)	# _140, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -176(%rbp)	#, size
	je	.L5365	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-176(%rbp), %rax	# size, tmp267
	movl	(%rax), %eax	# *size_145, _146
	jmp	.L5366	#
.L5365:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _147
.L5366:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _147, _153
	movl	-124(%rbp), %eax	# p_index, tmp268
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _153,
	movq	%rax, %rcx	# _154,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB970:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5362:
	movq	-120(%rbp), %rax	# this, tmp269
	movq	%rax, -184(%rbp)	# tmp269, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-184(%rbp), %rax	# this, tmp270
	movq	(%rax), %rax	# this_155->_ptr, _156
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _156
	jne	.L5367	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _157
	jmp	.L5368	#
.L5367:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-184(%rbp), %rax	# this, tmp271
	movq	(%rax), %rcx	# this_155->_ptr, _157
.L5368:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-124(%rbp), %eax	# p_index, tmp272
	movslq	%eax, %rdx	# tmp272, _162
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _162, tmp273
	addq	%rax, %rax	# tmp273
	addq	%rdx, %rax	# _162, tmp273
	salq	$3, %rax	#, tmp274
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _164
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-560(%rbp), %rax	#, tmp275
	movq	%rdx, %rsi	# _164,
	movq	%rax, %rdi	# tmp275,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5371	#
.L5344:
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-624(%rbp), %rax	# p_args, tmp276
	addq	$16, %rax	#, _17
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-560(%rbp), %rax	#, tmp277
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp277,
	call	_ZN7VariantC1ERKS_	#
.LEHE970:
.L5371:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-568(%rbp), %rax	#, tmp278
	leaq	-560(%rbp), %rdx	#, tmp279
	movq	%rdx, %rsi	# tmp279,
	movq	%rax, %rdi	# tmp278,
.LEHB971:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE971:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	cmpl	$1, -628(%rbp)	#, p_arg_count
	jg	.L5373	#,
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, _19
	movq	%rax, -192(%rbp)	# _19, this
	movl	$1, -196(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-192(%rbp), %rax	# this, tmp280
	movl	44(%rax), %eax	# this_171->argument_count, _173
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-196(%rbp), %eax	# p_arg, _174
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp281
	movl	%eax, -200(%rbp)	# tmp281, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -200(%rbp)	#, idx
	js	.L5374	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-192(%rbp), %rax	# this, tmp282
	addq	$24, %rax	#, _176
	movq	%rax, -208(%rbp)	# _176, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-208(%rbp), %rax	# this, tmp283
	addq	$8, %rax	#, _178
	movq	%rax, -216(%rbp)	# _178, this
	movq	-216(%rbp), %rax	# this, tmp284
	movq	%rax, -224(%rbp)	# tmp284, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-224(%rbp), %rax	# this, tmp285
	movq	(%rax), %rax	# this_180->_ptr, _181
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _181
	jne	.L5375	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _182
	jmp	.L5376	#
.L5375:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-224(%rbp), %rax	# this, tmp286
	movq	(%rax), %rax	# this_180->_ptr, _183
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _182
.L5376:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -232(%rbp)	# _182, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -232(%rbp)	#, size
	je	.L5377	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-232(%rbp), %rax	# size, tmp287
	movl	(%rax), %eax	# *size_187, _188
	jmp	.L5378	#
.L5377:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _189
.L5378:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -200(%rbp)	# _189, idx
	jl	.L5380	#,
.L5374:
	movl	$1, %eax	#, iftmp.327_198
	jmp	.L5381	#
.L5380:
	movl	$0, %eax	#, iftmp.327_198
.L5381:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_198
	je	.L5382	#,
	leaq	-528(%rbp), %rax	#, tmp288
	movq	%rax, -240(%rbp)	# tmp288, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-240(%rbp), %rax	# this, tmp289
	movl	$0, (%rax)	#, this_202->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5400	#
.L5382:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-192(%rbp), %rax	# this, tmp290
	addq	$24, %rax	#, _203
	movq	%rax, -248(%rbp)	# _203, this
	movl	-200(%rbp), %eax	# idx, tmp291
	movl	%eax, -252(%rbp)	# tmp291, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-248(%rbp), %rax	# this, tmp292
	addq	$8, %rax	#, _206
	movq	%rax, -264(%rbp)	# _206, this
	movl	-252(%rbp), %eax	# p_index, tmp293
	movl	%eax, -268(%rbp)	# tmp293, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-268(%rbp), %eax	# p_index, tmp295
	shrl	$31, %eax	#, tmp294
	movzbl	%al, %eax	# _209, _210
	testq	%rax, %rax	# _211
	jne	.L5384	#,
	movq	-264(%rbp), %rax	# this, tmp296
	movq	%rax, -280(%rbp)	# tmp296, this
	movq	-280(%rbp), %rax	# this, tmp297
	movq	%rax, -288(%rbp)	# tmp297, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-288(%rbp), %rax	# this, tmp298
	movq	(%rax), %rax	# this_213->_ptr, _214
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _214
	jne	.L5385	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _215
	jmp	.L5386	#
.L5385:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-288(%rbp), %rax	# this, tmp299
	movq	(%rax), %rax	# this_213->_ptr, _216
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _215
.L5386:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -296(%rbp)	# _215, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -296(%rbp)	#, size
	je	.L5387	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-296(%rbp), %rax	# size, tmp300
	movl	(%rax), %eax	# *size_220, _221
	jmp	.L5388	#
.L5387:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _222
.L5388:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -268(%rbp)	# _222, p_index
	setge	%al	#, _228
	movzbl	%al, %eax	# _228, _229
	testq	%rax, %rax	# _230
	je	.L5389	#,
.L5384:
	movl	$1, %eax	#, iftmp.12_231
	jmp	.L5390	#
.L5389:
	movl	$0, %eax	#, iftmp.12_231
.L5390:
	movzbl	%al, %eax	# iftmp.12_231, _234
	testq	%rax, %rax	# _234
	setne	%al	#, retval.11_235
	testb	%al, %al	# retval.11_235
	je	.L5391	#,
	movq	-264(%rbp), %rax	# this, tmp301
	movq	%rax, -304(%rbp)	# tmp301, this
	movq	-304(%rbp), %rax	# this, tmp302
	movq	%rax, -312(%rbp)	# tmp302, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp303
	movq	(%rax), %rax	# this_237->_ptr, _238
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _238
	jne	.L5392	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _239
	jmp	.L5393	#
.L5392:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-312(%rbp), %rax	# this, tmp304
	movq	(%rax), %rax	# this_237->_ptr, _240
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _239
.L5393:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -320(%rbp)	# _239, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -320(%rbp)	#, size
	je	.L5394	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-320(%rbp), %rax	# size, tmp305
	movl	(%rax), %eax	# *size_244, _245
	jmp	.L5395	#
.L5394:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _246
.L5395:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _246, _252
	movl	-268(%rbp), %eax	# p_index, tmp306
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _252,
	movq	%rax, %rcx	# _253,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB972:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5391:
	movq	-264(%rbp), %rax	# this, tmp307
	movq	%rax, -328(%rbp)	# tmp307, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-328(%rbp), %rax	# this, tmp308
	movq	(%rax), %rax	# this_254->_ptr, _255
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _255
	jne	.L5396	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _256
	jmp	.L5397	#
.L5396:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-328(%rbp), %rax	# this, tmp309
	movq	(%rax), %rcx	# this_254->_ptr, _256
.L5397:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-268(%rbp), %eax	# p_index, tmp310
	movslq	%eax, %rdx	# tmp310, _261
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _261, tmp311
	addq	%rax, %rax	# tmp311
	addq	%rdx, %rax	# _261, tmp311
	salq	$3, %rax	#, tmp312
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _263
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-528(%rbp), %rax	#, tmp313
	movq	%rdx, %rsi	# _263,
	movq	%rax, %rdi	# tmp313,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5400	#
.L5373:
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-624(%rbp), %rax	# p_args, tmp314
	addq	$8, %rax	#, _20
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	(%rax), %rdx	# *_20, _21
	leaq	-528(%rbp), %rax	#, tmp315
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp315,
	call	_ZN7VariantC1ERKS_	#
.LEHE972:
.L5400:
# ./core/method_bind.h:69: 		return p_variant;
	leaq	-528(%rbp), %rax	#, tmp316
	movq	%rax, %rdi	# tmp316,
.LEHB973:
	call	_ZNK7VariantcvP6ObjectEv	#
	movq	%rax, %r13	#, D.60137
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	cmpl	$0, -628(%rbp)	#, p_arg_count
	jg	.L5402	#,
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, _23
	movq	%rax, -336(%rbp)	# _23, this
	movl	$0, -340(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-336(%rbp), %rax	# this, tmp317
	movl	44(%rax), %eax	# this_272->argument_count, _274
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-340(%rbp), %eax	# p_arg, _275
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp318
	movl	%eax, -344(%rbp)	# tmp318, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -344(%rbp)	#, idx
	js	.L5403	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-336(%rbp), %rax	# this, tmp319
	addq	$24, %rax	#, _277
	movq	%rax, -352(%rbp)	# _277, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-352(%rbp), %rax	# this, tmp320
	addq	$8, %rax	#, _279
	movq	%rax, -360(%rbp)	# _279, this
	movq	-360(%rbp), %rax	# this, tmp321
	movq	%rax, -368(%rbp)	# tmp321, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-368(%rbp), %rax	# this, tmp322
	movq	(%rax), %rax	# this_281->_ptr, _282
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _282
	jne	.L5404	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _283
	jmp	.L5405	#
.L5404:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-368(%rbp), %rax	# this, tmp323
	movq	(%rax), %rax	# this_281->_ptr, _284
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _283
.L5405:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -376(%rbp)	# _283, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -376(%rbp)	#, size
	je	.L5406	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-376(%rbp), %rax	# size, tmp324
	movl	(%rax), %eax	# *size_288, _289
	jmp	.L5407	#
.L5406:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _290
.L5407:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -344(%rbp)	# _290, idx
	jl	.L5409	#,
.L5403:
	movl	$1, %eax	#, iftmp.327_299
	jmp	.L5410	#
.L5409:
	movl	$0, %eax	#, iftmp.327_299
.L5410:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_299
	je	.L5411	#,
	leaq	-496(%rbp), %rax	#, tmp325
	movq	%rax, -384(%rbp)	# tmp325, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-384(%rbp), %rax	# this, tmp326
	movl	$0, (%rax)	#, this_303->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5429	#
.L5411:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-336(%rbp), %rax	# this, tmp327
	addq	$24, %rax	#, _304
	movq	%rax, -392(%rbp)	# _304, this
	movl	-344(%rbp), %eax	# idx, tmp328
	movl	%eax, -396(%rbp)	# tmp328, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-392(%rbp), %rax	# this, tmp329
	addq	$8, %rax	#, _307
	movq	%rax, -408(%rbp)	# _307, this
	movl	-396(%rbp), %eax	# p_index, tmp330
	movl	%eax, -412(%rbp)	# tmp330, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-412(%rbp), %eax	# p_index, tmp332
	shrl	$31, %eax	#, tmp331
	movzbl	%al, %eax	# _310, _311
	testq	%rax, %rax	# _312
	jne	.L5413	#,
	movq	-408(%rbp), %rax	# this, tmp333
	movq	%rax, -424(%rbp)	# tmp333, this
	movq	-424(%rbp), %rax	# this, tmp334
	movq	%rax, -432(%rbp)	# tmp334, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-432(%rbp), %rax	# this, tmp335
	movq	(%rax), %rax	# this_314->_ptr, _315
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _315
	jne	.L5414	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _316
	jmp	.L5415	#
.L5414:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-432(%rbp), %rax	# this, tmp336
	movq	(%rax), %rax	# this_314->_ptr, _317
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _316
.L5415:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -440(%rbp)	# _316, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -440(%rbp)	#, size
	je	.L5416	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-440(%rbp), %rax	# size, tmp337
	movl	(%rax), %eax	# *size_321, _322
	jmp	.L5417	#
.L5416:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _323
.L5417:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -412(%rbp)	# _323, p_index
	setge	%al	#, _329
	movzbl	%al, %eax	# _329, _330
	testq	%rax, %rax	# _331
	je	.L5418	#,
.L5413:
	movl	$1, %eax	#, iftmp.12_332
	jmp	.L5419	#
.L5418:
	movl	$0, %eax	#, iftmp.12_332
.L5419:
	movzbl	%al, %eax	# iftmp.12_332, _335
	testq	%rax, %rax	# _335
	setne	%al	#, retval.11_336
	testb	%al, %al	# retval.11_336
	je	.L5420	#,
	movq	-408(%rbp), %rax	# this, tmp338
	movq	%rax, -448(%rbp)	# tmp338, this
	movq	-448(%rbp), %rax	# this, tmp339
	movq	%rax, -456(%rbp)	# tmp339, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-456(%rbp), %rax	# this, tmp340
	movq	(%rax), %rax	# this_338->_ptr, _339
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _339
	jne	.L5421	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _340
	jmp	.L5422	#
.L5421:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-456(%rbp), %rax	# this, tmp341
	movq	(%rax), %rax	# this_338->_ptr, _341
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _340
.L5422:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -464(%rbp)	# _340, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -464(%rbp)	#, size
	je	.L5423	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-464(%rbp), %rax	# size, tmp342
	movl	(%rax), %eax	# *size_345, _346
	jmp	.L5424	#
.L5423:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _347
.L5424:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _347, _353
	movl	-412(%rbp), %eax	# p_index, tmp343
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _353,
	movq	%rax, %rcx	# _354,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5420:
	movq	-408(%rbp), %rax	# this, tmp344
	movq	%rax, -472(%rbp)	# tmp344, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-472(%rbp), %rax	# this, tmp345
	movq	(%rax), %rax	# this_355->_ptr, _356
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _356
	jne	.L5425	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _357
	jmp	.L5426	#
.L5425:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-472(%rbp), %rax	# this, tmp346
	movq	(%rax), %rcx	# this_355->_ptr, _357
.L5426:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-412(%rbp), %eax	# p_index, tmp347
	movslq	%eax, %rdx	# tmp347, _362
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _362, tmp348
	addq	%rax, %rax	# tmp348
	addq	%rdx, %rax	# _362, tmp348
	salq	$3, %rax	#, tmp349
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _364
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-496(%rbp), %rax	#, tmp350
	movq	%rdx, %rsi	# _364,
	movq	%rax, %rdi	# tmp350,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5429	#
.L5402:
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-624(%rbp), %rax	# p_args, tmp351
	movq	(%rax), %rdx	# *p_args_46(D), _24
	leaq	-496(%rbp), %rax	#, tmp352
	movq	%rdx, %rsi	# _24,
	movq	%rax, %rdi	# tmp352,
	call	_ZN7VariantC1ERKS_	#
.LEHE973:
.L5429:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-504(%rbp), %rax	#, tmp353
	leaq	-496(%rbp), %rdx	#, tmp354
	movq	%rdx, %rsi	# tmp354,
	movq	%rax, %rdi	# tmp353,
.LEHB974:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE974:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	leaq	-568(%rbp), %rdx	#, tmp355
	leaq	-504(%rbp), %rax	#, tmp356
	movq	%rdx, %rcx	# tmp355,
	movq	%r13, %rdx	# D.60137,
	movq	%rax, %rsi	# tmp356,
	movq	%r12, %rdi	# _3,
.LEHB975:
	call	*%rbx	# iftmp.355_27
# ./core/method_bind.gen.inc:2909: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3));
	movzbl	%al, %edx	# _25, _26
	leaq	-592(%rbp), %rax	#, tmp357
	movl	%edx, %esi	# _26,
	movq	%rax, %rdi	# tmp357,
	call	_ZN7VariantC1Eb	#
.LEHE975:
	leaq	-504(%rbp), %rax	#, tmp358
	movq	%rax, %rdi	# tmp358,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-496(%rbp), %eax	# D.48108.type, _373
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _373
	je	.L5460	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-496(%rbp), %rax	#, tmp359
	movq	%rax, %rdi	# tmp359,
	call	_ZN7Variant5clearEv	#
.L5460:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-528(%rbp), %eax	# D.48117.type, _372
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _372
	je	.L5461	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-528(%rbp), %rax	#, tmp360
	movq	%rax, %rdi	# tmp360,
	call	_ZN7Variant5clearEv	#
.L5461:
# ./core/variant.h:423: 	}
	nop	
	leaq	-568(%rbp), %rax	#, tmp361
	movq	%rax, %rdi	# tmp361,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-560(%rbp), %eax	# D.48120.type, _371
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _371
	je	.L5462	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-560(%rbp), %rax	#, tmp362
	movq	%rax, %rdi	# tmp362,
	call	_ZN7Variant5clearEv	#
.L5462:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:2910: 		return Variant(ret);
	leaq	-592(%rbp), %rdx	#, tmp363
	movq	-600(%rbp), %rax	# <retval>, tmp364
	movq	%rdx, %rsi	# tmp363,
	movq	%rax, %rdi	# tmp364,
.LEHB976:
	call	_ZN7VariantC1ERKS_	#
.LEHE976:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-592(%rbp), %eax	# ret.type, _374
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _374
	je	.L5463	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-592(%rbp), %rax	#, tmp365
	movq	%rax, %rdi	# tmp365,
	call	_ZN7Variant5clearEv	#
.L5463:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:2910: 		return Variant(ret);
	jmp	.L5459	#
.L5450:
	movq	%rax, %rbx	#, tmp368
	leaq	-504(%rbp), %rax	#, tmp366
	movq	%rax, %rdi	# tmp366,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5437	#
.L5449:
	movq	%rax, %rbx	#, tmp367
.L5437:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-496(%rbp), %eax	# D.48108.type, _375
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _375
	je	.L5464	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-496(%rbp), %rax	#, tmp371
	movq	%rax, %rdi	# tmp371,
	call	_ZN7Variant5clearEv	#
.L5464:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5439	#
.L5448:
	movq	%rax, %rbx	#, tmp372
.L5439:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-528(%rbp), %eax	# D.48117.type, _376
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _376
	je	.L5465	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-528(%rbp), %rax	#, tmp374
	movq	%rax, %rdi	# tmp374,
	call	_ZN7Variant5clearEv	#
.L5465:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5441	#
.L5447:
	movq	%rax, %rbx	#, tmp375
.L5441:
	leaq	-568(%rbp), %rax	#, tmp377
	movq	%rax, %rdi	# tmp377,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5442	#
.L5446:
	movq	%rax, %rbx	#, tmp378
.L5442:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-560(%rbp), %eax	# D.48120.type, _377
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _377
	je	.L5466	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-560(%rbp), %rax	#, tmp380
	movq	%rax, %rdi	# tmp380,
	call	_ZN7Variant5clearEv	#
.L5466:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp378, D.62296
	movq	%rax, %rdi	# D.62296,
.LEHB977:
	call	_Unwind_Resume	#
.LEHE977:
.L5451:
	movq	%rax, %rbx	#, tmp382
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-592(%rbp), %eax	# ret.type, _378
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _378
	je	.L5467	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-592(%rbp), %rax	#, tmp381
	movq	%rax, %rdi	# tmp381,
	call	_ZN7Variant5clearEv	#
.L5467:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp382, D.62297
	movq	%rax, %rdi	# D.62297,
.LEHB978:
	call	_Unwind_Resume	#
.LEHE978:
.L5459:
# ./core/method_bind.gen.inc:2912: 	}
	movq	-600(%rbp), %rax	# <retval>,
	leaq	-24(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3639:
	.section	.gcc_except_table
.LLSDA3639:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3639-.LLSDACSB3639
.LLSDACSB3639:
	.uleb128 .LEHB970-.LFB3639
	.uleb128 .LEHE970-.LEHB970
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB971-.LFB3639
	.uleb128 .LEHE971-.LEHB971
	.uleb128 .L5446-.LFB3639
	.uleb128 0
	.uleb128 .LEHB972-.LFB3639
	.uleb128 .LEHE972-.LEHB972
	.uleb128 .L5447-.LFB3639
	.uleb128 0
	.uleb128 .LEHB973-.LFB3639
	.uleb128 .LEHE973-.LEHB973
	.uleb128 .L5448-.LFB3639
	.uleb128 0
	.uleb128 .LEHB974-.LFB3639
	.uleb128 .LEHE974-.LEHB974
	.uleb128 .L5449-.LFB3639
	.uleb128 0
	.uleb128 .LEHB975-.LFB3639
	.uleb128 .LEHE975-.LEHB975
	.uleb128 .L5450-.LFB3639
	.uleb128 0
	.uleb128 .LEHB976-.LFB3639
	.uleb128 .LEHE976-.LEHB976
	.uleb128 .L5451-.LFB3639
	.uleb128 0
	.uleb128 .LEHB977-.LFB3639
	.uleb128 .LEHE977-.LEHB977
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB978-.LFB3639
	.uleb128 .LEHE978-.LEHB978
	.uleb128 0
	.uleb128 0
.LLSDACSE3639:
	.section	.text._ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE, .-_ZN13MethodBind3RCIbRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv
	.type	_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv, @function
_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv:
.LFB3640:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3640
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:2274: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5469	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5470	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB979:
	call	_ZN6StringC1EPKc	#
.LEHE979:
	jmp	.L5471	#
.L5470:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB980:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE980:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5476	#
.L5475:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62301
	movq	%rax, %rdi	# D.62301,
.LEHB981:
	call	_Unwind_Resume	#
.LEHE981:
.L5476:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5471	#
.L5469:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5471:
# ./core/method_bind.gen.inc:2274: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:2275: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3640:
	.section	.gcc_except_table
.LLSDA3640:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3640-.LLSDACSB3640
.LLSDACSB3640:
	.uleb128 .LEHB979-.LFB3640
	.uleb128 .LEHE979-.LEHB979
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB980-.LFB3640
	.uleb128 .LEHE980-.LEHB980
	.uleb128 .L5475-.LFB3640
	.uleb128 0
	.uleb128 .LEHB981-.LFB3640
	.uleb128 .LEHE981-.LEHB981
	.uleb128 0
	.uleb128 0
.LLSDACSE3640:
	.section	.text._ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv,comdat
	.size	_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv, .-_ZNK11MethodBind3IRK10StringNameP6ObjectS2_E18get_instance_classEv
	.section	.text._ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE
	.type	_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE, @function
_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE:
.LFB3641:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3641
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$616, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -600(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -608(%rbp)	# this, this
	movq	%rdx, -616(%rbp)	# p_object, p_object
	movq	%rcx, -624(%rbp)	# p_args, p_args
	movl	%r8d, -628(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -640(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:2279: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-616(%rbp), %rax	# p_object, tmp228
	movq	%rax, -40(%rbp)	# tmp228, instance
# ./core/method_bind.gen.inc:2281: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-640(%rbp), %rax	# r_error, tmp229
	movl	$0, (%rax)	#, r_error_36(D)->error
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, tmp230
	movq	72(%rax), %rax	# this_38(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-40(%rbp), %rax	# instance, tmp231
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-608(%rbp), %rax	# this, tmp232
	movq	64(%rax), %rax	# this_38(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5478	#,
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, tmp233
	movq	72(%rax), %rax	# this_38(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-40(%rbp), %rax	# instance, tmp234
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-608(%rbp), %rax	# this, tmp235
	movq	64(%rax), %rax	# this_38(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.354_25
	jmp	.L5479	#
.L5478:
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, tmp236
	movq	64(%rax), %rbx	# this_38(D)->method.__pfn, iftmp.354_25
.L5479:
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	cmpl	$2, -628(%rbp)	#, p_arg_count
	jg	.L5480	#,
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, _16
	movq	%rax, -48(%rbp)	# _16, this
	movl	$2, -52(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-48(%rbp), %rax	# this, tmp237
	movl	44(%rax), %eax	# this_63->argument_count, _65
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-52(%rbp), %eax	# p_arg, _66
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp238
	movl	%eax, -56(%rbp)	# tmp238, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -56(%rbp)	#, idx
	js	.L5481	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-48(%rbp), %rax	# this, tmp239
	addq	$24, %rax	#, _68
	movq	%rax, -64(%rbp)	# _68, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-64(%rbp), %rax	# this, tmp240
	addq	$8, %rax	#, _70
	movq	%rax, -72(%rbp)	# _70, this
	movq	-72(%rbp), %rax	# this, tmp241
	movq	%rax, -80(%rbp)	# tmp241, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-80(%rbp), %rax	# this, tmp242
	movq	(%rax), %rax	# this_72->_ptr, _73
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _73
	jne	.L5482	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _74
	jmp	.L5483	#
.L5482:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-80(%rbp), %rax	# this, tmp243
	movq	(%rax), %rax	# this_72->_ptr, _75
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _74
.L5483:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -88(%rbp)	# _74, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -88(%rbp)	#, size
	je	.L5484	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-88(%rbp), %rax	# size, tmp244
	movl	(%rax), %eax	# *size_79, _80
	jmp	.L5485	#
.L5484:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _81
.L5485:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -56(%rbp)	# _81, idx
	jl	.L5487	#,
.L5481:
	movl	$1, %eax	#, iftmp.327_90
	jmp	.L5488	#
.L5487:
	movl	$0, %eax	#, iftmp.327_90
.L5488:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_90
	je	.L5489	#,
	leaq	-576(%rbp), %rax	#, tmp245
	movq	%rax, -96(%rbp)	# tmp245, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-96(%rbp), %rax	# this, tmp246
	movl	$0, (%rax)	#, this_94->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5507	#
.L5489:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-48(%rbp), %rax	# this, tmp247
	addq	$24, %rax	#, _95
	movq	%rax, -104(%rbp)	# _95, this
	movl	-56(%rbp), %eax	# idx, tmp248
	movl	%eax, -108(%rbp)	# tmp248, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-104(%rbp), %rax	# this, tmp249
	addq	$8, %rax	#, _98
	movq	%rax, -120(%rbp)	# _98, this
	movl	-108(%rbp), %eax	# p_index, tmp250
	movl	%eax, -124(%rbp)	# tmp250, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-124(%rbp), %eax	# p_index, tmp252
	shrl	$31, %eax	#, tmp251
	movzbl	%al, %eax	# _101, _102
	testq	%rax, %rax	# _103
	jne	.L5491	#,
	movq	-120(%rbp), %rax	# this, tmp253
	movq	%rax, -136(%rbp)	# tmp253, this
	movq	-136(%rbp), %rax	# this, tmp254
	movq	%rax, -144(%rbp)	# tmp254, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp255
	movq	(%rax), %rax	# this_105->_ptr, _106
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _106
	jne	.L5492	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _107
	jmp	.L5493	#
.L5492:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-144(%rbp), %rax	# this, tmp256
	movq	(%rax), %rax	# this_105->_ptr, _108
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _107
.L5493:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -152(%rbp)	# _107, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -152(%rbp)	#, size
	je	.L5494	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-152(%rbp), %rax	# size, tmp257
	movl	(%rax), %eax	# *size_112, _113
	jmp	.L5495	#
.L5494:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _114
.L5495:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -124(%rbp)	# _114, p_index
	setge	%al	#, _120
	movzbl	%al, %eax	# _120, _121
	testq	%rax, %rax	# _122
	je	.L5496	#,
.L5491:
	movl	$1, %eax	#, iftmp.12_123
	jmp	.L5497	#
.L5496:
	movl	$0, %eax	#, iftmp.12_123
.L5497:
	movzbl	%al, %eax	# iftmp.12_123, _126
	testq	%rax, %rax	# _126
	setne	%al	#, retval.11_127
	testb	%al, %al	# retval.11_127
	je	.L5498	#,
	movq	-120(%rbp), %rax	# this, tmp258
	movq	%rax, -160(%rbp)	# tmp258, this
	movq	-160(%rbp), %rax	# this, tmp259
	movq	%rax, -168(%rbp)	# tmp259, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp260
	movq	(%rax), %rax	# this_129->_ptr, _130
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _130
	jne	.L5499	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _131
	jmp	.L5500	#
.L5499:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_129->_ptr, _132
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _131
.L5500:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -176(%rbp)	# _131, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -176(%rbp)	#, size
	je	.L5501	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-176(%rbp), %rax	# size, tmp262
	movl	(%rax), %eax	# *size_136, _137
	jmp	.L5502	#
.L5501:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _138
.L5502:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _138, _144
	movl	-124(%rbp), %eax	# p_index, tmp263
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _144,
	movq	%rax, %rcx	# _145,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB982:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5498:
	movq	-120(%rbp), %rax	# this, tmp264
	movq	%rax, -184(%rbp)	# tmp264, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-184(%rbp), %rax	# this, tmp265
	movq	(%rax), %rax	# this_146->_ptr, _147
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _147
	jne	.L5503	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _148
	jmp	.L5504	#
.L5503:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-184(%rbp), %rax	# this, tmp266
	movq	(%rax), %rcx	# this_146->_ptr, _148
.L5504:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-124(%rbp), %eax	# p_index, tmp267
	movslq	%eax, %rdx	# tmp267, _153
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _153, tmp268
	addq	%rax, %rax	# tmp268
	addq	%rdx, %rax	# _153, tmp268
	salq	$3, %rax	#, tmp269
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _155
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-576(%rbp), %rax	#, tmp270
	movq	%rdx, %rsi	# _155,
	movq	%rax, %rdi	# tmp270,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5507	#
.L5480:
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-624(%rbp), %rax	# p_args, tmp271
	addq	$16, %rax	#, _17
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-576(%rbp), %rax	#, tmp272
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp272,
	call	_ZN7VariantC1ERKS_	#
.LEHE982:
.L5507:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-584(%rbp), %rax	#, tmp273
	leaq	-576(%rbp), %rdx	#, tmp274
	movq	%rdx, %rsi	# tmp274,
	movq	%rax, %rdi	# tmp273,
.LEHB983:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE983:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	cmpl	$1, -628(%rbp)	#, p_arg_count
	jg	.L5509	#,
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, _19
	movq	%rax, -192(%rbp)	# _19, this
	movl	$1, -196(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-192(%rbp), %rax	# this, tmp275
	movl	44(%rax), %eax	# this_162->argument_count, _164
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-196(%rbp), %eax	# p_arg, _165
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp276
	movl	%eax, -200(%rbp)	# tmp276, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -200(%rbp)	#, idx
	js	.L5510	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-192(%rbp), %rax	# this, tmp277
	addq	$24, %rax	#, _167
	movq	%rax, -208(%rbp)	# _167, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-208(%rbp), %rax	# this, tmp278
	addq	$8, %rax	#, _169
	movq	%rax, -216(%rbp)	# _169, this
	movq	-216(%rbp), %rax	# this, tmp279
	movq	%rax, -224(%rbp)	# tmp279, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-224(%rbp), %rax	# this, tmp280
	movq	(%rax), %rax	# this_171->_ptr, _172
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _172
	jne	.L5511	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _173
	jmp	.L5512	#
.L5511:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-224(%rbp), %rax	# this, tmp281
	movq	(%rax), %rax	# this_171->_ptr, _174
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _173
.L5512:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -232(%rbp)	# _173, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -232(%rbp)	#, size
	je	.L5513	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-232(%rbp), %rax	# size, tmp282
	movl	(%rax), %eax	# *size_178, _179
	jmp	.L5514	#
.L5513:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _180
.L5514:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -200(%rbp)	# _180, idx
	jl	.L5516	#,
.L5510:
	movl	$1, %eax	#, iftmp.327_189
	jmp	.L5517	#
.L5516:
	movl	$0, %eax	#, iftmp.327_189
.L5517:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_189
	je	.L5518	#,
	leaq	-544(%rbp), %rax	#, tmp283
	movq	%rax, -240(%rbp)	# tmp283, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-240(%rbp), %rax	# this, tmp284
	movl	$0, (%rax)	#, this_193->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5536	#
.L5518:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-192(%rbp), %rax	# this, tmp285
	addq	$24, %rax	#, _194
	movq	%rax, -248(%rbp)	# _194, this
	movl	-200(%rbp), %eax	# idx, tmp286
	movl	%eax, -252(%rbp)	# tmp286, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-248(%rbp), %rax	# this, tmp287
	addq	$8, %rax	#, _197
	movq	%rax, -264(%rbp)	# _197, this
	movl	-252(%rbp), %eax	# p_index, tmp288
	movl	%eax, -268(%rbp)	# tmp288, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-268(%rbp), %eax	# p_index, tmp290
	shrl	$31, %eax	#, tmp289
	movzbl	%al, %eax	# _200, _201
	testq	%rax, %rax	# _202
	jne	.L5520	#,
	movq	-264(%rbp), %rax	# this, tmp291
	movq	%rax, -280(%rbp)	# tmp291, this
	movq	-280(%rbp), %rax	# this, tmp292
	movq	%rax, -288(%rbp)	# tmp292, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-288(%rbp), %rax	# this, tmp293
	movq	(%rax), %rax	# this_204->_ptr, _205
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _205
	jne	.L5521	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _206
	jmp	.L5522	#
.L5521:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-288(%rbp), %rax	# this, tmp294
	movq	(%rax), %rax	# this_204->_ptr, _207
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _206
.L5522:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -296(%rbp)	# _206, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -296(%rbp)	#, size
	je	.L5523	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-296(%rbp), %rax	# size, tmp295
	movl	(%rax), %eax	# *size_211, _212
	jmp	.L5524	#
.L5523:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _213
.L5524:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -268(%rbp)	# _213, p_index
	setge	%al	#, _219
	movzbl	%al, %eax	# _219, _220
	testq	%rax, %rax	# _221
	je	.L5525	#,
.L5520:
	movl	$1, %eax	#, iftmp.12_222
	jmp	.L5526	#
.L5525:
	movl	$0, %eax	#, iftmp.12_222
.L5526:
	movzbl	%al, %eax	# iftmp.12_222, _225
	testq	%rax, %rax	# _225
	setne	%al	#, retval.11_226
	testb	%al, %al	# retval.11_226
	je	.L5527	#,
	movq	-264(%rbp), %rax	# this, tmp296
	movq	%rax, -304(%rbp)	# tmp296, this
	movq	-304(%rbp), %rax	# this, tmp297
	movq	%rax, -312(%rbp)	# tmp297, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp298
	movq	(%rax), %rax	# this_228->_ptr, _229
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _229
	jne	.L5528	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _230
	jmp	.L5529	#
.L5528:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-312(%rbp), %rax	# this, tmp299
	movq	(%rax), %rax	# this_228->_ptr, _231
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _230
.L5529:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -320(%rbp)	# _230, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -320(%rbp)	#, size
	je	.L5530	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-320(%rbp), %rax	# size, tmp300
	movl	(%rax), %eax	# *size_235, _236
	jmp	.L5531	#
.L5530:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _237
.L5531:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _237, _243
	movl	-268(%rbp), %eax	# p_index, tmp301
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _243,
	movq	%rax, %rcx	# _244,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB984:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5527:
	movq	-264(%rbp), %rax	# this, tmp302
	movq	%rax, -328(%rbp)	# tmp302, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-328(%rbp), %rax	# this, tmp303
	movq	(%rax), %rax	# this_245->_ptr, _246
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _246
	jne	.L5532	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _247
	jmp	.L5533	#
.L5532:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-328(%rbp), %rax	# this, tmp304
	movq	(%rax), %rcx	# this_245->_ptr, _247
.L5533:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-268(%rbp), %eax	# p_index, tmp305
	movslq	%eax, %rdx	# tmp305, _252
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _252, tmp306
	addq	%rax, %rax	# tmp306
	addq	%rdx, %rax	# _252, tmp306
	salq	$3, %rax	#, tmp307
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _254
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-544(%rbp), %rax	#, tmp308
	movq	%rdx, %rsi	# _254,
	movq	%rax, %rdi	# tmp308,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5536	#
.L5509:
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-624(%rbp), %rax	# p_args, tmp309
	addq	$8, %rax	#, _20
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	(%rax), %rdx	# *_20, _21
	leaq	-544(%rbp), %rax	#, tmp310
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp310,
	call	_ZN7VariantC1ERKS_	#
.LEHE984:
.L5536:
# ./core/method_bind.h:69: 		return p_variant;
	leaq	-544(%rbp), %rax	#, tmp311
	movq	%rax, %rdi	# tmp311,
.LEHB985:
	call	_ZNK7VariantcvP6ObjectEv	#
	movq	%rax, %r13	#, D.59941
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	cmpl	$0, -628(%rbp)	#, p_arg_count
	jg	.L5538	#,
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-608(%rbp), %rax	# this, _23
	movq	%rax, -336(%rbp)	# _23, this
	movl	$0, -340(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-336(%rbp), %rax	# this, tmp312
	movl	44(%rax), %eax	# this_263->argument_count, _265
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-340(%rbp), %eax	# p_arg, _266
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp313
	movl	%eax, -344(%rbp)	# tmp313, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -344(%rbp)	#, idx
	js	.L5539	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-336(%rbp), %rax	# this, tmp314
	addq	$24, %rax	#, _268
	movq	%rax, -352(%rbp)	# _268, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-352(%rbp), %rax	# this, tmp315
	addq	$8, %rax	#, _270
	movq	%rax, -360(%rbp)	# _270, this
	movq	-360(%rbp), %rax	# this, tmp316
	movq	%rax, -368(%rbp)	# tmp316, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-368(%rbp), %rax	# this, tmp317
	movq	(%rax), %rax	# this_272->_ptr, _273
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _273
	jne	.L5540	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _274
	jmp	.L5541	#
.L5540:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-368(%rbp), %rax	# this, tmp318
	movq	(%rax), %rax	# this_272->_ptr, _275
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _274
.L5541:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -376(%rbp)	# _274, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -376(%rbp)	#, size
	je	.L5542	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-376(%rbp), %rax	# size, tmp319
	movl	(%rax), %eax	# *size_279, _280
	jmp	.L5543	#
.L5542:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _281
.L5543:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -344(%rbp)	# _281, idx
	jl	.L5545	#,
.L5539:
	movl	$1, %eax	#, iftmp.327_290
	jmp	.L5546	#
.L5545:
	movl	$0, %eax	#, iftmp.327_290
.L5546:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_290
	je	.L5547	#,
	leaq	-512(%rbp), %rax	#, tmp320
	movq	%rax, -384(%rbp)	# tmp320, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-384(%rbp), %rax	# this, tmp321
	movl	$0, (%rax)	#, this_294->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5565	#
.L5547:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-336(%rbp), %rax	# this, tmp322
	addq	$24, %rax	#, _295
	movq	%rax, -392(%rbp)	# _295, this
	movl	-344(%rbp), %eax	# idx, tmp323
	movl	%eax, -396(%rbp)	# tmp323, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-392(%rbp), %rax	# this, tmp324
	addq	$8, %rax	#, _298
	movq	%rax, -408(%rbp)	# _298, this
	movl	-396(%rbp), %eax	# p_index, tmp325
	movl	%eax, -412(%rbp)	# tmp325, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-412(%rbp), %eax	# p_index, tmp327
	shrl	$31, %eax	#, tmp326
	movzbl	%al, %eax	# _301, _302
	testq	%rax, %rax	# _303
	jne	.L5549	#,
	movq	-408(%rbp), %rax	# this, tmp328
	movq	%rax, -424(%rbp)	# tmp328, this
	movq	-424(%rbp), %rax	# this, tmp329
	movq	%rax, -432(%rbp)	# tmp329, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-432(%rbp), %rax	# this, tmp330
	movq	(%rax), %rax	# this_305->_ptr, _306
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _306
	jne	.L5550	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _307
	jmp	.L5551	#
.L5550:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-432(%rbp), %rax	# this, tmp331
	movq	(%rax), %rax	# this_305->_ptr, _308
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _307
.L5551:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -440(%rbp)	# _307, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -440(%rbp)	#, size
	je	.L5552	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-440(%rbp), %rax	# size, tmp332
	movl	(%rax), %eax	# *size_312, _313
	jmp	.L5553	#
.L5552:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _314
.L5553:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -412(%rbp)	# _314, p_index
	setge	%al	#, _320
	movzbl	%al, %eax	# _320, _321
	testq	%rax, %rax	# _322
	je	.L5554	#,
.L5549:
	movl	$1, %eax	#, iftmp.12_323
	jmp	.L5555	#
.L5554:
	movl	$0, %eax	#, iftmp.12_323
.L5555:
	movzbl	%al, %eax	# iftmp.12_323, _326
	testq	%rax, %rax	# _326
	setne	%al	#, retval.11_327
	testb	%al, %al	# retval.11_327
	je	.L5556	#,
	movq	-408(%rbp), %rax	# this, tmp333
	movq	%rax, -448(%rbp)	# tmp333, this
	movq	-448(%rbp), %rax	# this, tmp334
	movq	%rax, -456(%rbp)	# tmp334, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-456(%rbp), %rax	# this, tmp335
	movq	(%rax), %rax	# this_329->_ptr, _330
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _330
	jne	.L5557	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _331
	jmp	.L5558	#
.L5557:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-456(%rbp), %rax	# this, tmp336
	movq	(%rax), %rax	# this_329->_ptr, _332
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _331
.L5558:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -464(%rbp)	# _331, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -464(%rbp)	#, size
	je	.L5559	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-464(%rbp), %rax	# size, tmp337
	movl	(%rax), %eax	# *size_336, _337
	jmp	.L5560	#
.L5559:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _338
.L5560:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _338, _344
	movl	-412(%rbp), %eax	# p_index, tmp338
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _344,
	movq	%rax, %rcx	# _345,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5556:
	movq	-408(%rbp), %rax	# this, tmp339
	movq	%rax, -472(%rbp)	# tmp339, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-472(%rbp), %rax	# this, tmp340
	movq	(%rax), %rax	# this_346->_ptr, _347
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _347
	jne	.L5561	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _348
	jmp	.L5562	#
.L5561:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-472(%rbp), %rax	# this, tmp341
	movq	(%rax), %rcx	# this_346->_ptr, _348
.L5562:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-412(%rbp), %eax	# p_index, tmp342
	movslq	%eax, %rdx	# tmp342, _353
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _353, tmp343
	addq	%rax, %rax	# tmp343
	addq	%rdx, %rax	# _353, tmp343
	salq	$3, %rax	#, tmp344
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _355
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-512(%rbp), %rax	#, tmp345
	movq	%rdx, %rsi	# _355,
	movq	%rax, %rdi	# tmp345,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5565	#
.L5538:
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	movq	-624(%rbp), %rax	# p_args, tmp346
	movq	(%rax), %rdx	# *p_args_42(D), _24
	leaq	-512(%rbp), %rax	#, tmp347
	movq	%rdx, %rsi	# _24,
	movq	%rax, %rdi	# tmp347,
	call	_ZN7VariantC1ERKS_	#
.LEHE985:
.L5565:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-520(%rbp), %rax	#, tmp348
	leaq	-512(%rbp), %rdx	#, tmp349
	movq	%rdx, %rsi	# tmp349,
	movq	%rax, %rdi	# tmp348,
.LEHB986:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE986:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	leaq	-584(%rbp), %rdx	#, tmp350
	leaq	-520(%rbp), %rax	#, tmp351
	movq	%rdx, %rcx	# tmp350,
	movq	%r13, %rdx	# D.59941,
	movq	%rax, %rsi	# tmp351,
	movq	%r12, %rdi	# _3,
.LEHB987:
	call	*%rbx	# iftmp.354_25
.LEHE987:
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	leaq	-520(%rbp), %rax	#, tmp352
	movq	%rax, %rdi	# tmp352,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-512(%rbp), %eax	# D.48130.type, _365
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _365
	je	.L5591	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-512(%rbp), %rax	#, tmp353
	movq	%rax, %rdi	# tmp353,
	call	_ZN7Variant5clearEv	#
.L5591:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-544(%rbp), %eax	# D.48134.type, _364
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _364
	je	.L5592	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-544(%rbp), %rax	#, tmp354
	movq	%rax, %rdi	# tmp354,
	call	_ZN7Variant5clearEv	#
.L5592:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	leaq	-584(%rbp), %rax	#, tmp355
	movq	%rax, %rdi	# tmp355,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-576(%rbp), %eax	# D.48137.type, _363
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _363
	je	.L5593	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-576(%rbp), %rax	#, tmp356
	movq	%rax, %rdi	# tmp356,
	call	_ZN7Variant5clearEv	#
.L5593:
# ./core/variant.h:423: 	}
	nop	
	movq	-600(%rbp), %rax	# <retval>, tmp357
	movq	%rax, -480(%rbp)	# tmp357, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-480(%rbp), %rax	# this, tmp358
	movl	$0, (%rax)	#, this_362->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:2305: 		return Variant();
	jmp	.L5590	#
.L5583:
	movq	%rax, %rbx	#, tmp361
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	leaq	-520(%rbp), %rax	#, tmp359
	movq	%rax, %rdi	# tmp359,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5572	#
.L5582:
	movq	%rax, %rbx	#, tmp360
.L5572:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-512(%rbp), %eax	# D.48130.type, _366
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _366
	je	.L5594	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-512(%rbp), %rax	#, tmp364
	movq	%rax, %rdi	# tmp364,
	call	_ZN7Variant5clearEv	#
.L5594:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5574	#
.L5581:
	movq	%rax, %rbx	#, tmp365
.L5574:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-544(%rbp), %eax	# D.48134.type, _367
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _367
	je	.L5595	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-544(%rbp), %rax	#, tmp367
	movq	%rax, %rdi	# tmp367,
	call	_ZN7Variant5clearEv	#
.L5595:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5576	#
.L5580:
	movq	%rax, %rbx	#, tmp368
.L5576:
# ./core/method_bind.gen.inc:2303: 		(instance->*method)(_VC(1), _VC(2), _VC(3));
	leaq	-584(%rbp), %rax	#, tmp370
	movq	%rax, %rdi	# tmp370,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5577	#
.L5579:
	movq	%rax, %rbx	#, tmp371
.L5577:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-576(%rbp), %eax	# D.48137.type, _368
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _368
	je	.L5596	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-576(%rbp), %rax	#, tmp373
	movq	%rax, %rdi	# tmp373,
	call	_ZN7Variant5clearEv	#
.L5596:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp371, D.62303
	movq	%rax, %rdi	# D.62303,
.LEHB988:
	call	_Unwind_Resume	#
.LEHE988:
.L5590:
# ./core/method_bind.gen.inc:2306: 	}
	movq	-600(%rbp), %rax	# <retval>,
	leaq	-24(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3641:
	.section	.gcc_except_table
.LLSDA3641:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3641-.LLSDACSB3641
.LLSDACSB3641:
	.uleb128 .LEHB982-.LFB3641
	.uleb128 .LEHE982-.LEHB982
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB983-.LFB3641
	.uleb128 .LEHE983-.LEHB983
	.uleb128 .L5579-.LFB3641
	.uleb128 0
	.uleb128 .LEHB984-.LFB3641
	.uleb128 .LEHE984-.LEHB984
	.uleb128 .L5580-.LFB3641
	.uleb128 0
	.uleb128 .LEHB985-.LFB3641
	.uleb128 .LEHE985-.LEHB985
	.uleb128 .L5581-.LFB3641
	.uleb128 0
	.uleb128 .LEHB986-.LFB3641
	.uleb128 .LEHE986-.LEHB986
	.uleb128 .L5582-.LFB3641
	.uleb128 0
	.uleb128 .LEHB987-.LFB3641
	.uleb128 .LEHE987-.LEHB987
	.uleb128 .L5583-.LFB3641
	.uleb128 0
	.uleb128 .LEHB988-.LFB3641
	.uleb128 .LEHE988-.LEHB988
	.uleb128 0
	.uleb128 0
.LLSDACSE3641:
	.section	.text._ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE, .-_ZN11MethodBind3IRK10StringNameP6ObjectS2_E4callES4_PPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv,"axG",@progbits,_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv
	.type	_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv, @function
_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv:
.LFB3642:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3642
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:4146: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5598	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5599	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB989:
	call	_ZN6StringC1EPKc	#
.LEHE989:
	jmp	.L5600	#
.L5599:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB990:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE990:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5605	#
.L5604:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62307
	movq	%rax, %rdi	# D.62307,
.LEHB991:
	call	_Unwind_Resume	#
.LEHE991:
.L5605:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5600	#
.L5598:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5600:
# ./core/method_bind.gen.inc:4146: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:4147: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3642:
	.section	.gcc_except_table
.LLSDA3642:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3642-.LLSDACSB3642
.LLSDACSB3642:
	.uleb128 .LEHB989-.LFB3642
	.uleb128 .LEHE989-.LEHB989
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB990-.LFB3642
	.uleb128 .LEHE990-.LEHB990
	.uleb128 .L5604-.LFB3642
	.uleb128 0
	.uleb128 .LEHB991-.LFB3642
	.uleb128 .LEHE991-.LEHB991
	.uleb128 0
	.uleb128 0
.LLSDACSE3642:
	.section	.text._ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv,"axG",@progbits,_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv,comdat
	.size	_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv, .-_ZNK12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE18get_instance_classEv
	.section	.text._ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE,"axG",@progbits,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE,comdat
	.align 2
	.weak	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE
	.type	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE, @function
_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE:
.LFB3643:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3643
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r14	#
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$992, %rsp	#,
	.cfi_offset 14, -24
	.cfi_offset 13, -32
	.cfi_offset 12, -40
	.cfi_offset 3, -48
	movq	%rdi, -984(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -992(%rbp)	# this, this
	movq	%rdx, -1000(%rbp)	# p_object, p_object
	movq	%rcx, -1008(%rbp)	# p_args, p_args
	movl	%r8d, -1012(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -1024(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:4151: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-1000(%rbp), %rax	# p_object, tmp324
	movq	%rax, -40(%rbp)	# tmp324, instance
# ./core/method_bind.gen.inc:4153: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-1024(%rbp), %rax	# r_error, tmp325
	movl	$0, (%rax)	#, r_error_52(D)->error
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, tmp326
	movq	72(%rax), %rax	# this_54(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-40(%rbp), %rax	# instance, tmp327
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-992(%rbp), %rax	# this, tmp328
	movq	64(%rax), %rax	# this_54(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5607	#,
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, tmp329
	movq	72(%rax), %rax	# this_54(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-40(%rbp), %rax	# instance, tmp330
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-992(%rbp), %rax	# this, tmp331
	movq	64(%rax), %rax	# this_54(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.353_34
	jmp	.L5608	#
.L5607:
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, tmp332
	movq	64(%rax), %rbx	# this_54(D)->method.__pfn, iftmp.353_34
.L5608:
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	cmpl	$4, -1012(%rbp)	#, p_arg_count
	jg	.L5609	#,
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, _16
	movq	%rax, -48(%rbp)	# _16, this
	movl	$4, -52(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-48(%rbp), %rax	# this, tmp333
	movl	44(%rax), %eax	# this_93->argument_count, _95
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-52(%rbp), %eax	# p_arg, _96
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp334
	movl	%eax, -56(%rbp)	# tmp334, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -56(%rbp)	#, idx
	js	.L5610	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-48(%rbp), %rax	# this, tmp335
	addq	$24, %rax	#, _98
	movq	%rax, -64(%rbp)	# _98, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-64(%rbp), %rax	# this, tmp336
	addq	$8, %rax	#, _100
	movq	%rax, -72(%rbp)	# _100, this
	movq	-72(%rbp), %rax	# this, tmp337
	movq	%rax, -80(%rbp)	# tmp337, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-80(%rbp), %rax	# this, tmp338
	movq	(%rax), %rax	# this_102->_ptr, _103
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _103
	jne	.L5611	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _104
	jmp	.L5612	#
.L5611:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-80(%rbp), %rax	# this, tmp339
	movq	(%rax), %rax	# this_102->_ptr, _105
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _104
.L5612:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -88(%rbp)	# _104, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -88(%rbp)	#, size
	je	.L5613	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-88(%rbp), %rax	# size, tmp340
	movl	(%rax), %eax	# *size_109, _110
	jmp	.L5614	#
.L5613:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _111
.L5614:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -56(%rbp)	# _111, idx
	jl	.L5616	#,
.L5610:
	movl	$1, %eax	#, iftmp.327_120
	jmp	.L5617	#
.L5616:
	movl	$0, %eax	#, iftmp.327_120
.L5617:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_120
	je	.L5618	#,
	leaq	-944(%rbp), %rax	#, tmp341
	movq	%rax, -96(%rbp)	# tmp341, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-96(%rbp), %rax	# this, tmp342
	movl	$0, (%rax)	#, this_124->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5636	#
.L5618:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-48(%rbp), %rax	# this, tmp343
	addq	$24, %rax	#, _125
	movq	%rax, -104(%rbp)	# _125, this
	movl	-56(%rbp), %eax	# idx, tmp344
	movl	%eax, -108(%rbp)	# tmp344, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-104(%rbp), %rax	# this, tmp345
	addq	$8, %rax	#, _128
	movq	%rax, -120(%rbp)	# _128, this
	movl	-108(%rbp), %eax	# p_index, tmp346
	movl	%eax, -124(%rbp)	# tmp346, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-124(%rbp), %eax	# p_index, tmp348
	shrl	$31, %eax	#, tmp347
	movzbl	%al, %eax	# _131, _132
	testq	%rax, %rax	# _133
	jne	.L5620	#,
	movq	-120(%rbp), %rax	# this, tmp349
	movq	%rax, -136(%rbp)	# tmp349, this
	movq	-136(%rbp), %rax	# this, tmp350
	movq	%rax, -144(%rbp)	# tmp350, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp351
	movq	(%rax), %rax	# this_135->_ptr, _136
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _136
	jne	.L5621	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _137
	jmp	.L5622	#
.L5621:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-144(%rbp), %rax	# this, tmp352
	movq	(%rax), %rax	# this_135->_ptr, _138
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _137
.L5622:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -152(%rbp)	# _137, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -152(%rbp)	#, size
	je	.L5623	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-152(%rbp), %rax	# size, tmp353
	movl	(%rax), %eax	# *size_142, _143
	jmp	.L5624	#
.L5623:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _144
.L5624:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -124(%rbp)	# _144, p_index
	setge	%al	#, _150
	movzbl	%al, %eax	# _150, _151
	testq	%rax, %rax	# _152
	je	.L5625	#,
.L5620:
	movl	$1, %eax	#, iftmp.12_153
	jmp	.L5626	#
.L5625:
	movl	$0, %eax	#, iftmp.12_153
.L5626:
	movzbl	%al, %eax	# iftmp.12_153, _156
	testq	%rax, %rax	# _156
	setne	%al	#, retval.11_157
	testb	%al, %al	# retval.11_157
	je	.L5627	#,
	movq	-120(%rbp), %rax	# this, tmp354
	movq	%rax, -160(%rbp)	# tmp354, this
	movq	-160(%rbp), %rax	# this, tmp355
	movq	%rax, -168(%rbp)	# tmp355, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp356
	movq	(%rax), %rax	# this_159->_ptr, _160
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _160
	jne	.L5628	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _161
	jmp	.L5629	#
.L5628:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp357
	movq	(%rax), %rax	# this_159->_ptr, _162
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _161
.L5629:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -176(%rbp)	# _161, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -176(%rbp)	#, size
	je	.L5630	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-176(%rbp), %rax	# size, tmp358
	movl	(%rax), %eax	# *size_166, _167
	jmp	.L5631	#
.L5630:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _168
.L5631:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _168, _174
	movl	-124(%rbp), %eax	# p_index, tmp359
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _174,
	movq	%rax, %rcx	# _175,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB992:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5627:
	movq	-120(%rbp), %rax	# this, tmp360
	movq	%rax, -184(%rbp)	# tmp360, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-184(%rbp), %rax	# this, tmp361
	movq	(%rax), %rax	# this_176->_ptr, _177
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _177
	jne	.L5632	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _178
	jmp	.L5633	#
.L5632:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-184(%rbp), %rax	# this, tmp362
	movq	(%rax), %rcx	# this_176->_ptr, _178
.L5633:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-124(%rbp), %eax	# p_index, tmp363
	movslq	%eax, %rdx	# tmp363, _183
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _183, tmp364
	addq	%rax, %rax	# tmp364
	addq	%rdx, %rax	# _183, tmp364
	salq	$3, %rax	#, tmp365
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _185
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-944(%rbp), %rax	#, tmp366
	movq	%rdx, %rsi	# _185,
	movq	%rax, %rdi	# tmp366,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5636	#
.L5609:
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-1008(%rbp), %rax	# p_args, tmp367
	addq	$32, %rax	#, _17
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-944(%rbp), %rax	#, tmp368
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp368,
	call	_ZN7VariantC1ERKS_	#
.LEHE992:
.L5636:
# ./core/method_bind.h:69: 		return p_variant;
	leaq	-944(%rbp), %rax	#, tmp369
	movq	%rax, %rdi	# tmp369,
.LEHB993:
	call	_ZNK7VariantcvjEv	#
	movl	%eax, %r14d	#, D.60272
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	cmpl	$3, -1012(%rbp)	#, p_arg_count
	jg	.L5638	#,
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, _20
	movq	%rax, -192(%rbp)	# _20, this
	movl	$3, -196(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-192(%rbp), %rax	# this, tmp370
	movl	44(%rax), %eax	# this_194->argument_count, _196
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-196(%rbp), %eax	# p_arg, _197
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp371
	movl	%eax, -200(%rbp)	# tmp371, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -200(%rbp)	#, idx
	js	.L5639	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-192(%rbp), %rax	# this, tmp372
	addq	$24, %rax	#, _199
	movq	%rax, -208(%rbp)	# _199, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-208(%rbp), %rax	# this, tmp373
	addq	$8, %rax	#, _201
	movq	%rax, -216(%rbp)	# _201, this
	movq	-216(%rbp), %rax	# this, tmp374
	movq	%rax, -224(%rbp)	# tmp374, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-224(%rbp), %rax	# this, tmp375
	movq	(%rax), %rax	# this_203->_ptr, _204
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _204
	jne	.L5640	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _205
	jmp	.L5641	#
.L5640:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-224(%rbp), %rax	# this, tmp376
	movq	(%rax), %rax	# this_203->_ptr, _206
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _205
.L5641:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -232(%rbp)	# _205, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -232(%rbp)	#, size
	je	.L5642	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-232(%rbp), %rax	# size, tmp377
	movl	(%rax), %eax	# *size_210, _211
	jmp	.L5643	#
.L5642:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _212
.L5643:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -200(%rbp)	# _212, idx
	jl	.L5645	#,
.L5639:
	movl	$1, %eax	#, iftmp.327_221
	jmp	.L5646	#
.L5645:
	movl	$0, %eax	#, iftmp.327_221
.L5646:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_221
	je	.L5647	#,
	leaq	-896(%rbp), %rax	#, tmp378
	movq	%rax, -240(%rbp)	# tmp378, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-240(%rbp), %rax	# this, tmp379
	movl	$0, (%rax)	#, this_225->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5665	#
.L5647:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-192(%rbp), %rax	# this, tmp380
	addq	$24, %rax	#, _226
	movq	%rax, -248(%rbp)	# _226, this
	movl	-200(%rbp), %eax	# idx, tmp381
	movl	%eax, -252(%rbp)	# tmp381, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-248(%rbp), %rax	# this, tmp382
	addq	$8, %rax	#, _229
	movq	%rax, -264(%rbp)	# _229, this
	movl	-252(%rbp), %eax	# p_index, tmp383
	movl	%eax, -268(%rbp)	# tmp383, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-268(%rbp), %eax	# p_index, tmp385
	shrl	$31, %eax	#, tmp384
	movzbl	%al, %eax	# _232, _233
	testq	%rax, %rax	# _234
	jne	.L5649	#,
	movq	-264(%rbp), %rax	# this, tmp386
	movq	%rax, -280(%rbp)	# tmp386, this
	movq	-280(%rbp), %rax	# this, tmp387
	movq	%rax, -288(%rbp)	# tmp387, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-288(%rbp), %rax	# this, tmp388
	movq	(%rax), %rax	# this_236->_ptr, _237
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _237
	jne	.L5650	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _238
	jmp	.L5651	#
.L5650:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-288(%rbp), %rax	# this, tmp389
	movq	(%rax), %rax	# this_236->_ptr, _239
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _238
.L5651:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -296(%rbp)	# _238, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -296(%rbp)	#, size
	je	.L5652	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-296(%rbp), %rax	# size, tmp390
	movl	(%rax), %eax	# *size_243, _244
	jmp	.L5653	#
.L5652:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _245
.L5653:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -268(%rbp)	# _245, p_index
	setge	%al	#, _251
	movzbl	%al, %eax	# _251, _252
	testq	%rax, %rax	# _253
	je	.L5654	#,
.L5649:
	movl	$1, %eax	#, iftmp.12_254
	jmp	.L5655	#
.L5654:
	movl	$0, %eax	#, iftmp.12_254
.L5655:
	movzbl	%al, %eax	# iftmp.12_254, _257
	testq	%rax, %rax	# _257
	setne	%al	#, retval.11_258
	testb	%al, %al	# retval.11_258
	je	.L5656	#,
	movq	-264(%rbp), %rax	# this, tmp391
	movq	%rax, -304(%rbp)	# tmp391, this
	movq	-304(%rbp), %rax	# this, tmp392
	movq	%rax, -312(%rbp)	# tmp392, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp393
	movq	(%rax), %rax	# this_260->_ptr, _261
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _261
	jne	.L5657	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _262
	jmp	.L5658	#
.L5657:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-312(%rbp), %rax	# this, tmp394
	movq	(%rax), %rax	# this_260->_ptr, _263
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _262
.L5658:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -320(%rbp)	# _262, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -320(%rbp)	#, size
	je	.L5659	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-320(%rbp), %rax	# size, tmp395
	movl	(%rax), %eax	# *size_267, _268
	jmp	.L5660	#
.L5659:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _269
.L5660:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _269, _275
	movl	-268(%rbp), %eax	# p_index, tmp396
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _275,
	movq	%rax, %rcx	# _276,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5656:
	movq	-264(%rbp), %rax	# this, tmp397
	movq	%rax, -328(%rbp)	# tmp397, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-328(%rbp), %rax	# this, tmp398
	movq	(%rax), %rax	# this_277->_ptr, _278
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _278
	jne	.L5661	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _279
	jmp	.L5662	#
.L5661:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-328(%rbp), %rax	# this, tmp399
	movq	(%rax), %rcx	# this_277->_ptr, _279
.L5662:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-268(%rbp), %eax	# p_index, tmp400
	movslq	%eax, %rdx	# tmp400, _284
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _284, tmp401
	addq	%rax, %rax	# tmp401
	addq	%rdx, %rax	# _284, tmp401
	salq	$3, %rax	#, tmp402
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _286
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-896(%rbp), %rax	#, tmp403
	movq	%rdx, %rsi	# _286,
	movq	%rax, %rdi	# tmp403,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5665	#
.L5638:
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-1008(%rbp), %rax	# p_args, tmp404
	addq	$24, %rax	#, _21
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	(%rax), %rdx	# *_21, _22
	leaq	-896(%rbp), %rax	#, tmp405
	movq	%rdx, %rsi	# _22,
	movq	%rax, %rdi	# tmp405,
	call	_ZN7VariantC1ERKS_	#
.LEHE993:
.L5665:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-912(%rbp), %rax	#, tmp406
	leaq	-896(%rbp), %rdx	#, tmp407
	movq	%rdx, %rsi	# tmp407,
	movq	%rax, %rdi	# tmp406,
.LEHB994:
	call	_ZNK7Variantcv6VectorIS_EEv	#
.LEHE994:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	cmpl	$2, -1012(%rbp)	#, p_arg_count
	jg	.L5667	#,
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, _23
	movq	%rax, -336(%rbp)	# _23, this
	movl	$2, -340(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-336(%rbp), %rax	# this, tmp408
	movl	44(%rax), %eax	# this_293->argument_count, _295
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-340(%rbp), %eax	# p_arg, _296
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp409
	movl	%eax, -344(%rbp)	# tmp409, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -344(%rbp)	#, idx
	js	.L5668	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-336(%rbp), %rax	# this, tmp410
	addq	$24, %rax	#, _298
	movq	%rax, -352(%rbp)	# _298, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-352(%rbp), %rax	# this, tmp411
	addq	$8, %rax	#, _300
	movq	%rax, -360(%rbp)	# _300, this
	movq	-360(%rbp), %rax	# this, tmp412
	movq	%rax, -368(%rbp)	# tmp412, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-368(%rbp), %rax	# this, tmp413
	movq	(%rax), %rax	# this_302->_ptr, _303
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _303
	jne	.L5669	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _304
	jmp	.L5670	#
.L5669:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-368(%rbp), %rax	# this, tmp414
	movq	(%rax), %rax	# this_302->_ptr, _305
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _304
.L5670:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -376(%rbp)	# _304, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -376(%rbp)	#, size
	je	.L5671	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-376(%rbp), %rax	# size, tmp415
	movl	(%rax), %eax	# *size_309, _310
	jmp	.L5672	#
.L5671:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _311
.L5672:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -344(%rbp)	# _311, idx
	jl	.L5674	#,
.L5668:
	movl	$1, %eax	#, iftmp.327_320
	jmp	.L5675	#
.L5674:
	movl	$0, %eax	#, iftmp.327_320
.L5675:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_320
	je	.L5676	#,
	leaq	-864(%rbp), %rax	#, tmp416
	movq	%rax, -384(%rbp)	# tmp416, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-384(%rbp), %rax	# this, tmp417
	movl	$0, (%rax)	#, this_324->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5694	#
.L5676:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-336(%rbp), %rax	# this, tmp418
	addq	$24, %rax	#, _325
	movq	%rax, -392(%rbp)	# _325, this
	movl	-344(%rbp), %eax	# idx, tmp419
	movl	%eax, -396(%rbp)	# tmp419, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-392(%rbp), %rax	# this, tmp420
	addq	$8, %rax	#, _328
	movq	%rax, -408(%rbp)	# _328, this
	movl	-396(%rbp), %eax	# p_index, tmp421
	movl	%eax, -412(%rbp)	# tmp421, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-412(%rbp), %eax	# p_index, tmp423
	shrl	$31, %eax	#, tmp422
	movzbl	%al, %eax	# _331, _332
	testq	%rax, %rax	# _333
	jne	.L5678	#,
	movq	-408(%rbp), %rax	# this, tmp424
	movq	%rax, -424(%rbp)	# tmp424, this
	movq	-424(%rbp), %rax	# this, tmp425
	movq	%rax, -432(%rbp)	# tmp425, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-432(%rbp), %rax	# this, tmp426
	movq	(%rax), %rax	# this_335->_ptr, _336
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _336
	jne	.L5679	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _337
	jmp	.L5680	#
.L5679:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-432(%rbp), %rax	# this, tmp427
	movq	(%rax), %rax	# this_335->_ptr, _338
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _337
.L5680:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -440(%rbp)	# _337, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -440(%rbp)	#, size
	je	.L5681	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-440(%rbp), %rax	# size, tmp428
	movl	(%rax), %eax	# *size_342, _343
	jmp	.L5682	#
.L5681:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _344
.L5682:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -412(%rbp)	# _344, p_index
	setge	%al	#, _350
	movzbl	%al, %eax	# _350, _351
	testq	%rax, %rax	# _352
	je	.L5683	#,
.L5678:
	movl	$1, %eax	#, iftmp.12_353
	jmp	.L5684	#
.L5683:
	movl	$0, %eax	#, iftmp.12_353
.L5684:
	movzbl	%al, %eax	# iftmp.12_353, _356
	testq	%rax, %rax	# _356
	setne	%al	#, retval.11_357
	testb	%al, %al	# retval.11_357
	je	.L5685	#,
	movq	-408(%rbp), %rax	# this, tmp429
	movq	%rax, -448(%rbp)	# tmp429, this
	movq	-448(%rbp), %rax	# this, tmp430
	movq	%rax, -456(%rbp)	# tmp430, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-456(%rbp), %rax	# this, tmp431
	movq	(%rax), %rax	# this_359->_ptr, _360
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _360
	jne	.L5686	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _361
	jmp	.L5687	#
.L5686:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-456(%rbp), %rax	# this, tmp432
	movq	(%rax), %rax	# this_359->_ptr, _362
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _361
.L5687:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -464(%rbp)	# _361, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -464(%rbp)	#, size
	je	.L5688	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-464(%rbp), %rax	# size, tmp433
	movl	(%rax), %eax	# *size_366, _367
	jmp	.L5689	#
.L5688:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _368
.L5689:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _368, _374
	movl	-412(%rbp), %eax	# p_index, tmp434
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _374,
	movq	%rax, %rcx	# _375,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB995:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5685:
	movq	-408(%rbp), %rax	# this, tmp435
	movq	%rax, -472(%rbp)	# tmp435, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-472(%rbp), %rax	# this, tmp436
	movq	(%rax), %rax	# this_376->_ptr, _377
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _377
	jne	.L5690	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _378
	jmp	.L5691	#
.L5690:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-472(%rbp), %rax	# this, tmp437
	movq	(%rax), %rcx	# this_376->_ptr, _378
.L5691:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-412(%rbp), %eax	# p_index, tmp438
	movslq	%eax, %rdx	# tmp438, _383
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _383, tmp439
	addq	%rax, %rax	# tmp439
	addq	%rdx, %rax	# _383, tmp439
	salq	$3, %rax	#, tmp440
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _385
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-864(%rbp), %rax	#, tmp441
	movq	%rdx, %rsi	# _385,
	movq	%rax, %rdi	# tmp441,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5694	#
.L5667:
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-1008(%rbp), %rax	# p_args, tmp442
	addq	$16, %rax	#, _24
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	(%rax), %rdx	# *_24, _25
	leaq	-864(%rbp), %rax	#, tmp443
	movq	%rdx, %rsi	# _25,
	movq	%rax, %rdi	# tmp443,
	call	_ZN7VariantC1ERKS_	#
.LEHE995:
.L5694:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-872(%rbp), %rax	#, tmp444
	leaq	-864(%rbp), %rdx	#, tmp445
	movq	%rdx, %rsi	# tmp445,
	movq	%rax, %rdi	# tmp444,
.LEHB996:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE996:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	cmpl	$1, -1012(%rbp)	#, p_arg_count
	jg	.L5696	#,
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, _26
	movq	%rax, -480(%rbp)	# _26, this
	movl	$1, -484(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-480(%rbp), %rax	# this, tmp446
	movl	44(%rax), %eax	# this_392->argument_count, _394
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-484(%rbp), %eax	# p_arg, _395
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp447
	movl	%eax, -488(%rbp)	# tmp447, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -488(%rbp)	#, idx
	js	.L5697	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-480(%rbp), %rax	# this, tmp448
	addq	$24, %rax	#, _397
	movq	%rax, -496(%rbp)	# _397, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-496(%rbp), %rax	# this, tmp449
	addq	$8, %rax	#, _399
	movq	%rax, -504(%rbp)	# _399, this
	movq	-504(%rbp), %rax	# this, tmp450
	movq	%rax, -512(%rbp)	# tmp450, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-512(%rbp), %rax	# this, tmp451
	movq	(%rax), %rax	# this_401->_ptr, _402
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _402
	jne	.L5698	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _403
	jmp	.L5699	#
.L5698:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-512(%rbp), %rax	# this, tmp452
	movq	(%rax), %rax	# this_401->_ptr, _404
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _403
.L5699:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -520(%rbp)	# _403, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -520(%rbp)	#, size
	je	.L5700	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-520(%rbp), %rax	# size, tmp453
	movl	(%rax), %eax	# *size_408, _409
	jmp	.L5701	#
.L5700:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _410
.L5701:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -488(%rbp)	# _410, idx
	jl	.L5703	#,
.L5697:
	movl	$1, %eax	#, iftmp.327_419
	jmp	.L5704	#
.L5703:
	movl	$0, %eax	#, iftmp.327_419
.L5704:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_419
	je	.L5705	#,
	leaq	-832(%rbp), %rax	#, tmp454
	movq	%rax, -528(%rbp)	# tmp454, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-528(%rbp), %rax	# this, tmp455
	movl	$0, (%rax)	#, this_423->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5723	#
.L5705:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-480(%rbp), %rax	# this, tmp456
	addq	$24, %rax	#, _424
	movq	%rax, -536(%rbp)	# _424, this
	movl	-488(%rbp), %eax	# idx, tmp457
	movl	%eax, -540(%rbp)	# tmp457, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-536(%rbp), %rax	# this, tmp458
	addq	$8, %rax	#, _427
	movq	%rax, -552(%rbp)	# _427, this
	movl	-540(%rbp), %eax	# p_index, tmp459
	movl	%eax, -556(%rbp)	# tmp459, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-556(%rbp), %eax	# p_index, tmp461
	shrl	$31, %eax	#, tmp460
	movzbl	%al, %eax	# _430, _431
	testq	%rax, %rax	# _432
	jne	.L5707	#,
	movq	-552(%rbp), %rax	# this, tmp462
	movq	%rax, -568(%rbp)	# tmp462, this
	movq	-568(%rbp), %rax	# this, tmp463
	movq	%rax, -576(%rbp)	# tmp463, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-576(%rbp), %rax	# this, tmp464
	movq	(%rax), %rax	# this_434->_ptr, _435
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _435
	jne	.L5708	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _436
	jmp	.L5709	#
.L5708:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-576(%rbp), %rax	# this, tmp465
	movq	(%rax), %rax	# this_434->_ptr, _437
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _436
.L5709:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -584(%rbp)	# _436, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -584(%rbp)	#, size
	je	.L5710	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-584(%rbp), %rax	# size, tmp466
	movl	(%rax), %eax	# *size_441, _442
	jmp	.L5711	#
.L5710:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _443
.L5711:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -556(%rbp)	# _443, p_index
	setge	%al	#, _449
	movzbl	%al, %eax	# _449, _450
	testq	%rax, %rax	# _451
	je	.L5712	#,
.L5707:
	movl	$1, %eax	#, iftmp.12_452
	jmp	.L5713	#
.L5712:
	movl	$0, %eax	#, iftmp.12_452
.L5713:
	movzbl	%al, %eax	# iftmp.12_452, _455
	testq	%rax, %rax	# _455
	setne	%al	#, retval.11_456
	testb	%al, %al	# retval.11_456
	je	.L5714	#,
	movq	-552(%rbp), %rax	# this, tmp467
	movq	%rax, -592(%rbp)	# tmp467, this
	movq	-592(%rbp), %rax	# this, tmp468
	movq	%rax, -600(%rbp)	# tmp468, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-600(%rbp), %rax	# this, tmp469
	movq	(%rax), %rax	# this_458->_ptr, _459
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _459
	jne	.L5715	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _460
	jmp	.L5716	#
.L5715:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-600(%rbp), %rax	# this, tmp470
	movq	(%rax), %rax	# this_458->_ptr, _461
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _460
.L5716:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -608(%rbp)	# _460, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -608(%rbp)	#, size
	je	.L5717	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-608(%rbp), %rax	# size, tmp471
	movl	(%rax), %eax	# *size_465, _466
	jmp	.L5718	#
.L5717:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _467
.L5718:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _467, _473
	movl	-556(%rbp), %eax	# p_index, tmp472
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _473,
	movq	%rax, %rcx	# _474,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB997:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5714:
	movq	-552(%rbp), %rax	# this, tmp473
	movq	%rax, -616(%rbp)	# tmp473, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-616(%rbp), %rax	# this, tmp474
	movq	(%rax), %rax	# this_475->_ptr, _476
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _476
	jne	.L5719	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _477
	jmp	.L5720	#
.L5719:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-616(%rbp), %rax	# this, tmp475
	movq	(%rax), %rcx	# this_475->_ptr, _477
.L5720:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-556(%rbp), %eax	# p_index, tmp476
	movslq	%eax, %rdx	# tmp476, _482
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _482, tmp477
	addq	%rax, %rax	# tmp477
	addq	%rdx, %rax	# _482, tmp477
	salq	$3, %rax	#, tmp478
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _484
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-832(%rbp), %rax	#, tmp479
	movq	%rdx, %rsi	# _484,
	movq	%rax, %rdi	# tmp479,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5723	#
.L5696:
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-1008(%rbp), %rax	# p_args, tmp480
	addq	$8, %rax	#, _27
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	(%rax), %rdx	# *_27, _28
	leaq	-832(%rbp), %rax	#, tmp481
	movq	%rdx, %rsi	# _28,
	movq	%rax, %rdi	# tmp481,
	call	_ZN7VariantC1ERKS_	#
.LEHE997:
.L5723:
# ./core/method_bind.h:69: 		return p_variant;
	leaq	-832(%rbp), %rax	#, tmp482
	movq	%rax, %rdi	# tmp482,
.LEHB998:
	call	_ZNK7VariantcvP6ObjectEv	#
	movq	%rax, %r13	#, D.60461
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	cmpl	$0, -1012(%rbp)	#, p_arg_count
	jg	.L5725	#,
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-992(%rbp), %rax	# this, _30
	movq	%rax, -624(%rbp)	# _30, this
	movl	$0, -628(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-624(%rbp), %rax	# this, tmp483
	movl	44(%rax), %eax	# this_493->argument_count, _495
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-628(%rbp), %eax	# p_arg, _496
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp484
	movl	%eax, -632(%rbp)	# tmp484, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -632(%rbp)	#, idx
	js	.L5726	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-624(%rbp), %rax	# this, tmp485
	addq	$24, %rax	#, _498
	movq	%rax, -640(%rbp)	# _498, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-640(%rbp), %rax	# this, tmp486
	addq	$8, %rax	#, _500
	movq	%rax, -648(%rbp)	# _500, this
	movq	-648(%rbp), %rax	# this, tmp487
	movq	%rax, -656(%rbp)	# tmp487, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-656(%rbp), %rax	# this, tmp488
	movq	(%rax), %rax	# this_502->_ptr, _503
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _503
	jne	.L5727	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _504
	jmp	.L5728	#
.L5727:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-656(%rbp), %rax	# this, tmp489
	movq	(%rax), %rax	# this_502->_ptr, _505
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _504
.L5728:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -664(%rbp)	# _504, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -664(%rbp)	#, size
	je	.L5729	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-664(%rbp), %rax	# size, tmp490
	movl	(%rax), %eax	# *size_509, _510
	jmp	.L5730	#
.L5729:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _511
.L5730:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -632(%rbp)	# _511, idx
	jl	.L5732	#,
.L5726:
	movl	$1, %eax	#, iftmp.327_520
	jmp	.L5733	#
.L5732:
	movl	$0, %eax	#, iftmp.327_520
.L5733:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_520
	je	.L5734	#,
	leaq	-800(%rbp), %rax	#, tmp491
	movq	%rax, -672(%rbp)	# tmp491, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-672(%rbp), %rax	# this, tmp492
	movl	$0, (%rax)	#, this_524->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5752	#
.L5734:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-624(%rbp), %rax	# this, tmp493
	addq	$24, %rax	#, _525
	movq	%rax, -680(%rbp)	# _525, this
	movl	-632(%rbp), %eax	# idx, tmp494
	movl	%eax, -684(%rbp)	# tmp494, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-680(%rbp), %rax	# this, tmp495
	addq	$8, %rax	#, _528
	movq	%rax, -696(%rbp)	# _528, this
	movl	-684(%rbp), %eax	# p_index, tmp496
	movl	%eax, -700(%rbp)	# tmp496, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-700(%rbp), %eax	# p_index, tmp498
	shrl	$31, %eax	#, tmp497
	movzbl	%al, %eax	# _531, _532
	testq	%rax, %rax	# _533
	jne	.L5736	#,
	movq	-696(%rbp), %rax	# this, tmp499
	movq	%rax, -712(%rbp)	# tmp499, this
	movq	-712(%rbp), %rax	# this, tmp500
	movq	%rax, -720(%rbp)	# tmp500, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-720(%rbp), %rax	# this, tmp501
	movq	(%rax), %rax	# this_535->_ptr, _536
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _536
	jne	.L5737	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _537
	jmp	.L5738	#
.L5737:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-720(%rbp), %rax	# this, tmp502
	movq	(%rax), %rax	# this_535->_ptr, _538
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _537
.L5738:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -728(%rbp)	# _537, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -728(%rbp)	#, size
	je	.L5739	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-728(%rbp), %rax	# size, tmp503
	movl	(%rax), %eax	# *size_542, _543
	jmp	.L5740	#
.L5739:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _544
.L5740:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -700(%rbp)	# _544, p_index
	setge	%al	#, _550
	movzbl	%al, %eax	# _550, _551
	testq	%rax, %rax	# _552
	je	.L5741	#,
.L5736:
	movl	$1, %eax	#, iftmp.12_553
	jmp	.L5742	#
.L5741:
	movl	$0, %eax	#, iftmp.12_553
.L5742:
	movzbl	%al, %eax	# iftmp.12_553, _556
	testq	%rax, %rax	# _556
	setne	%al	#, retval.11_557
	testb	%al, %al	# retval.11_557
	je	.L5743	#,
	movq	-696(%rbp), %rax	# this, tmp504
	movq	%rax, -736(%rbp)	# tmp504, this
	movq	-736(%rbp), %rax	# this, tmp505
	movq	%rax, -744(%rbp)	# tmp505, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-744(%rbp), %rax	# this, tmp506
	movq	(%rax), %rax	# this_559->_ptr, _560
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _560
	jne	.L5744	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _561
	jmp	.L5745	#
.L5744:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-744(%rbp), %rax	# this, tmp507
	movq	(%rax), %rax	# this_559->_ptr, _562
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _561
.L5745:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -752(%rbp)	# _561, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -752(%rbp)	#, size
	je	.L5746	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-752(%rbp), %rax	# size, tmp508
	movl	(%rax), %eax	# *size_566, _567
	jmp	.L5747	#
.L5746:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _568
.L5747:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _568, _574
	movl	-700(%rbp), %eax	# p_index, tmp509
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _574,
	movq	%rax, %rcx	# _575,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5743:
	movq	-696(%rbp), %rax	# this, tmp510
	movq	%rax, -760(%rbp)	# tmp510, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-760(%rbp), %rax	# this, tmp511
	movq	(%rax), %rax	# this_576->_ptr, _577
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _577
	jne	.L5748	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _578
	jmp	.L5749	#
.L5748:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-760(%rbp), %rax	# this, tmp512
	movq	(%rax), %rcx	# this_576->_ptr, _578
.L5749:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-700(%rbp), %eax	# p_index, tmp513
	movslq	%eax, %rdx	# tmp513, _583
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _583, tmp514
	addq	%rax, %rax	# tmp514
	addq	%rdx, %rax	# _583, tmp514
	salq	$3, %rax	#, tmp515
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _585
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-800(%rbp), %rax	#, tmp516
	movq	%rdx, %rsi	# _585,
	movq	%rax, %rdi	# tmp516,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5752	#
.L5725:
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movq	-1008(%rbp), %rax	# p_args, tmp517
	movq	(%rax), %rdx	# *p_args_58(D), _31
	leaq	-800(%rbp), %rax	#, tmp518
	movq	%rdx, %rsi	# _31,
	movq	%rax, %rdi	# tmp518,
	call	_ZN7VariantC1ERKS_	#
.LEHE998:
.L5752:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-808(%rbp), %rax	#, tmp519
	leaq	-800(%rbp), %rdx	#, tmp520
	movq	%rdx, %rsi	# tmp520,
	movq	%rax, %rdi	# tmp519,
.LEHB999:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE999:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	leaq	-912(%rbp), %rcx	#, tmp521
	leaq	-872(%rbp), %rdx	#, tmp522
	leaq	-808(%rbp), %rax	#, tmp523
	movl	%r14d, %r9d	# D.60272,
	movq	%rcx, %r8	# tmp521,
	movq	%rdx, %rcx	# tmp522,
	movq	%r13, %rdx	# D.60461,
	movq	%rax, %rsi	# tmp523,
	movq	%r12, %rdi	# _3,
.LEHB1000:
	call	*%rbx	# iftmp.353_34
# ./core/method_bind.gen.inc:4177: 		Variant ret = (instance->*method)(_VC(1), _VC(2), _VC(3), _VC(4), _VC(5));
	movl	%eax, %edx	# _32, _33
	leaq	-976(%rbp), %rax	#, tmp524
	movl	%edx, %esi	# _33,
	movq	%rax, %rdi	# tmp524,
	call	_ZN7VariantC1Ei	#
.LEHE1000:
	leaq	-808(%rbp), %rax	#, tmp525
	movq	%rax, %rdi	# tmp525,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-800(%rbp), %eax	# D.48147.type, _599
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _599
	je	.L5797	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-800(%rbp), %rax	#, tmp526
	movq	%rax, %rdi	# tmp526,
	call	_ZN7Variant5clearEv	#
.L5797:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-832(%rbp), %eax	# D.48151.type, _598
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _598
	je	.L5798	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-832(%rbp), %rax	#, tmp527
	movq	%rax, %rdi	# tmp527,
	call	_ZN7Variant5clearEv	#
.L5798:
# ./core/variant.h:423: 	}
	nop	
	leaq	-872(%rbp), %rax	#, tmp528
	movq	%rax, %rdi	# tmp528,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-864(%rbp), %eax	# D.48154.type, _597
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _597
	je	.L5799	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-864(%rbp), %rax	#, tmp529
	movq	%rax, %rdi	# tmp529,
	call	_ZN7Variant5clearEv	#
.L5799:
# ./core/variant.h:423: 	}
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-912(%rbp), %rax	#, tmp530
	addq	$8, %rax	#, _594
	movq	%rax, -768(%rbp)	# _594, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-768(%rbp), %rax	# this, tmp531
	movq	(%rax), %rdx	# this_595->_ptr, _596
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-768(%rbp), %rax	# this, tmp532
	movq	%rdx, %rsi	# _596,
	movq	%rax, %rdi	# tmp532,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-896(%rbp), %eax	# D.48163.type, _593
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _593
	je	.L5800	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-896(%rbp), %rax	#, tmp533
	movq	%rax, %rdi	# tmp533,
	call	_ZN7Variant5clearEv	#
.L5800:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-944(%rbp), %eax	# D.48172.type, _592
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _592
	je	.L5801	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-944(%rbp), %rax	#, tmp534
	movq	%rax, %rdi	# tmp534,
	call	_ZN7Variant5clearEv	#
.L5801:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:4178: 		return Variant(ret);
	leaq	-976(%rbp), %rdx	#, tmp535
	movq	-984(%rbp), %rax	# <retval>, tmp536
	movq	%rdx, %rsi	# tmp535,
	movq	%rax, %rdi	# tmp536,
.LEHB1001:
	call	_ZN7VariantC1ERKS_	#
.LEHE1001:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-976(%rbp), %eax	# ret.type, _600
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _600
	je	.L5802	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-976(%rbp), %rax	#, tmp537
	movq	%rax, %rdi	# tmp537,
	call	_ZN7Variant5clearEv	#
.L5802:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:4178: 		return Variant(ret);
	jmp	.L5796	#
.L5783:
	movq	%rax, %rbx	#, tmp540
	leaq	-808(%rbp), %rax	#, tmp538
	movq	%rax, %rdi	# tmp538,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5762	#
.L5782:
	movq	%rax, %rbx	#, tmp539
.L5762:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-800(%rbp), %eax	# D.48147.type, _601
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _601
	je	.L5803	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-800(%rbp), %rax	#, tmp543
	movq	%rax, %rdi	# tmp543,
	call	_ZN7Variant5clearEv	#
.L5803:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5764	#
.L5781:
	movq	%rax, %rbx	#, tmp544
.L5764:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-832(%rbp), %eax	# D.48151.type, _602
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _602
	je	.L5804	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-832(%rbp), %rax	#, tmp546
	movq	%rax, %rdi	# tmp546,
	call	_ZN7Variant5clearEv	#
.L5804:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5766	#
.L5780:
	movq	%rax, %rbx	#, tmp547
.L5766:
	leaq	-872(%rbp), %rax	#, tmp549
	movq	%rax, %rdi	# tmp549,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5767	#
.L5779:
	movq	%rax, %rbx	#, tmp550
.L5767:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-864(%rbp), %eax	# D.48154.type, _603
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _603
	je	.L5805	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-864(%rbp), %rax	#, tmp552
	movq	%rax, %rdi	# tmp552,
	call	_ZN7Variant5clearEv	#
.L5805:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5769	#
.L5778:
	movq	%rax, %rbx	#, tmp553
.L5769:
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	leaq	-912(%rbp), %rax	#, tmp555
	addq	$8, %rax	#, _604
	movq	%rax, -776(%rbp)	# _604, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-776(%rbp), %rax	# this, tmp556
	movq	(%rax), %rdx	# this_605->_ptr, _606
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-776(%rbp), %rax	# this, tmp557
	movq	%rdx, %rsi	# _606,
	movq	%rax, %rdi	# tmp557,
	call	_ZN7CowDataI7VariantE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
# ./core/vector.h:126: 	_FORCE_INLINE_ ~Vector() {}
	nop	
	jmp	.L5770	#
.L5777:
	movq	%rax, %rbx	#, tmp558
.L5770:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-896(%rbp), %eax	# D.48163.type, _607
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _607
	je	.L5806	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-896(%rbp), %rax	#, tmp560
	movq	%rax, %rdi	# tmp560,
	call	_ZN7Variant5clearEv	#
.L5806:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5772	#
.L5776:
	movq	%rax, %rbx	#, tmp561
.L5772:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-944(%rbp), %eax	# D.48172.type, _608
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _608
	je	.L5807	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-944(%rbp), %rax	#, tmp563
	movq	%rax, %rdi	# tmp563,
	call	_ZN7Variant5clearEv	#
.L5807:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp561, D.62309
	movq	%rax, %rdi	# D.62309,
.LEHB1002:
	call	_Unwind_Resume	#
.LEHE1002:
.L5784:
	movq	%rax, %rbx	#, tmp565
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-976(%rbp), %eax	# ret.type, _609
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _609
	je	.L5808	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-976(%rbp), %rax	#, tmp564
	movq	%rax, %rdi	# tmp564,
	call	_ZN7Variant5clearEv	#
.L5808:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp565, D.62310
	movq	%rax, %rdi	# D.62310,
.LEHB1003:
	call	_Unwind_Resume	#
.LEHE1003:
.L5796:
# ./core/method_bind.gen.inc:4180: 	}
	movq	-984(%rbp), %rax	# <retval>,
	leaq	-32(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%r14	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3643:
	.section	.gcc_except_table
.LLSDA3643:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3643-.LLSDACSB3643
.LLSDACSB3643:
	.uleb128 .LEHB992-.LFB3643
	.uleb128 .LEHE992-.LEHB992
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB993-.LFB3643
	.uleb128 .LEHE993-.LEHB993
	.uleb128 .L5776-.LFB3643
	.uleb128 0
	.uleb128 .LEHB994-.LFB3643
	.uleb128 .LEHE994-.LEHB994
	.uleb128 .L5777-.LFB3643
	.uleb128 0
	.uleb128 .LEHB995-.LFB3643
	.uleb128 .LEHE995-.LEHB995
	.uleb128 .L5778-.LFB3643
	.uleb128 0
	.uleb128 .LEHB996-.LFB3643
	.uleb128 .LEHE996-.LEHB996
	.uleb128 .L5779-.LFB3643
	.uleb128 0
	.uleb128 .LEHB997-.LFB3643
	.uleb128 .LEHE997-.LEHB997
	.uleb128 .L5780-.LFB3643
	.uleb128 0
	.uleb128 .LEHB998-.LFB3643
	.uleb128 .LEHE998-.LEHB998
	.uleb128 .L5781-.LFB3643
	.uleb128 0
	.uleb128 .LEHB999-.LFB3643
	.uleb128 .LEHE999-.LEHB999
	.uleb128 .L5782-.LFB3643
	.uleb128 0
	.uleb128 .LEHB1000-.LFB3643
	.uleb128 .LEHE1000-.LEHB1000
	.uleb128 .L5783-.LFB3643
	.uleb128 0
	.uleb128 .LEHB1001-.LFB3643
	.uleb128 .LEHE1001-.LEHB1001
	.uleb128 .L5784-.LFB3643
	.uleb128 0
	.uleb128 .LEHB1002-.LFB3643
	.uleb128 .LEHE1002-.LEHB1002
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1003-.LFB3643
	.uleb128 .LEHE1003-.LEHB1003
	.uleb128 0
	.uleb128 0
.LLSDACSE3643:
	.section	.text._ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE,"axG",@progbits,_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE,comdat
	.size	_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE, .-_ZN12MethodBind5RI5ErrorRK10StringNameP6ObjectS3_RK6VectorI7VariantEjE4callES5_PPKS7_iRNS7_9CallErrorE
	.section	.text._ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv
	.type	_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv, @function
_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv:
.LFB3644:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3644
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1306: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5810	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5811	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1004:
	call	_ZN6StringC1EPKc	#
.LEHE1004:
	jmp	.L5812	#
.L5811:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1005:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1005:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5817	#
.L5816:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62315
	movq	%rax, %rdi	# D.62315,
.LEHB1006:
	call	_Unwind_Resume	#
.LEHE1006:
.L5817:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5812	#
.L5810:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5812:
# ./core/method_bind.gen.inc:1306: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1307: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3644:
	.section	.gcc_except_table
.LLSDA3644:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3644-.LLSDACSB3644
.LLSDACSB3644:
	.uleb128 .LEHB1004-.LFB3644
	.uleb128 .LEHE1004-.LEHB1004
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1005-.LFB3644
	.uleb128 .LEHE1005-.LEHB1005
	.uleb128 .L5816-.LFB3644
	.uleb128 0
	.uleb128 .LEHB1006-.LFB3644
	.uleb128 .LEHE1006-.LEHB1006
	.uleb128 0
	.uleb128 0
.LLSDACSE3644:
	.section	.text._ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv, .-_ZNK13MethodBind1RCI5ArrayRK6StringE18get_instance_classEv
	.section	.text._ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE
	.type	_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE, @function
_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE:
.LFB3645:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3645
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$272, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -248(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -256(%rbp)	# this, this
	movq	%rdx, -264(%rbp)	# p_object, p_object
	movq	%rcx, -272(%rbp)	# p_args, p_args
	movl	%r8d, -276(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -288(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1311: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-264(%rbp), %rax	# p_object, tmp144
	movq	%rax, -24(%rbp)	# tmp144, instance
# ./core/method_bind.gen.inc:1313: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-288(%rbp), %rax	# r_error, tmp145
	movl	$0, (%rax)	#, r_error_26(D)->error
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp146
	movq	72(%rax), %rax	# this_28(D)->method.__delta, _1
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp147
	leaq	(%rdx,%rax), %r12	#, _3
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp148
	movq	64(%rax), %rax	# this_28(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5819	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp149
	movq	72(%rax), %rax	# this_28(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp150
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-256(%rbp), %rax	# this, tmp151
	movq	64(%rax), %rax	# this_28(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.351_18
	jmp	.L5820	#
.L5819:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, tmp152
	movq	64(%rax), %rbx	# this_28(D)->method.__pfn, iftmp.351_18
.L5820:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	cmpl	$0, -276(%rbp)	#, p_arg_count
	jg	.L5821	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp153
	movl	44(%rax), %eax	# this_50->argument_count, _52
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _53
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp154
	movl	%eax, -40(%rbp)	# tmp154, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L5822	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp155
	addq	$24, %rax	#, _55
	movq	%rax, -48(%rbp)	# _55, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp156
	addq	$8, %rax	#, _57
	movq	%rax, -56(%rbp)	# _57, this
	movq	-56(%rbp), %rax	# this, tmp157
	movq	%rax, -64(%rbp)	# tmp157, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp158
	movq	(%rax), %rax	# this_59->_ptr, _60
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _60
	jne	.L5823	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _61
	jmp	.L5824	#
.L5823:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp159
	movq	(%rax), %rax	# this_59->_ptr, _62
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _61
.L5824:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _61, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L5825	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp160
	movl	(%rax), %eax	# *size_66, _67
	jmp	.L5826	#
.L5825:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _68
.L5826:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _68, idx
	jl	.L5828	#,
.L5822:
	movl	$1, %eax	#, iftmp.327_77
	jmp	.L5829	#
.L5828:
	movl	$0, %eax	#, iftmp.327_77
.L5829:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_77
	je	.L5830	#,
	leaq	-192(%rbp), %rax	#, tmp161
	movq	%rax, -80(%rbp)	# tmp161, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp162
	movl	$0, (%rax)	#, this_81->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5848	#
.L5830:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp163
	addq	$24, %rax	#, _82
	movq	%rax, -88(%rbp)	# _82, this
	movl	-40(%rbp), %eax	# idx, tmp164
	movl	%eax, -92(%rbp)	# tmp164, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp165
	addq	$8, %rax	#, _85
	movq	%rax, -104(%rbp)	# _85, this
	movl	-92(%rbp), %eax	# p_index, tmp166
	movl	%eax, -108(%rbp)	# tmp166, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp168
	shrl	$31, %eax	#, tmp167
	movzbl	%al, %eax	# _88, _89
	testq	%rax, %rax	# _90
	jne	.L5832	#,
	movq	-104(%rbp), %rax	# this, tmp169
	movq	%rax, -120(%rbp)	# tmp169, this
	movq	-120(%rbp), %rax	# this, tmp170
	movq	%rax, -128(%rbp)	# tmp170, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_92->_ptr, _93
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _93
	jne	.L5833	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _94
	jmp	.L5834	#
.L5833:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp172
	movq	(%rax), %rax	# this_92->_ptr, _95
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _94
.L5834:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _94, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L5835	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp173
	movl	(%rax), %eax	# *size_99, _100
	jmp	.L5836	#
.L5835:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _101
.L5836:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _101, p_index
	setge	%al	#, _107
	movzbl	%al, %eax	# _107, _108
	testq	%rax, %rax	# _109
	je	.L5837	#,
.L5832:
	movl	$1, %eax	#, iftmp.12_110
	jmp	.L5838	#
.L5837:
	movl	$0, %eax	#, iftmp.12_110
.L5838:
	movzbl	%al, %eax	# iftmp.12_110, _113
	testq	%rax, %rax	# _113
	setne	%al	#, retval.11_114
	testb	%al, %al	# retval.11_114
	je	.L5839	#,
	movq	-104(%rbp), %rax	# this, tmp174
	movq	%rax, -144(%rbp)	# tmp174, this
	movq	-144(%rbp), %rax	# this, tmp175
	movq	%rax, -152(%rbp)	# tmp175, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp176
	movq	(%rax), %rax	# this_116->_ptr, _117
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _117
	jne	.L5840	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _118
	jmp	.L5841	#
.L5840:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp177
	movq	(%rax), %rax	# this_116->_ptr, _119
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _118
.L5841:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _118, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L5842	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp178
	movl	(%rax), %eax	# *size_123, _124
	jmp	.L5843	#
.L5842:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _125
.L5843:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _125, _131
	movl	-108(%rbp), %eax	# p_index, tmp179
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _131,
	movq	%rax, %rcx	# _132,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1007:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5839:
	movq	-104(%rbp), %rax	# this, tmp180
	movq	%rax, -168(%rbp)	# tmp180, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp181
	movq	(%rax), %rax	# this_133->_ptr, _134
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _134
	jne	.L5844	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _135
	jmp	.L5845	#
.L5844:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp182
	movq	(%rax), %rcx	# this_133->_ptr, _135
.L5845:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp183
	movslq	%eax, %rdx	# tmp183, _140
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _140, tmp184
	addq	%rax, %rax	# tmp184
	addq	%rdx, %rax	# _140, tmp184
	salq	$3, %rax	#, tmp185
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _142
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-192(%rbp), %rax	#, tmp186
	movq	%rdx, %rsi	# _142,
	movq	%rax, %rdi	# tmp186,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5848	#
.L5821:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-272(%rbp), %rax	# p_args, tmp187
	movq	(%rax), %rdx	# *p_args_32(D), _17
	leaq	-192(%rbp), %rax	#, tmp188
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp188,
	call	_ZN7VariantC1ERKS_	#
.LEHE1007:
.L5848:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-200(%rbp), %rax	#, tmp189
	leaq	-192(%rbp), %rdx	#, tmp190
	movq	%rdx, %rsi	# tmp190,
	movq	%rax, %rdi	# tmp189,
.LEHB1008:
	call	_ZNK7Variantcv6StringEv	#
.LEHE1008:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-208(%rbp), %rax	#, tmp191
	leaq	-200(%rbp), %rdx	#, tmp192
	movq	%r12, %rsi	# _3,
	movq	%rax, %rdi	# tmp191,
.LEHB1009:
	call	*%rbx	# iftmp.351_18
.LEHE1009:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-208(%rbp), %rdx	#, tmp193
	leaq	-240(%rbp), %rax	#, tmp194
	movq	%rdx, %rsi	# tmp193,
	movq	%rax, %rdi	# tmp194,
.LEHB1010:
	call	_ZN7VariantC1ERK5Array	#
.LEHE1010:
	leaq	-208(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN5ArrayD1Ev	#
	leaq	-200(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48187.type, _149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _149
	je	.L5867	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp197
	movq	%rax, %rdi	# tmp197,
	call	_ZN7Variant5clearEv	#
.L5867:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	leaq	-240(%rbp), %rdx	#, tmp198
	movq	-248(%rbp), %rax	# <retval>, tmp199
	movq	%rdx, %rsi	# tmp198,
	movq	%rax, %rdi	# tmp199,
.LEHB1011:
	call	_ZN7VariantC1ERKS_	#
.LEHE1011:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# ret.type, _150
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _150
	je	.L5868	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp200
	movq	%rax, %rdi	# tmp200,
	call	_ZN7Variant5clearEv	#
.L5868:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	jmp	.L5866	#
.L5861:
	movq	%rax, %rbx	#, tmp203
	leaq	-208(%rbp), %rax	#, tmp201
	movq	%rax, %rdi	# tmp201,
	call	_ZN5ArrayD1Ev	#
	jmp	.L5854	#
.L5860:
	movq	%rax, %rbx	#, tmp202
.L5854:
	leaq	-200(%rbp), %rax	#, tmp206
	movq	%rax, %rdi	# tmp206,
	call	_ZN6StringD1Ev	#
	jmp	.L5855	#
.L5859:
	movq	%rax, %rbx	#, tmp207
.L5855:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48187.type, _151
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _151
	je	.L5869	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp209
	movq	%rax, %rdi	# tmp209,
	call	_ZN7Variant5clearEv	#
.L5869:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp207, D.62317
	movq	%rax, %rdi	# D.62317,
.LEHB1012:
	call	_Unwind_Resume	#
.LEHE1012:
.L5862:
	movq	%rax, %rbx	#, tmp211
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-240(%rbp), %eax	# ret.type, _152
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _152
	je	.L5870	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-240(%rbp), %rax	#, tmp210
	movq	%rax, %rdi	# tmp210,
	call	_ZN7Variant5clearEv	#
.L5870:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp211, D.62318
	movq	%rax, %rdi	# D.62318,
.LEHB1013:
	call	_Unwind_Resume	#
.LEHE1013:
.L5866:
# ./core/method_bind.gen.inc:1336: 	}
	movq	-248(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3645:
	.section	.gcc_except_table
.LLSDA3645:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3645-.LLSDACSB3645
.LLSDACSB3645:
	.uleb128 .LEHB1007-.LFB3645
	.uleb128 .LEHE1007-.LEHB1007
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1008-.LFB3645
	.uleb128 .LEHE1008-.LEHB1008
	.uleb128 .L5859-.LFB3645
	.uleb128 0
	.uleb128 .LEHB1009-.LFB3645
	.uleb128 .LEHE1009-.LEHB1009
	.uleb128 .L5860-.LFB3645
	.uleb128 0
	.uleb128 .LEHB1010-.LFB3645
	.uleb128 .LEHE1010-.LEHB1010
	.uleb128 .L5861-.LFB3645
	.uleb128 0
	.uleb128 .LEHB1011-.LFB3645
	.uleb128 .LEHE1011-.LEHB1011
	.uleb128 .L5862-.LFB3645
	.uleb128 0
	.uleb128 .LEHB1012-.LFB3645
	.uleb128 .LEHE1012-.LEHB1012
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1013-.LFB3645
	.uleb128 .LEHE1013-.LEHB1013
	.uleb128 0
	.uleb128 0
.LLSDACSE3645:
	.section	.text._ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE,comdat
	.size	_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE, .-_ZN13MethodBind1RCI5ArrayRK6StringE4callEP6ObjectPPK7VariantiRNS7_9CallErrorE
	.section	.text._ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv,"axG",@progbits,_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv
	.type	_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv, @function
_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv:
.LFB3646:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3646
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1689: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5872	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5873	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1014:
	call	_ZN6StringC1EPKc	#
.LEHE1014:
	jmp	.L5874	#
.L5873:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1015:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1015:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5879	#
.L5878:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62322
	movq	%rax, %rdi	# D.62322,
.LEHB1016:
	call	_Unwind_Resume	#
.LEHE1016:
.L5879:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5874	#
.L5872:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5874:
# ./core/method_bind.gen.inc:1689: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1690: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3646:
	.section	.gcc_except_table
.LLSDA3646:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3646-.LLSDACSB3646
.LLSDACSB3646:
	.uleb128 .LEHB1014-.LFB3646
	.uleb128 .LEHE1014-.LEHB1014
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1015-.LFB3646
	.uleb128 .LEHE1015-.LEHB1015
	.uleb128 .L5878-.LFB3646
	.uleb128 0
	.uleb128 .LEHB1016-.LFB3646
	.uleb128 .LEHE1016-.LEHB1016
	.uleb128 0
	.uleb128 0
.LLSDACSE3646:
	.section	.text._ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv,"axG",@progbits,_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv,comdat
	.size	_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv, .-_ZNK12MethodBind2RI7VariantRK10StringNameRK5ArrayE18get_instance_classEv
	.section	.text._ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,"axG",@progbits,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,comdat
	.align 2
	.weak	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.type	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE, @function
_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE:
.LFB3647:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3647
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$432, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -408(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -416(%rbp)	# this, this
	movq	%rdx, -424(%rbp)	# p_object, p_object
	movq	%rcx, -432(%rbp)	# p_args, p_args
	movl	%r8d, -436(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -448(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1694: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-424(%rbp), %rax	# p_object, tmp187
	movq	%rax, -24(%rbp)	# tmp187, instance
# ./core/method_bind.gen.inc:1696: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-448(%rbp), %rax	# r_error, tmp188
	movl	$0, (%rax)	#, r_error_31(D)->error
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp189
	movq	72(%rax), %rax	# this_33(D)->method.__delta, _1
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp190
	leaq	(%rdx,%rax), %r12	#, _3
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp191
	movq	64(%rax), %rax	# this_33(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5881	#,
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp192
	movq	72(%rax), %rax	# this_33(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp193
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-416(%rbp), %rax	# this, tmp194
	movq	64(%rax), %rax	# this_33(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.349_21
	jmp	.L5882	#
.L5881:
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp195
	movq	64(%rax), %rbx	# this_33(D)->method.__pfn, iftmp.349_21
.L5882:
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	cmpl	$1, -436(%rbp)	#, p_arg_count
	jg	.L5883	#,
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$1, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp196
	movl	44(%rax), %eax	# this_57->argument_count, _59
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _60
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp197
	movl	%eax, -40(%rbp)	# tmp197, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L5884	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp198
	addq	$24, %rax	#, _62
	movq	%rax, -48(%rbp)	# _62, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp199
	addq	$8, %rax	#, _64
	movq	%rax, -56(%rbp)	# _64, this
	movq	-56(%rbp), %rax	# this, tmp200
	movq	%rax, -64(%rbp)	# tmp200, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp201
	movq	(%rax), %rax	# this_66->_ptr, _67
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _67
	jne	.L5885	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _68
	jmp	.L5886	#
.L5885:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp202
	movq	(%rax), %rax	# this_66->_ptr, _69
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _68
.L5886:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _68, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L5887	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp203
	movl	(%rax), %eax	# *size_73, _74
	jmp	.L5888	#
.L5887:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _75
.L5888:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _75, idx
	jl	.L5890	#,
.L5884:
	movl	$1, %eax	#, iftmp.327_84
	jmp	.L5891	#
.L5890:
	movl	$0, %eax	#, iftmp.327_84
.L5891:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_84
	je	.L5892	#,
	leaq	-368(%rbp), %rax	#, tmp204
	movq	%rax, -80(%rbp)	# tmp204, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp205
	movl	$0, (%rax)	#, this_88->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5910	#
.L5892:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp206
	addq	$24, %rax	#, _89
	movq	%rax, -88(%rbp)	# _89, this
	movl	-40(%rbp), %eax	# idx, tmp207
	movl	%eax, -92(%rbp)	# tmp207, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp208
	addq	$8, %rax	#, _92
	movq	%rax, -104(%rbp)	# _92, this
	movl	-92(%rbp), %eax	# p_index, tmp209
	movl	%eax, -108(%rbp)	# tmp209, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp211
	shrl	$31, %eax	#, tmp210
	movzbl	%al, %eax	# _95, _96
	testq	%rax, %rax	# _97
	jne	.L5894	#,
	movq	-104(%rbp), %rax	# this, tmp212
	movq	%rax, -120(%rbp)	# tmp212, this
	movq	-120(%rbp), %rax	# this, tmp213
	movq	%rax, -128(%rbp)	# tmp213, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp214
	movq	(%rax), %rax	# this_99->_ptr, _100
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _100
	jne	.L5895	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _101
	jmp	.L5896	#
.L5895:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp215
	movq	(%rax), %rax	# this_99->_ptr, _102
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _101
.L5896:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _101, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L5897	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp216
	movl	(%rax), %eax	# *size_106, _107
	jmp	.L5898	#
.L5897:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _108
.L5898:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _108, p_index
	setge	%al	#, _114
	movzbl	%al, %eax	# _114, _115
	testq	%rax, %rax	# _116
	je	.L5899	#,
.L5894:
	movl	$1, %eax	#, iftmp.12_117
	jmp	.L5900	#
.L5899:
	movl	$0, %eax	#, iftmp.12_117
.L5900:
	movzbl	%al, %eax	# iftmp.12_117, _120
	testq	%rax, %rax	# _120
	setne	%al	#, retval.11_121
	testb	%al, %al	# retval.11_121
	je	.L5901	#,
	movq	-104(%rbp), %rax	# this, tmp217
	movq	%rax, -144(%rbp)	# tmp217, this
	movq	-144(%rbp), %rax	# this, tmp218
	movq	%rax, -152(%rbp)	# tmp218, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_123->_ptr, _124
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _124
	jne	.L5902	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _125
	jmp	.L5903	#
.L5902:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp220
	movq	(%rax), %rax	# this_123->_ptr, _126
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _125
.L5903:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _125, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L5904	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp221
	movl	(%rax), %eax	# *size_130, _131
	jmp	.L5905	#
.L5904:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _132
.L5905:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _132, _138
	movl	-108(%rbp), %eax	# p_index, tmp222
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _138,
	movq	%rax, %rcx	# _139,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1017:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5901:
	movq	-104(%rbp), %rax	# this, tmp223
	movq	%rax, -168(%rbp)	# tmp223, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp224
	movq	(%rax), %rax	# this_140->_ptr, _141
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _141
	jne	.L5906	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _142
	jmp	.L5907	#
.L5906:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp225
	movq	(%rax), %rcx	# this_140->_ptr, _142
.L5907:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp226
	movslq	%eax, %rdx	# tmp226, _147
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _147, tmp227
	addq	%rax, %rax	# tmp227
	addq	%rdx, %rax	# _147, tmp227
	salq	$3, %rax	#, tmp228
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _149
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-368(%rbp), %rax	#, tmp229
	movq	%rdx, %rsi	# _149,
	movq	%rax, %rdi	# tmp229,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5910	#
.L5883:
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# p_args, tmp230
	addq	$8, %rax	#, _17
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-368(%rbp), %rax	#, tmp231
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp231,
	call	_ZN7VariantC1ERKS_	#
.LEHE1017:
.L5910:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-376(%rbp), %rax	#, tmp232
	leaq	-368(%rbp), %rdx	#, tmp233
	movq	%rdx, %rsi	# tmp233,
	movq	%rax, %rdi	# tmp232,
.LEHB1018:
	call	_ZNK7Variantcv5ArrayEv	#
.LEHE1018:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	cmpl	$0, -436(%rbp)	#, p_arg_count
	jg	.L5912	#,
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, _19
	movq	%rax, -176(%rbp)	# _19, this
	movl	$0, -180(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-176(%rbp), %rax	# this, tmp234
	movl	44(%rax), %eax	# this_156->argument_count, _158
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-180(%rbp), %eax	# p_arg, _159
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp235
	movl	%eax, -184(%rbp)	# tmp235, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -184(%rbp)	#, idx
	js	.L5913	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-176(%rbp), %rax	# this, tmp236
	addq	$24, %rax	#, _161
	movq	%rax, -192(%rbp)	# _161, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-192(%rbp), %rax	# this, tmp237
	addq	$8, %rax	#, _163
	movq	%rax, -200(%rbp)	# _163, this
	movq	-200(%rbp), %rax	# this, tmp238
	movq	%rax, -208(%rbp)	# tmp238, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-208(%rbp), %rax	# this, tmp239
	movq	(%rax), %rax	# this_165->_ptr, _166
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _166
	jne	.L5914	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _167
	jmp	.L5915	#
.L5914:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-208(%rbp), %rax	# this, tmp240
	movq	(%rax), %rax	# this_165->_ptr, _168
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _167
.L5915:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -216(%rbp)	# _167, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -216(%rbp)	#, size
	je	.L5916	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-216(%rbp), %rax	# size, tmp241
	movl	(%rax), %eax	# *size_172, _173
	jmp	.L5917	#
.L5916:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _174
.L5917:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -184(%rbp)	# _174, idx
	jl	.L5919	#,
.L5913:
	movl	$1, %eax	#, iftmp.327_183
	jmp	.L5920	#
.L5919:
	movl	$0, %eax	#, iftmp.327_183
.L5920:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_183
	je	.L5921	#,
	leaq	-336(%rbp), %rax	#, tmp242
	movq	%rax, -224(%rbp)	# tmp242, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-224(%rbp), %rax	# this, tmp243
	movl	$0, (%rax)	#, this_187->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L5939	#
.L5921:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-176(%rbp), %rax	# this, tmp244
	addq	$24, %rax	#, _188
	movq	%rax, -232(%rbp)	# _188, this
	movl	-184(%rbp), %eax	# idx, tmp245
	movl	%eax, -236(%rbp)	# tmp245, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-232(%rbp), %rax	# this, tmp246
	addq	$8, %rax	#, _191
	movq	%rax, -248(%rbp)	# _191, this
	movl	-236(%rbp), %eax	# p_index, tmp247
	movl	%eax, -252(%rbp)	# tmp247, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-252(%rbp), %eax	# p_index, tmp249
	shrl	$31, %eax	#, tmp248
	movzbl	%al, %eax	# _194, _195
	testq	%rax, %rax	# _196
	jne	.L5923	#,
	movq	-248(%rbp), %rax	# this, tmp250
	movq	%rax, -264(%rbp)	# tmp250, this
	movq	-264(%rbp), %rax	# this, tmp251
	movq	%rax, -272(%rbp)	# tmp251, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp252
	movq	(%rax), %rax	# this_198->_ptr, _199
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _199
	jne	.L5924	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _200
	jmp	.L5925	#
.L5924:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp253
	movq	(%rax), %rax	# this_198->_ptr, _201
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _200
.L5925:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _200, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L5926	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp254
	movl	(%rax), %eax	# *size_205, _206
	jmp	.L5927	#
.L5926:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _207
.L5927:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -252(%rbp)	# _207, p_index
	setge	%al	#, _213
	movzbl	%al, %eax	# _213, _214
	testq	%rax, %rax	# _215
	je	.L5928	#,
.L5923:
	movl	$1, %eax	#, iftmp.12_216
	jmp	.L5929	#
.L5928:
	movl	$0, %eax	#, iftmp.12_216
.L5929:
	movzbl	%al, %eax	# iftmp.12_216, _219
	testq	%rax, %rax	# _219
	setne	%al	#, retval.11_220
	testb	%al, %al	# retval.11_220
	je	.L5930	#,
	movq	-248(%rbp), %rax	# this, tmp255
	movq	%rax, -288(%rbp)	# tmp255, this
	movq	-288(%rbp), %rax	# this, tmp256
	movq	%rax, -296(%rbp)	# tmp256, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-296(%rbp), %rax	# this, tmp257
	movq	(%rax), %rax	# this_222->_ptr, _223
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _223
	jne	.L5931	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _224
	jmp	.L5932	#
.L5931:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-296(%rbp), %rax	# this, tmp258
	movq	(%rax), %rax	# this_222->_ptr, _225
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _224
.L5932:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -304(%rbp)	# _224, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -304(%rbp)	#, size
	je	.L5933	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-304(%rbp), %rax	# size, tmp259
	movl	(%rax), %eax	# *size_229, _230
	jmp	.L5934	#
.L5933:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _231
.L5934:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _231, _237
	movl	-252(%rbp), %eax	# p_index, tmp260
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _237,
	movq	%rax, %rcx	# _238,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1019:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L5930:
	movq	-248(%rbp), %rax	# this, tmp261
	movq	%rax, -312(%rbp)	# tmp261, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp262
	movq	(%rax), %rax	# this_239->_ptr, _240
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _240
	jne	.L5935	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _241
	jmp	.L5936	#
.L5935:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-312(%rbp), %rax	# this, tmp263
	movq	(%rax), %rcx	# this_239->_ptr, _241
.L5936:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-252(%rbp), %eax	# p_index, tmp264
	movslq	%eax, %rdx	# tmp264, _246
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _246, tmp265
	addq	%rax, %rax	# tmp265
	addq	%rdx, %rax	# _246, tmp265
	salq	$3, %rax	#, tmp266
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _248
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-336(%rbp), %rax	#, tmp267
	movq	%rdx, %rsi	# _248,
	movq	%rax, %rdi	# tmp267,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L5939	#
.L5912:
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# p_args, tmp268
	movq	(%rax), %rdx	# *p_args_37(D), _20
	leaq	-336(%rbp), %rax	#, tmp269
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp269,
	call	_ZN7VariantC1ERKS_	#
.LEHE1019:
.L5939:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-344(%rbp), %rax	#, tmp270
	leaq	-336(%rbp), %rdx	#, tmp271
	movq	%rdx, %rsi	# tmp271,
	movq	%rax, %rdi	# tmp270,
.LEHB1020:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE1020:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1717: 		Variant ret = (instance->*method)(_VC(1), _VC(2));
	leaq	-400(%rbp), %rax	#, tmp272
	leaq	-376(%rbp), %rcx	#, tmp273
	leaq	-344(%rbp), %rdx	#, tmp274
	movq	%r12, %rsi	# _3,
	movq	%rax, %rdi	# tmp272,
.LEHB1021:
	call	*%rbx	# iftmp.349_21
.LEHE1021:
	leaq	-344(%rbp), %rax	#, tmp275
	movq	%rax, %rdi	# tmp275,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.48199.type, _256
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _256
	je	.L5964	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp276
	movq	%rax, %rdi	# tmp276,
	call	_ZN7Variant5clearEv	#
.L5964:
# ./core/variant.h:423: 	}
	nop	
	leaq	-376(%rbp), %rax	#, tmp277
	movq	%rax, %rdi	# tmp277,
	call	_ZN5ArrayD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.48208.type, _255
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _255
	je	.L5965	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp278
	movq	%rax, %rdi	# tmp278,
	call	_ZN7Variant5clearEv	#
.L5965:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1718: 		return Variant(ret);
	leaq	-400(%rbp), %rdx	#, tmp279
	movq	-408(%rbp), %rax	# <retval>, tmp280
	movq	%rdx, %rsi	# tmp279,
	movq	%rax, %rdi	# tmp280,
.LEHB1022:
	call	_ZN7VariantC1ERKS_	#
.LEHE1022:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# ret.type, _257
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _257
	je	.L5966	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp281
	movq	%rax, %rdi	# tmp281,
	call	_ZN7Variant5clearEv	#
.L5966:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1718: 		return Variant(ret);
	jmp	.L5963	#
.L5956:
	movq	%rax, %rbx	#, tmp284
	leaq	-344(%rbp), %rax	#, tmp282
	movq	%rax, %rdi	# tmp282,
	call	_ZN10StringNameD1Ev	#
	jmp	.L5946	#
.L5955:
	movq	%rax, %rbx	#, tmp283
.L5946:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-336(%rbp), %eax	# D.48199.type, _258
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _258
	je	.L5967	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-336(%rbp), %rax	#, tmp287
	movq	%rax, %rdi	# tmp287,
	call	_ZN7Variant5clearEv	#
.L5967:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L5948	#
.L5954:
	movq	%rax, %rbx	#, tmp288
.L5948:
	leaq	-376(%rbp), %rax	#, tmp290
	movq	%rax, %rdi	# tmp290,
	call	_ZN5ArrayD1Ev	#
	jmp	.L5949	#
.L5953:
	movq	%rax, %rbx	#, tmp291
.L5949:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.48208.type, _259
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _259
	je	.L5968	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp293
	movq	%rax, %rdi	# tmp293,
	call	_ZN7Variant5clearEv	#
.L5968:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp291, D.62324
	movq	%rax, %rdi	# D.62324,
.LEHB1023:
	call	_Unwind_Resume	#
.LEHE1023:
.L5957:
	movq	%rax, %rbx	#, tmp295
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# ret.type, _260
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _260
	je	.L5969	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp294
	movq	%rax, %rdi	# tmp294,
	call	_ZN7Variant5clearEv	#
.L5969:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp295, D.62325
	movq	%rax, %rdi	# D.62325,
.LEHB1024:
	call	_Unwind_Resume	#
.LEHE1024:
.L5963:
# ./core/method_bind.gen.inc:1720: 	}
	movq	-408(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3647:
	.section	.gcc_except_table
.LLSDA3647:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3647-.LLSDACSB3647
.LLSDACSB3647:
	.uleb128 .LEHB1017-.LFB3647
	.uleb128 .LEHE1017-.LEHB1017
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1018-.LFB3647
	.uleb128 .LEHE1018-.LEHB1018
	.uleb128 .L5953-.LFB3647
	.uleb128 0
	.uleb128 .LEHB1019-.LFB3647
	.uleb128 .LEHE1019-.LEHB1019
	.uleb128 .L5954-.LFB3647
	.uleb128 0
	.uleb128 .LEHB1020-.LFB3647
	.uleb128 .LEHE1020-.LEHB1020
	.uleb128 .L5955-.LFB3647
	.uleb128 0
	.uleb128 .LEHB1021-.LFB3647
	.uleb128 .LEHE1021-.LEHB1021
	.uleb128 .L5956-.LFB3647
	.uleb128 0
	.uleb128 .LEHB1022-.LFB3647
	.uleb128 .LEHE1022-.LEHB1022
	.uleb128 .L5957-.LFB3647
	.uleb128 0
	.uleb128 .LEHB1023-.LFB3647
	.uleb128 .LEHE1023-.LEHB1023
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1024-.LFB3647
	.uleb128 .LEHE1024-.LEHB1024
	.uleb128 0
	.uleb128 0
.LLSDACSE3647:
	.section	.text._ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,"axG",@progbits,_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,comdat
	.size	_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE, .-_ZN12MethodBind2RI7VariantRK10StringNameRK5ArrayE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.section	.text._ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv
	.type	_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv, @function
_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv:
.LFB3648:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3648
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1495: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L5971	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L5972	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1025:
	call	_ZN6StringC1EPKc	#
.LEHE1025:
	jmp	.L5973	#
.L5972:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1026:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1026:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L5978	#
.L5977:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62330
	movq	%rax, %rdi	# D.62330,
.LEHB1027:
	call	_Unwind_Resume	#
.LEHE1027:
.L5978:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L5973	#
.L5971:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L5973:
# ./core/method_bind.gen.inc:1495: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1496: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3648:
	.section	.gcc_except_table
.LLSDA3648:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3648-.LLSDACSB3648
.LLSDACSB3648:
	.uleb128 .LEHB1025-.LFB3648
	.uleb128 .LEHE1025-.LEHB1025
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1026-.LFB3648
	.uleb128 .LEHE1026-.LEHB1026
	.uleb128 .L5977-.LFB3648
	.uleb128 0
	.uleb128 .LEHB1027-.LFB3648
	.uleb128 .LEHE1027-.LEHB1027
	.uleb128 0
	.uleb128 0
.LLSDACSE3648:
	.section	.text._ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv, .-_ZNK11MethodBind2IRK10StringNameRK7VariantE18get_instance_classEv
	.section	.text._ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.type	_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE, @function
_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE:
.LFB3649:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3649
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$448, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -424(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -432(%rbp)	# this, this
	movq	%rdx, -440(%rbp)	# p_object, p_object
	movq	%rcx, -448(%rbp)	# p_args, p_args
	movl	%r8d, -452(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -464(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1500: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-440(%rbp), %rax	# p_object, tmp186
	movq	%rax, -24(%rbp)	# tmp186, instance
# ./core/method_bind.gen.inc:1502: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-464(%rbp), %rax	# r_error, tmp187
	movl	$0, (%rax)	#, r_error_30(D)->error
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp188
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp189
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-432(%rbp), %rax	# this, tmp190
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L5980	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp191
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp192
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-432(%rbp), %rax	# this, tmp193
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.348_21
	jmp	.L5981	#
.L5980:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp194
	movq	64(%rax), %rbx	# this_32(D)->method.__pfn, iftmp.348_21
.L5981:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$1, -452(%rbp)	#, p_arg_count
	jg	.L5982	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$1, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp195
	movl	44(%rax), %eax	# this_51->argument_count, _53
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _54
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp196
	movl	%eax, -40(%rbp)	# tmp196, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L5983	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp197
	addq	$24, %rax	#, _56
	movq	%rax, -48(%rbp)	# _56, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp198
	addq	$8, %rax	#, _58
	movq	%rax, -56(%rbp)	# _58, this
	movq	-56(%rbp), %rax	# this, tmp199
	movq	%rax, -64(%rbp)	# tmp199, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp200
	movq	(%rax), %rax	# this_60->_ptr, _61
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _61
	jne	.L5984	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _62
	jmp	.L5985	#
.L5984:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp201
	movq	(%rax), %rax	# this_60->_ptr, _63
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _62
.L5985:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _62, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L5986	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp202
	movl	(%rax), %eax	# *size_67, _68
	jmp	.L5987	#
.L5986:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _69
.L5987:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _69, idx
	jl	.L5989	#,
.L5983:
	movl	$1, %eax	#, iftmp.327_78
	jmp	.L5990	#
.L5989:
	movl	$0, %eax	#, iftmp.327_78
.L5990:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_78
	je	.L5991	#,
	leaq	-384(%rbp), %rax	#, tmp203
	movq	%rax, -80(%rbp)	# tmp203, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp204
	movl	$0, (%rax)	#, this_82->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6009	#
.L5991:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp205
	addq	$24, %rax	#, _83
	movq	%rax, -88(%rbp)	# _83, this
	movl	-40(%rbp), %eax	# idx, tmp206
	movl	%eax, -92(%rbp)	# tmp206, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp207
	addq	$8, %rax	#, _86
	movq	%rax, -104(%rbp)	# _86, this
	movl	-92(%rbp), %eax	# p_index, tmp208
	movl	%eax, -108(%rbp)	# tmp208, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp210
	shrl	$31, %eax	#, tmp209
	movzbl	%al, %eax	# _89, _90
	testq	%rax, %rax	# _91
	jne	.L5993	#,
	movq	-104(%rbp), %rax	# this, tmp211
	movq	%rax, -120(%rbp)	# tmp211, this
	movq	-120(%rbp), %rax	# this, tmp212
	movq	%rax, -128(%rbp)	# tmp212, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp213
	movq	(%rax), %rax	# this_93->_ptr, _94
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _94
	jne	.L5994	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _95
	jmp	.L5995	#
.L5994:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp214
	movq	(%rax), %rax	# this_93->_ptr, _96
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _95
.L5995:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _95, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L5996	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp215
	movl	(%rax), %eax	# *size_100, _101
	jmp	.L5997	#
.L5996:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _102
.L5997:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _102, p_index
	setge	%al	#, _108
	movzbl	%al, %eax	# _108, _109
	testq	%rax, %rax	# _110
	je	.L5998	#,
.L5993:
	movl	$1, %eax	#, iftmp.12_111
	jmp	.L5999	#
.L5998:
	movl	$0, %eax	#, iftmp.12_111
.L5999:
	movzbl	%al, %eax	# iftmp.12_111, _114
	testq	%rax, %rax	# _114
	setne	%al	#, retval.11_115
	testb	%al, %al	# retval.11_115
	je	.L6000	#,
	movq	-104(%rbp), %rax	# this, tmp216
	movq	%rax, -144(%rbp)	# tmp216, this
	movq	-144(%rbp), %rax	# this, tmp217
	movq	%rax, -152(%rbp)	# tmp217, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp218
	movq	(%rax), %rax	# this_117->_ptr, _118
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _118
	jne	.L6001	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _119
	jmp	.L6002	#
.L6001:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_117->_ptr, _120
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _119
.L6002:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _119, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6003	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp220
	movl	(%rax), %eax	# *size_124, _125
	jmp	.L6004	#
.L6003:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _126
.L6004:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _126, _132
	movl	-108(%rbp), %eax	# p_index, tmp221
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _132,
	movq	%rax, %rcx	# _133,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1028:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6000:
	movq	-104(%rbp), %rax	# this, tmp222
	movq	%rax, -168(%rbp)	# tmp222, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp223
	movq	(%rax), %rax	# this_134->_ptr, _135
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _135
	jne	.L6005	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _136
	jmp	.L6006	#
.L6005:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp224
	movq	(%rax), %rcx	# this_134->_ptr, _136
.L6006:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp225
	movslq	%eax, %rdx	# tmp225, _141
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _141, tmp226
	addq	%rax, %rax	# tmp226
	addq	%rdx, %rax	# _141, tmp226
	salq	$3, %rax	#, tmp227
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _143
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-384(%rbp), %rax	#, tmp228
	movq	%rdx, %rsi	# _143,
	movq	%rax, %rdi	# tmp228,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6009	#
.L5982:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-448(%rbp), %rax	# p_args, tmp229
	addq	$8, %rax	#, _17
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-384(%rbp), %rax	#, tmp230
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp230,
	call	_ZN7VariantC1ERKS_	#
.LEHE1028:
.L6009:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-384(%rbp), %rdx	#, tmp231
	leaq	-416(%rbp), %rax	#, tmp232
	movq	%rdx, %rsi	# tmp231,
	movq	%rax, %rdi	# tmp232,
.LEHB1029:
	call	_ZN7VariantC1ERKS_	#
.LEHE1029:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$0, -452(%rbp)	#, p_arg_count
	jg	.L6011	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, _19
	movq	%rax, -176(%rbp)	# _19, this
	movl	$0, -180(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-176(%rbp), %rax	# this, tmp233
	movl	44(%rax), %eax	# this_150->argument_count, _152
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-180(%rbp), %eax	# p_arg, _153
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp234
	movl	%eax, -184(%rbp)	# tmp234, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -184(%rbp)	#, idx
	js	.L6012	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-176(%rbp), %rax	# this, tmp235
	addq	$24, %rax	#, _155
	movq	%rax, -192(%rbp)	# _155, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-192(%rbp), %rax	# this, tmp236
	addq	$8, %rax	#, _157
	movq	%rax, -200(%rbp)	# _157, this
	movq	-200(%rbp), %rax	# this, tmp237
	movq	%rax, -208(%rbp)	# tmp237, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-208(%rbp), %rax	# this, tmp238
	movq	(%rax), %rax	# this_159->_ptr, _160
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _160
	jne	.L6013	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _161
	jmp	.L6014	#
.L6013:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-208(%rbp), %rax	# this, tmp239
	movq	(%rax), %rax	# this_159->_ptr, _162
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _161
.L6014:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -216(%rbp)	# _161, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -216(%rbp)	#, size
	je	.L6015	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-216(%rbp), %rax	# size, tmp240
	movl	(%rax), %eax	# *size_166, _167
	jmp	.L6016	#
.L6015:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _168
.L6016:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -184(%rbp)	# _168, idx
	jl	.L6018	#,
.L6012:
	movl	$1, %eax	#, iftmp.327_177
	jmp	.L6019	#
.L6018:
	movl	$0, %eax	#, iftmp.327_177
.L6019:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_177
	je	.L6020	#,
	leaq	-352(%rbp), %rax	#, tmp241
	movq	%rax, -224(%rbp)	# tmp241, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-224(%rbp), %rax	# this, tmp242
	movl	$0, (%rax)	#, this_181->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6038	#
.L6020:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-176(%rbp), %rax	# this, tmp243
	addq	$24, %rax	#, _182
	movq	%rax, -232(%rbp)	# _182, this
	movl	-184(%rbp), %eax	# idx, tmp244
	movl	%eax, -236(%rbp)	# tmp244, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-232(%rbp), %rax	# this, tmp245
	addq	$8, %rax	#, _185
	movq	%rax, -248(%rbp)	# _185, this
	movl	-236(%rbp), %eax	# p_index, tmp246
	movl	%eax, -252(%rbp)	# tmp246, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-252(%rbp), %eax	# p_index, tmp248
	shrl	$31, %eax	#, tmp247
	movzbl	%al, %eax	# _188, _189
	testq	%rax, %rax	# _190
	jne	.L6022	#,
	movq	-248(%rbp), %rax	# this, tmp249
	movq	%rax, -264(%rbp)	# tmp249, this
	movq	-264(%rbp), %rax	# this, tmp250
	movq	%rax, -272(%rbp)	# tmp250, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp251
	movq	(%rax), %rax	# this_192->_ptr, _193
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _193
	jne	.L6023	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _194
	jmp	.L6024	#
.L6023:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp252
	movq	(%rax), %rax	# this_192->_ptr, _195
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _194
.L6024:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _194, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L6025	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp253
	movl	(%rax), %eax	# *size_199, _200
	jmp	.L6026	#
.L6025:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _201
.L6026:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -252(%rbp)	# _201, p_index
	setge	%al	#, _207
	movzbl	%al, %eax	# _207, _208
	testq	%rax, %rax	# _209
	je	.L6027	#,
.L6022:
	movl	$1, %eax	#, iftmp.12_210
	jmp	.L6028	#
.L6027:
	movl	$0, %eax	#, iftmp.12_210
.L6028:
	movzbl	%al, %eax	# iftmp.12_210, _213
	testq	%rax, %rax	# _213
	setne	%al	#, retval.11_214
	testb	%al, %al	# retval.11_214
	je	.L6029	#,
	movq	-248(%rbp), %rax	# this, tmp254
	movq	%rax, -288(%rbp)	# tmp254, this
	movq	-288(%rbp), %rax	# this, tmp255
	movq	%rax, -296(%rbp)	# tmp255, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-296(%rbp), %rax	# this, tmp256
	movq	(%rax), %rax	# this_216->_ptr, _217
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _217
	jne	.L6030	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _218
	jmp	.L6031	#
.L6030:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-296(%rbp), %rax	# this, tmp257
	movq	(%rax), %rax	# this_216->_ptr, _219
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _218
.L6031:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -304(%rbp)	# _218, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -304(%rbp)	#, size
	je	.L6032	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-304(%rbp), %rax	# size, tmp258
	movl	(%rax), %eax	# *size_223, _224
	jmp	.L6033	#
.L6032:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _225
.L6033:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _225, _231
	movl	-252(%rbp), %eax	# p_index, tmp259
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _231,
	movq	%rax, %rcx	# _232,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1030:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6029:
	movq	-248(%rbp), %rax	# this, tmp260
	movq	%rax, -312(%rbp)	# tmp260, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_233->_ptr, _234
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _234
	jne	.L6034	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _235
	jmp	.L6035	#
.L6034:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-312(%rbp), %rax	# this, tmp262
	movq	(%rax), %rcx	# this_233->_ptr, _235
.L6035:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-252(%rbp), %eax	# p_index, tmp263
	movslq	%eax, %rdx	# tmp263, _240
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _240, tmp264
	addq	%rax, %rax	# tmp264
	addq	%rdx, %rax	# _240, tmp264
	salq	$3, %rax	#, tmp265
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _242
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-352(%rbp), %rax	#, tmp266
	movq	%rdx, %rsi	# _242,
	movq	%rax, %rdi	# tmp266,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6038	#
.L6011:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-448(%rbp), %rax	# p_args, tmp267
	movq	(%rax), %rdx	# *p_args_36(D), _20
	leaq	-352(%rbp), %rax	#, tmp268
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp268,
	call	_ZN7VariantC1ERKS_	#
.LEHE1030:
.L6038:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-360(%rbp), %rax	#, tmp269
	leaq	-352(%rbp), %rdx	#, tmp270
	movq	%rdx, %rsi	# tmp270,
	movq	%rax, %rdi	# tmp269,
.LEHB1031:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE1031:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-416(%rbp), %rdx	#, tmp271
	leaq	-360(%rbp), %rax	#, tmp272
	movq	%rax, %rsi	# tmp272,
	movq	%r12, %rdi	# _3,
.LEHB1032:
	call	*%rbx	# iftmp.348_21
.LEHE1032:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp273
	movq	%rax, %rdi	# tmp273,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48218.type, _252
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _252
	je	.L6062	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp274
	movq	%rax, %rdi	# tmp274,
	call	_ZN7Variant5clearEv	#
.L6062:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.48228.type, _251
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _251
	je	.L6063	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp275
	movq	%rax, %rdi	# tmp275,
	call	_ZN7Variant5clearEv	#
.L6063:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48227.type, _250
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _250
	je	.L6064	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp276
	movq	%rax, %rdi	# tmp276,
	call	_ZN7Variant5clearEv	#
.L6064:
# ./core/variant.h:423: 	}
	nop	
	movq	-424(%rbp), %rax	# <retval>, tmp277
	movq	%rax, -320(%rbp)	# tmp277, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-320(%rbp), %rax	# this, tmp278
	movl	$0, (%rax)	#, this_249->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:1525: 		return Variant();
	jmp	.L6061	#
.L6054:
	movq	%rax, %rbx	#, tmp281
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp279
	movq	%rax, %rdi	# tmp279,
	call	_ZN10StringNameD1Ev	#
	jmp	.L6045	#
.L6053:
	movq	%rax, %rbx	#, tmp280
.L6045:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48218.type, _253
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _253
	je	.L6065	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp284
	movq	%rax, %rdi	# tmp284,
	call	_ZN7Variant5clearEv	#
.L6065:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6047	#
.L6052:
	movq	%rax, %rbx	#, tmp285
.L6047:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.48228.type, _254
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _254
	je	.L6066	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp287
	movq	%rax, %rdi	# tmp287,
	call	_ZN7Variant5clearEv	#
.L6066:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6049	#
.L6051:
	movq	%rax, %rbx	#, tmp288
.L6049:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48227.type, _255
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _255
	je	.L6067	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp290
	movq	%rax, %rdi	# tmp290,
	call	_ZN7Variant5clearEv	#
.L6067:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp288, D.62332
	movq	%rax, %rdi	# D.62332,
.LEHB1033:
	call	_Unwind_Resume	#
.LEHE1033:
.L6061:
# ./core/method_bind.gen.inc:1526: 	}
	movq	-424(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3649:
	.section	.gcc_except_table
.LLSDA3649:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3649-.LLSDACSB3649
.LLSDACSB3649:
	.uleb128 .LEHB1028-.LFB3649
	.uleb128 .LEHE1028-.LEHB1028
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1029-.LFB3649
	.uleb128 .LEHE1029-.LEHB1029
	.uleb128 .L6051-.LFB3649
	.uleb128 0
	.uleb128 .LEHB1030-.LFB3649
	.uleb128 .LEHE1030-.LEHB1030
	.uleb128 .L6052-.LFB3649
	.uleb128 0
	.uleb128 .LEHB1031-.LFB3649
	.uleb128 .LEHE1031-.LEHB1031
	.uleb128 .L6053-.LFB3649
	.uleb128 0
	.uleb128 .LEHB1032-.LFB3649
	.uleb128 .LEHE1032-.LEHB1032
	.uleb128 .L6054-.LFB3649
	.uleb128 0
	.uleb128 .LEHB1033-.LFB3649
	.uleb128 .LEHE1033-.LEHB1033
	.uleb128 0
	.uleb128 0
.LLSDACSE3649:
	.section	.text._ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,comdat
	.size	_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE, .-_ZN11MethodBind2IRK10StringNameRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.section	.text._ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv,"axG",@progbits,_ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv
	.type	_ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv, @function
_ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv:
.LFB3650:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -16(%rbp)	# this, this
# ./core/method_bind.h:383: 	virtual String get_instance_class() const { return T::get_class_static(); }
	movq	-8(%rbp), %rax	# <retval>, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN6Object16get_class_staticEv	#
# ./core/method_bind.h:383: 	virtual String get_instance_class() const { return T::get_class_static(); }
	movq	-8(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3650:
	.size	_ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv, .-_ZNK16MethodBindVarArgI6ObjectE18get_instance_classEv
	.section	.text._ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE
	.type	_ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE, @function
_ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE:
.LFB3651:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$64, %rsp	#,
	movq	%rdi, -24(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -32(%rbp)	# this, this
	movq	%rdx, -40(%rbp)	# p_object, p_object
	movq	%rcx, -48(%rbp)	# p_args, p_args
	movl	%r8d, -52(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -64(%rbp)	# r_error, r_error
# ./core/method_bind.h:347: 		T *instance = static_cast<T *>(p_object);
	movq	-40(%rbp), %rax	# p_object, tmp98
	movq	%rax, -8(%rbp)	# tmp98, instance
# ./core/method_bind.h:348: 		return (instance->*call_method)(p_args, p_arg_count, r_error);
	movq	-32(%rbp), %rax	# this, tmp99
	movq	64(%rax), %rax	# this_20(D)->call_method.__delta, _1
# ./core/method_bind.h:348: 		return (instance->*call_method)(p_args, p_arg_count, r_error);
	movq	%rax, %rdx	# _1, _2
	movq	-8(%rbp), %rax	# instance, tmp100
	leaq	(%rdx,%rax), %rsi	#, _3
# ./core/method_bind.h:348: 		return (instance->*call_method)(p_args, p_arg_count, r_error);
	movq	-32(%rbp), %rax	# this, tmp101
	movq	56(%rax), %rax	# this_20(D)->call_method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6071	#,
# ./core/method_bind.h:348: 		return (instance->*call_method)(p_args, p_arg_count, r_error);
	movq	-32(%rbp), %rax	# this, tmp102
	movq	64(%rax), %rax	# this_20(D)->call_method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-8(%rbp), %rax	# instance, tmp103
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-32(%rbp), %rax	# this, tmp104
	movq	56(%rax), %rax	# this_20(D)->call_method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.341_16
	jmp	.L6072	#
.L6071:
# ./core/method_bind.h:348: 		return (instance->*call_method)(p_args, p_arg_count, r_error);
	movq	-32(%rbp), %rax	# this, tmp105
	movq	56(%rax), %rax	# this_20(D)->call_method.__pfn, iftmp.341_16
.L6072:
# ./core/method_bind.h:348: 		return (instance->*call_method)(p_args, p_arg_count, r_error);
	movq	-24(%rbp), %rdi	# <retval>, tmp106
	movq	-64(%rbp), %r8	# r_error, tmp107
	movl	-52(%rbp), %ecx	# p_arg_count, tmp108
	movq	-48(%rbp), %rdx	# p_args, tmp109
	call	*%rax	# iftmp.341_16
# ./core/method_bind.h:349: 	}
	movq	-24(%rbp), %rax	# <retval>,
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3651:
	.size	_ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE, .-_ZN16MethodBindVarArgI6ObjectE4callEPS0_PPK7VariantiRNS3_9CallErrorE
	.section	.text._ZNK16MethodBindVarArgI6ObjectE9is_varargEv,"axG",@progbits,_ZNK16MethodBindVarArgI6ObjectE9is_varargEv,comdat
	.align 2
	.weak	_ZNK16MethodBindVarArgI6ObjectE9is_varargEv
	.type	_ZNK16MethodBindVarArgI6ObjectE9is_varargEv, @function
_ZNK16MethodBindVarArgI6ObjectE9is_varargEv:
.LFB3652:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.h:385: 	virtual bool is_vararg() const { return true; }
	movl	$1, %eax	#, _1
# ./core/method_bind.h:385: 	virtual bool is_vararg() const { return true; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3652:
	.size	_ZNK16MethodBindVarArgI6ObjectE9is_varargEv, .-_ZNK16MethodBindVarArgI6ObjectE9is_varargEv
	.section	.text._ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi,"axG",@progbits,_ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi,comdat
	.align 2
	.weak	_ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi
	.type	_ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi, @function
_ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi:
.LFB3653:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
	movl	%esi, -12(%rbp)	# p_arg, p_arg
# ./core/method_bind.h:341: 		return Variant::NIL;
	movl	$0, %eax	#, _1
# ./core/method_bind.h:342: 	}
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3653:
	.size	_ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi, .-_ZNK16MethodBindVarArgI6ObjectE18_gen_argument_typeEi
	.section	.text._ZNK16MethodBindVarArgI6ObjectE8is_constEv,"axG",@progbits,_ZNK16MethodBindVarArgI6ObjectE8is_constEv,comdat
	.align 2
	.weak	_ZNK16MethodBindVarArgI6ObjectE8is_constEv
	.type	_ZNK16MethodBindVarArgI6ObjectE8is_constEv, @function
_ZNK16MethodBindVarArgI6ObjectE8is_constEv:
.LFB3654:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)	# this, this
# ./core/method_bind.h:382: 	virtual bool is_const() const { return false; }
	movl	$0, %eax	#, _1
# ./core/method_bind.h:382: 	virtual bool is_const() const { return false; }
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3654:
	.size	_ZNK16MethodBindVarArgI6ObjectE8is_constEv, .-_ZNK16MethodBindVarArgI6ObjectE8is_constEv
	.section	.text._ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv
	.type	_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv, @function
_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv:
.LFB3655:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3655
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1306: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6081	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6082	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1034:
	call	_ZN6StringC1EPKc	#
.LEHE1034:
	jmp	.L6083	#
.L6082:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1035:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1035:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6088	#
.L6087:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62339
	movq	%rax, %rdi	# D.62339,
.LEHB1036:
	call	_Unwind_Resume	#
.LEHE1036:
.L6088:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6083	#
.L6081:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6083:
# ./core/method_bind.gen.inc:1306: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1307: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3655:
	.section	.gcc_except_table
.LLSDA3655:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3655-.LLSDACSB3655
.LLSDACSB3655:
	.uleb128 .LEHB1034-.LFB3655
	.uleb128 .LEHE1034-.LEHB1034
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1035-.LFB3655
	.uleb128 .LEHE1035-.LEHB1035
	.uleb128 .L6087-.LFB3655
	.uleb128 0
	.uleb128 .LEHB1036-.LFB3655
	.uleb128 .LEHE1036-.LEHB1036
	.uleb128 0
	.uleb128 0
.LLSDACSE3655:
	.section	.text._ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv, .-_ZNK13MethodBind1RCIbRK10StringNameE18get_instance_classEv
	.section	.text._ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.type	_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, @function
_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE:
.LFB3656:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3656
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$256, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -232(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -240(%rbp)	# this, this
	movq	%rdx, -248(%rbp)	# p_object, p_object
	movq	%rcx, -256(%rbp)	# p_args, p_args
	movl	%r8d, -260(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -272(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1311: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-248(%rbp), %rax	# p_object, tmp146
	movq	%rax, -24(%rbp)	# tmp146, instance
# ./core/method_bind.gen.inc:1313: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-272(%rbp), %rax	# r_error, tmp147
	movl	$0, (%rax)	#, r_error_28(D)->error
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp148
	movq	72(%rax), %rax	# this_30(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp149
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-240(%rbp), %rax	# this, tmp150
	movq	64(%rax), %rax	# this_30(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6090	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp151
	movq	72(%rax), %rax	# this_30(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp152
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-240(%rbp), %rax	# this, tmp153
	movq	64(%rax), %rax	# this_30(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.350_20
	jmp	.L6091	#
.L6090:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp154
	movq	64(%rax), %rbx	# this_30(D)->method.__pfn, iftmp.350_20
.L6091:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	cmpl	$0, -260(%rbp)	#, p_arg_count
	jg	.L6092	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp155
	movl	44(%rax), %eax	# this_49->argument_count, _51
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _52
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp156
	movl	%eax, -40(%rbp)	# tmp156, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6093	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp157
	addq	$24, %rax	#, _54
	movq	%rax, -48(%rbp)	# _54, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp158
	addq	$8, %rax	#, _56
	movq	%rax, -56(%rbp)	# _56, this
	movq	-56(%rbp), %rax	# this, tmp159
	movq	%rax, -64(%rbp)	# tmp159, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp160
	movq	(%rax), %rax	# this_58->_ptr, _59
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _59
	jne	.L6094	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _60
	jmp	.L6095	#
.L6094:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp161
	movq	(%rax), %rax	# this_58->_ptr, _61
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _60
.L6095:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _60, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6096	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp162
	movl	(%rax), %eax	# *size_65, _66
	jmp	.L6097	#
.L6096:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _67
.L6097:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _67, idx
	jl	.L6099	#,
.L6093:
	movl	$1, %eax	#, iftmp.327_76
	jmp	.L6100	#
.L6099:
	movl	$0, %eax	#, iftmp.327_76
.L6100:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_76
	je	.L6101	#,
	leaq	-192(%rbp), %rax	#, tmp163
	movq	%rax, -80(%rbp)	# tmp163, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp164
	movl	$0, (%rax)	#, this_80->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6119	#
.L6101:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp165
	addq	$24, %rax	#, _81
	movq	%rax, -88(%rbp)	# _81, this
	movl	-40(%rbp), %eax	# idx, tmp166
	movl	%eax, -92(%rbp)	# tmp166, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp167
	addq	$8, %rax	#, _84
	movq	%rax, -104(%rbp)	# _84, this
	movl	-92(%rbp), %eax	# p_index, tmp168
	movl	%eax, -108(%rbp)	# tmp168, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp170
	shrl	$31, %eax	#, tmp169
	movzbl	%al, %eax	# _87, _88
	testq	%rax, %rax	# _89
	jne	.L6103	#,
	movq	-104(%rbp), %rax	# this, tmp171
	movq	%rax, -120(%rbp)	# tmp171, this
	movq	-120(%rbp), %rax	# this, tmp172
	movq	%rax, -128(%rbp)	# tmp172, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp173
	movq	(%rax), %rax	# this_91->_ptr, _92
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _92
	jne	.L6104	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _93
	jmp	.L6105	#
.L6104:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_91->_ptr, _94
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _93
.L6105:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _93, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6106	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp175
	movl	(%rax), %eax	# *size_98, _99
	jmp	.L6107	#
.L6106:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _100
.L6107:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _100, p_index
	setge	%al	#, _106
	movzbl	%al, %eax	# _106, _107
	testq	%rax, %rax	# _108
	je	.L6108	#,
.L6103:
	movl	$1, %eax	#, iftmp.12_109
	jmp	.L6109	#
.L6108:
	movl	$0, %eax	#, iftmp.12_109
.L6109:
	movzbl	%al, %eax	# iftmp.12_109, _112
	testq	%rax, %rax	# _112
	setne	%al	#, retval.11_113
	testb	%al, %al	# retval.11_113
	je	.L6110	#,
	movq	-104(%rbp), %rax	# this, tmp176
	movq	%rax, -144(%rbp)	# tmp176, this
	movq	-144(%rbp), %rax	# this, tmp177
	movq	%rax, -152(%rbp)	# tmp177, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp178
	movq	(%rax), %rax	# this_115->_ptr, _116
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _116
	jne	.L6111	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _117
	jmp	.L6112	#
.L6111:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp179
	movq	(%rax), %rax	# this_115->_ptr, _118
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _117
.L6112:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _117, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6113	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp180
	movl	(%rax), %eax	# *size_122, _123
	jmp	.L6114	#
.L6113:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _124
.L6114:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _124, _130
	movl	-108(%rbp), %eax	# p_index, tmp181
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _130,
	movq	%rax, %rcx	# _131,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1037:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6110:
	movq	-104(%rbp), %rax	# this, tmp182
	movq	%rax, -168(%rbp)	# tmp182, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp183
	movq	(%rax), %rax	# this_132->_ptr, _133
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _133
	jne	.L6115	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _134
	jmp	.L6116	#
.L6115:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp184
	movq	(%rax), %rcx	# this_132->_ptr, _134
.L6116:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp185
	movslq	%eax, %rdx	# tmp185, _139
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _139, tmp186
	addq	%rax, %rax	# tmp186
	addq	%rdx, %rax	# _139, tmp186
	salq	$3, %rax	#, tmp187
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _141
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-192(%rbp), %rax	#, tmp188
	movq	%rdx, %rsi	# _141,
	movq	%rax, %rdi	# tmp188,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6119	#
.L6092:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# p_args, tmp189
	movq	(%rax), %rdx	# *p_args_34(D), _17
	leaq	-192(%rbp), %rax	#, tmp190
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp190,
	call	_ZN7VariantC1ERKS_	#
.LEHE1037:
.L6119:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-200(%rbp), %rax	#, tmp191
	leaq	-192(%rbp), %rdx	#, tmp192
	movq	%rdx, %rsi	# tmp192,
	movq	%rax, %rdi	# tmp191,
.LEHB1038:
	call	_ZNK7Variantcv10StringNameEv	#
.LEHE1038:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-200(%rbp), %rax	#, tmp193
	movq	%rax, %rsi	# tmp193,
	movq	%r12, %rdi	# _3,
.LEHB1039:
	call	*%rbx	# iftmp.350_20
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movzbl	%al, %edx	# _18, _19
	leaq	-224(%rbp), %rax	#, tmp194
	movl	%edx, %esi	# _19,
	movq	%rax, %rdi	# tmp194,
	call	_ZN7VariantC1Eb	#
.LEHE1039:
	leaq	-200(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN10StringNameD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48245.type, _148
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _148
	je	.L6136	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN7Variant5clearEv	#
.L6136:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	leaq	-224(%rbp), %rdx	#, tmp197
	movq	-232(%rbp), %rax	# <retval>, tmp198
	movq	%rdx, %rsi	# tmp197,
	movq	%rax, %rdi	# tmp198,
.LEHB1040:
	call	_ZN7VariantC1ERKS_	#
.LEHE1040:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _149
	je	.L6137	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp199
	movq	%rax, %rdi	# tmp199,
	call	_ZN7Variant5clearEv	#
.L6137:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	jmp	.L6135	#
.L6130:
	movq	%rax, %rbx	#, tmp202
	leaq	-200(%rbp), %rax	#, tmp200
	movq	%rax, %rdi	# tmp200,
	call	_ZN10StringNameD1Ev	#
	jmp	.L6125	#
.L6129:
	movq	%rax, %rbx	#, tmp201
.L6125:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48245.type, _150
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _150
	je	.L6138	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp205
	movq	%rax, %rdi	# tmp205,
	call	_ZN7Variant5clearEv	#
.L6138:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp201, D.62341
	movq	%rax, %rdi	# D.62341,
.LEHB1041:
	call	_Unwind_Resume	#
.LEHE1041:
.L6131:
	movq	%rax, %rbx	#, tmp207
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _151
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _151
	je	.L6139	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp206
	movq	%rax, %rdi	# tmp206,
	call	_ZN7Variant5clearEv	#
.L6139:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp207, D.62342
	movq	%rax, %rdi	# D.62342,
.LEHB1042:
	call	_Unwind_Resume	#
.LEHE1042:
.L6135:
# ./core/method_bind.gen.inc:1336: 	}
	movq	-232(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3656:
	.section	.gcc_except_table
.LLSDA3656:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3656-.LLSDACSB3656
.LLSDACSB3656:
	.uleb128 .LEHB1037-.LFB3656
	.uleb128 .LEHE1037-.LEHB1037
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1038-.LFB3656
	.uleb128 .LEHE1038-.LEHB1038
	.uleb128 .L6129-.LFB3656
	.uleb128 0
	.uleb128 .LEHB1039-.LFB3656
	.uleb128 .LEHE1039-.LEHB1039
	.uleb128 .L6130-.LFB3656
	.uleb128 0
	.uleb128 .LEHB1040-.LFB3656
	.uleb128 .LEHE1040-.LEHB1040
	.uleb128 .L6131-.LFB3656
	.uleb128 0
	.uleb128 .LEHB1041-.LFB3656
	.uleb128 .LEHE1041-.LEHB1041
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1042-.LFB3656
	.uleb128 .LEHE1042-.LEHB1042
	.uleb128 0
	.uleb128 0
.LLSDACSE3656:
	.section	.text._ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, .-_ZN13MethodBind1RCIbRK10StringNameE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv
	.type	_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv, @function
_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv:
.LFB3657:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3657
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1495: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6141	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6142	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1043:
	call	_ZN6StringC1EPKc	#
.LEHE1043:
	jmp	.L6143	#
.L6142:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1044:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1044:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6148	#
.L6147:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62345
	movq	%rax, %rdi	# D.62345,
.LEHB1045:
	call	_Unwind_Resume	#
.LEHE1045:
.L6148:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6143	#
.L6141:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6143:
# ./core/method_bind.gen.inc:1495: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1496: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3657:
	.section	.gcc_except_table
.LLSDA3657:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3657-.LLSDACSB3657
.LLSDACSB3657:
	.uleb128 .LEHB1043-.LFB3657
	.uleb128 .LEHE1043-.LEHB1043
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1044-.LFB3657
	.uleb128 .LEHE1044-.LEHB1044
	.uleb128 .L6147-.LFB3657
	.uleb128 0
	.uleb128 .LEHB1045-.LFB3657
	.uleb128 .LEHE1045-.LEHB1045
	.uleb128 0
	.uleb128 0
.LLSDACSE3657:
	.section	.text._ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv, .-_ZNK11MethodBind2IRK6StringRK5ArrayE18get_instance_classEv
	.section	.text._ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE
	.type	_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE, @function
_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE:
.LFB3658:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3658
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$432, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -408(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -416(%rbp)	# this, this
	movq	%rdx, -424(%rbp)	# p_object, p_object
	movq	%rcx, -432(%rbp)	# p_args, p_args
	movl	%r8d, -436(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -448(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1500: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-424(%rbp), %rax	# p_object, tmp184
	movq	%rax, -24(%rbp)	# tmp184, instance
# ./core/method_bind.gen.inc:1502: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-448(%rbp), %rax	# r_error, tmp185
	movl	$0, (%rax)	#, r_error_30(D)->error
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp186
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp187
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-416(%rbp), %rax	# this, tmp188
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6150	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp189
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp190
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-416(%rbp), %rax	# this, tmp191
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.339_21
	jmp	.L6151	#
.L6150:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp192
	movq	64(%rax), %rbx	# this_32(D)->method.__pfn, iftmp.339_21
.L6151:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$1, -436(%rbp)	#, p_arg_count
	jg	.L6152	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$1, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp193
	movl	44(%rax), %eax	# this_53->argument_count, _55
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _56
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp194
	movl	%eax, -40(%rbp)	# tmp194, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6153	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp195
	addq	$24, %rax	#, _58
	movq	%rax, -48(%rbp)	# _58, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp196
	addq	$8, %rax	#, _60
	movq	%rax, -56(%rbp)	# _60, this
	movq	-56(%rbp), %rax	# this, tmp197
	movq	%rax, -64(%rbp)	# tmp197, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp198
	movq	(%rax), %rax	# this_62->_ptr, _63
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _63
	jne	.L6154	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _64
	jmp	.L6155	#
.L6154:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp199
	movq	(%rax), %rax	# this_62->_ptr, _65
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _64
.L6155:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _64, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6156	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp200
	movl	(%rax), %eax	# *size_69, _70
	jmp	.L6157	#
.L6156:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _71
.L6157:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _71, idx
	jl	.L6159	#,
.L6153:
	movl	$1, %eax	#, iftmp.327_80
	jmp	.L6160	#
.L6159:
	movl	$0, %eax	#, iftmp.327_80
.L6160:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_80
	je	.L6161	#,
	leaq	-384(%rbp), %rax	#, tmp201
	movq	%rax, -80(%rbp)	# tmp201, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp202
	movl	$0, (%rax)	#, this_84->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6179	#
.L6161:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp203
	addq	$24, %rax	#, _85
	movq	%rax, -88(%rbp)	# _85, this
	movl	-40(%rbp), %eax	# idx, tmp204
	movl	%eax, -92(%rbp)	# tmp204, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp205
	addq	$8, %rax	#, _88
	movq	%rax, -104(%rbp)	# _88, this
	movl	-92(%rbp), %eax	# p_index, tmp206
	movl	%eax, -108(%rbp)	# tmp206, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp208
	shrl	$31, %eax	#, tmp207
	movzbl	%al, %eax	# _91, _92
	testq	%rax, %rax	# _93
	jne	.L6163	#,
	movq	-104(%rbp), %rax	# this, tmp209
	movq	%rax, -120(%rbp)	# tmp209, this
	movq	-120(%rbp), %rax	# this, tmp210
	movq	%rax, -128(%rbp)	# tmp210, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp211
	movq	(%rax), %rax	# this_95->_ptr, _96
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _96
	jne	.L6164	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _97
	jmp	.L6165	#
.L6164:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp212
	movq	(%rax), %rax	# this_95->_ptr, _98
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _97
.L6165:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _97, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6166	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp213
	movl	(%rax), %eax	# *size_102, _103
	jmp	.L6167	#
.L6166:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _104
.L6167:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _104, p_index
	setge	%al	#, _110
	movzbl	%al, %eax	# _110, _111
	testq	%rax, %rax	# _112
	je	.L6168	#,
.L6163:
	movl	$1, %eax	#, iftmp.12_113
	jmp	.L6169	#
.L6168:
	movl	$0, %eax	#, iftmp.12_113
.L6169:
	movzbl	%al, %eax	# iftmp.12_113, _116
	testq	%rax, %rax	# _116
	setne	%al	#, retval.11_117
	testb	%al, %al	# retval.11_117
	je	.L6170	#,
	movq	-104(%rbp), %rax	# this, tmp214
	movq	%rax, -144(%rbp)	# tmp214, this
	movq	-144(%rbp), %rax	# this, tmp215
	movq	%rax, -152(%rbp)	# tmp215, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp216
	movq	(%rax), %rax	# this_119->_ptr, _120
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _120
	jne	.L6171	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _121
	jmp	.L6172	#
.L6171:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp217
	movq	(%rax), %rax	# this_119->_ptr, _122
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _121
.L6172:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _121, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6173	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp218
	movl	(%rax), %eax	# *size_126, _127
	jmp	.L6174	#
.L6173:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _128
.L6174:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _128, _134
	movl	-108(%rbp), %eax	# p_index, tmp219
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _134,
	movq	%rax, %rcx	# _135,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1046:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6170:
	movq	-104(%rbp), %rax	# this, tmp220
	movq	%rax, -168(%rbp)	# tmp220, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp221
	movq	(%rax), %rax	# this_136->_ptr, _137
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _137
	jne	.L6175	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _138
	jmp	.L6176	#
.L6175:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp222
	movq	(%rax), %rcx	# this_136->_ptr, _138
.L6176:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp223
	movslq	%eax, %rdx	# tmp223, _143
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _143, tmp224
	addq	%rax, %rax	# tmp224
	addq	%rdx, %rax	# _143, tmp224
	salq	$3, %rax	#, tmp225
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _145
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-384(%rbp), %rax	#, tmp226
	movq	%rdx, %rsi	# _145,
	movq	%rax, %rdi	# tmp226,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6179	#
.L6152:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# p_args, tmp227
	addq	$8, %rax	#, _17
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-384(%rbp), %rax	#, tmp228
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp228,
	call	_ZN7VariantC1ERKS_	#
.LEHE1046:
.L6179:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-392(%rbp), %rax	#, tmp229
	leaq	-384(%rbp), %rdx	#, tmp230
	movq	%rdx, %rsi	# tmp230,
	movq	%rax, %rdi	# tmp229,
.LEHB1047:
	call	_ZNK7Variantcv5ArrayEv	#
.LEHE1047:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$0, -436(%rbp)	#, p_arg_count
	jg	.L6181	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, _19
	movq	%rax, -176(%rbp)	# _19, this
	movl	$0, -180(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-176(%rbp), %rax	# this, tmp231
	movl	44(%rax), %eax	# this_152->argument_count, _154
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-180(%rbp), %eax	# p_arg, _155
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp232
	movl	%eax, -184(%rbp)	# tmp232, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -184(%rbp)	#, idx
	js	.L6182	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-176(%rbp), %rax	# this, tmp233
	addq	$24, %rax	#, _157
	movq	%rax, -192(%rbp)	# _157, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-192(%rbp), %rax	# this, tmp234
	addq	$8, %rax	#, _159
	movq	%rax, -200(%rbp)	# _159, this
	movq	-200(%rbp), %rax	# this, tmp235
	movq	%rax, -208(%rbp)	# tmp235, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-208(%rbp), %rax	# this, tmp236
	movq	(%rax), %rax	# this_161->_ptr, _162
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _162
	jne	.L6183	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _163
	jmp	.L6184	#
.L6183:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-208(%rbp), %rax	# this, tmp237
	movq	(%rax), %rax	# this_161->_ptr, _164
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _163
.L6184:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -216(%rbp)	# _163, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -216(%rbp)	#, size
	je	.L6185	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-216(%rbp), %rax	# size, tmp238
	movl	(%rax), %eax	# *size_168, _169
	jmp	.L6186	#
.L6185:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _170
.L6186:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -184(%rbp)	# _170, idx
	jl	.L6188	#,
.L6182:
	movl	$1, %eax	#, iftmp.327_179
	jmp	.L6189	#
.L6188:
	movl	$0, %eax	#, iftmp.327_179
.L6189:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_179
	je	.L6190	#,
	leaq	-352(%rbp), %rax	#, tmp239
	movq	%rax, -224(%rbp)	# tmp239, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-224(%rbp), %rax	# this, tmp240
	movl	$0, (%rax)	#, this_183->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6208	#
.L6190:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-176(%rbp), %rax	# this, tmp241
	addq	$24, %rax	#, _184
	movq	%rax, -232(%rbp)	# _184, this
	movl	-184(%rbp), %eax	# idx, tmp242
	movl	%eax, -236(%rbp)	# tmp242, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-232(%rbp), %rax	# this, tmp243
	addq	$8, %rax	#, _187
	movq	%rax, -248(%rbp)	# _187, this
	movl	-236(%rbp), %eax	# p_index, tmp244
	movl	%eax, -252(%rbp)	# tmp244, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-252(%rbp), %eax	# p_index, tmp246
	shrl	$31, %eax	#, tmp245
	movzbl	%al, %eax	# _190, _191
	testq	%rax, %rax	# _192
	jne	.L6192	#,
	movq	-248(%rbp), %rax	# this, tmp247
	movq	%rax, -264(%rbp)	# tmp247, this
	movq	-264(%rbp), %rax	# this, tmp248
	movq	%rax, -272(%rbp)	# tmp248, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp249
	movq	(%rax), %rax	# this_194->_ptr, _195
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _195
	jne	.L6193	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _196
	jmp	.L6194	#
.L6193:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp250
	movq	(%rax), %rax	# this_194->_ptr, _197
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _196
.L6194:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _196, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L6195	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp251
	movl	(%rax), %eax	# *size_201, _202
	jmp	.L6196	#
.L6195:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _203
.L6196:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -252(%rbp)	# _203, p_index
	setge	%al	#, _209
	movzbl	%al, %eax	# _209, _210
	testq	%rax, %rax	# _211
	je	.L6197	#,
.L6192:
	movl	$1, %eax	#, iftmp.12_212
	jmp	.L6198	#
.L6197:
	movl	$0, %eax	#, iftmp.12_212
.L6198:
	movzbl	%al, %eax	# iftmp.12_212, _215
	testq	%rax, %rax	# _215
	setne	%al	#, retval.11_216
	testb	%al, %al	# retval.11_216
	je	.L6199	#,
	movq	-248(%rbp), %rax	# this, tmp252
	movq	%rax, -288(%rbp)	# tmp252, this
	movq	-288(%rbp), %rax	# this, tmp253
	movq	%rax, -296(%rbp)	# tmp253, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-296(%rbp), %rax	# this, tmp254
	movq	(%rax), %rax	# this_218->_ptr, _219
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _219
	jne	.L6200	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _220
	jmp	.L6201	#
.L6200:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-296(%rbp), %rax	# this, tmp255
	movq	(%rax), %rax	# this_218->_ptr, _221
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _220
.L6201:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -304(%rbp)	# _220, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -304(%rbp)	#, size
	je	.L6202	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-304(%rbp), %rax	# size, tmp256
	movl	(%rax), %eax	# *size_225, _226
	jmp	.L6203	#
.L6202:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _227
.L6203:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _227, _233
	movl	-252(%rbp), %eax	# p_index, tmp257
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _233,
	movq	%rax, %rcx	# _234,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1048:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6199:
	movq	-248(%rbp), %rax	# this, tmp258
	movq	%rax, -312(%rbp)	# tmp258, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp259
	movq	(%rax), %rax	# this_235->_ptr, _236
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _236
	jne	.L6204	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _237
	jmp	.L6205	#
.L6204:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-312(%rbp), %rax	# this, tmp260
	movq	(%rax), %rcx	# this_235->_ptr, _237
.L6205:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-252(%rbp), %eax	# p_index, tmp261
	movslq	%eax, %rdx	# tmp261, _242
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _242, tmp262
	addq	%rax, %rax	# tmp262
	addq	%rdx, %rax	# _242, tmp262
	salq	$3, %rax	#, tmp263
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _244
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-352(%rbp), %rax	#, tmp264
	movq	%rdx, %rsi	# _244,
	movq	%rax, %rdi	# tmp264,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6208	#
.L6181:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# p_args, tmp265
	movq	(%rax), %rdx	# *p_args_36(D), _20
	leaq	-352(%rbp), %rax	#, tmp266
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp266,
	call	_ZN7VariantC1ERKS_	#
.LEHE1048:
.L6208:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-360(%rbp), %rax	#, tmp267
	leaq	-352(%rbp), %rdx	#, tmp268
	movq	%rdx, %rsi	# tmp268,
	movq	%rax, %rdi	# tmp267,
.LEHB1049:
	call	_ZNK7Variantcv6StringEv	#
.LEHE1049:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-392(%rbp), %rdx	#, tmp269
	leaq	-360(%rbp), %rax	#, tmp270
	movq	%rax, %rsi	# tmp270,
	movq	%r12, %rdi	# _3,
.LEHB1050:
	call	*%rbx	# iftmp.339_21
.LEHE1050:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp271
	movq	%rax, %rdi	# tmp271,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48255.type, _253
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _253
	je	.L6228	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp272
	movq	%rax, %rdi	# tmp272,
	call	_ZN7Variant5clearEv	#
.L6228:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-392(%rbp), %rax	#, tmp273
	movq	%rax, %rdi	# tmp273,
	call	_ZN5ArrayD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48259.type, _252
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _252
	je	.L6229	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp274
	movq	%rax, %rdi	# tmp274,
	call	_ZN7Variant5clearEv	#
.L6229:
# ./core/variant.h:423: 	}
	nop	
	movq	-408(%rbp), %rax	# <retval>, tmp275
	movq	%rax, -320(%rbp)	# tmp275, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-320(%rbp), %rax	# this, tmp276
	movl	$0, (%rax)	#, this_251->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:1525: 		return Variant();
	jmp	.L6227	#
.L6222:
	movq	%rax, %rbx	#, tmp279
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp277
	movq	%rax, %rdi	# tmp277,
	call	_ZN6StringD1Ev	#
	jmp	.L6214	#
.L6221:
	movq	%rax, %rbx	#, tmp278
.L6214:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48255.type, _254
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _254
	je	.L6230	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp282
	movq	%rax, %rdi	# tmp282,
	call	_ZN7Variant5clearEv	#
.L6230:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6216	#
.L6220:
	movq	%rax, %rbx	#, tmp283
.L6216:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-392(%rbp), %rax	#, tmp285
	movq	%rax, %rdi	# tmp285,
	call	_ZN5ArrayD1Ev	#
	jmp	.L6217	#
.L6219:
	movq	%rax, %rbx	#, tmp286
.L6217:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48259.type, _255
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _255
	je	.L6231	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp288
	movq	%rax, %rdi	# tmp288,
	call	_ZN7Variant5clearEv	#
.L6231:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp286, D.62347
	movq	%rax, %rdi	# D.62347,
.LEHB1051:
	call	_Unwind_Resume	#
.LEHE1051:
.L6227:
# ./core/method_bind.gen.inc:1526: 	}
	movq	-408(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3658:
	.section	.gcc_except_table
.LLSDA3658:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3658-.LLSDACSB3658
.LLSDACSB3658:
	.uleb128 .LEHB1046-.LFB3658
	.uleb128 .LEHE1046-.LEHB1046
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1047-.LFB3658
	.uleb128 .LEHE1047-.LEHB1047
	.uleb128 .L6219-.LFB3658
	.uleb128 0
	.uleb128 .LEHB1048-.LFB3658
	.uleb128 .LEHE1048-.LEHB1048
	.uleb128 .L6220-.LFB3658
	.uleb128 0
	.uleb128 .LEHB1049-.LFB3658
	.uleb128 .LEHE1049-.LEHB1049
	.uleb128 .L6221-.LFB3658
	.uleb128 0
	.uleb128 .LEHB1050-.LFB3658
	.uleb128 .LEHE1050-.LEHB1050
	.uleb128 .L6222-.LFB3658
	.uleb128 0
	.uleb128 .LEHB1051-.LFB3658
	.uleb128 .LEHE1051-.LEHB1051
	.uleb128 0
	.uleb128 0
.LLSDACSE3658:
	.section	.text._ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE,comdat
	.size	_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE, .-_ZN11MethodBind2IRK6StringRK5ArrayE4callEP6ObjectPPK7VariantiRNS9_9CallErrorE
	.section	.text._ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv
	.type	_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv, @function
_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv:
.LFB3659:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3659
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:567: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6233	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6234	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1052:
	call	_ZN6StringC1EPKc	#
.LEHE1052:
	jmp	.L6235	#
.L6234:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1053:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1053:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6240	#
.L6239:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62351
	movq	%rax, %rdi	# D.62351,
.LEHB1054:
	call	_Unwind_Resume	#
.LEHE1054:
.L6240:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6235	#
.L6233:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6235:
# ./core/method_bind.gen.inc:567: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:568: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3659:
	.section	.gcc_except_table
.LLSDA3659:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3659-.LLSDACSB3659
.LLSDACSB3659:
	.uleb128 .LEHB1052-.LFB3659
	.uleb128 .LEHE1052-.LEHB1052
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1053-.LFB3659
	.uleb128 .LEHE1053-.LEHB1053
	.uleb128 .L6239-.LFB3659
	.uleb128 0
	.uleb128 .LEHB1054-.LFB3659
	.uleb128 .LEHE1054-.LEHB1054
	.uleb128 0
	.uleb128 0
.LLSDACSE3659:
	.section	.text._ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv, .-_ZNK13MethodBind0RCI10PoolVectorI6StringEE18get_instance_classEv
	.section	.text._ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.type	_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, @function
_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE:
.LFB3660:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3660
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
	movq	%rdx, -88(%rbp)	# p_object, p_object
	movq	%rcx, -96(%rbp)	# p_args, p_args
	movl	%r8d, -100(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -112(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:572: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-88(%rbp), %rax	# p_object, tmp102
	movq	%rax, -24(%rbp)	# tmp102, instance
# ./core/method_bind.gen.inc:574: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-112(%rbp), %rax	# r_error, tmp103
	movl	$0, (%rax)	#, r_error_21(D)->error
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp104
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _1
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp105
	leaq	(%rdx,%rax), %rcx	#, _3
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp106
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6242	#,
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp107
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp108
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-80(%rbp), %rax	# this, tmp109
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.338_16
	jmp	.L6243	#
.L6242:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp110
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, iftmp.338_16
.L6243:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	leaq	-32(%rbp), %rdx	#, tmp111
	movq	%rcx, %rsi	# _3,
	movq	%rdx, %rdi	# tmp111,
.LEHB1055:
	call	*%rax	# iftmp.338_16
.LEHE1055:
	leaq	-32(%rbp), %rdx	#, tmp112
	leaq	-64(%rbp), %rax	#, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
.LEHB1056:
	call	_ZN7VariantC1ERK10PoolVectorI6StringE	#
.LEHE1056:
	leaq	-32(%rbp), %rax	#, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN10PoolVectorI6StringED1Ev	#
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	leaq	-64(%rbp), %rdx	#, tmp115
	movq	-72(%rbp), %rax	# <retval>, tmp116
	movq	%rdx, %rsi	# tmp115,
	movq	%rax, %rdi	# tmp116,
.LEHB1057:
	call	_ZN7VariantC1ERKS_	#
.LEHE1057:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _36
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _36
	je	.L6253	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp117
	movq	%rax, %rdi	# tmp117,
	call	_ZN7Variant5clearEv	#
.L6253:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	jmp	.L6252	#
.L6249:
	movq	%rax, %rbx	#, tmp119
	leaq	-32(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZN10PoolVectorI6StringED1Ev	#
	movq	%rbx, %rax	# tmp119, D.62353
	movq	%rax, %rdi	# D.62353,
.LEHB1058:
	call	_Unwind_Resume	#
.LEHE1058:
.L6250:
	movq	%rax, %rbx	#, tmp121
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _37
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _37
	je	.L6254	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp120
	movq	%rax, %rdi	# tmp120,
	call	_ZN7Variant5clearEv	#
.L6254:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp121, D.62354
	movq	%rax, %rdi	# D.62354,
.LEHB1059:
	call	_Unwind_Resume	#
.LEHE1059:
.L6252:
# ./core/method_bind.gen.inc:596: 	}
	movq	-72(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3660:
	.section	.gcc_except_table
.LLSDA3660:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3660-.LLSDACSB3660
.LLSDACSB3660:
	.uleb128 .LEHB1055-.LFB3660
	.uleb128 .LEHE1055-.LEHB1055
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1056-.LFB3660
	.uleb128 .LEHE1056-.LEHB1056
	.uleb128 .L6249-.LFB3660
	.uleb128 0
	.uleb128 .LEHB1057-.LFB3660
	.uleb128 .LEHE1057-.LEHB1057
	.uleb128 .L6250-.LFB3660
	.uleb128 0
	.uleb128 .LEHB1058-.LFB3660
	.uleb128 .LEHE1058-.LEHB1058
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1059-.LFB3660
	.uleb128 .LEHE1059-.LEHB1059
	.uleb128 0
	.uleb128 0
.LLSDACSE3660:
	.section	.text._ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, .-_ZN13MethodBind0RCI10PoolVectorI6StringEE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK11MethodBind1IRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind1IRK6StringE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind1IRK6StringE18get_instance_classEv
	.type	_ZNK11MethodBind1IRK6StringE18get_instance_classEv, @function
_ZNK11MethodBind1IRK6StringE18get_instance_classEv:
.LFB3661:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3661
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:748: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6256	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6257	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1060:
	call	_ZN6StringC1EPKc	#
.LEHE1060:
	jmp	.L6258	#
.L6257:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1061:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1061:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6263	#
.L6262:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62357
	movq	%rax, %rdi	# D.62357,
.LEHB1062:
	call	_Unwind_Resume	#
.LEHE1062:
.L6263:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6258	#
.L6256:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6258:
# ./core/method_bind.gen.inc:748: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:749: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3661:
	.section	.gcc_except_table
.LLSDA3661:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3661-.LLSDACSB3661
.LLSDACSB3661:
	.uleb128 .LEHB1060-.LFB3661
	.uleb128 .LEHE1060-.LEHB1060
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1061-.LFB3661
	.uleb128 .LEHE1061-.LEHB1061
	.uleb128 .L6262-.LFB3661
	.uleb128 0
	.uleb128 .LEHB1062-.LFB3661
	.uleb128 .LEHE1062-.LEHB1062
	.uleb128 0
	.uleb128 0
.LLSDACSE3661:
	.section	.text._ZNK11MethodBind1IRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind1IRK6StringE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind1IRK6StringE18get_instance_classEv, .-_ZNK11MethodBind1IRK6StringE18get_instance_classEv
	.section	.text._ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.type	_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, @function
_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE:
.LFB3662:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3662
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$256, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -232(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -240(%rbp)	# this, this
	movq	%rdx, -248(%rbp)	# p_object, p_object
	movq	%rcx, -256(%rbp)	# p_args, p_args
	movl	%r8d, -260(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -272(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:753: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-248(%rbp), %rax	# p_object, tmp141
	movq	%rax, -24(%rbp)	# tmp141, instance
# ./core/method_bind.gen.inc:755: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-272(%rbp), %rax	# r_error, tmp142
	movl	$0, (%rax)	#, r_error_24(D)->error
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp143
	movq	72(%rax), %rax	# this_26(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp144
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-240(%rbp), %rax	# this, tmp145
	movq	64(%rax), %rax	# this_26(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6265	#,
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp146
	movq	72(%rax), %rax	# this_26(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp147
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-240(%rbp), %rax	# this, tmp148
	movq	64(%rax), %rax	# this_26(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.335_18
	jmp	.L6266	#
.L6265:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp149
	movq	64(%rax), %rbx	# this_26(D)->method.__pfn, iftmp.335_18
.L6266:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	cmpl	$0, -260(%rbp)	#, p_arg_count
	jg	.L6267	#,
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp150
	movl	44(%rax), %eax	# this_40->argument_count, _42
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _43
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp151
	movl	%eax, -40(%rbp)	# tmp151, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6268	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp152
	addq	$24, %rax	#, _45
	movq	%rax, -48(%rbp)	# _45, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp153
	addq	$8, %rax	#, _47
	movq	%rax, -56(%rbp)	# _47, this
	movq	-56(%rbp), %rax	# this, tmp154
	movq	%rax, -64(%rbp)	# tmp154, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp155
	movq	(%rax), %rax	# this_49->_ptr, _50
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _50
	jne	.L6269	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _51
	jmp	.L6270	#
.L6269:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp156
	movq	(%rax), %rax	# this_49->_ptr, _52
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _51
.L6270:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _51, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6271	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp157
	movl	(%rax), %eax	# *size_56, _57
	jmp	.L6272	#
.L6271:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _58
.L6272:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _58, idx
	jl	.L6274	#,
.L6268:
	movl	$1, %eax	#, iftmp.327_67
	jmp	.L6275	#
.L6274:
	movl	$0, %eax	#, iftmp.327_67
.L6275:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_67
	je	.L6276	#,
	leaq	-208(%rbp), %rax	#, tmp158
	movq	%rax, -80(%rbp)	# tmp158, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp159
	movl	$0, (%rax)	#, this_71->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6294	#
.L6276:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp160
	addq	$24, %rax	#, _72
	movq	%rax, -88(%rbp)	# _72, this
	movl	-40(%rbp), %eax	# idx, tmp161
	movl	%eax, -92(%rbp)	# tmp161, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp162
	addq	$8, %rax	#, _75
	movq	%rax, -104(%rbp)	# _75, this
	movl	-92(%rbp), %eax	# p_index, tmp163
	movl	%eax, -108(%rbp)	# tmp163, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp165
	shrl	$31, %eax	#, tmp164
	movzbl	%al, %eax	# _78, _79
	testq	%rax, %rax	# _80
	jne	.L6278	#,
	movq	-104(%rbp), %rax	# this, tmp166
	movq	%rax, -120(%rbp)	# tmp166, this
	movq	-120(%rbp), %rax	# this, tmp167
	movq	%rax, -128(%rbp)	# tmp167, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp168
	movq	(%rax), %rax	# this_82->_ptr, _83
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _83
	jne	.L6279	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _84
	jmp	.L6280	#
.L6279:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_82->_ptr, _85
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _84
.L6280:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _84, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6281	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp170
	movl	(%rax), %eax	# *size_89, _90
	jmp	.L6282	#
.L6281:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _91
.L6282:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _91, p_index
	setge	%al	#, _97
	movzbl	%al, %eax	# _97, _98
	testq	%rax, %rax	# _99
	je	.L6283	#,
.L6278:
	movl	$1, %eax	#, iftmp.12_100
	jmp	.L6284	#
.L6283:
	movl	$0, %eax	#, iftmp.12_100
.L6284:
	movzbl	%al, %eax	# iftmp.12_100, _103
	testq	%rax, %rax	# _103
	setne	%al	#, retval.11_104
	testb	%al, %al	# retval.11_104
	je	.L6285	#,
	movq	-104(%rbp), %rax	# this, tmp171
	movq	%rax, -144(%rbp)	# tmp171, this
	movq	-144(%rbp), %rax	# this, tmp172
	movq	%rax, -152(%rbp)	# tmp172, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp173
	movq	(%rax), %rax	# this_106->_ptr, _107
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _107
	jne	.L6286	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _108
	jmp	.L6287	#
.L6286:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_106->_ptr, _109
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _108
.L6287:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _108, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6288	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp175
	movl	(%rax), %eax	# *size_113, _114
	jmp	.L6289	#
.L6288:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _115
.L6289:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _115, _121
	movl	-108(%rbp), %eax	# p_index, tmp176
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _121,
	movq	%rax, %rcx	# _122,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1063:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6285:
	movq	-104(%rbp), %rax	# this, tmp177
	movq	%rax, -168(%rbp)	# tmp177, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp178
	movq	(%rax), %rax	# this_123->_ptr, _124
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _124
	jne	.L6290	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _125
	jmp	.L6291	#
.L6290:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp179
	movq	(%rax), %rcx	# this_123->_ptr, _125
.L6291:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp180
	movslq	%eax, %rdx	# tmp180, _130
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _130, tmp181
	addq	%rax, %rax	# tmp181
	addq	%rdx, %rax	# _130, tmp181
	salq	$3, %rax	#, tmp182
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _132
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-208(%rbp), %rax	#, tmp183
	movq	%rdx, %rsi	# _132,
	movq	%rax, %rdi	# tmp183,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6294	#
.L6267:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# p_args, tmp184
	movq	(%rax), %rdx	# *p_args_30(D), _17
	leaq	-208(%rbp), %rax	#, tmp185
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp185,
	call	_ZN7VariantC1ERKS_	#
.LEHE1063:
.L6294:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-216(%rbp), %rax	#, tmp186
	leaq	-208(%rbp), %rdx	#, tmp187
	movq	%rdx, %rsi	# tmp187,
	movq	%rax, %rdi	# tmp186,
.LEHB1064:
	call	_ZNK7Variantcv6StringEv	#
.LEHE1064:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	leaq	-216(%rbp), %rax	#, tmp188
	movq	%rax, %rsi	# tmp188,
	movq	%r12, %rdi	# _3,
.LEHB1065:
	call	*%rbx	# iftmp.335_18
.LEHE1065:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	leaq	-216(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.48276.type, _140
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _140
	je	.L6306	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN7Variant5clearEv	#
.L6306:
# ./core/variant.h:423: 	}
	nop	
	movq	-232(%rbp), %rax	# <retval>, tmp191
	movq	%rax, -176(%rbp)	# tmp191, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-176(%rbp), %rax	# this, tmp192
	movl	$0, (%rax)	#, this_139->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:777: 		return Variant();
	jmp	.L6305	#
.L6302:
	movq	%rax, %rbx	#, tmp195
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	leaq	-216(%rbp), %rax	#, tmp193
	movq	%rax, %rdi	# tmp193,
	call	_ZN6StringD1Ev	#
	jmp	.L6299	#
.L6301:
	movq	%rax, %rbx	#, tmp194
.L6299:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.48276.type, _141
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _141
	je	.L6307	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp198
	movq	%rax, %rdi	# tmp198,
	call	_ZN7Variant5clearEv	#
.L6307:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp194, D.62359
	movq	%rax, %rdi	# D.62359,
.LEHB1066:
	call	_Unwind_Resume	#
.LEHE1066:
.L6305:
# ./core/method_bind.gen.inc:778: 	}
	movq	-232(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3662:
	.section	.gcc_except_table
.LLSDA3662:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3662-.LLSDACSB3662
.LLSDACSB3662:
	.uleb128 .LEHB1063-.LFB3662
	.uleb128 .LEHE1063-.LEHB1063
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1064-.LFB3662
	.uleb128 .LEHE1064-.LEHB1064
	.uleb128 .L6301-.LFB3662
	.uleb128 0
	.uleb128 .LEHB1065-.LFB3662
	.uleb128 .LEHE1065-.LEHB1065
	.uleb128 .L6302-.LFB3662
	.uleb128 0
	.uleb128 .LEHB1066-.LFB3662
	.uleb128 .LEHE1066-.LEHB1066
	.uleb128 0
	.uleb128 0
.LLSDACSE3662:
	.section	.text._ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, .-_ZN11MethodBind1IRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv
	.type	_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv, @function
_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv:
.LFB3663:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3663
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:567: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6309	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6310	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1067:
	call	_ZN6StringC1EPKc	#
.LEHE1067:
	jmp	.L6311	#
.L6310:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1068:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1068:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6316	#
.L6315:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62362
	movq	%rax, %rdi	# D.62362,
.LEHB1069:
	call	_Unwind_Resume	#
.LEHE1069:
.L6316:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6311	#
.L6309:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6311:
# ./core/method_bind.gen.inc:567: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:568: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3663:
	.section	.gcc_except_table
.LLSDA3663:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3663-.LLSDACSB3663
.LLSDACSB3663:
	.uleb128 .LEHB1067-.LFB3663
	.uleb128 .LEHE1067-.LEHB1067
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1068-.LFB3663
	.uleb128 .LEHE1068-.LEHB1068
	.uleb128 .L6315-.LFB3663
	.uleb128 0
	.uleb128 .LEHB1069-.LFB3663
	.uleb128 .LEHE1069-.LEHB1069
	.uleb128 0
	.uleb128 0
.LLSDACSE3663:
	.section	.text._ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv, .-_ZNK13MethodBind0RCI6RefPtrE18get_instance_classEv
	.section	.text._ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.type	_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, @function
_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE:
.LFB3664:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3664
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
	movq	%rdx, -88(%rbp)	# p_object, p_object
	movq	%rcx, -96(%rbp)	# p_args, p_args
	movl	%r8d, -100(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -112(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:572: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-88(%rbp), %rax	# p_object, tmp102
	movq	%rax, -24(%rbp)	# tmp102, instance
# ./core/method_bind.gen.inc:574: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-112(%rbp), %rax	# r_error, tmp103
	movl	$0, (%rax)	#, r_error_21(D)->error
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp104
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _1
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp105
	leaq	(%rdx,%rax), %rcx	#, _3
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp106
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6318	#,
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp107
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp108
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-80(%rbp), %rax	# this, tmp109
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.333_16
	jmp	.L6319	#
.L6318:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp110
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, iftmp.333_16
.L6319:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	leaq	-32(%rbp), %rdx	#, tmp111
	movq	%rcx, %rsi	# _3,
	movq	%rdx, %rdi	# tmp111,
.LEHB1070:
	call	*%rax	# iftmp.333_16
.LEHE1070:
	leaq	-32(%rbp), %rdx	#, tmp112
	leaq	-64(%rbp), %rax	#, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
.LEHB1071:
	call	_ZN7VariantC1ERK6RefPtr	#
.LEHE1071:
	leaq	-32(%rbp), %rax	#, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN6RefPtrD1Ev	#
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	leaq	-64(%rbp), %rdx	#, tmp115
	movq	-72(%rbp), %rax	# <retval>, tmp116
	movq	%rdx, %rsi	# tmp115,
	movq	%rax, %rdi	# tmp116,
.LEHB1072:
	call	_ZN7VariantC1ERKS_	#
.LEHE1072:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _36
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _36
	je	.L6329	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp117
	movq	%rax, %rdi	# tmp117,
	call	_ZN7Variant5clearEv	#
.L6329:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	jmp	.L6328	#
.L6325:
	movq	%rax, %rbx	#, tmp119
	leaq	-32(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZN6RefPtrD1Ev	#
	movq	%rbx, %rax	# tmp119, D.62364
	movq	%rax, %rdi	# D.62364,
.LEHB1073:
	call	_Unwind_Resume	#
.LEHE1073:
.L6326:
	movq	%rax, %rbx	#, tmp121
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _37
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _37
	je	.L6330	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp120
	movq	%rax, %rdi	# tmp120,
	call	_ZN7Variant5clearEv	#
.L6330:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp121, D.62365
	movq	%rax, %rdi	# D.62365,
.LEHB1074:
	call	_Unwind_Resume	#
.LEHE1074:
.L6328:
# ./core/method_bind.gen.inc:596: 	}
	movq	-72(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3664:
	.section	.gcc_except_table
.LLSDA3664:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3664-.LLSDACSB3664
.LLSDACSB3664:
	.uleb128 .LEHB1070-.LFB3664
	.uleb128 .LEHE1070-.LEHB1070
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1071-.LFB3664
	.uleb128 .LEHE1071-.LEHB1071
	.uleb128 .L6325-.LFB3664
	.uleb128 0
	.uleb128 .LEHB1072-.LFB3664
	.uleb128 .LEHE1072-.LEHB1072
	.uleb128 .L6326-.LFB3664
	.uleb128 0
	.uleb128 .LEHB1073-.LFB3664
	.uleb128 .LEHE1073-.LEHB1073
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1074-.LFB3664
	.uleb128 .LEHE1074-.LEHB1074
	.uleb128 0
	.uleb128 0
.LLSDACSE3664:
	.section	.text._ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.size	_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, .-_ZN13MethodBind0RCI6RefPtrE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.section	.text._ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv
	.type	_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv, @function
_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv:
.LFB3665:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3665
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:748: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6332	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6333	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1075:
	call	_ZN6StringC1EPKc	#
.LEHE1075:
	jmp	.L6334	#
.L6333:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1076:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1076:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6339	#
.L6338:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62368
	movq	%rax, %rdi	# D.62368,
.LEHB1077:
	call	_Unwind_Resume	#
.LEHE1077:
.L6339:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6334	#
.L6332:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6334:
# ./core/method_bind.gen.inc:748: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:749: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3665:
	.section	.gcc_except_table
.LLSDA3665:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3665-.LLSDACSB3665
.LLSDACSB3665:
	.uleb128 .LEHB1075-.LFB3665
	.uleb128 .LEHE1075-.LEHB1075
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1076-.LFB3665
	.uleb128 .LEHE1076-.LEHB1076
	.uleb128 .L6338-.LFB3665
	.uleb128 0
	.uleb128 .LEHB1077-.LFB3665
	.uleb128 .LEHE1077-.LEHB1077
	.uleb128 0
	.uleb128 0
.LLSDACSE3665:
	.section	.text._ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv, .-_ZNK11MethodBind1IRK6RefPtrE18get_instance_classEv
	.section	.text._ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.type	_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, @function
_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE:
.LFB3666:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3666
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$256, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -232(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -240(%rbp)	# this, this
	movq	%rdx, -248(%rbp)	# p_object, p_object
	movq	%rcx, -256(%rbp)	# p_args, p_args
	movl	%r8d, -260(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -272(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:753: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-248(%rbp), %rax	# p_object, tmp141
	movq	%rax, -24(%rbp)	# tmp141, instance
# ./core/method_bind.gen.inc:755: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-272(%rbp), %rax	# r_error, tmp142
	movl	$0, (%rax)	#, r_error_24(D)->error
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp143
	movq	72(%rax), %rax	# this_26(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp144
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-240(%rbp), %rax	# this, tmp145
	movq	64(%rax), %rax	# this_26(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6341	#,
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp146
	movq	72(%rax), %rax	# this_26(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp147
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-240(%rbp), %rax	# this, tmp148
	movq	64(%rax), %rax	# this_26(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.332_18
	jmp	.L6342	#
.L6341:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp149
	movq	64(%rax), %rbx	# this_26(D)->method.__pfn, iftmp.332_18
.L6342:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	cmpl	$0, -260(%rbp)	#, p_arg_count
	jg	.L6343	#,
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp150
	movl	44(%rax), %eax	# this_40->argument_count, _42
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _43
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp151
	movl	%eax, -40(%rbp)	# tmp151, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6344	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp152
	addq	$24, %rax	#, _45
	movq	%rax, -48(%rbp)	# _45, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp153
	addq	$8, %rax	#, _47
	movq	%rax, -56(%rbp)	# _47, this
	movq	-56(%rbp), %rax	# this, tmp154
	movq	%rax, -64(%rbp)	# tmp154, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp155
	movq	(%rax), %rax	# this_49->_ptr, _50
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _50
	jne	.L6345	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _51
	jmp	.L6346	#
.L6345:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp156
	movq	(%rax), %rax	# this_49->_ptr, _52
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _51
.L6346:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _51, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6347	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp157
	movl	(%rax), %eax	# *size_56, _57
	jmp	.L6348	#
.L6347:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _58
.L6348:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _58, idx
	jl	.L6350	#,
.L6344:
	movl	$1, %eax	#, iftmp.327_67
	jmp	.L6351	#
.L6350:
	movl	$0, %eax	#, iftmp.327_67
.L6351:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_67
	je	.L6352	#,
	leaq	-208(%rbp), %rax	#, tmp158
	movq	%rax, -80(%rbp)	# tmp158, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp159
	movl	$0, (%rax)	#, this_71->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6370	#
.L6352:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp160
	addq	$24, %rax	#, _72
	movq	%rax, -88(%rbp)	# _72, this
	movl	-40(%rbp), %eax	# idx, tmp161
	movl	%eax, -92(%rbp)	# tmp161, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp162
	addq	$8, %rax	#, _75
	movq	%rax, -104(%rbp)	# _75, this
	movl	-92(%rbp), %eax	# p_index, tmp163
	movl	%eax, -108(%rbp)	# tmp163, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp165
	shrl	$31, %eax	#, tmp164
	movzbl	%al, %eax	# _78, _79
	testq	%rax, %rax	# _80
	jne	.L6354	#,
	movq	-104(%rbp), %rax	# this, tmp166
	movq	%rax, -120(%rbp)	# tmp166, this
	movq	-120(%rbp), %rax	# this, tmp167
	movq	%rax, -128(%rbp)	# tmp167, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp168
	movq	(%rax), %rax	# this_82->_ptr, _83
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _83
	jne	.L6355	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _84
	jmp	.L6356	#
.L6355:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp169
	movq	(%rax), %rax	# this_82->_ptr, _85
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _84
.L6356:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _84, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6357	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp170
	movl	(%rax), %eax	# *size_89, _90
	jmp	.L6358	#
.L6357:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _91
.L6358:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _91, p_index
	setge	%al	#, _97
	movzbl	%al, %eax	# _97, _98
	testq	%rax, %rax	# _99
	je	.L6359	#,
.L6354:
	movl	$1, %eax	#, iftmp.12_100
	jmp	.L6360	#
.L6359:
	movl	$0, %eax	#, iftmp.12_100
.L6360:
	movzbl	%al, %eax	# iftmp.12_100, _103
	testq	%rax, %rax	# _103
	setne	%al	#, retval.11_104
	testb	%al, %al	# retval.11_104
	je	.L6361	#,
	movq	-104(%rbp), %rax	# this, tmp171
	movq	%rax, -144(%rbp)	# tmp171, this
	movq	-144(%rbp), %rax	# this, tmp172
	movq	%rax, -152(%rbp)	# tmp172, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp173
	movq	(%rax), %rax	# this_106->_ptr, _107
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _107
	jne	.L6362	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _108
	jmp	.L6363	#
.L6362:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_106->_ptr, _109
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _108
.L6363:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _108, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6364	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp175
	movl	(%rax), %eax	# *size_113, _114
	jmp	.L6365	#
.L6364:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _115
.L6365:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _115, _121
	movl	-108(%rbp), %eax	# p_index, tmp176
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _121,
	movq	%rax, %rcx	# _122,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1078:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6361:
	movq	-104(%rbp), %rax	# this, tmp177
	movq	%rax, -168(%rbp)	# tmp177, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp178
	movq	(%rax), %rax	# this_123->_ptr, _124
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _124
	jne	.L6366	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _125
	jmp	.L6367	#
.L6366:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp179
	movq	(%rax), %rcx	# this_123->_ptr, _125
.L6367:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp180
	movslq	%eax, %rdx	# tmp180, _130
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _130, tmp181
	addq	%rax, %rax	# tmp181
	addq	%rdx, %rax	# _130, tmp181
	salq	$3, %rax	#, tmp182
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _132
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-208(%rbp), %rax	#, tmp183
	movq	%rdx, %rsi	# _132,
	movq	%rax, %rdi	# tmp183,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6370	#
.L6343:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# p_args, tmp184
	movq	(%rax), %rdx	# *p_args_30(D), _17
	leaq	-208(%rbp), %rax	#, tmp185
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp185,
	call	_ZN7VariantC1ERKS_	#
.LEHE1078:
.L6370:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-216(%rbp), %rax	#, tmp186
	leaq	-208(%rbp), %rdx	#, tmp187
	movq	%rdx, %rsi	# tmp187,
	movq	%rax, %rdi	# tmp186,
.LEHB1079:
	call	_ZNK7Variantcv6RefPtrEv	#
.LEHE1079:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	leaq	-216(%rbp), %rax	#, tmp188
	movq	%rax, %rsi	# tmp188,
	movq	%r12, %rdi	# _3,
.LEHB1080:
	call	*%rbx	# iftmp.332_18
.LEHE1080:
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	leaq	-216(%rbp), %rax	#, tmp189
	movq	%rax, %rdi	# tmp189,
	call	_ZN6RefPtrD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.48298.type, _140
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _140
	je	.L6382	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp190
	movq	%rax, %rdi	# tmp190,
	call	_ZN7Variant5clearEv	#
.L6382:
# ./core/variant.h:423: 	}
	nop	
	movq	-232(%rbp), %rax	# <retval>, tmp191
	movq	%rax, -176(%rbp)	# tmp191, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-176(%rbp), %rax	# this, tmp192
	movl	$0, (%rax)	#, this_139->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:777: 		return Variant();
	jmp	.L6381	#
.L6378:
	movq	%rax, %rbx	#, tmp195
# ./core/method_bind.gen.inc:775: 		(instance->*method)(_VC(1));
	leaq	-216(%rbp), %rax	#, tmp193
	movq	%rax, %rdi	# tmp193,
	call	_ZN6RefPtrD1Ev	#
	jmp	.L6375	#
.L6377:
	movq	%rax, %rbx	#, tmp194
.L6375:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-208(%rbp), %eax	# D.48298.type, _141
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _141
	je	.L6383	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-208(%rbp), %rax	#, tmp198
	movq	%rax, %rdi	# tmp198,
	call	_ZN7Variant5clearEv	#
.L6383:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp194, D.62370
	movq	%rax, %rdi	# D.62370,
.LEHB1081:
	call	_Unwind_Resume	#
.LEHE1081:
.L6381:
# ./core/method_bind.gen.inc:778: 	}
	movq	-232(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3666:
	.section	.gcc_except_table
.LLSDA3666:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3666-.LLSDACSB3666
.LLSDACSB3666:
	.uleb128 .LEHB1078-.LFB3666
	.uleb128 .LEHE1078-.LEHB1078
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1079-.LFB3666
	.uleb128 .LEHE1079-.LEHB1079
	.uleb128 .L6377-.LFB3666
	.uleb128 0
	.uleb128 .LEHB1080-.LFB3666
	.uleb128 .LEHE1080-.LEHB1080
	.uleb128 .L6378-.LFB3666
	.uleb128 0
	.uleb128 .LEHB1081-.LFB3666
	.uleb128 .LEHE1081-.LEHB1081
	.uleb128 0
	.uleb128 0
.LLSDACSE3666:
	.section	.text._ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, .-_ZN11MethodBind1IRK6RefPtrE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK13MethodBind0RCImE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCImE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind0RCImE18get_instance_classEv
	.type	_ZNK13MethodBind0RCImE18get_instance_classEv, @function
_ZNK13MethodBind0RCImE18get_instance_classEv:
.LFB3667:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3667
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:567: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6385	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6386	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1082:
	call	_ZN6StringC1EPKc	#
.LEHE1082:
	jmp	.L6387	#
.L6386:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1083:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1083:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6392	#
.L6391:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62373
	movq	%rax, %rdi	# D.62373,
.LEHB1084:
	call	_Unwind_Resume	#
.LEHE1084:
.L6392:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6387	#
.L6385:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6387:
# ./core/method_bind.gen.inc:567: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:568: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3667:
	.section	.gcc_except_table
.LLSDA3667:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3667-.LLSDACSB3667
.LLSDACSB3667:
	.uleb128 .LEHB1082-.LFB3667
	.uleb128 .LEHE1082-.LEHB1082
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1083-.LFB3667
	.uleb128 .LEHE1083-.LEHB1083
	.uleb128 .L6391-.LFB3667
	.uleb128 0
	.uleb128 .LEHB1084-.LFB3667
	.uleb128 .LEHE1084-.LEHB1084
	.uleb128 0
	.uleb128 0
.LLSDACSE3667:
	.section	.text._ZNK13MethodBind0RCImE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCImE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind0RCImE18get_instance_classEv, .-_ZNK13MethodBind0RCImE18get_instance_classEv
	.section	.text._ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.type	_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, @function
_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE:
.LFB3668:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3668
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -64(%rbp)	# this, this
	movq	%rdx, -72(%rbp)	# p_object, p_object
	movq	%rcx, -80(%rbp)	# p_args, p_args
	movl	%r8d, -84(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -96(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:572: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-72(%rbp), %rax	# p_object, tmp102
	movq	%rax, -24(%rbp)	# tmp102, instance
# ./core/method_bind.gen.inc:574: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-96(%rbp), %rax	# r_error, tmp103
	movl	$0, (%rax)	#, r_error_22(D)->error
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-64(%rbp), %rax	# this, tmp104
	movq	72(%rax), %rax	# this_24(D)->method.__delta, _1
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp105
	addq	%rax, %rdx	# tmp105, _3
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-64(%rbp), %rax	# this, tmp106
	movq	64(%rax), %rax	# this_24(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6394	#,
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-64(%rbp), %rax	# this, tmp107
	movq	72(%rax), %rax	# this_24(D)->method.__delta, _7
	movq	%rax, %rcx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp108
	addq	%rcx, %rax	# _8, _9
	movq	(%rax), %rcx	# MEM[(int (*) () * *)_9], _10
	movq	-64(%rbp), %rax	# this, tmp109
	movq	64(%rax), %rax	# this_24(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rcx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.331_17
	jmp	.L6395	#
.L6394:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-64(%rbp), %rax	# this, tmp110
	movq	64(%rax), %rax	# this_24(D)->method.__pfn, iftmp.331_17
.L6395:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	%rdx, %rdi	# _3,
.LEHB1085:
	call	*%rax	# iftmp.331_17
	movq	%rax, %rdx	#, _16
	leaq	-48(%rbp), %rax	#, tmp111
	movq	%rdx, %rsi	# _16,
	movq	%rax, %rdi	# tmp111,
	call	_ZN7VariantC1Em	#
.LEHE1085:
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	leaq	-48(%rbp), %rdx	#, tmp112
	movq	-56(%rbp), %rax	# <retval>, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
.LEHB1086:
	call	_ZN7VariantC1ERKS_	#
.LEHE1086:
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# ret.type, _34
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _34
	je	.L6403	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN7Variant5clearEv	#
.L6403:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	jmp	.L6402	#
.L6400:
	movq	%rax, %rbx	#, tmp116
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-48(%rbp), %eax	# ret.type, _35
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _35
	je	.L6404	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-48(%rbp), %rax	#, tmp115
	movq	%rax, %rdi	# tmp115,
	call	_ZN7Variant5clearEv	#
.L6404:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp116, D.62375
	movq	%rax, %rdi	# D.62375,
.LEHB1087:
	call	_Unwind_Resume	#
.LEHE1087:
.L6402:
# ./core/method_bind.gen.inc:596: 	}
	movq	-56(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3668:
	.section	.gcc_except_table
.LLSDA3668:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3668-.LLSDACSB3668
.LLSDACSB3668:
	.uleb128 .LEHB1085-.LFB3668
	.uleb128 .LEHE1085-.LEHB1085
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1086-.LFB3668
	.uleb128 .LEHE1086-.LEHB1086
	.uleb128 .L6400-.LFB3668
	.uleb128 0
	.uleb128 .LEHB1087-.LFB3668
	.uleb128 .LEHE1087-.LEHB1087
	.uleb128 0
	.uleb128 0
.LLSDACSE3668:
	.section	.text._ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.size	_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, .-_ZN13MethodBind0RCImE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.section	.text._ZNK12MethodBind0RI6StringE18get_instance_classEv,"axG",@progbits,_ZNK12MethodBind0RI6StringE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK12MethodBind0RI6StringE18get_instance_classEv
	.type	_ZNK12MethodBind0RI6StringE18get_instance_classEv, @function
_ZNK12MethodBind0RI6StringE18get_instance_classEv:
.LFB3669:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3669
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:211: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6406	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6407	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1088:
	call	_ZN6StringC1EPKc	#
.LEHE1088:
	jmp	.L6408	#
.L6407:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1089:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1089:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6413	#
.L6412:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62377
	movq	%rax, %rdi	# D.62377,
.LEHB1090:
	call	_Unwind_Resume	#
.LEHE1090:
.L6413:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6408	#
.L6406:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6408:
# ./core/method_bind.gen.inc:211: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:212: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3669:
	.section	.gcc_except_table
.LLSDA3669:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3669-.LLSDACSB3669
.LLSDACSB3669:
	.uleb128 .LEHB1088-.LFB3669
	.uleb128 .LEHE1088-.LEHB1088
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1089-.LFB3669
	.uleb128 .LEHE1089-.LEHB1089
	.uleb128 .L6412-.LFB3669
	.uleb128 0
	.uleb128 .LEHB1090-.LFB3669
	.uleb128 .LEHE1090-.LEHB1090
	.uleb128 0
	.uleb128 0
.LLSDACSE3669:
	.section	.text._ZNK12MethodBind0RI6StringE18get_instance_classEv,"axG",@progbits,_ZNK12MethodBind0RI6StringE18get_instance_classEv,comdat
	.size	_ZNK12MethodBind0RI6StringE18get_instance_classEv, .-_ZNK12MethodBind0RI6StringE18get_instance_classEv
	.section	.text._ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.align 2
	.weak	_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.type	_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, @function
_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE:
.LFB3670:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3670
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
	movq	%rdx, -88(%rbp)	# p_object, p_object
	movq	%rcx, -96(%rbp)	# p_args, p_args
	movl	%r8d, -100(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -112(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:216: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-88(%rbp), %rax	# p_object, tmp102
	movq	%rax, -24(%rbp)	# tmp102, instance
# ./core/method_bind.gen.inc:218: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-112(%rbp), %rax	# r_error, tmp103
	movl	$0, (%rax)	#, r_error_21(D)->error
# ./core/method_bind.gen.inc:237: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp104
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _1
# ./core/method_bind.gen.inc:237: 		Variant ret = (instance->*method)();
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp105
	leaq	(%rdx,%rax), %rcx	#, _3
# ./core/method_bind.gen.inc:237: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp106
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6415	#,
# ./core/method_bind.gen.inc:237: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp107
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp108
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-80(%rbp), %rax	# this, tmp109
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.330_16
	jmp	.L6416	#
.L6415:
# ./core/method_bind.gen.inc:237: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp110
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, iftmp.330_16
.L6416:
# ./core/method_bind.gen.inc:237: 		Variant ret = (instance->*method)();
	leaq	-32(%rbp), %rdx	#, tmp111
	movq	%rcx, %rsi	# _3,
	movq	%rdx, %rdi	# tmp111,
.LEHB1091:
	call	*%rax	# iftmp.330_16
.LEHE1091:
	leaq	-32(%rbp), %rdx	#, tmp112
	leaq	-64(%rbp), %rax	#, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
.LEHB1092:
	call	_ZN7VariantC1ERK6String	#
.LEHE1092:
	leaq	-32(%rbp), %rax	#, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:238: 		return Variant(ret);
	leaq	-64(%rbp), %rdx	#, tmp115
	movq	-72(%rbp), %rax	# <retval>, tmp116
	movq	%rdx, %rsi	# tmp115,
	movq	%rax, %rdi	# tmp116,
.LEHB1093:
	call	_ZN7VariantC1ERKS_	#
.LEHE1093:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _36
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _36
	je	.L6426	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp117
	movq	%rax, %rdi	# tmp117,
	call	_ZN7Variant5clearEv	#
.L6426:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:238: 		return Variant(ret);
	jmp	.L6425	#
.L6422:
	movq	%rax, %rbx	#, tmp119
	leaq	-32(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp119, D.62379
	movq	%rax, %rdi	# D.62379,
.LEHB1094:
	call	_Unwind_Resume	#
.LEHE1094:
.L6423:
	movq	%rax, %rbx	#, tmp121
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _37
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _37
	je	.L6427	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp120
	movq	%rax, %rdi	# tmp120,
	call	_ZN7Variant5clearEv	#
.L6427:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp121, D.62380
	movq	%rax, %rdi	# D.62380,
.LEHB1095:
	call	_Unwind_Resume	#
.LEHE1095:
.L6425:
# ./core/method_bind.gen.inc:240: 	}
	movq	-72(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3670:
	.section	.gcc_except_table
.LLSDA3670:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3670-.LLSDACSB3670
.LLSDACSB3670:
	.uleb128 .LEHB1091-.LFB3670
	.uleb128 .LEHE1091-.LEHB1091
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1092-.LFB3670
	.uleb128 .LEHE1092-.LEHB1092
	.uleb128 .L6422-.LFB3670
	.uleb128 0
	.uleb128 .LEHB1093-.LFB3670
	.uleb128 .LEHE1093-.LEHB1093
	.uleb128 .L6423-.LFB3670
	.uleb128 0
	.uleb128 .LEHB1094-.LFB3670
	.uleb128 .LEHE1094-.LEHB1094
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1095-.LFB3670
	.uleb128 .LEHE1095-.LEHB1095
	.uleb128 0
	.uleb128 0
.LLSDACSE3670:
	.section	.text._ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.size	_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, .-_ZN12MethodBind0RI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.section	.text._ZNK11MethodBind2IibE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IibE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind2IibE18get_instance_classEv
	.type	_ZNK11MethodBind2IibE18get_instance_classEv, @function
_ZNK11MethodBind2IibE18get_instance_classEv:
.LFB3671:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3671
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1495: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6429	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6430	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1096:
	call	_ZN6StringC1EPKc	#
.LEHE1096:
	jmp	.L6431	#
.L6430:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1097:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1097:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6436	#
.L6435:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62383
	movq	%rax, %rdi	# D.62383,
.LEHB1098:
	call	_Unwind_Resume	#
.LEHE1098:
.L6436:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6431	#
.L6429:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6431:
# ./core/method_bind.gen.inc:1495: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1496: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3671:
	.section	.gcc_except_table
.LLSDA3671:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3671-.LLSDACSB3671
.LLSDACSB3671:
	.uleb128 .LEHB1096-.LFB3671
	.uleb128 .LEHE1096-.LEHB1096
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1097-.LFB3671
	.uleb128 .LEHE1097-.LEHB1097
	.uleb128 .L6435-.LFB3671
	.uleb128 0
	.uleb128 .LEHB1098-.LFB3671
	.uleb128 .LEHE1098-.LEHB1098
	.uleb128 0
	.uleb128 0
.LLSDACSE3671:
	.section	.text._ZNK11MethodBind2IibE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IibE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind2IibE18get_instance_classEv, .-_ZNK11MethodBind2IibE18get_instance_classEv
	.section	.text._ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.type	_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, @function
_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE:
.LFB3672:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3672
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r13	#
	pushq	%r12	#
	pushq	%rbx	#
	subq	$424, %rsp	#,
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -408(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -416(%rbp)	# this, this
	movq	%rdx, -424(%rbp)	# p_object, p_object
	movq	%rcx, -432(%rbp)	# p_args, p_args
	movl	%r8d, -436(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -448(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1500: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-424(%rbp), %rax	# p_object, tmp187
	movq	%rax, -40(%rbp)	# tmp187, instance
# ./core/method_bind.gen.inc:1502: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-448(%rbp), %rax	# r_error, tmp188
	movl	$0, (%rax)	#, r_error_32(D)->error
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp189
	movq	72(%rax), %rax	# this_34(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-40(%rbp), %rax	# instance, tmp190
	leaq	(%rdx,%rax), %r13	#, _3
	movq	-416(%rbp), %rax	# this, tmp191
	movq	64(%rax), %rax	# this_34(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6438	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp192
	movq	72(%rax), %rax	# this_34(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-40(%rbp), %rax	# instance, tmp193
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-416(%rbp), %rax	# this, tmp194
	movq	64(%rax), %rax	# this_34(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.329_24
	jmp	.L6439	#
.L6438:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, tmp195
	movq	64(%rax), %rbx	# this_34(D)->method.__pfn, iftmp.329_24
.L6439:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$1, -436(%rbp)	#, p_arg_count
	jg	.L6440	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, _16
	movq	%rax, -48(%rbp)	# _16, this
	movl	$1, -52(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-48(%rbp), %rax	# this, tmp196
	movl	44(%rax), %eax	# this_49->argument_count, _51
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-52(%rbp), %eax	# p_arg, _52
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp197
	movl	%eax, -56(%rbp)	# tmp197, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -56(%rbp)	#, idx
	js	.L6441	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-48(%rbp), %rax	# this, tmp198
	addq	$24, %rax	#, _54
	movq	%rax, -64(%rbp)	# _54, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-64(%rbp), %rax	# this, tmp199
	addq	$8, %rax	#, _56
	movq	%rax, -72(%rbp)	# _56, this
	movq	-72(%rbp), %rax	# this, tmp200
	movq	%rax, -80(%rbp)	# tmp200, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-80(%rbp), %rax	# this, tmp201
	movq	(%rax), %rax	# this_58->_ptr, _59
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _59
	jne	.L6442	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _60
	jmp	.L6443	#
.L6442:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-80(%rbp), %rax	# this, tmp202
	movq	(%rax), %rax	# this_58->_ptr, _61
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _60
.L6443:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -88(%rbp)	# _60, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -88(%rbp)	#, size
	je	.L6444	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-88(%rbp), %rax	# size, tmp203
	movl	(%rax), %eax	# *size_65, _66
	jmp	.L6445	#
.L6444:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _67
.L6445:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -56(%rbp)	# _67, idx
	jl	.L6447	#,
.L6441:
	movl	$1, %eax	#, iftmp.327_76
	jmp	.L6448	#
.L6447:
	movl	$0, %eax	#, iftmp.327_76
.L6448:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_76
	je	.L6449	#,
	leaq	-400(%rbp), %rax	#, tmp204
	movq	%rax, -96(%rbp)	# tmp204, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-96(%rbp), %rax	# this, tmp205
	movl	$0, (%rax)	#, this_80->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6467	#
.L6449:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-48(%rbp), %rax	# this, tmp206
	addq	$24, %rax	#, _81
	movq	%rax, -104(%rbp)	# _81, this
	movl	-56(%rbp), %eax	# idx, tmp207
	movl	%eax, -108(%rbp)	# tmp207, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-104(%rbp), %rax	# this, tmp208
	addq	$8, %rax	#, _84
	movq	%rax, -120(%rbp)	# _84, this
	movl	-108(%rbp), %eax	# p_index, tmp209
	movl	%eax, -124(%rbp)	# tmp209, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-124(%rbp), %eax	# p_index, tmp211
	shrl	$31, %eax	#, tmp210
	movzbl	%al, %eax	# _87, _88
	testq	%rax, %rax	# _89
	jne	.L6451	#,
	movq	-120(%rbp), %rax	# this, tmp212
	movq	%rax, -136(%rbp)	# tmp212, this
	movq	-136(%rbp), %rax	# this, tmp213
	movq	%rax, -144(%rbp)	# tmp213, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-144(%rbp), %rax	# this, tmp214
	movq	(%rax), %rax	# this_91->_ptr, _92
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _92
	jne	.L6452	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _93
	jmp	.L6453	#
.L6452:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-144(%rbp), %rax	# this, tmp215
	movq	(%rax), %rax	# this_91->_ptr, _94
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _93
.L6453:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -152(%rbp)	# _93, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -152(%rbp)	#, size
	je	.L6454	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-152(%rbp), %rax	# size, tmp216
	movl	(%rax), %eax	# *size_98, _99
	jmp	.L6455	#
.L6454:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _100
.L6455:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -124(%rbp)	# _100, p_index
	setge	%al	#, _106
	movzbl	%al, %eax	# _106, _107
	testq	%rax, %rax	# _108
	je	.L6456	#,
.L6451:
	movl	$1, %eax	#, iftmp.12_109
	jmp	.L6457	#
.L6456:
	movl	$0, %eax	#, iftmp.12_109
.L6457:
	movzbl	%al, %eax	# iftmp.12_109, _112
	testq	%rax, %rax	# _112
	setne	%al	#, retval.11_113
	testb	%al, %al	# retval.11_113
	je	.L6458	#,
	movq	-120(%rbp), %rax	# this, tmp217
	movq	%rax, -160(%rbp)	# tmp217, this
	movq	-160(%rbp), %rax	# this, tmp218
	movq	%rax, -168(%rbp)	# tmp218, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_115->_ptr, _116
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _116
	jne	.L6459	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _117
	jmp	.L6460	#
.L6459:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-168(%rbp), %rax	# this, tmp220
	movq	(%rax), %rax	# this_115->_ptr, _118
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _117
.L6460:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -176(%rbp)	# _117, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -176(%rbp)	#, size
	je	.L6461	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-176(%rbp), %rax	# size, tmp221
	movl	(%rax), %eax	# *size_122, _123
	jmp	.L6462	#
.L6461:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _124
.L6462:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _124, _130
	movl	-124(%rbp), %eax	# p_index, tmp222
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _130,
	movq	%rax, %rcx	# _131,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1099:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6458:
	movq	-120(%rbp), %rax	# this, tmp223
	movq	%rax, -184(%rbp)	# tmp223, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-184(%rbp), %rax	# this, tmp224
	movq	(%rax), %rax	# this_132->_ptr, _133
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _133
	jne	.L6463	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _134
	jmp	.L6464	#
.L6463:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-184(%rbp), %rax	# this, tmp225
	movq	(%rax), %rcx	# this_132->_ptr, _134
.L6464:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-124(%rbp), %eax	# p_index, tmp226
	movslq	%eax, %rdx	# tmp226, _139
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _139, tmp227
	addq	%rax, %rax	# tmp227
	addq	%rdx, %rax	# _139, tmp227
	salq	$3, %rax	#, tmp228
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _141
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-400(%rbp), %rax	#, tmp229
	movq	%rdx, %rsi	# _141,
	movq	%rax, %rdi	# tmp229,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6467	#
.L6440:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# p_args, tmp230
	addq	$8, %rax	#, _17
	movq	(%rax), %rdx	# *_17, _18
	leaq	-400(%rbp), %rax	#, tmp231
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp231,
	call	_ZN7VariantC1ERKS_	#
.LEHE1099:
.L6467:
# ./core/method_bind.h:69: 		return p_variant;
	leaq	-400(%rbp), %rax	#, tmp232
	movq	%rax, %rdi	# tmp232,
.LEHB1100:
	call	_ZNK7VariantcvbEv	#
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movzbl	%al, %r12d	# D.61453, _20
	cmpl	$0, -436(%rbp)	#, p_arg_count
	jg	.L6469	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-416(%rbp), %rax	# this, _21
	movq	%rax, -192(%rbp)	# _21, this
	movl	$0, -196(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-192(%rbp), %rax	# this, tmp233
	movl	44(%rax), %eax	# this_150->argument_count, _152
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-196(%rbp), %eax	# p_arg, _153
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp234
	movl	%eax, -200(%rbp)	# tmp234, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -200(%rbp)	#, idx
	js	.L6470	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-192(%rbp), %rax	# this, tmp235
	addq	$24, %rax	#, _155
	movq	%rax, -208(%rbp)	# _155, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-208(%rbp), %rax	# this, tmp236
	addq	$8, %rax	#, _157
	movq	%rax, -216(%rbp)	# _157, this
	movq	-216(%rbp), %rax	# this, tmp237
	movq	%rax, -224(%rbp)	# tmp237, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-224(%rbp), %rax	# this, tmp238
	movq	(%rax), %rax	# this_159->_ptr, _160
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _160
	jne	.L6471	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _161
	jmp	.L6472	#
.L6471:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-224(%rbp), %rax	# this, tmp239
	movq	(%rax), %rax	# this_159->_ptr, _162
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _161
.L6472:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -232(%rbp)	# _161, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -232(%rbp)	#, size
	je	.L6473	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-232(%rbp), %rax	# size, tmp240
	movl	(%rax), %eax	# *size_166, _167
	jmp	.L6474	#
.L6473:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _168
.L6474:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -200(%rbp)	# _168, idx
	jl	.L6476	#,
.L6470:
	movl	$1, %eax	#, iftmp.327_177
	jmp	.L6477	#
.L6476:
	movl	$0, %eax	#, iftmp.327_177
.L6477:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_177
	je	.L6478	#,
	leaq	-368(%rbp), %rax	#, tmp241
	movq	%rax, -240(%rbp)	# tmp241, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-240(%rbp), %rax	# this, tmp242
	movl	$0, (%rax)	#, this_181->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6496	#
.L6478:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-192(%rbp), %rax	# this, tmp243
	addq	$24, %rax	#, _182
	movq	%rax, -248(%rbp)	# _182, this
	movl	-200(%rbp), %eax	# idx, tmp244
	movl	%eax, -252(%rbp)	# tmp244, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-248(%rbp), %rax	# this, tmp245
	addq	$8, %rax	#, _185
	movq	%rax, -264(%rbp)	# _185, this
	movl	-252(%rbp), %eax	# p_index, tmp246
	movl	%eax, -268(%rbp)	# tmp246, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-268(%rbp), %eax	# p_index, tmp248
	shrl	$31, %eax	#, tmp247
	movzbl	%al, %eax	# _188, _189
	testq	%rax, %rax	# _190
	jne	.L6480	#,
	movq	-264(%rbp), %rax	# this, tmp249
	movq	%rax, -280(%rbp)	# tmp249, this
	movq	-280(%rbp), %rax	# this, tmp250
	movq	%rax, -288(%rbp)	# tmp250, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-288(%rbp), %rax	# this, tmp251
	movq	(%rax), %rax	# this_192->_ptr, _193
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _193
	jne	.L6481	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _194
	jmp	.L6482	#
.L6481:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-288(%rbp), %rax	# this, tmp252
	movq	(%rax), %rax	# this_192->_ptr, _195
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _194
.L6482:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -296(%rbp)	# _194, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -296(%rbp)	#, size
	je	.L6483	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-296(%rbp), %rax	# size, tmp253
	movl	(%rax), %eax	# *size_199, _200
	jmp	.L6484	#
.L6483:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _201
.L6484:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -268(%rbp)	# _201, p_index
	setge	%al	#, _207
	movzbl	%al, %eax	# _207, _208
	testq	%rax, %rax	# _209
	je	.L6485	#,
.L6480:
	movl	$1, %eax	#, iftmp.12_210
	jmp	.L6486	#
.L6485:
	movl	$0, %eax	#, iftmp.12_210
.L6486:
	movzbl	%al, %eax	# iftmp.12_210, _213
	testq	%rax, %rax	# _213
	setne	%al	#, retval.11_214
	testb	%al, %al	# retval.11_214
	je	.L6487	#,
	movq	-264(%rbp), %rax	# this, tmp254
	movq	%rax, -304(%rbp)	# tmp254, this
	movq	-304(%rbp), %rax	# this, tmp255
	movq	%rax, -312(%rbp)	# tmp255, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp256
	movq	(%rax), %rax	# this_216->_ptr, _217
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _217
	jne	.L6488	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _218
	jmp	.L6489	#
.L6488:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-312(%rbp), %rax	# this, tmp257
	movq	(%rax), %rax	# this_216->_ptr, _219
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _218
.L6489:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -320(%rbp)	# _218, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -320(%rbp)	#, size
	je	.L6490	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-320(%rbp), %rax	# size, tmp258
	movl	(%rax), %eax	# *size_223, _224
	jmp	.L6491	#
.L6490:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _225
.L6491:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _225, _231
	movl	-268(%rbp), %eax	# p_index, tmp259
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _231,
	movq	%rax, %rcx	# _232,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6487:
	movq	-264(%rbp), %rax	# this, tmp260
	movq	%rax, -328(%rbp)	# tmp260, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-328(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_233->_ptr, _234
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _234
	jne	.L6492	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _235
	jmp	.L6493	#
.L6492:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-328(%rbp), %rax	# this, tmp262
	movq	(%rax), %rcx	# this_233->_ptr, _235
.L6493:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-268(%rbp), %eax	# p_index, tmp263
	movslq	%eax, %rdx	# tmp263, _240
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _240, tmp264
	addq	%rax, %rax	# tmp264
	addq	%rdx, %rax	# _240, tmp264
	salq	$3, %rax	#, tmp265
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _242
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-368(%rbp), %rax	#, tmp266
	movq	%rdx, %rsi	# _242,
	movq	%rax, %rdi	# tmp266,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6496	#
.L6469:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# p_args, tmp267
	movq	(%rax), %rdx	# *p_args_38(D), _22
	leaq	-368(%rbp), %rax	#, tmp268
	movq	%rdx, %rsi	# _22,
	movq	%rax, %rdi	# tmp268,
	call	_ZN7VariantC1ERKS_	#
.LEHE1100:
.L6496:
# ./core/method_bind.h:69: 		return p_variant;
	leaq	-368(%rbp), %rax	#, tmp269
	movq	%rax, %rdi	# tmp269,
.LEHB1101:
	call	_ZNK7VariantcviEv	#
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movl	%r12d, %edx	# _20,
	movl	%eax, %esi	# D.61518,
	movq	%r13, %rdi	# _3,
	call	*%rbx	# iftmp.329_24
.LEHE1101:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.48327.type, _253
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _253
	je	.L6512	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp270
	movq	%rax, %rdi	# tmp270,
	call	_ZN7Variant5clearEv	#
.L6512:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.48330.type, _252
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _252
	je	.L6513	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp271
	movq	%rax, %rdi	# tmp271,
	call	_ZN7Variant5clearEv	#
.L6513:
# ./core/variant.h:423: 	}
	nop	
	movq	-408(%rbp), %rax	# <retval>, tmp272
	movq	%rax, -336(%rbp)	# tmp272, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-336(%rbp), %rax	# this, tmp273
	movl	$0, (%rax)	#, this_251->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:1525: 		return Variant();
	jmp	.L6511	#
.L6506:
	movq	%rax, %rbx	#, tmp276
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-368(%rbp), %eax	# D.48327.type, _254
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _254
	je	.L6514	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-368(%rbp), %rax	#, tmp274
	movq	%rax, %rdi	# tmp274,
	call	_ZN7Variant5clearEv	#
.L6514:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6503	#
.L6505:
	movq	%rax, %rbx	#, tmp275
.L6503:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-400(%rbp), %eax	# D.48330.type, _255
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _255
	je	.L6515	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-400(%rbp), %rax	#, tmp279
	movq	%rax, %rdi	# tmp279,
	call	_ZN7Variant5clearEv	#
.L6515:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp275, D.62385
	movq	%rax, %rdi	# D.62385,
.LEHB1102:
	call	_Unwind_Resume	#
.LEHE1102:
.L6511:
# ./core/method_bind.gen.inc:1526: 	}
	movq	-408(%rbp), %rax	# <retval>,
	leaq	-24(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%r13	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3672:
	.section	.gcc_except_table
.LLSDA3672:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3672-.LLSDACSB3672
.LLSDACSB3672:
	.uleb128 .LEHB1099-.LFB3672
	.uleb128 .LEHE1099-.LEHB1099
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1100-.LFB3672
	.uleb128 .LEHE1100-.LEHB1100
	.uleb128 .L6505-.LFB3672
	.uleb128 0
	.uleb128 .LEHB1101-.LFB3672
	.uleb128 .LEHE1101-.LEHB1101
	.uleb128 .L6506-.LFB3672
	.uleb128 0
	.uleb128 .LEHB1102-.LFB3672
	.uleb128 .LEHE1102-.LEHB1102
	.uleb128 0
	.uleb128 0
.LLSDACSE3672:
	.section	.text._ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE,comdat
	.size	_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE, .-_ZN11MethodBind2IibE4callEP6ObjectPPK7VariantiRNS3_9CallErrorE
	.section	.text._ZNK13MethodBind0RCI5ArrayE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv
	.type	_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv, @function
_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv:
.LFB3673:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3673
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:567: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6517	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6518	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1103:
	call	_ZN6StringC1EPKc	#
.LEHE1103:
	jmp	.L6519	#
.L6518:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1104:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1104:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6524	#
.L6523:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62387
	movq	%rax, %rdi	# D.62387,
.LEHB1105:
	call	_Unwind_Resume	#
.LEHE1105:
.L6524:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6519	#
.L6517:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6519:
# ./core/method_bind.gen.inc:567: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:568: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3673:
	.section	.gcc_except_table
.LLSDA3673:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3673-.LLSDACSB3673
.LLSDACSB3673:
	.uleb128 .LEHB1103-.LFB3673
	.uleb128 .LEHE1103-.LEHB1103
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1104-.LFB3673
	.uleb128 .LEHE1104-.LEHB1104
	.uleb128 .L6523-.LFB3673
	.uleb128 0
	.uleb128 .LEHB1105-.LFB3673
	.uleb128 .LEHE1105-.LEHB1105
	.uleb128 0
	.uleb128 0
.LLSDACSE3673:
	.section	.text._ZNK13MethodBind0RCI5ArrayE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv, .-_ZNK13MethodBind0RCI5ArrayE18get_instance_classEv
	.section	.text._ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.type	_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, @function
_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE:
.LFB3674:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3674
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
	movq	%rdx, -88(%rbp)	# p_object, p_object
	movq	%rcx, -96(%rbp)	# p_args, p_args
	movl	%r8d, -100(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -112(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:572: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-88(%rbp), %rax	# p_object, tmp102
	movq	%rax, -24(%rbp)	# tmp102, instance
# ./core/method_bind.gen.inc:574: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-112(%rbp), %rax	# r_error, tmp103
	movl	$0, (%rax)	#, r_error_21(D)->error
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp104
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _1
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp105
	leaq	(%rdx,%rax), %rcx	#, _3
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp106
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6526	#,
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp107
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp108
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-80(%rbp), %rax	# this, tmp109
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.352_16
	jmp	.L6527	#
.L6526:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp110
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, iftmp.352_16
.L6527:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	leaq	-32(%rbp), %rdx	#, tmp111
	movq	%rcx, %rsi	# _3,
	movq	%rdx, %rdi	# tmp111,
.LEHB1106:
	call	*%rax	# iftmp.352_16
.LEHE1106:
	leaq	-32(%rbp), %rdx	#, tmp112
	leaq	-64(%rbp), %rax	#, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
.LEHB1107:
	call	_ZN7VariantC1ERK5Array	#
.LEHE1107:
	leaq	-32(%rbp), %rax	#, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN5ArrayD1Ev	#
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	leaq	-64(%rbp), %rdx	#, tmp115
	movq	-72(%rbp), %rax	# <retval>, tmp116
	movq	%rdx, %rsi	# tmp115,
	movq	%rax, %rdi	# tmp116,
.LEHB1108:
	call	_ZN7VariantC1ERKS_	#
.LEHE1108:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _36
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _36
	je	.L6537	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp117
	movq	%rax, %rdi	# tmp117,
	call	_ZN7Variant5clearEv	#
.L6537:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	jmp	.L6536	#
.L6533:
	movq	%rax, %rbx	#, tmp119
	leaq	-32(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZN5ArrayD1Ev	#
	movq	%rbx, %rax	# tmp119, D.62389
	movq	%rax, %rdi	# D.62389,
.LEHB1109:
	call	_Unwind_Resume	#
.LEHE1109:
.L6534:
	movq	%rax, %rbx	#, tmp121
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _37
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _37
	je	.L6538	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp120
	movq	%rax, %rdi	# tmp120,
	call	_ZN7Variant5clearEv	#
.L6538:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp121, D.62390
	movq	%rax, %rdi	# D.62390,
.LEHB1110:
	call	_Unwind_Resume	#
.LEHE1110:
.L6536:
# ./core/method_bind.gen.inc:596: 	}
	movq	-72(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3674:
	.section	.gcc_except_table
.LLSDA3674:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3674-.LLSDACSB3674
.LLSDACSB3674:
	.uleb128 .LEHB1106-.LFB3674
	.uleb128 .LEHE1106-.LEHB1106
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1107-.LFB3674
	.uleb128 .LEHE1107-.LEHB1107
	.uleb128 .L6533-.LFB3674
	.uleb128 0
	.uleb128 .LEHB1108-.LFB3674
	.uleb128 .LEHE1108-.LEHB1108
	.uleb128 .L6534-.LFB3674
	.uleb128 0
	.uleb128 .LEHB1109-.LFB3674
	.uleb128 .LEHE1109-.LEHB1109
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1110-.LFB3674
	.uleb128 .LEHE1110-.LEHB1110
	.uleb128 0
	.uleb128 0
.LLSDACSE3674:
	.section	.text._ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.size	_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, .-_ZN13MethodBind0RCI5ArrayE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.section	.text._ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv
	.type	_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv, @function
_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv:
.LFB3675:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3675
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1306: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6540	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6541	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1111:
	call	_ZN6StringC1EPKc	#
.LEHE1111:
	jmp	.L6542	#
.L6541:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1112:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1112:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6547	#
.L6546:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62393
	movq	%rax, %rdi	# D.62393,
.LEHB1113:
	call	_Unwind_Resume	#
.LEHE1113:
.L6547:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6542	#
.L6540:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6542:
# ./core/method_bind.gen.inc:1306: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1307: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3675:
	.section	.gcc_except_table
.LLSDA3675:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3675-.LLSDACSB3675
.LLSDACSB3675:
	.uleb128 .LEHB1111-.LFB3675
	.uleb128 .LEHE1111-.LEHB1111
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1112-.LFB3675
	.uleb128 .LEHE1112-.LEHB1112
	.uleb128 .L6546-.LFB3675
	.uleb128 0
	.uleb128 .LEHB1113-.LFB3675
	.uleb128 .LEHE1113-.LEHB1113
	.uleb128 0
	.uleb128 0
.LLSDACSE3675:
	.section	.text._ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv, .-_ZNK13MethodBind1RCI7VariantRK8NodePathE18get_instance_classEv
	.section	.text._ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.type	_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE, @function
_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE:
.LFB3676:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3676
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$256, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -232(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -240(%rbp)	# this, this
	movq	%rdx, -248(%rbp)	# p_object, p_object
	movq	%rcx, -256(%rbp)	# p_args, p_args
	movl	%r8d, -260(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -272(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1311: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-248(%rbp), %rax	# p_object, tmp144
	movq	%rax, -24(%rbp)	# tmp144, instance
# ./core/method_bind.gen.inc:1313: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-272(%rbp), %rax	# r_error, tmp145
	movl	$0, (%rax)	#, r_error_25(D)->error
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp146
	movq	72(%rax), %rax	# this_27(D)->method.__delta, _1
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp147
	leaq	(%rdx,%rax), %r12	#, _3
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp148
	movq	64(%rax), %rax	# this_27(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6549	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp149
	movq	72(%rax), %rax	# this_27(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp150
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-240(%rbp), %rax	# this, tmp151
	movq	64(%rax), %rax	# this_27(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.328_18
	jmp	.L6550	#
.L6549:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp152
	movq	64(%rax), %rbx	# this_27(D)->method.__pfn, iftmp.328_18
.L6550:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	cmpl	$0, -260(%rbp)	#, p_arg_count
	jg	.L6551	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp153
	movl	44(%rax), %eax	# this_44->argument_count, _46
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _47
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp154
	movl	%eax, -40(%rbp)	# tmp154, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6552	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp155
	addq	$24, %rax	#, _49
	movq	%rax, -48(%rbp)	# _49, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp156
	addq	$8, %rax	#, _51
	movq	%rax, -56(%rbp)	# _51, this
	movq	-56(%rbp), %rax	# this, tmp157
	movq	%rax, -64(%rbp)	# tmp157, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp158
	movq	(%rax), %rax	# this_53->_ptr, _54
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _54
	jne	.L6553	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _55
	jmp	.L6554	#
.L6553:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp159
	movq	(%rax), %rax	# this_53->_ptr, _56
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _55
.L6554:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _55, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6555	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp160
	movl	(%rax), %eax	# *size_60, _61
	jmp	.L6556	#
.L6555:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _62
.L6556:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _62, idx
	jl	.L6558	#,
.L6552:
	movl	$1, %eax	#, iftmp.327_71
	jmp	.L6559	#
.L6558:
	movl	$0, %eax	#, iftmp.327_71
.L6559:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_71
	je	.L6560	#,
	leaq	-192(%rbp), %rax	#, tmp161
	movq	%rax, -80(%rbp)	# tmp161, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp162
	movl	$0, (%rax)	#, this_75->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6578	#
.L6560:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp163
	addq	$24, %rax	#, _76
	movq	%rax, -88(%rbp)	# _76, this
	movl	-40(%rbp), %eax	# idx, tmp164
	movl	%eax, -92(%rbp)	# tmp164, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp165
	addq	$8, %rax	#, _79
	movq	%rax, -104(%rbp)	# _79, this
	movl	-92(%rbp), %eax	# p_index, tmp166
	movl	%eax, -108(%rbp)	# tmp166, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp168
	shrl	$31, %eax	#, tmp167
	movzbl	%al, %eax	# _82, _83
	testq	%rax, %rax	# _84
	jne	.L6562	#,
	movq	-104(%rbp), %rax	# this, tmp169
	movq	%rax, -120(%rbp)	# tmp169, this
	movq	-120(%rbp), %rax	# this, tmp170
	movq	%rax, -128(%rbp)	# tmp170, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_86->_ptr, _87
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _87
	jne	.L6563	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _88
	jmp	.L6564	#
.L6563:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp172
	movq	(%rax), %rax	# this_86->_ptr, _89
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _88
.L6564:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _88, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6565	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp173
	movl	(%rax), %eax	# *size_93, _94
	jmp	.L6566	#
.L6565:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _95
.L6566:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _95, p_index
	setge	%al	#, _101
	movzbl	%al, %eax	# _101, _102
	testq	%rax, %rax	# _103
	je	.L6567	#,
.L6562:
	movl	$1, %eax	#, iftmp.12_104
	jmp	.L6568	#
.L6567:
	movl	$0, %eax	#, iftmp.12_104
.L6568:
	movzbl	%al, %eax	# iftmp.12_104, _107
	testq	%rax, %rax	# _107
	setne	%al	#, retval.11_108
	testb	%al, %al	# retval.11_108
	je	.L6569	#,
	movq	-104(%rbp), %rax	# this, tmp174
	movq	%rax, -144(%rbp)	# tmp174, this
	movq	-144(%rbp), %rax	# this, tmp175
	movq	%rax, -152(%rbp)	# tmp175, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp176
	movq	(%rax), %rax	# this_110->_ptr, _111
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _111
	jne	.L6570	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _112
	jmp	.L6571	#
.L6570:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp177
	movq	(%rax), %rax	# this_110->_ptr, _113
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _112
.L6571:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _112, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6572	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp178
	movl	(%rax), %eax	# *size_117, _118
	jmp	.L6573	#
.L6572:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _119
.L6573:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _119, _125
	movl	-108(%rbp), %eax	# p_index, tmp179
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _125,
	movq	%rax, %rcx	# _126,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1114:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6569:
	movq	-104(%rbp), %rax	# this, tmp180
	movq	%rax, -168(%rbp)	# tmp180, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp181
	movq	(%rax), %rax	# this_127->_ptr, _128
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _128
	jne	.L6574	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _129
	jmp	.L6575	#
.L6574:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp182
	movq	(%rax), %rcx	# this_127->_ptr, _129
.L6575:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp183
	movslq	%eax, %rdx	# tmp183, _134
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _134, tmp184
	addq	%rax, %rax	# tmp184
	addq	%rdx, %rax	# _134, tmp184
	salq	$3, %rax	#, tmp185
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _136
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-192(%rbp), %rax	#, tmp186
	movq	%rdx, %rsi	# _136,
	movq	%rax, %rdi	# tmp186,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6578	#
.L6551:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# p_args, tmp187
	movq	(%rax), %rdx	# *p_args_31(D), _17
	leaq	-192(%rbp), %rax	#, tmp188
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp188,
	call	_ZN7VariantC1ERKS_	#
.LEHE1114:
.L6578:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-200(%rbp), %rax	#, tmp189
	leaq	-192(%rbp), %rdx	#, tmp190
	movq	%rdx, %rsi	# tmp190,
	movq	%rax, %rdi	# tmp189,
.LEHB1115:
	call	_ZNK7Variantcv8NodePathEv	#
.LEHE1115:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-224(%rbp), %rax	#, tmp191
	leaq	-200(%rbp), %rdx	#, tmp192
	movq	%r12, %rsi	# _3,
	movq	%rax, %rdi	# tmp191,
.LEHB1116:
	call	*%rbx	# iftmp.328_18
.LEHE1116:
	leaq	-200(%rbp), %rax	#, tmp193
	movq	%rax, %rdi	# tmp193,
	call	_ZN8NodePathD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48352.type, _143
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _143
	je	.L6595	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp194
	movq	%rax, %rdi	# tmp194,
	call	_ZN7Variant5clearEv	#
.L6595:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	leaq	-224(%rbp), %rdx	#, tmp195
	movq	-232(%rbp), %rax	# <retval>, tmp196
	movq	%rdx, %rsi	# tmp195,
	movq	%rax, %rdi	# tmp196,
.LEHB1117:
	call	_ZN7VariantC1ERKS_	#
.LEHE1117:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _144
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _144
	je	.L6596	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp197
	movq	%rax, %rdi	# tmp197,
	call	_ZN7Variant5clearEv	#
.L6596:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	jmp	.L6594	#
.L6589:
	movq	%rax, %rbx	#, tmp200
	leaq	-200(%rbp), %rax	#, tmp198
	movq	%rax, %rdi	# tmp198,
	call	_ZN8NodePathD1Ev	#
	jmp	.L6584	#
.L6588:
	movq	%rax, %rbx	#, tmp199
.L6584:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48352.type, _145
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _145
	je	.L6597	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp203
	movq	%rax, %rdi	# tmp203,
	call	_ZN7Variant5clearEv	#
.L6597:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp199, D.62395
	movq	%rax, %rdi	# D.62395,
.LEHB1118:
	call	_Unwind_Resume	#
.LEHE1118:
.L6590:
	movq	%rax, %rbx	#, tmp205
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _146
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _146
	je	.L6598	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp204
	movq	%rax, %rdi	# tmp204,
	call	_ZN7Variant5clearEv	#
.L6598:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp205, D.62396
	movq	%rax, %rdi	# D.62396,
.LEHB1119:
	call	_Unwind_Resume	#
.LEHE1119:
.L6594:
# ./core/method_bind.gen.inc:1336: 	}
	movq	-232(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3676:
	.section	.gcc_except_table
.LLSDA3676:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3676-.LLSDACSB3676
.LLSDACSB3676:
	.uleb128 .LEHB1114-.LFB3676
	.uleb128 .LEHE1114-.LEHB1114
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1115-.LFB3676
	.uleb128 .LEHE1115-.LEHB1115
	.uleb128 .L6588-.LFB3676
	.uleb128 0
	.uleb128 .LEHB1116-.LFB3676
	.uleb128 .LEHE1116-.LEHB1116
	.uleb128 .L6589-.LFB3676
	.uleb128 0
	.uleb128 .LEHB1117-.LFB3676
	.uleb128 .LEHE1117-.LEHB1117
	.uleb128 .L6590-.LFB3676
	.uleb128 0
	.uleb128 .LEHB1118-.LFB3676
	.uleb128 .LEHE1118-.LEHB1118
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1119-.LFB3676
	.uleb128 .LEHE1119-.LEHB1119
	.uleb128 0
	.uleb128 0
.LLSDACSE3676:
	.section	.text._ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,comdat
	.size	_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE, .-_ZN13MethodBind1RCI7VariantRK8NodePathE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.section	.text._ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv
	.type	_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv, @function
_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv:
.LFB3677:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3677
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1495: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6600	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6601	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1120:
	call	_ZN6StringC1EPKc	#
.LEHE1120:
	jmp	.L6602	#
.L6601:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1121:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1121:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6607	#
.L6606:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62400
	movq	%rax, %rdi	# D.62400,
.LEHB1122:
	call	_Unwind_Resume	#
.LEHE1122:
.L6607:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6602	#
.L6600:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6602:
# ./core/method_bind.gen.inc:1495: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1496: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3677:
	.section	.gcc_except_table
.LLSDA3677:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3677-.LLSDACSB3677
.LLSDACSB3677:
	.uleb128 .LEHB1120-.LFB3677
	.uleb128 .LEHE1120-.LEHB1120
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1121-.LFB3677
	.uleb128 .LEHE1121-.LEHB1121
	.uleb128 .L6606-.LFB3677
	.uleb128 0
	.uleb128 .LEHB1122-.LFB3677
	.uleb128 .LEHE1122-.LEHB1122
	.uleb128 0
	.uleb128 0
.LLSDACSE3677:
	.section	.text._ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv, .-_ZNK11MethodBind2IRK8NodePathRK7VariantE18get_instance_classEv
	.section	.text._ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.type	_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE, @function
_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE:
.LFB3678:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3678
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$448, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -424(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -432(%rbp)	# this, this
	movq	%rdx, -440(%rbp)	# p_object, p_object
	movq	%rcx, -448(%rbp)	# p_args, p_args
	movl	%r8d, -452(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -464(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1500: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-440(%rbp), %rax	# p_object, tmp186
	movq	%rax, -24(%rbp)	# tmp186, instance
# ./core/method_bind.gen.inc:1502: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-464(%rbp), %rax	# r_error, tmp187
	movl	$0, (%rax)	#, r_error_30(D)->error
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp188
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp189
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-432(%rbp), %rax	# this, tmp190
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6609	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp191
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp192
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-432(%rbp), %rax	# this, tmp193
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.325_21
	jmp	.L6610	#
.L6609:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp194
	movq	64(%rax), %rbx	# this_32(D)->method.__pfn, iftmp.325_21
.L6610:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$1, -452(%rbp)	#, p_arg_count
	jg	.L6611	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$1, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp195
	movl	44(%rax), %eax	# this_51->argument_count, _53
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _54
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp196
	movl	%eax, -40(%rbp)	# tmp196, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6612	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp197
	addq	$24, %rax	#, _56
	movq	%rax, -48(%rbp)	# _56, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp198
	addq	$8, %rax	#, _58
	movq	%rax, -56(%rbp)	# _58, this
	movq	-56(%rbp), %rax	# this, tmp199
	movq	%rax, -64(%rbp)	# tmp199, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp200
	movq	(%rax), %rax	# this_60->_ptr, _61
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _61
	jne	.L6613	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _62
	jmp	.L6614	#
.L6613:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp201
	movq	(%rax), %rax	# this_60->_ptr, _63
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _62
.L6614:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _62, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6615	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp202
	movl	(%rax), %eax	# *size_67, _68
	jmp	.L6616	#
.L6615:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _69
.L6616:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _69, idx
	jl	.L6618	#,
.L6612:
	movl	$1, %eax	#, iftmp.327_78
	jmp	.L6619	#
.L6618:
	movl	$0, %eax	#, iftmp.327_78
.L6619:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_78
	je	.L6620	#,
	leaq	-384(%rbp), %rax	#, tmp203
	movq	%rax, -80(%rbp)	# tmp203, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp204
	movl	$0, (%rax)	#, this_82->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6638	#
.L6620:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp205
	addq	$24, %rax	#, _83
	movq	%rax, -88(%rbp)	# _83, this
	movl	-40(%rbp), %eax	# idx, tmp206
	movl	%eax, -92(%rbp)	# tmp206, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp207
	addq	$8, %rax	#, _86
	movq	%rax, -104(%rbp)	# _86, this
	movl	-92(%rbp), %eax	# p_index, tmp208
	movl	%eax, -108(%rbp)	# tmp208, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp210
	shrl	$31, %eax	#, tmp209
	movzbl	%al, %eax	# _89, _90
	testq	%rax, %rax	# _91
	jne	.L6622	#,
	movq	-104(%rbp), %rax	# this, tmp211
	movq	%rax, -120(%rbp)	# tmp211, this
	movq	-120(%rbp), %rax	# this, tmp212
	movq	%rax, -128(%rbp)	# tmp212, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp213
	movq	(%rax), %rax	# this_93->_ptr, _94
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _94
	jne	.L6623	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _95
	jmp	.L6624	#
.L6623:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp214
	movq	(%rax), %rax	# this_93->_ptr, _96
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _95
.L6624:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _95, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6625	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp215
	movl	(%rax), %eax	# *size_100, _101
	jmp	.L6626	#
.L6625:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _102
.L6626:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _102, p_index
	setge	%al	#, _108
	movzbl	%al, %eax	# _108, _109
	testq	%rax, %rax	# _110
	je	.L6627	#,
.L6622:
	movl	$1, %eax	#, iftmp.12_111
	jmp	.L6628	#
.L6627:
	movl	$0, %eax	#, iftmp.12_111
.L6628:
	movzbl	%al, %eax	# iftmp.12_111, _114
	testq	%rax, %rax	# _114
	setne	%al	#, retval.11_115
	testb	%al, %al	# retval.11_115
	je	.L6629	#,
	movq	-104(%rbp), %rax	# this, tmp216
	movq	%rax, -144(%rbp)	# tmp216, this
	movq	-144(%rbp), %rax	# this, tmp217
	movq	%rax, -152(%rbp)	# tmp217, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp218
	movq	(%rax), %rax	# this_117->_ptr, _118
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _118
	jne	.L6630	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _119
	jmp	.L6631	#
.L6630:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_117->_ptr, _120
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _119
.L6631:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _119, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6632	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp220
	movl	(%rax), %eax	# *size_124, _125
	jmp	.L6633	#
.L6632:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _126
.L6633:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _126, _132
	movl	-108(%rbp), %eax	# p_index, tmp221
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _132,
	movq	%rax, %rcx	# _133,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1123:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6629:
	movq	-104(%rbp), %rax	# this, tmp222
	movq	%rax, -168(%rbp)	# tmp222, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp223
	movq	(%rax), %rax	# this_134->_ptr, _135
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _135
	jne	.L6634	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _136
	jmp	.L6635	#
.L6634:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp224
	movq	(%rax), %rcx	# this_134->_ptr, _136
.L6635:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp225
	movslq	%eax, %rdx	# tmp225, _141
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _141, tmp226
	addq	%rax, %rax	# tmp226
	addq	%rdx, %rax	# _141, tmp226
	salq	$3, %rax	#, tmp227
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _143
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-384(%rbp), %rax	#, tmp228
	movq	%rdx, %rsi	# _143,
	movq	%rax, %rdi	# tmp228,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6638	#
.L6611:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-448(%rbp), %rax	# p_args, tmp229
	addq	$8, %rax	#, _17
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-384(%rbp), %rax	#, tmp230
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp230,
	call	_ZN7VariantC1ERKS_	#
.LEHE1123:
.L6638:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-384(%rbp), %rdx	#, tmp231
	leaq	-416(%rbp), %rax	#, tmp232
	movq	%rdx, %rsi	# tmp231,
	movq	%rax, %rdi	# tmp232,
.LEHB1124:
	call	_ZN7VariantC1ERKS_	#
.LEHE1124:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$0, -452(%rbp)	#, p_arg_count
	jg	.L6640	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, _19
	movq	%rax, -176(%rbp)	# _19, this
	movl	$0, -180(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-176(%rbp), %rax	# this, tmp233
	movl	44(%rax), %eax	# this_150->argument_count, _152
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-180(%rbp), %eax	# p_arg, _153
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp234
	movl	%eax, -184(%rbp)	# tmp234, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -184(%rbp)	#, idx
	js	.L6641	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-176(%rbp), %rax	# this, tmp235
	addq	$24, %rax	#, _155
	movq	%rax, -192(%rbp)	# _155, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-192(%rbp), %rax	# this, tmp236
	addq	$8, %rax	#, _157
	movq	%rax, -200(%rbp)	# _157, this
	movq	-200(%rbp), %rax	# this, tmp237
	movq	%rax, -208(%rbp)	# tmp237, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-208(%rbp), %rax	# this, tmp238
	movq	(%rax), %rax	# this_159->_ptr, _160
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _160
	jne	.L6642	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _161
	jmp	.L6643	#
.L6642:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-208(%rbp), %rax	# this, tmp239
	movq	(%rax), %rax	# this_159->_ptr, _162
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _161
.L6643:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -216(%rbp)	# _161, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -216(%rbp)	#, size
	je	.L6644	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-216(%rbp), %rax	# size, tmp240
	movl	(%rax), %eax	# *size_166, _167
	jmp	.L6645	#
.L6644:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _168
.L6645:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -184(%rbp)	# _168, idx
	jl	.L6647	#,
.L6641:
	movl	$1, %eax	#, iftmp.327_177
	jmp	.L6648	#
.L6647:
	movl	$0, %eax	#, iftmp.327_177
.L6648:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_177
	je	.L6649	#,
	leaq	-352(%rbp), %rax	#, tmp241
	movq	%rax, -224(%rbp)	# tmp241, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-224(%rbp), %rax	# this, tmp242
	movl	$0, (%rax)	#, this_181->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6667	#
.L6649:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-176(%rbp), %rax	# this, tmp243
	addq	$24, %rax	#, _182
	movq	%rax, -232(%rbp)	# _182, this
	movl	-184(%rbp), %eax	# idx, tmp244
	movl	%eax, -236(%rbp)	# tmp244, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-232(%rbp), %rax	# this, tmp245
	addq	$8, %rax	#, _185
	movq	%rax, -248(%rbp)	# _185, this
	movl	-236(%rbp), %eax	# p_index, tmp246
	movl	%eax, -252(%rbp)	# tmp246, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-252(%rbp), %eax	# p_index, tmp248
	shrl	$31, %eax	#, tmp247
	movzbl	%al, %eax	# _188, _189
	testq	%rax, %rax	# _190
	jne	.L6651	#,
	movq	-248(%rbp), %rax	# this, tmp249
	movq	%rax, -264(%rbp)	# tmp249, this
	movq	-264(%rbp), %rax	# this, tmp250
	movq	%rax, -272(%rbp)	# tmp250, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp251
	movq	(%rax), %rax	# this_192->_ptr, _193
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _193
	jne	.L6652	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _194
	jmp	.L6653	#
.L6652:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp252
	movq	(%rax), %rax	# this_192->_ptr, _195
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _194
.L6653:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _194, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L6654	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp253
	movl	(%rax), %eax	# *size_199, _200
	jmp	.L6655	#
.L6654:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _201
.L6655:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -252(%rbp)	# _201, p_index
	setge	%al	#, _207
	movzbl	%al, %eax	# _207, _208
	testq	%rax, %rax	# _209
	je	.L6656	#,
.L6651:
	movl	$1, %eax	#, iftmp.12_210
	jmp	.L6657	#
.L6656:
	movl	$0, %eax	#, iftmp.12_210
.L6657:
	movzbl	%al, %eax	# iftmp.12_210, _213
	testq	%rax, %rax	# _213
	setne	%al	#, retval.11_214
	testb	%al, %al	# retval.11_214
	je	.L6658	#,
	movq	-248(%rbp), %rax	# this, tmp254
	movq	%rax, -288(%rbp)	# tmp254, this
	movq	-288(%rbp), %rax	# this, tmp255
	movq	%rax, -296(%rbp)	# tmp255, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-296(%rbp), %rax	# this, tmp256
	movq	(%rax), %rax	# this_216->_ptr, _217
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _217
	jne	.L6659	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _218
	jmp	.L6660	#
.L6659:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-296(%rbp), %rax	# this, tmp257
	movq	(%rax), %rax	# this_216->_ptr, _219
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _218
.L6660:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -304(%rbp)	# _218, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -304(%rbp)	#, size
	je	.L6661	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-304(%rbp), %rax	# size, tmp258
	movl	(%rax), %eax	# *size_223, _224
	jmp	.L6662	#
.L6661:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _225
.L6662:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _225, _231
	movl	-252(%rbp), %eax	# p_index, tmp259
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _231,
	movq	%rax, %rcx	# _232,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1125:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6658:
	movq	-248(%rbp), %rax	# this, tmp260
	movq	%rax, -312(%rbp)	# tmp260, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_233->_ptr, _234
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _234
	jne	.L6663	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _235
	jmp	.L6664	#
.L6663:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-312(%rbp), %rax	# this, tmp262
	movq	(%rax), %rcx	# this_233->_ptr, _235
.L6664:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-252(%rbp), %eax	# p_index, tmp263
	movslq	%eax, %rdx	# tmp263, _240
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _240, tmp264
	addq	%rax, %rax	# tmp264
	addq	%rdx, %rax	# _240, tmp264
	salq	$3, %rax	#, tmp265
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _242
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-352(%rbp), %rax	#, tmp266
	movq	%rdx, %rsi	# _242,
	movq	%rax, %rdi	# tmp266,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6667	#
.L6640:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-448(%rbp), %rax	# p_args, tmp267
	movq	(%rax), %rdx	# *p_args_36(D), _20
	leaq	-352(%rbp), %rax	#, tmp268
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp268,
	call	_ZN7VariantC1ERKS_	#
.LEHE1125:
.L6667:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-360(%rbp), %rax	#, tmp269
	leaq	-352(%rbp), %rdx	#, tmp270
	movq	%rdx, %rsi	# tmp270,
	movq	%rax, %rdi	# tmp269,
.LEHB1126:
	call	_ZNK7Variantcv8NodePathEv	#
.LEHE1126:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-416(%rbp), %rdx	#, tmp271
	leaq	-360(%rbp), %rax	#, tmp272
	movq	%rax, %rsi	# tmp272,
	movq	%r12, %rdi	# _3,
.LEHB1127:
	call	*%rbx	# iftmp.325_21
.LEHE1127:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp273
	movq	%rax, %rdi	# tmp273,
	call	_ZN8NodePathD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48362.type, _252
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _252
	je	.L6691	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp274
	movq	%rax, %rdi	# tmp274,
	call	_ZN7Variant5clearEv	#
.L6691:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.48367.type, _251
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _251
	je	.L6692	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp275
	movq	%rax, %rdi	# tmp275,
	call	_ZN7Variant5clearEv	#
.L6692:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48366.type, _250
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _250
	je	.L6693	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp276
	movq	%rax, %rdi	# tmp276,
	call	_ZN7Variant5clearEv	#
.L6693:
# ./core/variant.h:423: 	}
	nop	
	movq	-424(%rbp), %rax	# <retval>, tmp277
	movq	%rax, -320(%rbp)	# tmp277, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-320(%rbp), %rax	# this, tmp278
	movl	$0, (%rax)	#, this_249->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:1525: 		return Variant();
	jmp	.L6690	#
.L6683:
	movq	%rax, %rbx	#, tmp281
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp279
	movq	%rax, %rdi	# tmp279,
	call	_ZN8NodePathD1Ev	#
	jmp	.L6674	#
.L6682:
	movq	%rax, %rbx	#, tmp280
.L6674:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48362.type, _253
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _253
	je	.L6694	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp284
	movq	%rax, %rdi	# tmp284,
	call	_ZN7Variant5clearEv	#
.L6694:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6676	#
.L6681:
	movq	%rax, %rbx	#, tmp285
.L6676:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.48367.type, _254
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _254
	je	.L6695	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp287
	movq	%rax, %rdi	# tmp287,
	call	_ZN7Variant5clearEv	#
.L6695:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6678	#
.L6680:
	movq	%rax, %rbx	#, tmp288
.L6678:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48366.type, _255
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _255
	je	.L6696	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp290
	movq	%rax, %rdi	# tmp290,
	call	_ZN7Variant5clearEv	#
.L6696:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp288, D.62402
	movq	%rax, %rdi	# D.62402,
.LEHB1128:
	call	_Unwind_Resume	#
.LEHE1128:
.L6690:
# ./core/method_bind.gen.inc:1526: 	}
	movq	-424(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3678:
	.section	.gcc_except_table
.LLSDA3678:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3678-.LLSDACSB3678
.LLSDACSB3678:
	.uleb128 .LEHB1123-.LFB3678
	.uleb128 .LEHE1123-.LEHB1123
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1124-.LFB3678
	.uleb128 .LEHE1124-.LEHB1124
	.uleb128 .L6680-.LFB3678
	.uleb128 0
	.uleb128 .LEHB1125-.LFB3678
	.uleb128 .LEHE1125-.LEHB1125
	.uleb128 .L6681-.LFB3678
	.uleb128 0
	.uleb128 .LEHB1126-.LFB3678
	.uleb128 .LEHE1126-.LEHB1126
	.uleb128 .L6682-.LFB3678
	.uleb128 0
	.uleb128 .LEHB1127-.LFB3678
	.uleb128 .LEHE1127-.LEHB1127
	.uleb128 .L6683-.LFB3678
	.uleb128 0
	.uleb128 .LEHB1128-.LFB3678
	.uleb128 .LEHE1128-.LEHB1128
	.uleb128 0
	.uleb128 0
.LLSDACSE3678:
	.section	.text._ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,comdat
	.size	_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE, .-_ZN11MethodBind2IRK8NodePathRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.section	.text._ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv
	.type	_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv, @function
_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv:
.LFB3679:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3679
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1306: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6698	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6699	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1129:
	call	_ZN6StringC1EPKc	#
.LEHE1129:
	jmp	.L6700	#
.L6699:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1130:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1130:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6705	#
.L6704:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62405
	movq	%rax, %rdi	# D.62405,
.LEHB1131:
	call	_Unwind_Resume	#
.LEHE1131:
.L6705:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6700	#
.L6698:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6700:
# ./core/method_bind.gen.inc:1306: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1307: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3679:
	.section	.gcc_except_table
.LLSDA3679:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3679-.LLSDACSB3679
.LLSDACSB3679:
	.uleb128 .LEHB1129-.LFB3679
	.uleb128 .LEHE1129-.LEHB1129
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1130-.LFB3679
	.uleb128 .LEHE1130-.LEHB1130
	.uleb128 .L6704-.LFB3679
	.uleb128 0
	.uleb128 .LEHB1131-.LFB3679
	.uleb128 .LEHE1131-.LEHB1131
	.uleb128 0
	.uleb128 0
.LLSDACSE3679:
	.section	.text._ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv, .-_ZNK13MethodBind1RCI7VariantRK6StringE18get_instance_classEv
	.section	.text._ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.type	_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE, @function
_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE:
.LFB3680:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3680
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$256, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -232(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -240(%rbp)	# this, this
	movq	%rdx, -248(%rbp)	# p_object, p_object
	movq	%rcx, -256(%rbp)	# p_args, p_args
	movl	%r8d, -260(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -272(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1311: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-248(%rbp), %rax	# p_object, tmp144
	movq	%rax, -24(%rbp)	# tmp144, instance
# ./core/method_bind.gen.inc:1313: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-272(%rbp), %rax	# r_error, tmp145
	movl	$0, (%rax)	#, r_error_25(D)->error
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp146
	movq	72(%rax), %rax	# this_27(D)->method.__delta, _1
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp147
	leaq	(%rdx,%rax), %r12	#, _3
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp148
	movq	64(%rax), %rax	# this_27(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6707	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp149
	movq	72(%rax), %rax	# this_27(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp150
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-240(%rbp), %rax	# this, tmp151
	movq	64(%rax), %rax	# this_27(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.336_18
	jmp	.L6708	#
.L6707:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp152
	movq	64(%rax), %rbx	# this_27(D)->method.__pfn, iftmp.336_18
.L6708:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	cmpl	$0, -260(%rbp)	#, p_arg_count
	jg	.L6709	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp153
	movl	44(%rax), %eax	# this_44->argument_count, _46
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _47
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp154
	movl	%eax, -40(%rbp)	# tmp154, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6710	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp155
	addq	$24, %rax	#, _49
	movq	%rax, -48(%rbp)	# _49, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp156
	addq	$8, %rax	#, _51
	movq	%rax, -56(%rbp)	# _51, this
	movq	-56(%rbp), %rax	# this, tmp157
	movq	%rax, -64(%rbp)	# tmp157, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp158
	movq	(%rax), %rax	# this_53->_ptr, _54
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _54
	jne	.L6711	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _55
	jmp	.L6712	#
.L6711:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp159
	movq	(%rax), %rax	# this_53->_ptr, _56
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _55
.L6712:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _55, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6713	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp160
	movl	(%rax), %eax	# *size_60, _61
	jmp	.L6714	#
.L6713:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _62
.L6714:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _62, idx
	jl	.L6716	#,
.L6710:
	movl	$1, %eax	#, iftmp.327_71
	jmp	.L6717	#
.L6716:
	movl	$0, %eax	#, iftmp.327_71
.L6717:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_71
	je	.L6718	#,
	leaq	-192(%rbp), %rax	#, tmp161
	movq	%rax, -80(%rbp)	# tmp161, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp162
	movl	$0, (%rax)	#, this_75->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6736	#
.L6718:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp163
	addq	$24, %rax	#, _76
	movq	%rax, -88(%rbp)	# _76, this
	movl	-40(%rbp), %eax	# idx, tmp164
	movl	%eax, -92(%rbp)	# tmp164, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp165
	addq	$8, %rax	#, _79
	movq	%rax, -104(%rbp)	# _79, this
	movl	-92(%rbp), %eax	# p_index, tmp166
	movl	%eax, -108(%rbp)	# tmp166, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp168
	shrl	$31, %eax	#, tmp167
	movzbl	%al, %eax	# _82, _83
	testq	%rax, %rax	# _84
	jne	.L6720	#,
	movq	-104(%rbp), %rax	# this, tmp169
	movq	%rax, -120(%rbp)	# tmp169, this
	movq	-120(%rbp), %rax	# this, tmp170
	movq	%rax, -128(%rbp)	# tmp170, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp171
	movq	(%rax), %rax	# this_86->_ptr, _87
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _87
	jne	.L6721	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _88
	jmp	.L6722	#
.L6721:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp172
	movq	(%rax), %rax	# this_86->_ptr, _89
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _88
.L6722:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _88, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6723	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp173
	movl	(%rax), %eax	# *size_93, _94
	jmp	.L6724	#
.L6723:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _95
.L6724:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _95, p_index
	setge	%al	#, _101
	movzbl	%al, %eax	# _101, _102
	testq	%rax, %rax	# _103
	je	.L6725	#,
.L6720:
	movl	$1, %eax	#, iftmp.12_104
	jmp	.L6726	#
.L6725:
	movl	$0, %eax	#, iftmp.12_104
.L6726:
	movzbl	%al, %eax	# iftmp.12_104, _107
	testq	%rax, %rax	# _107
	setne	%al	#, retval.11_108
	testb	%al, %al	# retval.11_108
	je	.L6727	#,
	movq	-104(%rbp), %rax	# this, tmp174
	movq	%rax, -144(%rbp)	# tmp174, this
	movq	-144(%rbp), %rax	# this, tmp175
	movq	%rax, -152(%rbp)	# tmp175, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp176
	movq	(%rax), %rax	# this_110->_ptr, _111
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _111
	jne	.L6728	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _112
	jmp	.L6729	#
.L6728:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp177
	movq	(%rax), %rax	# this_110->_ptr, _113
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _112
.L6729:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _112, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6730	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp178
	movl	(%rax), %eax	# *size_117, _118
	jmp	.L6731	#
.L6730:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _119
.L6731:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _119, _125
	movl	-108(%rbp), %eax	# p_index, tmp179
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _125,
	movq	%rax, %rcx	# _126,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1132:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6727:
	movq	-104(%rbp), %rax	# this, tmp180
	movq	%rax, -168(%rbp)	# tmp180, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp181
	movq	(%rax), %rax	# this_127->_ptr, _128
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _128
	jne	.L6732	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _129
	jmp	.L6733	#
.L6732:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp182
	movq	(%rax), %rcx	# this_127->_ptr, _129
.L6733:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp183
	movslq	%eax, %rdx	# tmp183, _134
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _134, tmp184
	addq	%rax, %rax	# tmp184
	addq	%rdx, %rax	# _134, tmp184
	salq	$3, %rax	#, tmp185
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _136
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-192(%rbp), %rax	#, tmp186
	movq	%rdx, %rsi	# _136,
	movq	%rax, %rdi	# tmp186,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6736	#
.L6709:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# p_args, tmp187
	movq	(%rax), %rdx	# *p_args_31(D), _17
	leaq	-192(%rbp), %rax	#, tmp188
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp188,
	call	_ZN7VariantC1ERKS_	#
.LEHE1132:
.L6736:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-200(%rbp), %rax	#, tmp189
	leaq	-192(%rbp), %rdx	#, tmp190
	movq	%rdx, %rsi	# tmp190,
	movq	%rax, %rdi	# tmp189,
.LEHB1133:
	call	_ZNK7Variantcv6StringEv	#
.LEHE1133:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-224(%rbp), %rax	#, tmp191
	leaq	-200(%rbp), %rdx	#, tmp192
	movq	%r12, %rsi	# _3,
	movq	%rax, %rdi	# tmp191,
.LEHB1134:
	call	*%rbx	# iftmp.336_18
.LEHE1134:
	leaq	-200(%rbp), %rax	#, tmp193
	movq	%rax, %rdi	# tmp193,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48376.type, _143
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _143
	je	.L6753	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp194
	movq	%rax, %rdi	# tmp194,
	call	_ZN7Variant5clearEv	#
.L6753:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	leaq	-224(%rbp), %rdx	#, tmp195
	movq	-232(%rbp), %rax	# <retval>, tmp196
	movq	%rdx, %rsi	# tmp195,
	movq	%rax, %rdi	# tmp196,
.LEHB1135:
	call	_ZN7VariantC1ERKS_	#
.LEHE1135:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _144
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _144
	je	.L6754	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp197
	movq	%rax, %rdi	# tmp197,
	call	_ZN7Variant5clearEv	#
.L6754:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	jmp	.L6752	#
.L6747:
	movq	%rax, %rbx	#, tmp200
	leaq	-200(%rbp), %rax	#, tmp198
	movq	%rax, %rdi	# tmp198,
	call	_ZN6StringD1Ev	#
	jmp	.L6742	#
.L6746:
	movq	%rax, %rbx	#, tmp199
.L6742:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48376.type, _145
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _145
	je	.L6755	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp203
	movq	%rax, %rdi	# tmp203,
	call	_ZN7Variant5clearEv	#
.L6755:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp199, D.62407
	movq	%rax, %rdi	# D.62407,
.LEHB1136:
	call	_Unwind_Resume	#
.LEHE1136:
.L6748:
	movq	%rax, %rbx	#, tmp205
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _146
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _146
	je	.L6756	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp204
	movq	%rax, %rdi	# tmp204,
	call	_ZN7Variant5clearEv	#
.L6756:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp205, D.62408
	movq	%rax, %rdi	# D.62408,
.LEHB1137:
	call	_Unwind_Resume	#
.LEHE1137:
.L6752:
# ./core/method_bind.gen.inc:1336: 	}
	movq	-232(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3680:
	.section	.gcc_except_table
.LLSDA3680:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3680-.LLSDACSB3680
.LLSDACSB3680:
	.uleb128 .LEHB1132-.LFB3680
	.uleb128 .LEHE1132-.LEHB1132
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1133-.LFB3680
	.uleb128 .LEHE1133-.LEHB1133
	.uleb128 .L6746-.LFB3680
	.uleb128 0
	.uleb128 .LEHB1134-.LFB3680
	.uleb128 .LEHE1134-.LEHB1134
	.uleb128 .L6747-.LFB3680
	.uleb128 0
	.uleb128 .LEHB1135-.LFB3680
	.uleb128 .LEHE1135-.LEHB1135
	.uleb128 .L6748-.LFB3680
	.uleb128 0
	.uleb128 .LEHB1136-.LFB3680
	.uleb128 .LEHE1136-.LEHB1136
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1137-.LFB3680
	.uleb128 .LEHE1137-.LEHB1137
	.uleb128 0
	.uleb128 0
.LLSDACSE3680:
	.section	.text._ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE,comdat
	.size	_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE, .-_ZN13MethodBind1RCI7VariantRK6StringE4callEP6ObjectPPKS0_iRNS0_9CallErrorE
	.section	.text._ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv
	.type	_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv, @function
_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv:
.LFB3681:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3681
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1495: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6758	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6759	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1138:
	call	_ZN6StringC1EPKc	#
.LEHE1138:
	jmp	.L6760	#
.L6759:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1139:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1139:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6765	#
.L6764:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62412
	movq	%rax, %rdi	# D.62412,
.LEHB1140:
	call	_Unwind_Resume	#
.LEHE1140:
.L6765:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6760	#
.L6758:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6760:
# ./core/method_bind.gen.inc:1495: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1496: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3681:
	.section	.gcc_except_table
.LLSDA3681:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3681-.LLSDACSB3681
.LLSDACSB3681:
	.uleb128 .LEHB1138-.LFB3681
	.uleb128 .LEHE1138-.LEHB1138
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1139-.LFB3681
	.uleb128 .LEHE1139-.LEHB1139
	.uleb128 .L6764-.LFB3681
	.uleb128 0
	.uleb128 .LEHB1140-.LFB3681
	.uleb128 .LEHE1140-.LEHB1140
	.uleb128 0
	.uleb128 0
.LLSDACSE3681:
	.section	.text._ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv,"axG",@progbits,_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv,comdat
	.size	_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv, .-_ZNK11MethodBind2IRK6StringRK7VariantE18get_instance_classEv
	.section	.text._ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,comdat
	.align 2
	.weak	_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.type	_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE, @function
_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE:
.LFB3682:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3682
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$448, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -424(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -432(%rbp)	# this, this
	movq	%rdx, -440(%rbp)	# p_object, p_object
	movq	%rcx, -448(%rbp)	# p_args, p_args
	movl	%r8d, -452(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -464(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1500: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-440(%rbp), %rax	# p_object, tmp186
	movq	%rax, -24(%rbp)	# tmp186, instance
# ./core/method_bind.gen.inc:1502: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-464(%rbp), %rax	# r_error, tmp187
	movl	$0, (%rax)	#, r_error_30(D)->error
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp188
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp189
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-432(%rbp), %rax	# this, tmp190
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6767	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp191
	movq	72(%rax), %rax	# this_32(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp192
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-432(%rbp), %rax	# this, tmp193
	movq	64(%rax), %rax	# this_32(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.334_21
	jmp	.L6768	#
.L6767:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, tmp194
	movq	64(%rax), %rbx	# this_32(D)->method.__pfn, iftmp.334_21
.L6768:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$1, -452(%rbp)	#, p_arg_count
	jg	.L6769	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$1, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp195
	movl	44(%rax), %eax	# this_51->argument_count, _53
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _54
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp196
	movl	%eax, -40(%rbp)	# tmp196, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6770	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp197
	addq	$24, %rax	#, _56
	movq	%rax, -48(%rbp)	# _56, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp198
	addq	$8, %rax	#, _58
	movq	%rax, -56(%rbp)	# _58, this
	movq	-56(%rbp), %rax	# this, tmp199
	movq	%rax, -64(%rbp)	# tmp199, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp200
	movq	(%rax), %rax	# this_60->_ptr, _61
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _61
	jne	.L6771	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _62
	jmp	.L6772	#
.L6771:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp201
	movq	(%rax), %rax	# this_60->_ptr, _63
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _62
.L6772:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _62, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6773	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp202
	movl	(%rax), %eax	# *size_67, _68
	jmp	.L6774	#
.L6773:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _69
.L6774:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _69, idx
	jl	.L6776	#,
.L6770:
	movl	$1, %eax	#, iftmp.327_78
	jmp	.L6777	#
.L6776:
	movl	$0, %eax	#, iftmp.327_78
.L6777:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_78
	je	.L6778	#,
	leaq	-384(%rbp), %rax	#, tmp203
	movq	%rax, -80(%rbp)	# tmp203, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp204
	movl	$0, (%rax)	#, this_82->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6796	#
.L6778:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp205
	addq	$24, %rax	#, _83
	movq	%rax, -88(%rbp)	# _83, this
	movl	-40(%rbp), %eax	# idx, tmp206
	movl	%eax, -92(%rbp)	# tmp206, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp207
	addq	$8, %rax	#, _86
	movq	%rax, -104(%rbp)	# _86, this
	movl	-92(%rbp), %eax	# p_index, tmp208
	movl	%eax, -108(%rbp)	# tmp208, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp210
	shrl	$31, %eax	#, tmp209
	movzbl	%al, %eax	# _89, _90
	testq	%rax, %rax	# _91
	jne	.L6780	#,
	movq	-104(%rbp), %rax	# this, tmp211
	movq	%rax, -120(%rbp)	# tmp211, this
	movq	-120(%rbp), %rax	# this, tmp212
	movq	%rax, -128(%rbp)	# tmp212, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp213
	movq	(%rax), %rax	# this_93->_ptr, _94
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _94
	jne	.L6781	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _95
	jmp	.L6782	#
.L6781:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp214
	movq	(%rax), %rax	# this_93->_ptr, _96
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _95
.L6782:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _95, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6783	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp215
	movl	(%rax), %eax	# *size_100, _101
	jmp	.L6784	#
.L6783:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _102
.L6784:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _102, p_index
	setge	%al	#, _108
	movzbl	%al, %eax	# _108, _109
	testq	%rax, %rax	# _110
	je	.L6785	#,
.L6780:
	movl	$1, %eax	#, iftmp.12_111
	jmp	.L6786	#
.L6785:
	movl	$0, %eax	#, iftmp.12_111
.L6786:
	movzbl	%al, %eax	# iftmp.12_111, _114
	testq	%rax, %rax	# _114
	setne	%al	#, retval.11_115
	testb	%al, %al	# retval.11_115
	je	.L6787	#,
	movq	-104(%rbp), %rax	# this, tmp216
	movq	%rax, -144(%rbp)	# tmp216, this
	movq	-144(%rbp), %rax	# this, tmp217
	movq	%rax, -152(%rbp)	# tmp217, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp218
	movq	(%rax), %rax	# this_117->_ptr, _118
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _118
	jne	.L6788	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _119
	jmp	.L6789	#
.L6788:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp219
	movq	(%rax), %rax	# this_117->_ptr, _120
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _119
.L6789:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _119, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6790	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp220
	movl	(%rax), %eax	# *size_124, _125
	jmp	.L6791	#
.L6790:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _126
.L6791:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _126, _132
	movl	-108(%rbp), %eax	# p_index, tmp221
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _132,
	movq	%rax, %rcx	# _133,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1141:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6787:
	movq	-104(%rbp), %rax	# this, tmp222
	movq	%rax, -168(%rbp)	# tmp222, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp223
	movq	(%rax), %rax	# this_134->_ptr, _135
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _135
	jne	.L6792	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _136
	jmp	.L6793	#
.L6792:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp224
	movq	(%rax), %rcx	# this_134->_ptr, _136
.L6793:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp225
	movslq	%eax, %rdx	# tmp225, _141
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _141, tmp226
	addq	%rax, %rax	# tmp226
	addq	%rdx, %rax	# _141, tmp226
	salq	$3, %rax	#, tmp227
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _143
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-384(%rbp), %rax	#, tmp228
	movq	%rdx, %rsi	# _143,
	movq	%rax, %rdi	# tmp228,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6796	#
.L6769:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-448(%rbp), %rax	# p_args, tmp229
	addq	$8, %rax	#, _17
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	(%rax), %rdx	# *_17, _18
	leaq	-384(%rbp), %rax	#, tmp230
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# tmp230,
	call	_ZN7VariantC1ERKS_	#
.LEHE1141:
.L6796:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-384(%rbp), %rdx	#, tmp231
	leaq	-416(%rbp), %rax	#, tmp232
	movq	%rdx, %rsi	# tmp231,
	movq	%rax, %rdi	# tmp232,
.LEHB1142:
	call	_ZN7VariantC1ERKS_	#
.LEHE1142:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	cmpl	$0, -452(%rbp)	#, p_arg_count
	jg	.L6798	#,
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-432(%rbp), %rax	# this, _19
	movq	%rax, -176(%rbp)	# _19, this
	movl	$0, -180(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-176(%rbp), %rax	# this, tmp233
	movl	44(%rax), %eax	# this_150->argument_count, _152
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-180(%rbp), %eax	# p_arg, _153
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp234
	movl	%eax, -184(%rbp)	# tmp234, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -184(%rbp)	#, idx
	js	.L6799	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-176(%rbp), %rax	# this, tmp235
	addq	$24, %rax	#, _155
	movq	%rax, -192(%rbp)	# _155, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-192(%rbp), %rax	# this, tmp236
	addq	$8, %rax	#, _157
	movq	%rax, -200(%rbp)	# _157, this
	movq	-200(%rbp), %rax	# this, tmp237
	movq	%rax, -208(%rbp)	# tmp237, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-208(%rbp), %rax	# this, tmp238
	movq	(%rax), %rax	# this_159->_ptr, _160
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _160
	jne	.L6800	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _161
	jmp	.L6801	#
.L6800:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-208(%rbp), %rax	# this, tmp239
	movq	(%rax), %rax	# this_159->_ptr, _162
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _161
.L6801:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -216(%rbp)	# _161, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -216(%rbp)	#, size
	je	.L6802	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-216(%rbp), %rax	# size, tmp240
	movl	(%rax), %eax	# *size_166, _167
	jmp	.L6803	#
.L6802:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _168
.L6803:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -184(%rbp)	# _168, idx
	jl	.L6805	#,
.L6799:
	movl	$1, %eax	#, iftmp.327_177
	jmp	.L6806	#
.L6805:
	movl	$0, %eax	#, iftmp.327_177
.L6806:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_177
	je	.L6807	#,
	leaq	-352(%rbp), %rax	#, tmp241
	movq	%rax, -224(%rbp)	# tmp241, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-224(%rbp), %rax	# this, tmp242
	movl	$0, (%rax)	#, this_181->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6825	#
.L6807:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-176(%rbp), %rax	# this, tmp243
	addq	$24, %rax	#, _182
	movq	%rax, -232(%rbp)	# _182, this
	movl	-184(%rbp), %eax	# idx, tmp244
	movl	%eax, -236(%rbp)	# tmp244, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-232(%rbp), %rax	# this, tmp245
	addq	$8, %rax	#, _185
	movq	%rax, -248(%rbp)	# _185, this
	movl	-236(%rbp), %eax	# p_index, tmp246
	movl	%eax, -252(%rbp)	# tmp246, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-252(%rbp), %eax	# p_index, tmp248
	shrl	$31, %eax	#, tmp247
	movzbl	%al, %eax	# _188, _189
	testq	%rax, %rax	# _190
	jne	.L6809	#,
	movq	-248(%rbp), %rax	# this, tmp249
	movq	%rax, -264(%rbp)	# tmp249, this
	movq	-264(%rbp), %rax	# this, tmp250
	movq	%rax, -272(%rbp)	# tmp250, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-272(%rbp), %rax	# this, tmp251
	movq	(%rax), %rax	# this_192->_ptr, _193
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _193
	jne	.L6810	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _194
	jmp	.L6811	#
.L6810:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-272(%rbp), %rax	# this, tmp252
	movq	(%rax), %rax	# this_192->_ptr, _195
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _194
.L6811:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -280(%rbp)	# _194, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -280(%rbp)	#, size
	je	.L6812	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-280(%rbp), %rax	# size, tmp253
	movl	(%rax), %eax	# *size_199, _200
	jmp	.L6813	#
.L6812:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _201
.L6813:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -252(%rbp)	# _201, p_index
	setge	%al	#, _207
	movzbl	%al, %eax	# _207, _208
	testq	%rax, %rax	# _209
	je	.L6814	#,
.L6809:
	movl	$1, %eax	#, iftmp.12_210
	jmp	.L6815	#
.L6814:
	movl	$0, %eax	#, iftmp.12_210
.L6815:
	movzbl	%al, %eax	# iftmp.12_210, _213
	testq	%rax, %rax	# _213
	setne	%al	#, retval.11_214
	testb	%al, %al	# retval.11_214
	je	.L6816	#,
	movq	-248(%rbp), %rax	# this, tmp254
	movq	%rax, -288(%rbp)	# tmp254, this
	movq	-288(%rbp), %rax	# this, tmp255
	movq	%rax, -296(%rbp)	# tmp255, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-296(%rbp), %rax	# this, tmp256
	movq	(%rax), %rax	# this_216->_ptr, _217
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _217
	jne	.L6817	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _218
	jmp	.L6818	#
.L6817:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-296(%rbp), %rax	# this, tmp257
	movq	(%rax), %rax	# this_216->_ptr, _219
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _218
.L6818:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -304(%rbp)	# _218, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -304(%rbp)	#, size
	je	.L6819	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-304(%rbp), %rax	# size, tmp258
	movl	(%rax), %eax	# *size_223, _224
	jmp	.L6820	#
.L6819:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _225
.L6820:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _225, _231
	movl	-252(%rbp), %eax	# p_index, tmp259
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _231,
	movq	%rax, %rcx	# _232,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1143:
	.cfi_escape 0x2e,0x10
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6816:
	movq	-248(%rbp), %rax	# this, tmp260
	movq	%rax, -312(%rbp)	# tmp260, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-312(%rbp), %rax	# this, tmp261
	movq	(%rax), %rax	# this_233->_ptr, _234
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _234
	jne	.L6821	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _235
	jmp	.L6822	#
.L6821:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-312(%rbp), %rax	# this, tmp262
	movq	(%rax), %rcx	# this_233->_ptr, _235
.L6822:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-252(%rbp), %eax	# p_index, tmp263
	movslq	%eax, %rdx	# tmp263, _240
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _240, tmp264
	addq	%rax, %rax	# tmp264
	addq	%rdx, %rax	# _240, tmp264
	salq	$3, %rax	#, tmp265
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _242
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-352(%rbp), %rax	#, tmp266
	movq	%rdx, %rsi	# _242,
	movq	%rax, %rdi	# tmp266,
	.cfi_escape 0x2e,0
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6825	#
.L6798:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	movq	-448(%rbp), %rax	# p_args, tmp267
	movq	(%rax), %rdx	# *p_args_36(D), _20
	leaq	-352(%rbp), %rax	#, tmp268
	movq	%rdx, %rsi	# _20,
	movq	%rax, %rdi	# tmp268,
	call	_ZN7VariantC1ERKS_	#
.LEHE1143:
.L6825:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-360(%rbp), %rax	#, tmp269
	leaq	-352(%rbp), %rdx	#, tmp270
	movq	%rdx, %rsi	# tmp270,
	movq	%rax, %rdi	# tmp269,
.LEHB1144:
	call	_ZNK7Variantcv6StringEv	#
.LEHE1144:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-416(%rbp), %rdx	#, tmp271
	leaq	-360(%rbp), %rax	#, tmp272
	movq	%rax, %rsi	# tmp272,
	movq	%r12, %rdi	# _3,
.LEHB1145:
	call	*%rbx	# iftmp.334_21
.LEHE1145:
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp273
	movq	%rax, %rdi	# tmp273,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48386.type, _252
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _252
	je	.L6849	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp274
	movq	%rax, %rdi	# tmp274,
	call	_ZN7Variant5clearEv	#
.L6849:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.48391.type, _251
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _251
	je	.L6850	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp275
	movq	%rax, %rdi	# tmp275,
	call	_ZN7Variant5clearEv	#
.L6850:
# ./core/variant.h:423: 	}
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48390.type, _250
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _250
	je	.L6851	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp276
	movq	%rax, %rdi	# tmp276,
	call	_ZN7Variant5clearEv	#
.L6851:
# ./core/variant.h:423: 	}
	nop	
	movq	-424(%rbp), %rax	# <retval>, tmp277
	movq	%rax, -320(%rbp)	# tmp277, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-320(%rbp), %rax	# this, tmp278
	movl	$0, (%rax)	#, this_249->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.gen.inc:1525: 		return Variant();
	jmp	.L6848	#
.L6841:
	movq	%rax, %rbx	#, tmp281
# ./core/method_bind.gen.inc:1523: 		(instance->*method)(_VC(1), _VC(2));
	leaq	-360(%rbp), %rax	#, tmp279
	movq	%rax, %rdi	# tmp279,
	call	_ZN6StringD1Ev	#
	jmp	.L6832	#
.L6840:
	movq	%rax, %rbx	#, tmp280
.L6832:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-352(%rbp), %eax	# D.48386.type, _253
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _253
	je	.L6852	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-352(%rbp), %rax	#, tmp284
	movq	%rax, %rdi	# tmp284,
	call	_ZN7Variant5clearEv	#
.L6852:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6834	#
.L6839:
	movq	%rax, %rbx	#, tmp285
.L6834:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-416(%rbp), %eax	# D.48391.type, _254
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _254
	je	.L6853	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-416(%rbp), %rax	#, tmp287
	movq	%rax, %rdi	# tmp287,
	call	_ZN7Variant5clearEv	#
.L6853:
# ./core/variant.h:423: 	}
	nop	
	jmp	.L6836	#
.L6838:
	movq	%rax, %rbx	#, tmp288
.L6836:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-384(%rbp), %eax	# D.48390.type, _255
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _255
	je	.L6854	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-384(%rbp), %rax	#, tmp290
	movq	%rax, %rdi	# tmp290,
	call	_ZN7Variant5clearEv	#
.L6854:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp288, D.62414
	movq	%rax, %rdi	# D.62414,
.LEHB1146:
	call	_Unwind_Resume	#
.LEHE1146:
.L6848:
# ./core/method_bind.gen.inc:1526: 	}
	movq	-424(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3682:
	.section	.gcc_except_table
.LLSDA3682:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3682-.LLSDACSB3682
.LLSDACSB3682:
	.uleb128 .LEHB1141-.LFB3682
	.uleb128 .LEHE1141-.LEHB1141
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1142-.LFB3682
	.uleb128 .LEHE1142-.LEHB1142
	.uleb128 .L6838-.LFB3682
	.uleb128 0
	.uleb128 .LEHB1143-.LFB3682
	.uleb128 .LEHE1143-.LEHB1143
	.uleb128 .L6839-.LFB3682
	.uleb128 0
	.uleb128 .LEHB1144-.LFB3682
	.uleb128 .LEHE1144-.LEHB1144
	.uleb128 .L6840-.LFB3682
	.uleb128 0
	.uleb128 .LEHB1145-.LFB3682
	.uleb128 .LEHE1145-.LEHB1145
	.uleb128 .L6841-.LFB3682
	.uleb128 0
	.uleb128 .LEHB1146-.LFB3682
	.uleb128 .LEHE1146-.LEHB1146
	.uleb128 0
	.uleb128 0
.LLSDACSE3682:
	.section	.text._ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,"axG",@progbits,_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE,comdat
	.size	_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE, .-_ZN11MethodBind2IRK6StringRK7VariantE4callEP6ObjectPPS4_iRNS3_9CallErrorE
	.section	.text._ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv
	.type	_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv, @function
_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv:
.LFB3683:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3683
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:1306: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6856	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6857	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1147:
	call	_ZN6StringC1EPKc	#
.LEHE1147:
	jmp	.L6858	#
.L6857:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1148:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1148:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6863	#
.L6862:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62417
	movq	%rax, %rdi	# D.62417,
.LEHB1149:
	call	_Unwind_Resume	#
.LEHE1149:
.L6863:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6858	#
.L6856:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6858:
# ./core/method_bind.gen.inc:1306: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:1307: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3683:
	.section	.gcc_except_table
.LLSDA3683:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3683-.LLSDACSB3683
.LLSDACSB3683:
	.uleb128 .LEHB1147-.LFB3683
	.uleb128 .LEHE1147-.LEHB1147
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1148-.LFB3683
	.uleb128 .LEHE1148-.LEHB1148
	.uleb128 .L6862-.LFB3683
	.uleb128 0
	.uleb128 .LEHB1149-.LFB3683
	.uleb128 .LEHE1149-.LEHB1149
	.uleb128 0
	.uleb128 0
.LLSDACSE3683:
	.section	.text._ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv, .-_ZNK13MethodBind1RCIbRK6StringE18get_instance_classEv
	.section	.text._ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.type	_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, @function
_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE:
.LFB3684:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3684
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%r12	#
	pushq	%rbx	#
	subq	$256, %rsp	#,
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -232(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -240(%rbp)	# this, this
	movq	%rdx, -248(%rbp)	# p_object, p_object
	movq	%rcx, -256(%rbp)	# p_args, p_args
	movl	%r8d, -260(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -272(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:1311: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-248(%rbp), %rax	# p_object, tmp146
	movq	%rax, -24(%rbp)	# tmp146, instance
# ./core/method_bind.gen.inc:1313: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-272(%rbp), %rax	# r_error, tmp147
	movl	$0, (%rax)	#, r_error_28(D)->error
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp148
	movq	72(%rax), %rax	# this_30(D)->method.__delta, _1
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp149
	leaq	(%rdx,%rax), %r12	#, _3
	movq	-240(%rbp), %rax	# this, tmp150
	movq	64(%rax), %rax	# this_30(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6865	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp151
	movq	72(%rax), %rax	# this_30(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp152
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-240(%rbp), %rax	# this, tmp153
	movq	64(%rax), %rax	# this_30(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rbx	# *_15, iftmp.337_20
	jmp	.L6866	#
.L6865:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, tmp154
	movq	64(%rax), %rbx	# this_30(D)->method.__pfn, iftmp.337_20
.L6866:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	cmpl	$0, -260(%rbp)	#, p_arg_count
	jg	.L6867	#,
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-240(%rbp), %rax	# this, _16
	movq	%rax, -32(%rbp)	# _16, this
	movl	$0, -36(%rbp)	#, p_arg
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	movq	-32(%rbp), %rax	# this, tmp155
	movl	44(%rax), %eax	# this_49->argument_count, _51
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	-36(%rbp), %eax	# p_arg, _52
# ./core/method_bind.h:254: 		int idx = argument_count - p_arg - 1;
	subl	$1, %eax	#, tmp156
	movl	%eax, -40(%rbp)	# tmp156, idx
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	$0, -40(%rbp)	#, idx
	js	.L6868	#,
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	movq	-32(%rbp), %rax	# this, tmp157
	addq	$24, %rax	#, _54
	movq	%rax, -48(%rbp)	# _54, this
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	movq	-48(%rbp), %rax	# this, tmp158
	addq	$8, %rax	#, _56
	movq	%rax, -56(%rbp)	# _56, this
	movq	-56(%rbp), %rax	# this, tmp159
	movq	%rax, -64(%rbp)	# tmp159, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-64(%rbp), %rax	# this, tmp160
	movq	(%rax), %rax	# this_58->_ptr, _59
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _59
	jne	.L6869	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _60
	jmp	.L6870	#
.L6869:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-64(%rbp), %rax	# this, tmp161
	movq	(%rax), %rax	# this_58->_ptr, _61
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _60
.L6870:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -72(%rbp)	# _60, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -72(%rbp)	#, size
	je	.L6871	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-72(%rbp), %rax	# size, tmp162
	movl	(%rax), %eax	# *size_65, _66
	jmp	.L6872	#
.L6871:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _67
.L6872:
# ./core/vector.h:83: 	_FORCE_INLINE_ int size() const { return _cowdata.size(); }
	nop	
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	cmpl	%eax, -40(%rbp)	# _67, idx
	jl	.L6874	#,
.L6868:
	movl	$1, %eax	#, iftmp.327_76
	jmp	.L6875	#
.L6874:
	movl	$0, %eax	#, iftmp.327_76
.L6875:
# ./core/method_bind.h:256: 		if (idx < 0 || idx >= default_arguments.size())
	testb	%al, %al	# iftmp.327_76
	je	.L6876	#,
	leaq	-192(%rbp), %rax	#, tmp163
	movq	%rax, -80(%rbp)	# tmp163, this
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	movq	-80(%rbp), %rax	# this, tmp164
	movl	$0, (%rax)	#, this_80->type
# ./core/variant.h:420: 	_FORCE_INLINE_ Variant() { type = NIL; }
	nop	
# ./core/method_bind.h:257: 			return Variant();
	jmp	.L6894	#
.L6876:
# ./core/method_bind.h:259: 			return default_arguments[idx];
	movq	-32(%rbp), %rax	# this, tmp165
	addq	$24, %rax	#, _81
	movq	%rax, -88(%rbp)	# _81, this
	movl	-40(%rbp), %eax	# idx, tmp166
	movl	%eax, -92(%rbp)	# tmp166, p_index
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	movq	-88(%rbp), %rax	# this, tmp167
	addq	$8, %rax	#, _84
	movq	%rax, -104(%rbp)	# _84, this
	movl	-92(%rbp), %eax	# p_index, tmp168
	movl	%eax, -108(%rbp)	# tmp168, p_index
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movl	-108(%rbp), %eax	# p_index, tmp170
	shrl	$31, %eax	#, tmp169
	movzbl	%al, %eax	# _87, _88
	testq	%rax, %rax	# _89
	jne	.L6878	#,
	movq	-104(%rbp), %rax	# this, tmp171
	movq	%rax, -120(%rbp)	# tmp171, this
	movq	-120(%rbp), %rax	# this, tmp172
	movq	%rax, -128(%rbp)	# tmp172, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-128(%rbp), %rax	# this, tmp173
	movq	(%rax), %rax	# this_91->_ptr, _92
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _92
	jne	.L6879	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _93
	jmp	.L6880	#
.L6879:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-128(%rbp), %rax	# this, tmp174
	movq	(%rax), %rax	# this_91->_ptr, _94
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _93
.L6880:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -136(%rbp)	# _93, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -136(%rbp)	#, size
	je	.L6881	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-136(%rbp), %rax	# size, tmp175
	movl	(%rax), %eax	# *size_98, _99
	jmp	.L6882	#
.L6881:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _100
.L6882:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	cmpl	%eax, -108(%rbp)	# _100, p_index
	setge	%al	#, _106
	movzbl	%al, %eax	# _106, _107
	testq	%rax, %rax	# _108
	je	.L6883	#,
.L6878:
	movl	$1, %eax	#, iftmp.12_109
	jmp	.L6884	#
.L6883:
	movl	$0, %eax	#, iftmp.12_109
.L6884:
	movzbl	%al, %eax	# iftmp.12_109, _112
	testq	%rax, %rax	# _112
	setne	%al	#, retval.11_113
	testb	%al, %al	# retval.11_113
	je	.L6885	#,
	movq	-104(%rbp), %rax	# this, tmp176
	movq	%rax, -144(%rbp)	# tmp176, this
	movq	-144(%rbp), %rax	# this, tmp177
	movq	%rax, -152(%rbp)	# tmp177, this
# ./core/cowdata.h:70: 		if (!_ptr)
	movq	-152(%rbp), %rax	# this, tmp178
	movq	(%rax), %rax	# this_115->_ptr, _116
# ./core/cowdata.h:70: 		if (!_ptr)
	testq	%rax, %rax	# _116
	jne	.L6886	#,
# ./core/cowdata.h:71: 			return NULL;
	movl	$0, %eax	#, _117
	jmp	.L6887	#
.L6886:
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	movq	-152(%rbp), %rax	# this, tmp179
	movq	(%rax), %rax	# this_115->_ptr, _118
# ./core/cowdata.h:73: 		return reinterpret_cast<uint32_t *>(_ptr) - 1;
	subq	$4, %rax	#, _117
.L6887:
# ./core/cowdata.h:125: 		uint32_t *size = (uint32_t *)_get_size();
	movq	%rax, -160(%rbp)	# _117, size
# ./core/cowdata.h:126: 		if (size)
	cmpq	$0, -160(%rbp)	#, size
	je	.L6888	#,
# ./core/cowdata.h:127: 			return *size;
	movq	-160(%rbp), %rax	# size, tmp180
	movl	(%rax), %eax	# *size_122, _123
	jmp	.L6889	#
.L6888:
# ./core/cowdata.h:129: 			return 0;
	movl	$0, %eax	#, _124
.L6889:
# ./core/cowdata.h:151: 		CRASH_BAD_INDEX(p_index, size());
	movslq	%eax, %rdx	# _124, _130
	movl	-108(%rbp), %eax	# p_index, tmp181
	cltq
	pushq	$1	#
	pushq	$.LC11	#
	movl	$.LC8, %r9d	#,
	movq	%rdx, %r8	# _130,
	movq	%rax, %rcx	# _131,
	movl	$151, %edx	#,
	movl	$.LC9, %esi	#,
	movl	$.LC10, %edi	#,
.LEHB1150:
	call	_Z22_err_print_index_errorPKcS0_illS0_S0_b	#
	addq	$16, %rsp	#,
	ud2	
.L6885:
	movq	-104(%rbp), %rax	# this, tmp182
	movq	%rax, -168(%rbp)	# tmp182, this
# ./core/cowdata.h:78: 		if (!_ptr)
	movq	-168(%rbp), %rax	# this, tmp183
	movq	(%rax), %rax	# this_132->_ptr, _133
# ./core/cowdata.h:78: 		if (!_ptr)
	testq	%rax, %rax	# _133
	jne	.L6890	#,
# ./core/cowdata.h:79: 			return NULL;
	movl	$0, %ecx	#, _134
	jmp	.L6891	#
.L6890:
# ./core/cowdata.h:80: 		return reinterpret_cast<T *>(_ptr);
	movq	-168(%rbp), %rax	# this, tmp184
	movq	(%rax), %rcx	# this_132->_ptr, _134
.L6891:
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movl	-108(%rbp), %eax	# p_index, tmp185
	movslq	%eax, %rdx	# tmp185, _139
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	movq	%rdx, %rax	# _139, tmp186
	addq	%rax, %rax	# tmp186
	addq	%rdx, %rax	# _139, tmp186
	salq	$3, %rax	#, tmp187
# ./core/cowdata.h:153: 		return _get_data()[p_index];
	leaq	(%rcx,%rax), %rdx	#, _141
# ./core/vector.h:85: 	_FORCE_INLINE_ const T &operator[](int p_index) const { return _cowdata.get(p_index); }
	nop	
# ./core/method_bind.h:259: 			return default_arguments[idx];
	leaq	-192(%rbp), %rax	#, tmp188
	movq	%rdx, %rsi	# _141,
	movq	%rax, %rdi	# tmp188,
	call	_ZN7VariantC1ERKS_	#
	jmp	.L6894	#
.L6867:
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movq	-256(%rbp), %rax	# p_args, tmp189
	movq	(%rax), %rdx	# *p_args_34(D), _17
	leaq	-192(%rbp), %rax	#, tmp190
	movq	%rdx, %rsi	# _17,
	movq	%rax, %rdi	# tmp190,
	call	_ZN7VariantC1ERKS_	#
.LEHE1150:
.L6894:
# ./core/method_bind.h:87: 		return p_variant;
	leaq	-200(%rbp), %rax	#, tmp191
	leaq	-192(%rbp), %rdx	#, tmp192
	movq	%rdx, %rsi	# tmp192,
	movq	%rax, %rdi	# tmp191,
.LEHB1151:
	call	_ZNK7Variantcv6StringEv	#
.LEHE1151:
# ./core/method_bind.h:87: 		return p_variant;
	nop	
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	leaq	-200(%rbp), %rax	#, tmp193
	movq	%rax, %rsi	# tmp193,
	movq	%r12, %rdi	# _3,
.LEHB1152:
	call	*%rbx	# iftmp.337_20
# ./core/method_bind.gen.inc:1333: 		Variant ret = (instance->*method)(_VC(1));
	movzbl	%al, %edx	# _18, _19
	leaq	-224(%rbp), %rax	#, tmp194
	movl	%edx, %esi	# _19,
	movq	%rax, %rdi	# tmp194,
	call	_ZN7VariantC1Eb	#
.LEHE1152:
	leaq	-200(%rbp), %rax	#, tmp195
	movq	%rax, %rdi	# tmp195,
	call	_ZN6StringD1Ev	#
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48400.type, _148
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _148
	je	.L6911	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp196
	movq	%rax, %rdi	# tmp196,
	call	_ZN7Variant5clearEv	#
.L6911:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	leaq	-224(%rbp), %rdx	#, tmp197
	movq	-232(%rbp), %rax	# <retval>, tmp198
	movq	%rdx, %rsi	# tmp197,
	movq	%rax, %rdi	# tmp198,
.LEHB1153:
	call	_ZN7VariantC1ERKS_	#
.LEHE1153:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _149
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _149
	je	.L6912	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp199
	movq	%rax, %rdi	# tmp199,
	call	_ZN7Variant5clearEv	#
.L6912:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:1334: 		return Variant(ret);
	jmp	.L6910	#
.L6905:
	movq	%rax, %rbx	#, tmp202
	leaq	-200(%rbp), %rax	#, tmp200
	movq	%rax, %rdi	# tmp200,
	call	_ZN6StringD1Ev	#
	jmp	.L6900	#
.L6904:
	movq	%rax, %rbx	#, tmp201
.L6900:
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-192(%rbp), %eax	# D.48400.type, _150
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _150
	je	.L6913	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-192(%rbp), %rax	#, tmp205
	movq	%rax, %rdi	# tmp205,
	call	_ZN7Variant5clearEv	#
.L6913:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp201, D.62419
	movq	%rax, %rdi	# D.62419,
.LEHB1154:
	call	_Unwind_Resume	#
.LEHE1154:
.L6906:
	movq	%rax, %rbx	#, tmp207
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-224(%rbp), %eax	# ret.type, _151
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _151
	je	.L6914	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-224(%rbp), %rax	#, tmp206
	movq	%rax, %rdi	# tmp206,
	call	_ZN7Variant5clearEv	#
.L6914:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp207, D.62420
	movq	%rax, %rdi	# D.62420,
.LEHB1155:
	call	_Unwind_Resume	#
.LEHE1155:
.L6910:
# ./core/method_bind.gen.inc:1336: 	}
	movq	-232(%rbp), %rax	# <retval>,
	leaq	-16(%rbp), %rsp	#,
	popq	%rbx	#
	popq	%r12	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3684:
	.section	.gcc_except_table
.LLSDA3684:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3684-.LLSDACSB3684
.LLSDACSB3684:
	.uleb128 .LEHB1150-.LFB3684
	.uleb128 .LEHE1150-.LEHB1150
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1151-.LFB3684
	.uleb128 .LEHE1151-.LEHB1151
	.uleb128 .L6904-.LFB3684
	.uleb128 0
	.uleb128 .LEHB1152-.LFB3684
	.uleb128 .LEHE1152-.LEHB1152
	.uleb128 .L6905-.LFB3684
	.uleb128 0
	.uleb128 .LEHB1153-.LFB3684
	.uleb128 .LEHE1153-.LEHB1153
	.uleb128 .L6906-.LFB3684
	.uleb128 0
	.uleb128 .LEHB1154-.LFB3684
	.uleb128 .LEHE1154-.LEHB1154
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1155-.LFB3684
	.uleb128 .LEHE1155-.LEHB1155
	.uleb128 0
	.uleb128 0
.LLSDACSE3684:
	.section	.text._ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,"axG",@progbits,_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE,comdat
	.size	_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE, .-_ZN13MethodBind1RCIbRK6StringE4callEP6ObjectPPK7VariantiRNS6_9CallErrorE
	.section	.text._ZNK13MethodBind0RCI6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI6StringE18get_instance_classEv,comdat
	.align 2
	.weak	_ZNK13MethodBind0RCI6StringE18get_instance_classEv
	.type	_ZNK13MethodBind0RCI6StringE18get_instance_classEv, @function
_ZNK13MethodBind0RCI6StringE18get_instance_classEv:
.LFB3685:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3685
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$88, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -96(%rbp)	# this, this
# ./core/method_bind.gen.inc:567: 		return type_name;
	movq	-96(%rbp), %rax	# this, tmp97
	addq	$56, %rax	#, _1
	movq	%rax, -24(%rbp)	# _1, this
# ./core/string_name.h:124: 		if (_data) {
	movq	-24(%rbp), %rax	# this, tmp98
	movq	(%rax), %rax	# this_5->_data, _6
# ./core/string_name.h:124: 		if (_data) {
	testq	%rax, %rax	# _6
	je	.L6916	#,
# ./core/string_name.h:125: 			if (_data->cname)
	movq	-24(%rbp), %rax	# this, tmp99
	movq	(%rax), %rax	# this_5->_data, _7
# ./core/string_name.h:125: 			if (_data->cname)
	movq	8(%rax), %rax	# _7->cname, _8
# ./core/string_name.h:125: 			if (_data->cname)
	testq	%rax, %rax	# _8
	je	.L6917	#,
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	-24(%rbp), %rax	# this, tmp100
	movq	(%rax), %rax	# this_5->_data, _9
# ./core/string_name.h:126: 				return String(_data->cname);
	movq	8(%rax), %rdx	# _9->cname, _10
	movq	-88(%rbp), %rax	# <retval>, tmp101
	movq	%rdx, %rsi	# _10,
	movq	%rax, %rdi	# tmp101,
.LEHB1156:
	call	_ZN6StringC1EPKc	#
.LEHE1156:
	jmp	.L6918	#
.L6917:
# ./core/string_name.h:128: 				return _data->name;
	movq	-24(%rbp), %rax	# this, tmp102
	movq	(%rax), %rax	# this_5->_data, _11
# ./core/string_name.h:128: 				return _data->name;
	leaq	16(%rax), %rdx	#, _12
	movq	-88(%rbp), %rax	# <retval>, tmp103
	movq	%rax, -32(%rbp)	# tmp103, this
	movq	%rdx, -40(%rbp)	# _12, p_str
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _15
	movq	%rax, -48(%rbp)	# _15, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-48(%rbp), %rax	# this, tmp104
	movq	$0, (%rax)	#, this_16->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _17
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-40(%rbp), %rdx	# p_str, _18
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	%rdx, %rsi	# _18,
	movq	%rax, %rdi	# _17,
.LEHB1157:
	call	_ZN7CowDataIwE4_refERKS0_	#
.LEHE1157:
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	jmp	.L6923	#
.L6922:
	movq	%rax, %rbx	#, tmp107
# ./core/ustring.h:358: 	_FORCE_INLINE_ String(const String &p_str) { _cowdata._ref(p_str._cowdata); }
	movq	-32(%rbp), %rax	# this, _19
	movq	%rax, -56(%rbp)	# _19, this
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp105
	movq	(%rax), %rdx	# this_20->_ptr, _21
# ./core/cowdata.h:369: 	_unref(_ptr);
	movq	-56(%rbp), %rax	# this, tmp106
	movq	%rdx, %rsi	# _21,
	movq	%rax, %rdi	# tmp106,
	call	_ZN7CowDataIwE6_unrefEPv	#
# ./core/cowdata.h:370: }
	nop	
	movq	%rbx, %rax	# tmp107, D.62423
	movq	%rax, %rdi	# D.62423,
.LEHB1158:
	call	_Unwind_Resume	#
.LEHE1158:
.L6923:
# ./core/string_name.h:128: 				return _data->name;
	jmp	.L6918	#
.L6916:
	movq	-88(%rbp), %rax	# <retval>, tmp108
	movq	%rax, -64(%rbp)	# tmp108, this
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	movq	-64(%rbp), %rax	# this, _23
	movq	%rax, -72(%rbp)	# _23, this
# ./core/cowdata.h:363: 	_ptr = NULL;
	movq	-72(%rbp), %rax	# this, tmp109
	movq	$0, (%rax)	#, this_24->_ptr
# ./core/cowdata.h:364: }
	nop	
# ./core/ustring.h:357: 	_FORCE_INLINE_ String() {}
	nop	
# ./core/string_name.h:131: 		return String();
	nop	
.L6918:
# ./core/method_bind.gen.inc:567: 		return type_name;
	nop	
# ./core/method_bind.gen.inc:568: 	}
	movq	-88(%rbp), %rax	# <retval>,
	addq	$88, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3685:
	.section	.gcc_except_table
.LLSDA3685:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3685-.LLSDACSB3685
.LLSDACSB3685:
	.uleb128 .LEHB1156-.LFB3685
	.uleb128 .LEHE1156-.LEHB1156
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1157-.LFB3685
	.uleb128 .LEHE1157-.LEHB1157
	.uleb128 .L6922-.LFB3685
	.uleb128 0
	.uleb128 .LEHB1158-.LFB3685
	.uleb128 .LEHE1158-.LEHB1158
	.uleb128 0
	.uleb128 0
.LLSDACSE3685:
	.section	.text._ZNK13MethodBind0RCI6StringE18get_instance_classEv,"axG",@progbits,_ZNK13MethodBind0RCI6StringE18get_instance_classEv,comdat
	.size	_ZNK13MethodBind0RCI6StringE18get_instance_classEv, .-_ZNK13MethodBind0RCI6StringE18get_instance_classEv
	.section	.text._ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.align 2
	.weak	_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.type	_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, @function
_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE:
.LFB3686:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3686
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	pushq	%rbx	#
	subq	$104, %rsp	#,
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
	movq	%rsi, -80(%rbp)	# this, this
	movq	%rdx, -88(%rbp)	# p_object, p_object
	movq	%rcx, -96(%rbp)	# p_args, p_args
	movl	%r8d, -100(%rbp)	# p_arg_count, p_arg_count
	movq	%r9, -112(%rbp)	# r_error, r_error
# ./core/method_bind.gen.inc:572: 		__UnexistingClass *instance = (__UnexistingClass*)p_object;
	movq	-88(%rbp), %rax	# p_object, tmp102
	movq	%rax, -24(%rbp)	# tmp102, instance
# ./core/method_bind.gen.inc:574: 		r_error.error=Variant::CallError::CALL_OK;
	movq	-112(%rbp), %rax	# r_error, tmp103
	movl	$0, (%rax)	#, r_error_21(D)->error
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp104
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _1
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	%rax, %rdx	# _1, _2
	movq	-24(%rbp), %rax	# instance, tmp105
	leaq	(%rdx,%rax), %rcx	#, _3
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp106
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _4
	andl	$1, %eax	#, _6
	testq	%rax, %rax	# _6
	je	.L6925	#,
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp107
	movq	72(%rax), %rax	# this_23(D)->method.__delta, _7
	movq	%rax, %rdx	# _7, _8
	movq	-24(%rbp), %rax	# instance, tmp108
	addq	%rdx, %rax	# _8, _9
	movq	(%rax), %rdx	# MEM[(int (*) () * *)_9], _10
	movq	-80(%rbp), %rax	# this, tmp109
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, _11
	subq	$1, %rax	#, _13
	addq	%rdx, %rax	# _10, _15
	movq	(%rax), %rax	# *_15, iftmp.324_16
	jmp	.L6926	#
.L6925:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	movq	-80(%rbp), %rax	# this, tmp110
	movq	64(%rax), %rax	# this_23(D)->method.__pfn, iftmp.324_16
.L6926:
# ./core/method_bind.gen.inc:593: 		Variant ret = (instance->*method)();
	leaq	-32(%rbp), %rdx	#, tmp111
	movq	%rcx, %rsi	# _3,
	movq	%rdx, %rdi	# tmp111,
.LEHB1159:
	call	*%rax	# iftmp.324_16
.LEHE1159:
	leaq	-32(%rbp), %rdx	#, tmp112
	leaq	-64(%rbp), %rax	#, tmp113
	movq	%rdx, %rsi	# tmp112,
	movq	%rax, %rdi	# tmp113,
.LEHB1160:
	call	_ZN7VariantC1ERK6String	#
.LEHE1160:
	leaq	-32(%rbp), %rax	#, tmp114
	movq	%rax, %rdi	# tmp114,
	call	_ZN6StringD1Ev	#
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	leaq	-64(%rbp), %rdx	#, tmp115
	movq	-72(%rbp), %rax	# <retval>, tmp116
	movq	%rdx, %rsi	# tmp115,
	movq	%rax, %rdi	# tmp116,
.LEHB1161:
	call	_ZN7VariantC1ERKS_	#
.LEHE1161:
	nop	
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _36
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _36
	je	.L6936	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp117
	movq	%rax, %rdi	# tmp117,
	call	_ZN7Variant5clearEv	#
.L6936:
# ./core/variant.h:423: 	}
	nop	
# ./core/method_bind.gen.inc:594: 		return Variant(ret);
	jmp	.L6935	#
.L6932:
	movq	%rax, %rbx	#, tmp119
	leaq	-32(%rbp), %rax	#, tmp118
	movq	%rax, %rdi	# tmp118,
	call	_ZN6StringD1Ev	#
	movq	%rbx, %rax	# tmp119, D.62425
	movq	%rax, %rdi	# D.62425,
.LEHB1162:
	call	_Unwind_Resume	#
.LEHE1162:
.L6933:
	movq	%rax, %rbx	#, tmp121
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	movl	-64(%rbp), %eax	# ret.type, _37
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	testl	%eax, %eax	# _37
	je	.L6937	#,
# ./core/variant.h:422: 		if (type != Variant::NIL) clear();
	leaq	-64(%rbp), %rax	#, tmp120
	movq	%rax, %rdi	# tmp120,
	call	_ZN7Variant5clearEv	#
.L6937:
# ./core/variant.h:423: 	}
	nop	
	movq	%rbx, %rax	# tmp121, D.62426
	movq	%rax, %rdi	# D.62426,
.LEHB1163:
	call	_Unwind_Resume	#
.LEHE1163:
.L6935:
# ./core/method_bind.gen.inc:596: 	}
	movq	-72(%rbp), %rax	# <retval>,
	addq	$104, %rsp	#,
	popq	%rbx	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3686:
	.section	.gcc_except_table
.LLSDA3686:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3686-.LLSDACSB3686
.LLSDACSB3686:
	.uleb128 .LEHB1159-.LFB3686
	.uleb128 .LEHE1159-.LEHB1159
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1160-.LFB3686
	.uleb128 .LEHE1160-.LEHB1160
	.uleb128 .L6932-.LFB3686
	.uleb128 0
	.uleb128 .LEHB1161-.LFB3686
	.uleb128 .LEHE1161-.LEHB1161
	.uleb128 .L6933-.LFB3686
	.uleb128 0
	.uleb128 .LEHB1162-.LFB3686
	.uleb128 .LEHE1162-.LEHB1162
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1163-.LFB3686
	.uleb128 .LEHE1163-.LEHB1163
	.uleb128 0
	.uleb128 0
.LLSDACSE3686:
	.section	.text._ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,"axG",@progbits,_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE,comdat
	.size	_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE, .-_ZN13MethodBind0RCI6StringE4callEP6ObjectPPK7VariantiRNS4_9CallErrorE
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED5Ev,comdat
	.align 2
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev
	.type	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev, @function
_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev:
.LFB3688:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3688
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:607: 		clear();
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EE5clearEv	#
# ./core/hash_map.h:608: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3688:
	.section	.gcc_except_table
.LLSDA3688:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3688-.LLSDACSB3688
.LLSDACSB3688:
.LLSDACSE3688:
	.section	.text._ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev,"axG",@progbits,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED5Ev,comdat
	.size	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev, .-_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev
	.weak	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED1Ev
	.set	_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED1Ev,_ZN7HashMapImP6Object20HashMapHasherDefault24HashMapComparatorDefaultImELh3ELh8EED2Ev
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED5Ev,comdat
	.align 2
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev
	.type	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev, @function
_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev:
.LFB3691:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA3691
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$16, %rsp	#,
	movq	%rdi, -8(%rbp)	# this, this
# ./core/hash_map.h:607: 		clear();
	movq	-8(%rbp), %rax	# this, tmp82
	movq	%rax, %rdi	# tmp82,
	call	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EE5clearEv	#
# ./core/hash_map.h:608: 	}
	nop	
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3691:
	.section	.gcc_except_table
.LLSDA3691:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE3691-.LLSDACSB3691
.LLSDACSB3691:
.LLSDACSE3691:
	.section	.text._ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev,"axG",@progbits,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED5Ev,comdat
	.size	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev, .-_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev
	.weak	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED1Ev
	.set	_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED1Ev,_ZN7HashMapIP6ObjectmN8ObjectDB13ObjectPtrHashE24HashMapComparatorDefaultIS1_ELh3ELh8EED2Ev
	.text
	.type	_GLOBAL__sub_I__ZNK12PropertyInfocv10DictionaryEv, @function
_GLOBAL__sub_I__ZNK12PropertyInfocv10DictionaryEv:
.LFB3704:
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
# core/object.cpp:2116: }
	movl	$65535, %esi	#,
	movl	$1, %edi	#,
	call	_Z41__static_initialization_and_destruction_0ii	#
	popq	%rbp	#
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE3704:
	.size	_GLOBAL__sub_I__ZNK12PropertyInfocv10DictionaryEv, .-_GLOBAL__sub_I__ZNK12PropertyInfocv10DictionaryEv
	.section	.init_array,"aw"
	.align 8
	.quad	_GLOBAL__sub_I__ZNK12PropertyInfocv10DictionaryEv
	.hidden	__dso_handle
	.ident	"GCC: (GNU) 9.1.0"
	.section	.note.GNU-stack,"",@progbits
